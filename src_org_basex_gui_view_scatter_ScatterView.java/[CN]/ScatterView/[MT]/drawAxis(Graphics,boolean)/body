{
  final int h=getHeight();
  final int w=getWidth();
  g.setColor(GUIConstants.color1);
  final int textH=g.getFontMetrics().getHeight();
  final int pWidth=plotWidth - NOVALUEBORDER;
  final int pHeight=plotHeight - NOVALUEBORDER;
  final ScatterAxis axis=drawX ? scatterData.xAxis : scatterData.yAxis;
  if (drawX) {
    g.drawLine(MARGINLEFT,h - MARGINBOTTOM,w - MARGINRIGHT,h - MARGINBOTTOM);
    if (plotChanged)     axis.calcCaption(pWidth);
  }
 else {
    g.drawLine(MARGINLEFT,MARGINTOP,MARGINLEFT,getHeight() - MARGINBOTTOM);
    if (plotChanged)     axis.calcCaption(pHeight);
  }
  g.setFont(GUIConstants.font);
  g.setColor(GUIConstants.color1);
  final boolean numeric=axis.numeric;
  final int nrCaptions=(!numeric && axis.nrCats == 1) ? 3 : axis.nrCaptions;
  final double step=axis.captionStep;
  final double range=1.0d / (nrCaptions - 1);
  final int type=axis.numType;
  for (int i=0; i < nrCaptions; i++) {
    String caption="";
    if (numeric) {
      final double min=axis.min;
      final double captionValue=i == nrCaptions - 1 ? axis.max : min + (i * step);
      if (type == ScatterAxis.TYPEINT)       caption=Integer.toString((int)captionValue);
 else       caption=string(chopNumber(token(captionValue)));
    }
 else {
      if (axis.nrCats == 1) {
        if (i == 1)         caption=string(axis.cats[0]);
      }
 else {
        caption=string(axis.cats[i]);
      }
    }
    if (caption.length() > 10) {
      caption=caption.substring(0,10);
      caption+="...";
    }
    final int capW=BaseXLayout.width(g,caption);
    final int imgH=160;
    final int imgW=160;
    final BufferedImage img=new BufferedImage(imgW,imgH,Transparency.BITMASK);
    Graphics2D g2d=(Graphics2D)img.getGraphics();
    g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
    g2d.setFont(GUIConstants.font);
    g2d.setColor(Color.black);
    g2d.rotate(Math.sin(30),imgW,0 + textH);
    g2d.drawString(caption,imgW - capW,0);
    g.setColor(GUIConstants.color1);
    if (drawX) {
      final int x=MARGINLEFT + NOVALUEBORDER + ((int)((i * range) * pWidth));
      g.drawImage(img,x - imgW + textH + 4,h - MARGINBOTTOM + 14,this);
      g.drawLine(x,MARGINTOP,x,h - MARGINBOTTOM + 9);
    }
 else {
      final int y=h - MARGINBOTTOM - NOVALUEBORDER- ((int)((i * range) * pHeight));
      g.drawLine(MARGINLEFT - 14,y,w - MARGINRIGHT,y);
      g.drawImage(img,MARGINLEFT - imgW - 5,y - 6,this);
    }
  }
}
