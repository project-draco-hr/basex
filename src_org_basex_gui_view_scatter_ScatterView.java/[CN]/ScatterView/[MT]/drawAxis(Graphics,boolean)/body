{
  final int h=getHeight();
  final int w=getWidth();
  g.setColor(GUIConstants.color1);
  final int novalue=noValueSize();
  final int textH=g.getFontMetrics().getHeight();
  final int pWidth=plotWidth - novalue;
  final int pHeight=plotHeight - novalue;
  final ScatterAxis axis=drawX ? scatterData.xAxis : scatterData.yAxis;
  if (drawX) {
    g.drawLine(MARGIN[1],h - MARGIN[2],w - MARGIN[3],h - MARGIN[2]);
    if (plotChanged)     axis.calcCaption(pWidth);
  }
 else {
    g.drawLine(MARGIN[1],MARGIN[0],MARGIN[1],getHeight() - MARGIN[2]);
    if (plotChanged)     axis.calcCaption(pHeight);
  }
  final boolean numeric=axis.numeric;
  final int nrCaptions=axis.nrCaptions;
  final double step=axis.captionStep;
  final double range=1.0d / (nrCaptions - 1);
  final Kind type=axis.numType;
  final int fs=GUIProp.fontsize;
  g.setFont(GUIConstants.font);
  for (int i=0; i < nrCaptions; i++) {
    String caption="";
    if (numeric) {
      final double min=axis.min;
      final double captionValue=i == nrCaptions - 1 ? axis.max : min + (i * step);
      if (type == Kind.INT)       caption=Integer.toString((int)captionValue);
 else       caption=string(chopNumber(token(captionValue)));
    }
 else {
      caption=string(axis.cats[i]);
    }
    if (caption.length() > 10) {
      caption=caption.substring(0,10);
      caption+="...";
    }
    final int imgW=BaseXLayout.width(g,caption) + fs;
    final int imgH=160;
    final BufferedImage img=new BufferedImage(imgW,imgH,Transparency.BITMASK);
    Graphics2D g2d=img.createGraphics();
    g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
    g2d.rotate(ROTATE,imgW,0 + textH);
    g2d.setFont(GUIConstants.font);
    g2d.setColor(Color.black);
    g2d.drawString(caption,fs,fs);
    g.setColor(GUIConstants.color1);
    if (drawX) {
      final int x=MARGIN[1] + novalue + (int)(i * range * pWidth);
      final int y=h - MARGIN[2];
      g.drawImage(img,x - imgW + textH - fs,y + fs / 4,this);
      g.drawLine(x,MARGIN[0],x,y + fs / 2);
    }
 else {
      final int y=h - MARGIN[2] - novalue- (int)(i * range * pHeight);
      g.drawImage(img,MARGIN[1] - imgW - fs,y - fs,this);
      g.drawLine(MARGIN[1] - fs / 2,y,w - MARGIN[3],y);
    }
  }
}
