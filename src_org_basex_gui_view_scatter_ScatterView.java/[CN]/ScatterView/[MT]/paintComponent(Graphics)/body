{
  final Data data=GUI.context.data();
  if (data == null)   return;
  super.paintComponent(g);
  BaseXLayout.antiAlias(g);
  final int w=getWidth();
  final int h=getHeight();
  final boolean nostats=!data.tags.stats;
  final int novalue=noValueSize();
  final int minSize=novalue * 8;
  if (nostats || w < minSize || h < minSize) {
    final String s=nostats ? DBNOSTATS : NOSPACE;
    g.setFont(GUIConstants.font);
    g.setColor(Color.black);
    BaseXLayout.drawCenter(g,s,getWidth(),h / 2);
    return;
  }
  if (scatterData == null) {
    refreshInit();
    return;
  }
  if (w + h != viewDimension) {
    viewDimension=w + h;
    plotChanged=true;
  }
  plotWidth=w - (MARGIN[1] + MARGIN[3]);
  plotHeight=h - (MARGIN[0] + MARGIN[2]);
  g.setColor(GUIConstants.back);
  g.fillRect(MARGIN[1] + novalue,MARGIN[0],plotWidth - novalue,plotHeight - novalue);
  drawAxis(g,true);
  drawAxis(g,false);
  if (scatterData.size == 0)   return;
  if (plotImg == null || plotChanged)   plotImg=createPlotImage();
  g.drawImage(plotImg,0,0,this);
  if (markingChanged) {
    final Nodes marked=GUI.context.marked();
    if (marked.size() > 0 && !dragging) {
      tmpMarkedPos.reset();
      for (int i=0; i < marked.size(); i++) {
        final int prePos=scatterData.getPrePos(marked.nodes[i]);
        if (prePos > -1)         tmpMarkedPos.add(prePos);
      }
    }
    markingChanged=false;
  }
  final int[] ti=tmpMarkedPos.finish();
  for (int i=0; i < ti.length; i++) {
    drawItem(g,scatterData.xAxis.co[ti[i]],scatterData.yAxis.co[ti[i]],false,true);
  }
  if (focusedItem != -1) {
    if (!dragging) {
      drawItem(g,scatterData.xAxis.co[focusedItem],scatterData.yAxis.co[focusedItem],true,false);
      g.setFont(GUIConstants.font);
      final String x=string(scatterData.xAxis.getValue(focused));
      final String y=string(scatterData.yAxis.getValue(focused));
      final String label=x + "/" + y;
      final int tw=BaseXLayout.width(g,label);
      final int th=g.getFontMetrics().getHeight();
      final int xx=Math.min(getWidth() - tw - 8,mouseX);
      g.setColor(GUIConstants.COLORS[10]);
      g.fillRect(xx - 1,mouseY - th,tw + 4,th);
      g.setColor(GUIConstants.color1);
      g.drawString(label,xx,mouseY - 4);
    }
  }
  if (dragging) {
    g.setColor(GUIConstants.back);
    final int selW=selectionBox.getWidth();
    final int selH=selectionBox.getHeight();
    final int x1=selectionBox.x1;
    final int y1=selectionBox.y1;
    g.fillRect(selW > 0 ? x1 : x1 + selW,selH > 0 ? y1 : y1 + selH,Math.abs(selW),Math.abs(selH));
    g.setColor(GUIConstants.frame);
    g.drawRect(selW > 0 ? x1 : x1 + selW,selH > 0 ? y1 : y1 + selH,Math.abs(selW),Math.abs(selH));
  }
  plotChanged=false;
}
