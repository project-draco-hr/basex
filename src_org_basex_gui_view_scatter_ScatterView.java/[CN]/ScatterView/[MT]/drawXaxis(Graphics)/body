{
  final int h=getHeight();
  final int w=getWidth();
  g.setColor(GUIConstants.color1);
  g.drawLine(XMARGIN,h - YMARGIN,w - XMARGIN,h - YMARGIN);
  g.setFont(GUIConstants.font);
  g.setColor(GUIConstants.color1);
  final int textH=g.getFontMetrics().getHeight();
  final int pWidth=plotWidth - NOVALUEBORDER;
  final ScatterAxis axis=scatterData.xAxis;
  axis.calcCaption(pWidth);
  final int nrCaptions=axis.nrCaptions;
  final double step=axis.captionStep;
  final double range=1.0d / (nrCaptions - 1);
  final int type=axis.numType;
  final boolean numeric=axis.numeric;
  for (int i=0; i < nrCaptions; i++) {
    g.setColor(GUIConstants.color1);
    final int x=XMARGIN + NOVALUEBORDER + ((int)((i * range) * pWidth));
    g.drawLine(x,YMARGIN,x,h - YMARGIN + 9);
    String caption=null;
    if (numeric) {
      final double min=axis.min;
      final double captionValue=i == nrCaptions - 1 ? axis.max : min + (i * step);
      if (type == ScatterAxis.TYPEINT)       caption=Integer.toString((int)captionValue);
 else       caption="double";
    }
 else {
      caption=Token.string(axis.cats[i]);
    }
    final int capW=BaseXLayout.width(g,caption);
    final int imgH=160;
    int imgW=160;
    final BufferedImage img=new BufferedImage(imgW,imgH,Transparency.BITMASK);
    Graphics2D g2d=(Graphics2D)img.getGraphics();
    g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
    g2d.setFont(GUIConstants.font);
    g2d.setColor(Color.black);
    g2d.rotate(Math.sin(30),imgW,0 + textH);
    g2d.drawString(caption,imgW - capW,0);
    g.drawImage(img,x - imgW + textH + 4,h - YMARGIN + 14,this);
  }
}
