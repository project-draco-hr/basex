{
  final Data gd=globalData();
  if (qc.context.options.get(MainOptions.DEFAULTDB) && gd != null) {
    final IntList pres=gd.resources.docsIn(qi.original);
    return DBNodeSeq.get(pres,gd,true,qi.original.isEmpty());
  }
  final String in=baseIO != null ? baseIO.merge(qi.original).path() : null;
  if (in != null) {
    final String[] names={in,qi.original};
    final int cs=colls.size();
    for (int c=0; c < cs; c++) {
      final String name=collNames.get(c);
      if (Prop.CASE ? Token.eq(name,names) : Token.eqic(name,names))       return colls.get(c);
    }
  }
  Data dt=null;
  for (  final Data data : datas) {
    final String n=data.meta.name;
    if (Prop.CASE ? n.equals(qi.db) : n.equalsIgnoreCase(qi.db) || IO.get(data.meta.original).eq(qi.input)) {
      dt=data;
      break;
    }
  }
  if (dt == null)   dt=open(qi);
  if (dt == null)   dt=create(qi,false,baseIO,info);
  return DBNodeSeq.get(dt.resources.docsIn(qi.path),dt,true,qi.path.isEmpty());
}
