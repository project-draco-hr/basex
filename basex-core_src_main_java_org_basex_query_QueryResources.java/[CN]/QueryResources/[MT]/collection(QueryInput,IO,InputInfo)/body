{
  final Data global=globalData();
  if (global != null && qc.context.options.get(MainOptions.DEFAULTDB)) {
    final IntList pres=global.resources.docs(qi.original);
    return DBNodeSeq.get(pres,global,true,qi.original.isEmpty());
  }
  if (baseIO != null) {
    final String in=baseIO.merge(qi.original).path();
    final String[] names={in,qi.original};
    final int cs=colls.size();
    for (int c=0; c < cs; c++) {
      final String name=collNames.get(c);
      if (Prop.CASE ? Strings.eq(name,names) : Strings.eqic(name,names))       return colls.get(c);
    }
  }
  Data dt=null;
  for (  final Data data : datas) {
    final String db=data.meta.name;
    if (Prop.CASE ? db.equals(qi.dbName) : db.equalsIgnoreCase(qi.dbName) || IO.get(data.meta.original).eq(qi.input)) {
      dt=data;
      break;
    }
  }
  if (dt == null)   dt=open(qi);
  if (dt == null)   dt=create(qi,false,baseIO,info);
  return DBNodeSeq.get(dt.resources.docs(qi.dbPath),dt,true,qi.dbPath.isEmpty());
}
