{
  try {
    int b0, b1, b2, b3;
    do {
      bfc.buffer(1);
      b0=bfc.get();
    }
 while (b0 != 0xFF);
    bfc.buffer(3);
    b1=bfc.get();
    b2=bfc.get();
    b3=bfc.get();
    while (b0 != 0xFF || (b1 & 0xE0) != 0xE0 || (b1 & 0x18) == 0x08 || (b1 & 0x06) == 0x00 || (b2 & 0xF0) == 0xF0 || (b2 & 0xF0) == 0x00 || (b2 & 0x0C) == 0x0C) {
      bfc.buffer(1);
      b0=b1;
      b1=b2;
      b2=b3;
      b3=bfc.get();
    }
    final int vers=b1 >> 3 & 0x03;
    final int layr=3 - (b1 >> 1 & 0x03);
    final int rate=b2 >> 4 & 0x0F;
    final int smpl=b2 >> 2 & 0x03;
    final int emph=b3 & 0x03;
    final int version=vers == 3 ? 0 : 1;
    final int samples=SAMPLES[vers][smpl];
    final int mode=b3 >> 6 & 0x03;
    int bitrate=BITRATES[version][layr][rate];
    int seconds=(int)((bfc.size() - size) * 8 / bitrate) / 1000;
    int encoding=0;
    final int fsize=FSIZE[version][mode == 3 ? 1 : 0];
    bfc.skip(fsize);
    final byte[] vbrh=new byte[4];
    bfc.get(vbrh);
    if (eq(token("Xing"),vbrh)) {
      bfc.skip(3);
      bfc.buffer(5);
      if ((bfc.get() & 0x01) != 0) {
        final int nf=(bfc.get() << 24) + (bfc.get() << 16) + (bfc.get() << 8)+ bfc.get();
        seconds=nf * SPF[version][layr] / samples;
        encoding++;
        if (seconds != 0)         bitrate=(int)((bfc.size() - size) * 8 / seconds / 1000);
      }
    }
    if (!deepFile.isMetaSet(MetaElem.DURATION))     deepFile.addMeta(MetaElem.DURATION,ParserUtil.convertMsDuration(seconds * 1000));
    deepFile.addMeta(MetaElem.CODEC,concat(VERSIONS[vers],LAYERS[layr]));
    deepFile.addMeta(MetaElem.BITRATE_KBIT,bitrate);
    deepFile.addMeta(MetaElem.SAMPLE_RATE,samples);
    deepFile.addMeta(MetaElem.MODE,MODES[mode]);
    deepFile.addMeta(MetaElem.EMPHASIS,EMPH[emph]);
    deepFile.addMeta(MetaElem.ENCODING,ENCODE[encoding]);
  }
 catch (  final IOException e) {
  }
}
