{
  CmpG cmpg=null;
  final ExprList el=new ExprList(exprs.length);
  for (  final Expr e : exprs) {
    boolean merged=false;
    if (e instanceof CmpG) {
      final CmpG g=(CmpG)e;
      if (cmpg == null)       cmpg=g;
 else       if (cmpg.union(g,ctx,scp))       merged=true;
    }
    if (!(merged || e == Bln.FALSE)) {
      if (e == Bln.TRUE)       return optPre(Bln.TRUE,ctx);
      el.add(e);
    }
  }
  if (el.isEmpty())   return optPre(Bln.FALSE,ctx);
  if (exprs.length != el.size()) {
    ctx.compInfo(OPTWRITE,this);
    exprs=el.finish();
  }
  compFlatten(ctx);
  boolean not=true;
  for (  final Expr e : exprs) {
    if (!e.isFunction(Function.NOT)) {
      not=false;
      break;
    }
  }
  if (not) {
    ctx.compInfo(OPTWRITE,this);
    final Expr[] inner=new Expr[exprs.length];
    for (int i=0; i < inner.length; i++)     inner[i]=((Arr)exprs[i]).exprs[0];
    final Expr and=new And(info,inner).optimize(ctx,scp);
    return Function.NOT.get(null,and).optimize(ctx,scp);
  }
  return exprs.length == 1 ? compBln(exprs[0],info) : this;
}
