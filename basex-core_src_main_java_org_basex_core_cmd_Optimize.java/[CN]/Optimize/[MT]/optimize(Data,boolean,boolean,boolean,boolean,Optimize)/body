{
  final MetaData meta=data.meta;
  if (!meta.uptodate) {
    data.paths.init();
    data.elemNames.init();
    data.attrNames.init();
    meta.dirty=true;
    final IntList pars=new IntList(), elemStack=new IntList();
    int n=0;
    for (int pre=0; pre < meta.size; ++pre) {
      final byte kind=(byte)data.kind(pre);
      final int par=data.parent(pre,kind);
      while (!pars.isEmpty() && pars.peek() > par) {
        pars.pop();
        elemStack.pop();
      }
      final int level=pars.size();
      if (kind == Data.DOC) {
        data.paths.index(0,Data.DOC,level);
        pars.push(pre);
        elemStack.push(0);
        ++n;
      }
 else       if (kind == Data.ELEM) {
        final int id=data.nameId(pre);
        data.elemNames.index(data.elemNames.key(id));
        data.paths.index(id,Data.ELEM,level);
        pars.push(pre);
        elemStack.push(id);
      }
 else       if (kind == Data.ATTR) {
        final int id=data.nameId(pre);
        final byte[] value=data.text(pre,false);
        data.attrNames.index(data.attrNames.key(id),value);
        data.paths.index(id,Data.ATTR,level,value,meta);
      }
 else {
        final byte[] value=data.text(pre,true);
        if (level > 1) {
          final Stats stats=data.elemNames.stats(elemStack.peek());
          if (kind == Data.TEXT)           stats.add(value,meta);
 else           stats.setLeaf(false);
        }
        data.paths.index(0,kind,level,value,meta);
      }
      if (cmd != null)       cmd.pre=pre;
    }
    meta.ndocs=n;
    meta.uptodate=true;
  }
  optimize(IndexType.TEXT,data,meta.createtext,enforceText,cmd);
  optimize(IndexType.ATTRIBUTE,data,meta.createattr,enforceAttr,cmd);
  optimize(IndexType.TOKEN,data,meta.createtoken,enforceToken,cmd);
  optimize(IndexType.FULLTEXT,data,meta.createft,enforceFt,cmd);
}
