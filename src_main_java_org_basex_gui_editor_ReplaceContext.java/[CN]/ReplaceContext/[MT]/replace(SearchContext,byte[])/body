{
  search=sc;
  if (!sc.start.isEmpty()) {
    if (sc.regex) {
      int flags=Pattern.DOTALL;
      if (!sc.mcase)       flags|=Pattern.CASE_INSENSITIVE;
      final Pattern p=Pattern.compile(sc.search,flags);
      if (sc.multi) {
        text=Token.token(p.matcher(Token.string(txt)).replaceAll(replace));
      }
 else {
        final int os=txt.length;
        final TokenBuilder tb=new TokenBuilder(os);
        for (int s=0, o=0; o <= os; o++) {
          if (o < os ? txt[o] == '\n' : o != s) {
            tb.add(p.matcher(Token.string(txt,s,o - s)).replaceAll(replace));
            if (o < os)             tb.add('\n');
            s=o + 1;
          }
        }
        text=tb.finish();
      }
    }
 else {
      final int ss=sc.start.size();
      final byte[] rplc=Token.token(replace);
      final ByteList bl=new ByteList();
      int s1=0;
      for (int p=0; p < ss; p++) {
        final int s2=sc.start.get(p);
        bl.add(txt,s1,s2).add(rplc);
        s1=sc.end.get(p);
      }
      bl.add(txt,s1,txt.length);
      text=bl.toArray();
    }
  }
  nr=search.nr();
}
