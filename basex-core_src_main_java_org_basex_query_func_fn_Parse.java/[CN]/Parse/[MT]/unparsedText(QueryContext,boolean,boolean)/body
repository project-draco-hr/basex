{
  checkCreate(qc);
  final Item it=exprs[0].atomItem(qc,info);
  if (it == null)   return check ? Bln.FALSE : null;
  final byte[] path=toToken(it);
  String enc=null;
  try {
    enc=encoding ? toEncoding(1,ENCODING_X,qc) : null;
    final String p=string(path);
    if (p.indexOf('#') != -1)     throw FRAGID_X.get(info,p);
    final Uri uri=Uri.uri(p);
    if (!uri.isValid())     throw INVURL_X.get(info,p);
    IO io;
    if (uri.isAbsolute()) {
      io=IO.get(p);
    }
 else {
      final IO baseIO=sc.baseIO();
      if (baseIO == null)       throw STBASEURI.get(info);
      io=baseIO.merge(p);
    }
    String[] rp=qc.resources.text(p);
    if (rp == null)     rp=qc.resources.text(io.path());
    if (rp != null && rp.length > 0) {
      io=IO.get(rp[0]);
      if (rp.length > 1)       enc=rp[1];
    }
    if (!io.exists())     throw RESNF_X.get(info,p);
    try (final InputStream is=io.inputStream()){
      final TextInput ti=new TextInput(io).encoding(enc).validate(true);
      if (!check)       return Str.get(ti.content());
      while (ti.read() != -1)       ;
      return Bln.TRUE;
    }
   }
 catch (  final QueryException ex) {
    if (check && !ex.error().is(ErrType.XPTY))     return Bln.FALSE;
    throw ex;
  }
catch (  final IOException ex) {
    if (check)     return Bln.FALSE;
    if (ex instanceof InputException) {
      final boolean inv=ex instanceof EncodingException || enc != null;
      throw (inv ? INVCHARS_X : WHICHCHARS_X).get(info,ex);
    }
    throw RESNF_X.get(info,path);
  }
}
