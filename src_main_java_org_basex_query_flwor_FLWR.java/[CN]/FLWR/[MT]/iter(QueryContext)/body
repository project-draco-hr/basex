{
  return new Iter(){
    private Iter[] iter;
    private Iter rtrn;
    private int p;
    @Override public Item next() throws QueryException {
      init();
      while (true) {
        if (rtrn != null) {
          final Item i=rtrn.next();
          if (i != null)           return i;
          rtrn=null;
        }
 else {
          while (iter[p].next() != null) {
            if (p + 1 != fl.length) {
              ++p;
            }
 else             if (where == null || where.ebv(ctx,input).bool(input)) {
              rtrn=ctx.iter(ret);
              break;
            }
          }
          if (rtrn == null && p-- == 0)           return null;
        }
      }
    }
    @Override public boolean reset(){
      if (iter != null) {
        for (        final Iter i : iter)         i.reset();
        iter=null;
        rtrn=null;
        p=0;
      }
      return true;
    }
    /** 
 * Initializes the iterator.
 * @throws QueryException query exception
 */
    private void init() throws QueryException {
      if (iter != null)       return;
      iter=new Iter[fl.length];
      for (int f=0; f < fl.length; ++f)       iter[f]=ctx.iter(fl[f]);
    }
  }
;
}
