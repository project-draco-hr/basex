{
  file=new IOFile(HOME + IO.BASEXSUFFIX + suffix);
  final StringList read=new StringList();
  final TokenBuilder err=new TokenBuilder();
  boolean local=false;
  if (!file.exists()) {
    err.addExt("Saving options in \"%\"..." + NL,file);
  }
 else {
    BufferedReader br=null;
    try {
      br=new BufferedReader(new FileReader(file.file()));
      for (String line; (line=br.readLine()) != null; ) {
        line=line.trim();
        if (line.equals(PROPUSER)) {
          local=true;
          continue;
        }
        if (local)         user.append(line).append(NL);
        if (line.isEmpty() || line.charAt(0) == '#')         continue;
        final int d=line.indexOf('=');
        if (d < 0) {
          err.addExt("%: \"%\" ignored. " + NL,file,line);
          continue;
        }
        final String val=line.substring(d + 1).trim();
        String name=line.substring(0,d).trim();
        int num=0;
        final int ss=name.length();
        for (int s=0; s < ss; ++s) {
          if (Character.isDigit(name.charAt(s))) {
            num=Integer.parseInt(name.substring(s));
            name=name.substring(0,s);
            break;
          }
        }
        if (local) {
          setSystem(name,val);
          continue;
        }
        final Option opt=options.get(name);
        if (opt == null) {
          err.addExt("%: \"%\" not found. " + NL,file,name);
        }
 else {
switch (opt.type) {
case BOOLEAN:
            values.put(name,Boolean.parseBoolean(val));
          break;
case COMMENT:
        break;
case NUMBER:
      values.put(name,Integer.parseInt(val));
    break;
case NUMBERS:
  ((int[])get(opt))[num]=Integer.parseInt(val);
break;
case STRING:
put(opt,val);
break;
case STRINGS:
if (num == 0) {
values.put(name,new String[Integer.parseInt(val)]);
}
 else {
((String[])get(opt))[num - 1]=val;
}
break;
}
}
read.add(name);
}
}
 catch (final Exception ex) {
err.addExt("% could not be parsed." + NL,file);
Util.debug(ex);
}
 finally {
if (br != null) try {
br.close();
}
 catch (final IOException ignored) {
}
}
}
try {
if (err.isEmpty()) {
boolean ok=true;
for (final Option opt : options(getClass())) {
if (ok && opt.type != Type.COMMENT) ok=read.contains(opt.name);
}
if (!ok) err.addExt("Saving options in \"%\"..." + NL,file);
}
}
 catch (final IllegalAccessException ex) {
Util.notexpected(ex);
}
if (!err.isEmpty()) {
Util.err(err.toString());
write();
}
}
