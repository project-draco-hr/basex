{
  XQPreparedExpression xqpe;
  final DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  final DocumentBuilder parser=factory.newDocumentBuilder();
  final Document document=parser.parse(new InputSource(new StringReader("<e>Hello world!</e>")));
  xqpe=xqc.prepareExpression("declare variable $v external; $v");
  xqpe.close();
  try {
    xqpe.bindNode(new QName("v"),document,null);
    fail("A-XQDC-1.1: bindNode() throws an XQException when the dynamic context is in closed state.");
  }
 catch (  final XQException e) {
  }
  xqpe=xqc.prepareExpression("declare variable $v external; $v");
  try {
    xqpe.bindNode(null,document,null);
    fail("A-XQDC-1.2: null argument is invalid and throws an XQException.");
  }
 catch (  final XQException e) {
  }
  xqpe.close();
  boolean bindFailed=false;
  xqpe=xqc.prepareExpression("declare variable $v external; $v");
  try {
    xqpe.bindNode(new QName("v"),document,xqc.createCommentType());
  }
 catch (  final XQException e) {
    bindFailed=true;
  }
  if (!bindFailed) {
    final XQSequence xqs=xqpe.executeQuery();
    xqs.next();
    if (xqs.getItemType().getItemKind() != XQItemType.XQITEMKIND_COMMENT)     fail("A-XQDC-1.3: The conversion is subject to the following constraints. Either it fails with an XQException, either it is successful in which case it must result in an instance of XDT.");
  }
  xqpe.close();
  xqpe=xqc.prepareExpression("declare variable $v external; $v");
  try {
    xqpe.bindNode(new QName("foo"),document,null);
    fail("A-XQDC-1.5: The bound variable must be declared external in the prepared expression.");
  }
 catch (  final XQException e) {
  }
  xqpe.close();
  xqpe=xqc.prepareExpression("declare variable $v as xs:decimal external; $v");
  try {
    xqpe.bindNode(new QName("v"),document,null);
    xqpe.executeQuery().getSequenceAsString(null);
    fail("A-XQDC-1.6: The dynamic type of the bound value is not compatible with the static type of the variable and must fail.");
  }
 catch (  final XQException e) {
  }
  xqpe.close();
  xqpe=xqc.prepareExpression("declare variable $v external; $v");
  try {
    xqpe.bindNode(new QName("v"),document,null);
  }
 catch (  final XQException e) {
    fail("A-XQDC-1.7: bindNode() failed with message: " + e.getMessage());
  }
  final String result=xqpe.executeQuery().getSequenceAsString(null);
  assertTrue("A-XQDC-1.7: Expects serialized result contains '<e>Hello world!</e>', but it is '" + result + '\'',result.contains("<e>Hello world!</e>"));
  xqpe.close();
}
