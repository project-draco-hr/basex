{
  final byte[] tag=name.str();
  ser.startElement(tag);
  for (int n=0; n < atts.size; n++) {
    ser.attribute(atts.list[n].nname(),atts.list[n].str());
  }
  if (level == 0) {
    final TokenList nms=new TokenList();
    Nod elm=this;
    boolean xmlns=false;
    do {
      for (      final QNm ns : ((FElem)elm).names) {
        final byte[] key=ns.str();
        final Uri val=ns.uri;
        if (nms.contains(key))         continue;
        nms.add(key);
        if (Token.eq(key,XMLNS)) {
          xmlns=true;
          if (val == Uri.EMPTY)           continue;
        }
        ser.attribute(key,val.str());
      }
      elm=elm.parent();
    }
 while (elm instanceof FElem);
    final QNm[] qn=ctx.ns.ns();
    for (int p=0; p < qn.length; p++) {
      byte[] key=qn[p].str();
      key=key.length == 0 ? XMLNS : concat(XMLNSC,key);
      final byte[] val=qn[p].uri.str();
      if (nms.contains(key))       continue;
      nms.add(key);
      if (Token.eq(key,XMLNS)) {
        xmlns=true;
        if (val.length == 0)         continue;
      }
      ser.attribute(key,val);
    }
    if (ctx.nsElem != Uri.EMPTY && !xmlns) {
      ser.attribute(XMLNS,ctx.nsElem.str());
    }
  }
 else {
    for (    final QNm ns : names)     ser.attribute(ns.str(),ns.uri.str());
  }
  if (children.size == 0) {
    ser.emptyElement();
  }
 else {
    ser.finishElement();
    for (int n=0; n < children.size; n++) {
      children.list[n].serialize(ser,ctx,level + 1);
    }
    ser.closeElement(tag);
  }
}
