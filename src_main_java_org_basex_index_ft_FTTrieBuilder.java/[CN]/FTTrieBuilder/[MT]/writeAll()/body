{
  if (scm == 0)   hash.init();
 else   hash.initIter();
  final DataOutput outB=new DataOutput(data.meta.dbfile(DATAFTX + 'b'));
  while (hash.more()) {
    final int p=hash.next();
    final byte[] tok=hash.key();
    final int ds=hash.sizes[p];
    final long cpre=outB.size();
    writeFTData(outB,hash.pre[p],hash.pos[p]);
    index.insertSorted(tok,ds,cpre);
  }
  outB.close();
  hash=null;
  final TokenList tokens=index.tokens;
  final IntArrayList next=index.next;
  final DataOutput outA=new DataOutput(data.meta.dbfile(DATAFTX + 'a'));
  final DataOutput outC=new DataOutput(data.meta.dbfile(DATAFTX + 'c'));
  outA.write1(1);
  outA.write1(0);
  final int[] root=next.get(0);
  final int js=root.length - 2;
  for (int j=1; j < js; ++j) {
    final int p=root[j];
    outA.write4(p);
    outA.write1(tokens.get(next.get(p)[0])[0]);
  }
  outA.write4(root[root.length - 2]);
  outA.write5(0);
  outC.write4(0);
  writeSubTree(null,outA,outC,0,(root.length - 3) * 5 + 11);
  outC.write4(0);
  outA.close();
  outC.close();
}
