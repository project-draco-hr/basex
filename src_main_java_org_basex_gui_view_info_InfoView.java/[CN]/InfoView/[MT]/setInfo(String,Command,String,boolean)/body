{
  final StringList eval=new StringList();
  final StringList comp=new StringList();
  final StringList plan=new StringList();
  final StringList sl=new StringList();
  final StringList stats=new StringList();
  final StringList stack=new StringList();
  final IntList il=new IntList();
  final StringList err=new StringList();
  String qu="";
  String res="";
  final String[] split=info.split(NL);
  for (int i=0; i < split.length; ++i) {
    final String line=split[i];
    final int s=line.indexOf(':');
    if (line.startsWith(PARSING_CC) || line.startsWith(COMPILING_CC) || line.startsWith(EVALUATING_CC)|| line.startsWith(PRINTING_CC)|| line.startsWith(TOTAL_TIME_CC)) {
      final int t=line.indexOf(" ms");
      sl.add(line.substring(0,s).trim());
      il.add((int)(Double.parseDouble(line.substring(s + 1,t)) * 100));
    }
 else     if (line.startsWith(QUERY_C)) {
      qu=line.substring(s + 1).trim();
    }
 else     if (line.startsWith(QUERY_PLAN_C)) {
      while (i + 1 < split.length && !split[++i].isEmpty())       plan.add(split[i]);
    }
 else     if (line.startsWith(COMPILING_C)) {
      while (++i < split.length && !split[i].isEmpty())       comp.add(split[i]);
    }
 else     if (line.startsWith(RESULT_C)) {
      res=line.substring(s + 1).trim();
    }
 else     if (line.startsWith(EVALUATING_C)) {
      while (i + 1 < split.length && split[++i].startsWith(QUERYSEP))       eval.add(split[i]);
    }
 else     if (line.startsWith(HITS_X_CC) || line.startsWith(UPDATED_CC) || line.startsWith(PRINTED_CC)|| line.startsWith(LOCKING_CC)) {
      stats.add(LI + line);
    }
 else     if (line.startsWith(ERROR_C)) {
      while (i + 1 < split.length && !split[++i].isEmpty())       err.add(split[i]);
    }
 else     if (line.startsWith(STACK_TRACE_C)) {
      while (i + 1 < split.length && !split[++i].isEmpty())       stack.add(split[i]);
    }
 else     if (!ok && !line.isEmpty()) {
      err.add(line);
    }
  }
  stat=il;
  strings=sl;
  String total=time;
  if (!il.isEmpty()) {
    text.reset();
    add(EVALUATING_C,eval);
    add(QUERY_C + ' ',qu);
    add(COMPILING_C,comp);
    if (!comp.isEmpty())     add(RESULT_C,res);
    add(RESULT_C,stats);
    add(TIMING_C,sl);
    add(QUERY_PLAN_C,plan);
    final int runs=Math.max(1,gui.context.prop.num(Prop.RUNS));
    total=Performance.getTime(il.get(il.size() - 1) * 10000L * runs,runs);
  }
 else {
    if (ok) {
      add(cmd);
      text.add(info).nline();
    }
 else {
      add(ERROR_C,err);
      add(STACK_TRACE_C,stack);
      add(EVALUATING_C,eval);
      add(cmd);
      add(COMPILING_C,comp);
      if (!comp.isEmpty())       add(RESULT_C,res);
      add(QUERY_PLAN_C,plan);
    }
  }
  area.setText(text.finish());
  if (total != null)   timer.setText(TOTAL_TIME_CC + total);
  repaint();
}
