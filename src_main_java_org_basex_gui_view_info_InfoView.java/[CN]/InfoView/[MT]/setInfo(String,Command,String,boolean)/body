{
  final StringList eval=new StringList();
  final StringList comp=new StringList();
  final StringList plan=new StringList();
  final StringList sl=new StringList();
  final StringList stats=new StringList();
  final IntList il=new IntList();
  String err="";
  String qu="";
  String res="";
  final String[] split=info.split(NL);
  for (int i=0; i < split.length; ++i) {
    final String line=split[i];
    final int s=line.indexOf(':');
    if (line.startsWith(QUERYPARSE) || line.startsWith(QUERYCOMPILE) || line.startsWith(QUERYEVALUATE)|| line.startsWith(QUERYPRINT)|| line.startsWith(QUERYTOTAL)) {
      final int t=line.indexOf(" ms");
      sl.add(line.substring(0,s).trim());
      il.add((int)(Double.parseDouble(line.substring(s + 1,t)) * 100));
    }
 else     if (line.startsWith(QUERYSTRING)) {
      qu=line.substring(s + 1).trim();
    }
 else     if (line.startsWith(QUERYPLAN)) {
      while (++i < split.length && !split[i].isEmpty())       plan.add(split[i]);
      --i;
    }
 else     if (line.startsWith(QUERYCOMP)) {
      while (++i < split.length && !split[i].isEmpty())       comp.add(split[i]);
    }
 else     if (line.startsWith(QUERYRESULT)) {
      res=line.substring(s + 1).trim();
    }
 else     if (line.startsWith(QUERYEVAL)) {
      while (split[++i].startsWith(QUERYSEP))       eval.add(split[i]);
      --i;
    }
 else     if (!ok) {
      err+=line + NL;
    }
 else     if (line.startsWith(QUERYHITS) || line.startsWith(QUERYUPDATED) || line.startsWith(QUERYPRINTED)|| line.startsWith(QUERYMEM2)) {
      stats.add("- " + line);
    }
  }
  stat=il;
  strings=sl;
  String total=time;
  final boolean q=cmd instanceof XQuery;
  if (!ok || !q) {
    text.high();
    if (q) {
      add(QUERYQU,cmd.toString().replaceAll("^.*? ","").trim());
    }
 else     if (cmd != null) {
      text.high().add(BUTTONCMD + COLS).norm().addExt(cmd).nl();
    }
    if (ok) {
      text.add(info).nl();
    }
 else {
      add(INFOERROR,err.replaceAll(STOPPED + ".*\\r?\\n",""));
    }
  }
 else   if (sl.size() != 0) {
    text.reset();
    add(QUERYEVAL,eval);
    add(QUERYQU,qu);
    add(QUERYCOMP,comp);
    if (comp.size() != 0)     add(QUERYRESULT,res);
    add(QUERYTIME,sl);
    add(QUERYRESULT,stats);
    add(QUERYPLAN,plan);
    final int runs=Math.max(1,gui.context.prop.num(Prop.RUNS));
    total=Performance.getTimer(il.get(il.size() - 1) * 10000L * runs,runs);
  }
  area.setText(text.finish());
  if (total != null)   timer.setText(QUERYTOTAL + total);
  repaint();
}
