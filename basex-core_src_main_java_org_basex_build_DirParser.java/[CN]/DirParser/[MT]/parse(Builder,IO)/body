{
  if (input instanceof IOFile && input.isDir()) {
    for (    final IO f : ((IOFile)input).children())     parse(builder,f);
  }
 else   if (archives && input.isArchive()) {
    final String name=input.name().toLowerCase(Locale.ENGLISH);
    InputStream in=input.inputStream();
    if (name.endsWith(IO.TARSUFFIX) || name.endsWith(IO.TGZSUFFIX) || name.endsWith(IO.TARGZSUFFIX)) {
      if (!name.endsWith(IO.TARSUFFIX))       in=new GZIPInputStream(in);
      try (final TarInputStream is=new TarInputStream(in)){
        for (TarEntry ze; (ze=is.getNextEntry()) != null; ) {
          if (ze.isDirectory())           continue;
          source=new IOStream(is,ze.getName());
          source.length(ze.getSize());
          parseResource(builder);
        }
      }
     }
 else     if (name.endsWith(IO.GZSUFFIX)) {
      try (final GZIPInputStream is=new GZIPInputStream(in)){
        source=new IOStream(is,input.name().replaceAll("\\..*",IO.XMLSUFFIX));
        parseResource(builder);
      }
     }
 else {
      try (final ZipInputStream is=new ZipInputStream(in)){
        for (ZipEntry ze; (ze=is.getNextEntry()) != null; ) {
          if (ze.isDirectory())           continue;
          final String path=ze.getName();
          source=new IOStream(is,archiveName ? (name + '/' + path) : path);
          source.length(ze.getSize());
          parseResource(builder);
        }
      }
     }
  }
 else {
    source=input;
    parseResource(builder);
  }
}
