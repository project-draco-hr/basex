{
  for (int e=0; e < expr.length; e++)   expr[e]=expr[e].compile(ctx,scp);
  size=0;
  for (  final Expr e : expr) {
    final long c=e.size();
    if (c == -1) {
      size=c;
      break;
    }
    size+=c;
  }
  type=SeqType.EMP;
  Value[] val=new Value[expr.length];
  for (int v=0; v < expr.length; v++) {
    final Expr e=expr[v];
    if (val != null) {
      if (e.isValue())       val[v]=(Value)e;
 else       val=null;
    }
    if (e.isEmpty())     continue;
    final SeqType et=e.type();
    type=type == SeqType.EMP ? et : SeqType.get(et.type == type.type ? et.type : AtomType.ITEM,et.mayBeZero() && type.mayBeZero() ? Occ.ZERO_MORE : Occ.ONE_MORE);
  }
  Expr e=this;
  final int s=(int)size;
  if (val != null && size <= Integer.MAX_VALUE) {
    if (type.type == AtomType.STR)     e=StrSeq.get(val,s);
 else     if (type.type == AtomType.BLN)     e=BlnSeq.get(val,s);
 else     if (type.type == AtomType.FLT)     e=FltSeq.get(val,s);
 else     if (type.type == AtomType.DBL)     e=DblSeq.get(val,s);
 else     if (type.type == AtomType.DEC)     e=DecSeq.get(val,s);
 else     if (type.type == AtomType.BYT)     e=BytSeq.get(val,s);
 else     if (type.type.instanceOf(AtomType.ITR))     e=IntSeq.get(val,s,type.type);
 else {
      final ValueBuilder vb=new ValueBuilder(s);
      for (      final Value v : val)       vb.add(v);
      e=vb.value();
    }
  }
  return optPre(e,ctx);
}
