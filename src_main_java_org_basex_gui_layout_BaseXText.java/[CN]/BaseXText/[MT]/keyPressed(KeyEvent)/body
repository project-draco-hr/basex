{
  if (modifier(e))   return;
  if (pressed(PREVTAB,e)) {
    transferFocusBackward();
    return;
  }
  if (pressed(NEXTTAB,e)) {
    transferFocus();
    return;
  }
  if (pressed(FIND,e)) {
    if (find != null)     find.requestFocusInWindow();
    return;
  }
  cursor(true);
  final int fh=rend.fontH();
  if (pressed(SCROLLDOWN,e)) {
    scroll.pos(scroll.pos() + fh);
    return;
  }
  if (pressed(SCROLLUP,e)) {
    scroll.pos(scroll.pos() - fh);
    return;
  }
  if (pressed(COPY,e)) {
    copy();
    return;
  }
  text.pos(text.cursor());
  if (!pressed(PREVLINE,e) && !pressed(NEXTLINE,e))   lastCol=-1;
  if (pressed(FINDNEXT,e) || pressed(FINDPREV,e)) {
    find(rend.find(pressed(FINDPREV,e),true));
    return;
  }
  if (pressed(SELECTALL,e)) {
    selectAll();
    text.setCaret();
    return;
  }
  final boolean marking=e.isShiftDown();
  final boolean nomark=text.start() == -1;
  if (marking && nomark)   text.startMark();
  boolean down=true;
  boolean consumed=true;
  if (pressed(NEXTWORD,e)) {
    text.nextToken(marking);
  }
 else   if (pressed(PREVWORD,e)) {
    text.prevToken(marking);
    down=false;
  }
 else   if (pressed(TEXTSTART,e)) {
    if (!marking)     text.noMark();
    text.pos(0);
    down=false;
  }
 else   if (pressed(TEXTEND,e)) {
    if (!marking)     text.noMark();
    text.pos(text.size());
  }
 else   if (pressed(LINESTART,e)) {
    text.bol(marking);
    down=false;
  }
 else   if (pressed(LINEEND,e)) {
    text.forward(Integer.MAX_VALUE,marking);
  }
 else   if (pressed(NEXTPAGE,e)) {
    down(getHeight() / fh,marking);
  }
 else   if (pressed(PREVPAGE,e)) {
    up(getHeight() / fh,marking);
    down=false;
  }
 else   if (pressed(NEXT,e)) {
    text.next(marking);
  }
 else   if (pressed(PREV,e)) {
    text.prev(marking);
    down=false;
  }
 else   if (pressed(PREVLINE,e)) {
    up(1,marking);
    down=false;
  }
 else   if (pressed(NEXTLINE,e)) {
    down(1,marking);
  }
 else {
    consumed=false;
  }
  final byte[] txt=text.text;
  if (marking) {
    text.endMark();
    text.checkMark();
  }
 else   if (undo != null) {
    if (pressed(CUT,e)) {
      cut();
    }
 else     if (pressed(PASTE,e)) {
      paste();
    }
 else     if (pressed(UNDO,e)) {
      undo();
    }
 else     if (pressed(REDO,e)) {
      redo();
    }
 else     if (pressed(DELLINEEND,e) || pressed(DELNEXTWORD,e) || pressed(DELNEXT,e)) {
      if (nomark) {
        if (text.pos() == text.size())         return;
        text.startMark();
        if (pressed(DELNEXTWORD,e)) {
          text.nextToken(true);
        }
 else         if (pressed(DELLINEEND,e)) {
          text.forward(Integer.MAX_VALUE,true);
        }
 else {
          text.next(true);
        }
        text.endMark();
      }
      text.delete();
    }
 else     if (pressed(DELLINESTART,e) || pressed(DELPREVWORD,e) || pressed(DELPREV,e)) {
      if (nomark) {
        if (text.pos() == 0)         return;
        text.startMark();
        if (pressed(DELPREVWORD,e)) {
          text.prevToken(true);
        }
 else         if (pressed(DELLINESTART,e)) {
          text.bol(true);
        }
 else {
          text.prev();
        }
        text.endMark();
      }
      text.delete();
      down=false;
    }
 else {
      consumed=false;
    }
  }
  if (consumed)   e.consume();
  text.setCaret();
  if (txt != text.text)   rend.calc();
  showCursor(down ? 2 : 0);
}
