{
  final Value[] arg=new Value[expr.length];
  for (int a=0; a < expr.length; ++a) {
    arg[a]=ctx.value(expr[a]);
    if (arg[a].isEmpty())     XPEMPTY.thrw(input,description());
  }
  Object res=null;
  try {
    res=mth.equals(NEW) ? constructor(arg) : method(arg);
  }
 catch (  final InvocationTargetException ex) {
    JAVAERR.thrw(input,ex.getCause());
  }
catch (  final Throwable ex) {
    FUNJAVA.thrw(input,description());
  }
  if (res == null)   return Empty.SEQ;
  if (res instanceof Value)   return (Value)res;
  if (!res.getClass().isArray())   return new Jav(res);
  final ItemCache ic=new ItemCache();
  if (res instanceof boolean[]) {
    for (    final boolean o : (boolean[])res)     ic.add(Bln.get(o));
  }
 else   if (res instanceof char[]) {
    for (    final char o : (char[])res)     ic.add(Int.get(o));
  }
 else   if (res instanceof byte[]) {
    for (    final byte o : (byte[])res)     ic.add(Int.get(o));
  }
 else   if (res instanceof short[]) {
    for (    final short o : (short[])res)     ic.add(Int.get(o));
  }
 else   if (res instanceof int[]) {
    for (    final int o : (int[])res)     ic.add(Int.get(o));
  }
 else   if (res instanceof long[]) {
    for (    final long o : (long[])res)     ic.add(Int.get(o));
  }
 else   if (res instanceof float[]) {
    for (    final float o : (float[])res)     ic.add(Flt.get(o));
  }
 else   if (res instanceof double[]) {
    for (    final double o : (double[])res)     ic.add(Dbl.get(o));
  }
 else {
    for (    final Object o : (Object[])res) {
      ic.add(o instanceof Value ? (Value)o : new Jav(o));
    }
  }
  return ic.value();
}
