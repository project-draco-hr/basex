{
  setFocusTraversalKeys(0,null);
  setFocusTraversalKeys(1,null);
  setBackground(Color.white);
  undo=new Undo();
  area=a;
  doc=new StyledDoc();
  setDocument(doc);
  deflt=doc.addStyle(null,null);
  quote=doc.addStyle(null,null);
  StyleConstants.setForeground(quote,GUIConstants.COLORERROR);
  error=doc.addStyle(null,null);
  StyleConstants.setBackground(error,GUIConstants.COLORMARK);
  code=doc.addStyle(null,null);
  StyleConstants.setForeground(code,GUIConstants.COLORQUOTE);
  BaseXLayout.addHelp(this,hlp);
  addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    final MouseEvent e){
      if (SwingUtilities.isRightMouseButton(e))       new BaseXTextPopup(QueryText.this,e.getPoint());
    }
  }
);
  addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    final KeyEvent e){
      ++counter;
      final int key=e.getKeyCode();
      if (key == KeyEvent.VK_CONTEXT_MENU) {
        new BaseXTextPopup(QueryText.this,new Point(10,10));
      }
      if (!e.isControlDown() || hist == null)       return;
      if (key == KeyEvent.VK_UP) {
        restore(hist.prev());
      }
 else       if (key == KeyEvent.VK_DOWN) {
        restore(hist.next());
      }
 else       if (key == KeyEvent.VK_ENTER) {
        store();
      }
 else       if (key == KeyEvent.VK_Z) {
        setText(undo.prev());
        setCaretPosition(undo.cursor());
      }
 else       if (key == KeyEvent.VK_Y) {
        setText(undo.next());
        setCaretPosition(undo.cursor());
      }
    }
    @Override public void keyReleased(    final KeyEvent e){
      final int key=e.getKeyCode();
      if (e.isControlDown() && (key == KeyEvent.VK_Z || key == KeyEvent.VK_Y))       return;
      undo.store(getText(),getCaretPosition());
      area.query(false);
    }
  }
);
  addFocusListener(new FocusAdapter(){
    @Override public void focusGained(    final FocusEvent e){
      repaint();
    }
    @Override public void focusLost(    final FocusEvent e){
      repaint();
    }
  }
);
}
