{
  final Item it=expr[0].atomic(ctx);
  final Item it2=expr.length == 2 ? expr[1].atomic(ctx) : null;
switch (func) {
case RESQNAME:
    if (it == null)     return null;
  if (it2 == null)   Err.empty(this);
return resolve(ctx,it,it2);
case QNAME:
final Uri uri=Uri.uri(it == null ? EMPTY : check(it,Type.STR).str());
final Item it3=it2 == null ? Str.ZERO : check(it2,Type.STR);
final byte[] str=it3.str();
if (!XMLToken.isQName(str)) Err.value(Type.QNM,it3);
QNm nm=new QNm(str,uri);
if (nm.ns() && uri == Uri.EMPTY) Err.value(Type.URI,uri);
return nm;
case LOCNAMEQNAME:
if (it == null) return null;
return new NCN(((QNm)check(it,Type.QNM)).ln());
case PREQNAME:
if (it == null) return null;
nm=(QNm)check(it,Type.QNM);
return !nm.ns() ? null : new NCN(nm.pref());
case NSURIPRE:
final byte[] pre=checkStr(it);
final Atts at=((Nod)check(it2,Type.ELM)).ns();
final int i=at.get(pre);
return i != -1 ? Uri.uri(at.val[i]) : null;
case RESURI:
if (it == null) return null;
final Uri rel=Uri.uri(checkStr(it));
if (!rel.valid()) Err.or(URIINV,it);
final Uri base=it2 == null ? ctx.baseURI : Uri.uri(checkStr(it2));
if (!base.valid()) Err.or(URIINV,base);
return base.resolve(rel);
default :
return super.atomic(ctx);
}
}
