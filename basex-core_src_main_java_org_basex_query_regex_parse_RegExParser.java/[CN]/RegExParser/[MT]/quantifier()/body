{
  int min=0, max=0;
  boolean lazy=false;
  int[] qu=null;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case Q_MARK:
    jj_consume_token(Q_MARK);
  max=1;
break;
case STAR:
jj_consume_token(STAR);
max=-1;
break;
case PLUS:
jj_consume_token(PLUS);
min=1;
max=-1;
break;
case QUANT_OPEN:
jj_consume_token(QUANT_OPEN);
qu=quantity();
min=qu[0];
max=qu[1];
jj_consume_token(QUANT_CLOSE);
break;
default :
jj_la1[3]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case Q_MARK:
jj_consume_token(Q_MARK);
lazy=true;
break;
default :
jj_la1[4]=jj_gen;
;
}
{
if (true) return new Quantifier(min,max,lazy);
}
throw new Error("Missing return statement in function");
}
