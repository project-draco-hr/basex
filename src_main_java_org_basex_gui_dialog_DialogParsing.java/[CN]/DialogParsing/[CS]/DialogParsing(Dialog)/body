{
  main=new BaseXBack(new TableLayout(2,1)).border(8);
  gui=d.gui;
  label=new BaseXLabel(" ").border(0,0,12,0).large();
  final Prop prop=gui.context.prop;
  try {
    props=new ParserProp(prop.get(Prop.PARSEROPT));
  }
 catch (  final IOException ex) {
    props=new ParserProp();
  }
  intparse=new BaseXCheckBox(INT_PARSER,prop.is(Prop.INTPARSE),0,d);
  dtd=new BaseXCheckBox(PARSE_DTDS,prop.is(Prop.DTD),0,d);
  chop=new BaseXCheckBox(CHOP_WS,prop.is(Prop.CHOP),0,d);
  cfile=new BaseXTextField(prop.get(Prop.CATFILE),d);
  browsec=new BaseXButton(BROWSE_D,d);
  usecat=new BaseXCheckBox(USE_CATALOG_FILE,!prop.get(Prop.CATFILE).isEmpty(),0,d);
  jsonml=new BaseXCheckBox(PARSE_AS_JSONML,props.is(ParserProp.JSONML),0,d);
  lines=new BaseXCheckBox(SPLIT_INPUT_LINES,props.is(ParserProp.LINES),0,d);
  header=new BaseXCheckBox(FIRST_LINE_HEADER,props.is(ParserProp.HEADER),0,d);
  separator=new BaseXCombo(d,CSVParser.SEPARATORS);
  separator.setSelectedItem(props.get(ParserProp.SEPARATOR));
  format=new BaseXCombo(d,CSVParser.FORMATS);
  format.setSelectedItem(props.get(ParserProp.FORMAT));
  final String enc=props.get(ParserProp.ENCODING);
  cencoding=DialogExport.encoding(d,enc);
  tencoding=DialogExport.encoding(d,enc);
  jencoding=DialogExport.encoding(d,enc);
  xmlopts=new BaseXBack(new TableLayout(8,1));
  htmlopts=new BaseXBack(new TableLayout(1,1));
  jsonopts=new BaseXBack(new TableLayout(2,1));
  csvopts=new BaseXBack(new TableLayout(2,1));
  textopts=new BaseXBack(new TableLayout(2,1));
  createOptionsPanels();
  setLayout(new TableLayout(1,1));
  add(main);
}
