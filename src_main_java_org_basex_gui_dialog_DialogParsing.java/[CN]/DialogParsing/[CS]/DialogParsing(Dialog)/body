{
  main=new BaseXBack(new TableLayout(3,1)).border(8);
  gui=d.gui;
  final Prop prop=gui.context.prop;
  try {
    props=new ParserProp(prop.get(Prop.PARSEROPT));
  }
 catch (  final IOException ex) {
    props=new ParserProp();
  }
  final StringList parsers=new StringList();
  parsers.add(DataText.M_XML);
  if (HTMLParser.available())   parsers.add(DataText.M_HTML);
  parsers.add(DataText.M_CSV).add(DataText.M_TEXT);
  parser=new BaseXCombo(d,parsers.toArray());
  parser.setSelectedItem(prop.get(Prop.PARSER));
  intparse=new BaseXCheckBox(CREATEINTPARSE,prop.is(Prop.INTPARSE),0,d);
  dtd=new BaseXCheckBox(CREATEDTD,prop.is(Prop.DTD),12,d);
  chop=new BaseXCheckBox(CREATECHOP,prop.is(Prop.CHOP),0,d);
  cfile=new BaseXTextField(prop.get(Prop.CATFILE),d);
  browsec=new BaseXButton(BUTTONBROWSE,d);
  usecat=new BaseXCheckBox(USECATFILE,!prop.get(Prop.CATFILE).isEmpty(),0,d);
  lines=new BaseXCheckBox("Lines",props.is(ParserProp.LINES),0,d);
  header=new BaseXCheckBox("Header",props.is(ParserProp.HEADER),0,d);
  separator=new BaseXCombo(d,CSVParser.SEPARATORS);
  separator.setSelectedItem(props.get(ParserProp.SEPARATOR));
  format=new BaseXCombo(d,CSVParser.FORMATS);
  format.setSelectedItem(props.get(ParserProp.FORMAT));
  cencoding=DialogExport.encoding(d,props.get(ParserProp.ENCODING));
  tencoding=DialogExport.encoding(d,props.get(ParserProp.ENCODING));
  xmlopts=new BaseXBack(new TableLayout(8,1));
  csvopts=new BaseXBack(new TableLayout(2,1));
  textopts=new BaseXBack(new TableLayout(3,1));
  createOptionsPanels();
  setLayout(new TableLayout(1,1));
  update(parser.getSelectedItem().toString());
  add(main);
}
