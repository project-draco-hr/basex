{
  xmlopts.add(intparse);
  xmlopts.add(new BaseXLabel(INTPARSEINFO,true,false));
  xmlopts.add(entities);
  xmlopts.add(dtd);
  xmlopts.add(chop);
  xmlopts.add(new BaseXLabel(CHOPPINGINFO,false,false).border(0,0,8,0));
  xmlopts.add(new BaseXLabel());
  final boolean rsen=CatalogResolverWrapper.available();
  final BaseXBack fl=new BaseXBack(new TableLayout(2,2,6,0));
  usecat.setEnabled(rsen);
  fl.add(usecat);
  fl.add(new BaseXLabel());
  cfile.setEnabled(rsen);
  fl.add(cfile);
  browsec.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      catchoose();
    }
  }
);
  browsec.setEnabled(rsen);
  fl.add(browsec);
  xmlopts.add(fl);
  if (!rsen) {
    final BaseXBack rs=new BaseXBack(new TableLayout(2,1));
    rs.add(new BaseXLabel(USECATHLP).color(GUIConstants.COLORDARK));
    rs.add(new BaseXLabel(USECATHLP2).color(GUIConstants.COLORDARK));
    xmlopts.add(rs);
  }
  csvopts.add(header);
  csvopts.add(new BaseXLabel(HEADERINFO,true,false));
  csvopts.add(separator);
  csvopts.add(new BaseXLabel(SEPARATORINFO,true,false));
  csvopts.add(format);
  csvopts.add(new BaseXLabel(FORMINFO,true,false));
  textopts.add(lines);
  textopts.add(new BaseXLabel(LINESINFO,true,false));
}
