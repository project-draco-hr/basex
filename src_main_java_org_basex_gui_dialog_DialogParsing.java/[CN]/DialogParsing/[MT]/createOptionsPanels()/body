{
  xmlopts.add(intparse);
  xmlopts.add(new BaseXLabel(H_INT_PARSER,true,false));
  xmlopts.add(dtd);
  xmlopts.add(chop);
  xmlopts.add(new BaseXLabel(H_CHOP_WS,false,false).border(0,0,8,0));
  xmlopts.add(new BaseXLabel());
  final boolean rsen=CatalogWrapper.available();
  final BaseXBack fl=new BaseXBack(new TableLayout(2,2,8,0));
  usecat.setEnabled(rsen);
  fl.add(usecat);
  fl.add(new BaseXLabel());
  cfile.setEnabled(rsen);
  fl.add(cfile);
  browsec.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      catchoose();
    }
  }
);
  browsec.setEnabled(rsen);
  fl.add(browsec);
  xmlopts.add(fl);
  if (!rsen) {
    final BaseXBack rs=new BaseXBack(new TableLayout(2,1));
    rs.add(new BaseXLabel(HELP1_USE_CATALOG).color(GUIConstants.DGRAY));
    rs.add(new BaseXLabel(HELP2_USE_CATALOG).color(GUIConstants.DGRAY));
    xmlopts.add(rs);
  }
  BaseXBack p=new BaseXBack(new TableLayout(3,2,8,4));
  p.add(new BaseXLabel(ENCODING + COL,true,false));
  p.add(cencoding);
  p.add(new BaseXLabel(SEPARATOR,true,false));
  p.add(separator);
  p.add(new BaseXLabel(XML_FORMAT,true,false));
  p.add(format);
  csvopts.add(p);
  p=new BaseXBack(new TableLayout(2,1));
  p.add(header);
  p.add(new BaseXLabel(FIRST_LINE_HEADER,true,false));
  csvopts.add(p);
  p=new BaseXBack(new TableLayout(1,2,8,4));
  p.add(new BaseXLabel(ENCODING + COL,true,false));
  p.add(tencoding);
  textopts.add(p);
  textopts.add(lines);
  textopts.add(new BaseXLabel(SPLIT_INPUT_LINES,true,false));
}
