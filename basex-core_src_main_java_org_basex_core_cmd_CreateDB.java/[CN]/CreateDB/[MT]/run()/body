{
  final String name=args[0];
  if (!Databases.validName(name))   return error(NAME_INVALID_X,name);
  IO io;
  try {
    io=sourceToIO(name);
    if (in != null) {
      final LookupInput li=new LookupInput(io.inputStream());
      io=li.lookup() == -1 ? null : new IOStream(li,io.name());
    }
  }
 catch (  final IOException ex) {
    return error(Util.message(ex));
  }
  try {
    if (io != null) {
      if (!io.exists())       return error(RES_NOT_FOUND_X,io);
      parser=new DirParser(io,options,soptions.dbPath(name));
    }
 else     if (parser == null) {
      parser=Parser.emptyParser(options);
    }
    close(context);
    final Data data;
    if (options.get(MainOptions.MAINMEM)) {
      try {
        data=pushJob(new MemBuilder(name,parser)).build();
      }
  finally {
        popJob();
      }
      context.openDB(data);
      context.datas.pin(data);
    }
 else {
      if (context.pinned(name))       return error(DB_PINNED_X,name);
      final DiskBuilder builder=pushJob(new DiskBuilder(name,parser,soptions,options));
      try {
        builder.build().close();
      }
  finally {
        popJob();
      }
      final Open open=new Open(name);
      if (!open.run(context))       return error(open.info());
      data=context.data();
    }
    if (!startUpdate(data))     return false;
    try {
      CreateIndex.create(data,this);
    }
  finally {
      if (!finishUpdate(data))       return false;
    }
    if (options.get(MainOptions.CREATEONLY))     close(context);
    return info(parser.info() + DB_CREATED_X_X,name,job().performance);
  }
 catch (  final JobException ex) {
    throw ex;
  }
catch (  final IOException ex) {
    return error(Util.message(ex));
  }
catch (  final Exception ex) {
    Util.stack(ex);
    return error(NOT_PARSED_X,parser.source);
  }
}
