{
  final Node<N,E>[] res;
  final Node<N,E> split0, split1;
  if (pos < l) {
    res=child0.remove(null,child1,pos);
    if (res[1] != null) {
      split0=res[1];
      split1=res[2];
    }
 else {
      split0=res[2];
      split1=null;
    }
  }
 else {
    res=child1.remove(child0,null,pos - l);
    split0=res[0];
    split1=res[1];
  }
  @SuppressWarnings("unchecked") final Node<Node<N,E>,E>[] out=(Node<Node<N,E>,E>[])res;
  if (split1 != null) {
    out[0]=left;
    out[1]=new InnerNode2<>(split0,split1);
    out[2]=right;
    return out;
  }
  if (left != null && left instanceof InnerNode3) {
    final InnerNode3<N,E> steal=(InnerNode3<N,E>)left;
    out[0]=new InnerNode2<>(steal.child0,steal.child1);
    out[1]=new InnerNode2<>(steal.child2,split0);
    out[2]=right;
    return out;
  }
  if (right != null && right instanceof InnerNode3) {
    final InnerNode3<N,E> steal=(InnerNode3<N,E>)right;
    out[0]=left;
    out[1]=new InnerNode2<>(split0,steal.child0);
    out[2]=new InnerNode2<>(steal.child1,steal.child2);
    return out;
  }
  if (left != null && (right == null || left.size() < right.size())) {
    final InnerNode2<N,E> merge=(InnerNode2<N,E>)left;
    out[0]=new InnerNode3<>(merge.child0,merge.child1,split0);
    out[1]=null;
    out[2]=right;
  }
 else {
    final InnerNode2<N,E> merge=(InnerNode2<N,E>)right;
    out[0]=left;
    out[1]=null;
    out[2]=new InnerNode3<>(split0,merge.child0,merge.child1);
  }
  return out;
}
