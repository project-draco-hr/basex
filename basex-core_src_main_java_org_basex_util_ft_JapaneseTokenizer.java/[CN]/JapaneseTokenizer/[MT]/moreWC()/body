{
  final StringBuilder word=new StringBuilder();
  final int size=tokenList.size();
  boolean period=false, bs=false, more=false;
  for (; cpos < size; cpos++) {
    String cSrfc=tokenList.get(cpos).getSurface();
    final boolean cMark=tokenList.get(cpos).isMark();
    String nSrfc=null;
    boolean nMark=false;
    if (cpos < size - 1) {
      nSrfc=tokenList.get(cpos + 1).getSurface();
      nMark=tokenList.get(cpos + 1).isMark();
    }
    if (nSrfc != null) {
      if ("\\".equals(cSrfc))       bs=true;
      if (cMark && !isFtChar(cSrfc) || "\\".equals(cSrfc) && nMark) {
        period=false;
        bs=false;
        if (word.length() != 0) {
          more=true;
          break;
        }
        if ("\\".equals(cSrfc) && nMark)         cpos++;
        continue;
      }
      word.append(cSrfc);
      if (bs || "\\".equals(nSrfc)) {
        more=true;
        continue;
      }
      if (".".equals(cSrfc) || ".".equals(nSrfc)) {
        period=true;
        continue;
      }
      if (period) {
        if ("{".equals(cSrfc)) {
          cpos++;
          for (; cpos < size; cpos++) {
            cSrfc=tokenList.get(cpos).getSurface();
            word.append(cSrfc);
            if ("}".equals(cSrfc)) {
              more=true;
              break;
            }
          }
          cpos++;
          break;
        }
        continue;
      }
    }
 else {
      if (cMark) {
        if ("\\".equals(cSrfc))         continue;
        if (word.length() != 0) {
          word.append(cSrfc);
        }
        more=true;
        continue;
      }
    }
    if (period) {
      word.append(cSrfc);
    }
 else {
      if (bs)       if (!isFtChar(cSrfc))       word.append(cSrfc);
 else       word.setLength(0);
    }
    more=true;
    cpos++;
    break;
  }
  if (more) {
    currToken=word.length() == 0 ? tokenList.get(cpos - 1) : new Morpheme(word.toString(),MEISHI_FEATURE);
  }
  return more;
}
