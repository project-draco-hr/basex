{
  if (ctx.item.size == 0)   return ctx.item;
  result.reset();
  final Data data=ctx.item.data;
  final int[] nodes=ctx.item.nodes;
  final int[][] pos=ctx.item.pos;
  final int[][] poi=ctx.item.poi;
  if (simple) {
    for (int i=0; i < nodes.length; i++) {
      final int size=result.size;
      eval(data,nodes[i],result);
      if (size < result.size && pos != null) {
        result.addPosPoiToLastPre(pos[i],poi[i]);
      }
    }
  }
 else   if (posPred != 0) {
    for (    final int n : nodes)     pos(ctx,data,n);
  }
 else   if (early) {
    for (    final int n : nodes)     early(ctx,data,n);
  }
 else {
    tmp.reset();
    for (    final int n : nodes) {
      eval(data,n,tmp);
      preds.eval(ctx,tmp,result);
    }
  }
  return result.pos != null && result.poi != null ? new Nod(result.finish(),result.finishPos(),result.finishPoi(),ctx) : new Nod(result.finish(),ctx);
}
