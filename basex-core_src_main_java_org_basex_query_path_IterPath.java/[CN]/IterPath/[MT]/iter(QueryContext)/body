{
  return new NodeIter(){
    final boolean r=root != null;
    Expr[] expr;
    Iter[] iter;
    ANode node;
    int p;
    @Override public ANode next() throws QueryException {
      if (iter == null) {
        if (expr == null) {
          expr=steps;
          if (r) {
            expr=new Expr[steps.length + 1];
            expr[0]=root;
            System.arraycopy(steps,0,expr,1,steps.length);
          }
        }
        iter=new Iter[expr.length];
        iter[0]=qc.iter(expr[0]);
      }
      final Value cv=qc.value;
      final long cp=qc.pos;
      final long cs=qc.size;
      try {
        while (true) {
          final Item it=iter[p].next();
          if (it == null) {
            iter[p]=null;
            if (--p == -1) {
              node=null;
              break;
            }
          }
 else           if (p < iter.length - 1) {
            if (r && p == 0 && !(it instanceof ANode))             throw PATHNODE.get(info,steps[0],it.type,it);
            qc.value=it;
            ++p;
            if (iter[p] == null || !iter[p].reset())             iter[p]=qc.iter(expr[p]);
          }
 else {
            final ANode n=(ANode)it;
            if (node == null || !node.is(n)) {
              node=n;
              break;
            }
          }
        }
        return node;
      }
  finally {
        qc.value=cv;
        qc.pos=cp;
        qc.size=cs;
      }
    }
    @Override public boolean reset(){
      iter=null;
      node=null;
      p=0;
      return true;
    }
  }
;
}
