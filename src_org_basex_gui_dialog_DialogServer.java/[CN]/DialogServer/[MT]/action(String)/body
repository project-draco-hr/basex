{
  if (BUTTONSTASERV.equals(cmd)) {
    try {
      final int p=Integer.parseInt(portl.getText());
      ctx.prop.set(Prop.PORT,p);
      final String path=IOFile.file(getClass().getProtectionDomain().getCodeSource().getLocation().toString());
      final String mem="-Xmx" + Runtime.getRuntime().maxMemory();
      final String clazz=org.basex.BaseXServer.class.getName();
      new ProcessBuilder(new String[]{"java",mem,"-cp",path,clazz,"-p",String.valueOf(p)}).start();
      run=true;
    }
 catch (    final Exception ex) {
      err1=BUTTONSTASERV + FAILED + error(ex);
      Main.debug(ex);
    }
  }
 else   if (BUTTONSTOSERV.equals(cmd)) {
    try {
      createSession(ADMIN,ADMIN,true);
      cs.execute(new IntStop(),null);
      cs=null;
      run=false;
      connected=false;
    }
 catch (    final IOException ex) {
      err1=BUTTONSTOSERV + FAILED + error(ex);
      Main.debug(ex);
    }
  }
 else   if (BUTTONCHANGE.equals(cmd)) {
    for (    Process p : permps) {
      try {
        cs.execute(p);
      }
 catch (      IOException e) {
        err2=BUTTONCHANGE + FAILED + error(e);
        Main.debug(e);
      }
    }
    permps.clear();
  }
 else   if (BUTTONCREATE.equals(cmd)) {
    final String u=user.getText();
    final String p=new String(pass.getPassword());
    try {
      cs.execute(new CreateUser(u,p));
      user.setText("");
      pass.setText("");
      setData();
    }
 catch (    final IOException ex) {
      err2=CREATEU + FAILED + error(ex);
      Main.debug(ex);
    }
  }
 else   if (BUTTONDROP.equals(cmd)) {
    try {
      final String u=(String)userco1.getSelectedItem();
      if (Dialog.confirm(this,Main.info(DRQUESTION,u))) {
        cs.execute(new DropUser(u));
        setData();
      }
    }
 catch (    final Exception ex) {
      err2=DROPU + FAILED + error(ex);
      Main.debug(ex);
    }
  }
 else   if (BUTTONALTER.equals(cmd)) {
    final String u=(String)userco2.getSelectedItem();
    final String p=new String(newpass.getPassword());
    try {
      cs.execute(new AlterUser(u,p));
    }
 catch (    IOException e) {
      err2=ALTERPW + FAILED + error(e);
      Main.debug(e);
    }
  }
 else   if (BUTTONCONNECT.equals(cmd)) {
    try {
      createSession(loguser.getText(),new String(logpass.getPassword()),false);
      setData();
      connected=true;
    }
 catch (    Exception e) {
      logpass.setText("");
      err1=BUTTONCONNECT + FAILED + error(e);
      Main.debug(e);
    }
  }
 else   if (BUTTONDISCONNECT.equals(cmd)) {
    try {
      cs.execute(new Exit());
      loguser.setText("");
      logpass.setText("");
      connected=false;
    }
 catch (    IOException e) {
      err1=BUTTONDISCONNECT + FAILED + error(e);
      Main.debug(e);
    }
  }
  stop.setEnabled(run);
  portl.setEnabled(!run);
  loguser.setEnabled(!connected);
  logpass.setEnabled(!connected);
  port.setEnabled(!connected);
  host.setEnabled(!connected);
  boolean valh=host.getText().matches("^([A-Za-z]+://)?[A-Za-z0-9-.]+$");
  boolean valpl=portl.getText().matches("^[0-9]{2,5}$");
  boolean valp=port.getText().matches("^[0-9]{2,5}$");
  boolean vallu=true;
  if (!loguser.getText().isEmpty()) {
    vallu=loguser.getText().matches("^[A-Za-z0-9_.-]+$");
  }
  boolean vallp=true;
  if (!new String(logpass.getPassword()).isEmpty()) {
    vallp=new String(logpass.getPassword()).matches("^[A-Za-z0-9_.-]+$");
  }
  disconnect.setEnabled(connected);
  start.setEnabled(!run && valpl);
  if (!valpl || !valh || !valp|| !vallu|| !vallp) {
    infop1.setIcon(BaseXLayout.icon("warn"));
    if (!valh) {
      infop1.setText(HOST + INVALID);
    }
 else     if (!valpl) {
      infop1.setText(LOCAL + PORT + INVALID);
    }
 else     if (!valp) {
      infop1.setText(PORT + INVALID);
    }
 else     if (!vallu) {
      infop1.setText(SERVERUSER + INVALID);
    }
 else {
      infop1.setText(SERVERPW + INVALID);
    }
  }
 else   if (err1 != null) {
    infop1.setText(err1);
    infop1.setIcon(BaseXLayout.icon("error"));
    err1=null;
  }
 else {
    connect.setEnabled(!connected && !loguser.getText().isEmpty() && !new String(logpass.getPassword()).isEmpty());
    infop1.setText(" ");
    infop1.setIcon(null);
  }
  tabs.setEnabledAt(1,connected);
  boolean valuname=user.getText().matches("^[A-Za-z0-9_.-]+$");
  boolean valpass=new String(pass.getPassword()).matches("^[A-Za-z0-9_.-]+$");
  boolean valnewpass=new String(newpass.getPassword()).matches("^[A-Za-z0-9_.-]+$");
  alter.setEnabled(valnewpass);
  create.setEnabled(valuname && valpass);
  if (!valuname && !user.getText().isEmpty()) {
    infop2.setIcon(BaseXLayout.icon("warn"));
    infop2.setText(SERVERUSER + INVALID);
  }
 else   if ((!valpass && !new String(pass.getPassword()).isEmpty()) || (!valnewpass && !new String(newpass.getPassword()).isEmpty())) {
    infop2.setIcon(BaseXLayout.icon("warn"));
    infop2.setText(SERVERPW + INVALID);
  }
 else   if (err2 != null) {
    infop2.setText(err2);
    infop2.setIcon(BaseXLayout.icon("error"));
    err2=null;
  }
 else {
    infop2.setText(" ");
    infop2.setIcon(null);
  }
  delete.setEnabled(data.contents.size() != 0);
}
