{
  String msg=null;
  String msg2=null;
  try {
    if (BUTTONSTASERV.equals(cmd)) {
      final int p=Integer.parseInt(ports.getText());
      ctx.prop.set(Prop.SERVERPORT,p);
      if (host.getText().equals("localhost")) {
        ctx.prop.set(Prop.PORT,p);
        portc.setText(ports.getText());
      }
      final String path=IOFile.file(getClass().getProtectionDomain().getCodeSource().getLocation().toString());
      final String mem="-Xmx" + Runtime.getRuntime().maxMemory();
      final String clazz=org.basex.BaseXServer.class.getName();
      new ProcessBuilder(new String[]{"java",mem,"-cp",path,clazz,"-p",String.valueOf(p)}).start();
      running=ping(true);
    }
 else     if (BUTTONSTOSERV.equals(cmd)) {
      BaseXServer.stop(gui.context);
      running=ping(true);
      connected=connected && ping(false);
    }
 else     if (BUTTONCONNECT.equals(cmd)) {
      gui.prop.set(GUIProp.SERVERUSER,loguser.getText());
      gui.prop.set(GUIProp.SERVERPASS,new String(logpass.getPassword()));
      ctx.prop.set(Prop.HOST,host.getText());
      ctx.prop.set(Prop.PORT,Integer.parseInt(portc.getText()));
      cs=new ClientSession(ctx,gui.prop.get(GUIProp.SERVERUSER),gui.prop.get(GUIProp.SERVERPASS));
      user.setSess(cs);
      fillsedb();
      connected=true;
    }
 else     if (BUTTONDISCONNECT.equals(cmd)) {
      cs.execute(new Exit());
      connected=false;
    }
 else     if (BUTTONREFRESH.equals(cmd)) {
      fillsedb();
    }
 else     if ("Update".equals(cmd)) {
      if (logc.getSelectedIndex() != -1) {
        final IO io=IO.get(logdir + logc.getSelectedItem().toString());
        logt.setText(io.content());
      }
 else {
        logt.setText(Token.EMPTY);
      }
    }
 else     if ("Delete".equals(cmd)) {
      File f=new File(logdir + logc.getSelectedItem().toString());
      if (f.delete()) {
        logc.setSelectedIndex(-1);
        refreshLog();
      }
 else {
        msg2="Delete not possible";
      }
    }
 else     if ("Delete All".equals(cmd)) {
      boolean d=false;
      for (int i=0; i < logc.getItemCount(); i++) {
        File f=new File(logdir + logc.getItemAt(i).toString());
        d=f.delete();
      }
      if (!d) {
        msg2="Delete of all logs not possible";
      }
 else {
        logc.setSelectedIndex(-1);
      }
      refreshLog();
    }
 else     if (connected) {
      user.action(cmd);
    }
  }
 catch (  final IOException ex) {
    Main.debug(ex);
    if (ex instanceof BindException)     msg=SERVERBIND;
 else     if (ex instanceof LoginException)     msg=SERVERLOGIN;
 else     msg=ex.getMessage();
  }
  final boolean valp=portc.getText().matches("[\\d]+") && Integer.parseInt(portc.getText()) <= 65535;
  final boolean valpl=ports.getText().matches("[\\d]+") && Integer.parseInt(ports.getText()) <= 65535;
  final boolean vallu=loguser.getText().matches("[\\w]*");
  final boolean vallp=new String(logpass.getPassword()).matches("[\\w]*");
  final boolean valh=host.getText().matches("([\\w]+://)?[\\w.-]+");
  boolean warn=true;
  if (msg != null || msg2 != null) {
    warn=false;
  }
 else   if (!(valpl && valh && valp&& vallu&& vallp)) {
    msg=Main.info(INVALID,!valpl ? LOCALPORT : !valh ? HOST : !valp ? PORT : !vallu ? SERVERUSER : SERVERPW);
  }
  info.setError(msg,warn);
  info2.setError(msg2,warn);
  ports.setEnabled(!running);
  start.setEnabled(!running && valpl);
  stop.setEnabled(running);
  loguser.setEnabled(!connected);
  logpass.setEnabled(!connected);
  host.setEnabled(!connected);
  portc.setEnabled(!connected);
  connect.setEnabled(!connected && vallu && vallp&& valh&& valp&& !loguser.getText().isEmpty()&& logpass.getPassword().length != 0);
  disconnect.setEnabled(connected);
  tabs.setEnabledAt(1,connected);
  tabs.setEnabledAt(2,connected);
  update.setEnabled(logc.getSelectedIndex() != -1);
  delete.setEnabled(logc.getSelectedIndex() != -1);
  deleteAll.setEnabled(logc.getItemCount() > 0);
  ctx.prop.write();
}
