{
  if (START.equals(cmd)) {
    ctx.prop.set(Prop.HOST,host.getText());
    final int p=Integer.parseInt(port.getText());
    ctx.prop.set(Prop.PORT,p);
    try {
      final String path=IOFile.file(getClass().getProtectionDomain().getCodeSource().getLocation().toString());
      final String mem="-Xmx" + Runtime.getRuntime().maxMemory();
      final String clazz=org.basex.BaseXServer.class.getName();
      new ProcessBuilder(new String[]{"java",mem,"-cp",path,clazz}).start();
      createSession();
    }
 catch (    final Exception ex) {
      ex.printStackTrace();
    }
  }
 else   if (STOP.equals(cmd)) {
    try {
      cs.execute(new IntStop(),null);
      cs=null;
    }
 catch (    final IOException ex) {
      Main.debug(ex);
    }
  }
 else   if (CHANGE.equals(cmd)) {
    for (    Process p : permps) {
      try {
        cs.execute(p);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    permps.clear();
  }
 else   if (CREATE.equals(cmd)) {
    final String u=user.getText();
    final String p=new String(pass.getPassword());
    try {
      cs.execute(new CreateUser(u,p));
      user.setText("");
      pass.setText("");
      setData();
    }
 catch (    final IOException ex) {
      Main.debug(ex);
    }
  }
 else   if (DROP.equals(cmd)) {
    final String u=(String)userco1.getSelectedItem();
    try {
      if (Dialog.confirm(this,SURE)) {
        cs.execute(new DropUser(u));
        setData();
      }
    }
 catch (    final IOException ex) {
      Main.debug(ex);
    }
  }
 else   if (ALTER.equals(cmd)) {
    final String u=(String)userco2.getSelectedItem();
    final String p=new String(newpass.getPassword());
    try {
      cs.execute(new AlterUser(u,p));
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  final boolean run=cs == null;
  stop.setEnabled(!run);
  host.setEnabled(run);
  port.setEnabled(run);
  boolean valh=host.getText().matches("^([A-Za-z]+://)?[A-Za-z0-9-.]+$");
  boolean valp=port.getText().matches("^[0-9]{2,5}$");
  start.setEnabled(run && valp && valh);
  if (!valp || !valh) {
    infop1.setIcon(BaseXLayout.icon("warn"));
    if (!valh) {
      infop1.setText("Invalid hostname");
    }
 else {
      infop1.setText("Invalid port");
    }
  }
 else {
    infop1.setText(" ");
    infop1.setIcon(null);
  }
  tabs.setEnabledAt(1,!run);
  boolean valuname=user.getText().matches("^[A-Za-z0-9_.-]+$");
  boolean valpass=new String(pass.getPassword()).matches("^[A-Za-z0-9_.-]+$");
  boolean valnewpass=new String(newpass.getPassword()).matches("^[A-Za-z0-9_.-]+$");
  alter.setEnabled(valnewpass);
  create.setEnabled(valuname && valpass);
  if (!valuname && !user.getText().isEmpty()) {
    infop2.setIcon(BaseXLayout.icon("warn"));
    infop2.setText("Invalid username");
  }
 else   if ((!valpass && !new String(pass.getPassword()).isEmpty()) || (!valnewpass && !new String(newpass.getPassword()).isEmpty())) {
    infop2.setIcon(BaseXLayout.icon("warn"));
    infop2.setText("Invalid password");
  }
 else {
    infop2.setText(" ");
    infop2.setIcon(null);
  }
  delete.setEnabled(data.contents.size() != 0);
}
