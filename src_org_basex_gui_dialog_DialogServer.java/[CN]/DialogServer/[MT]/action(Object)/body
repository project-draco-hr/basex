{
  String msg=null;
  String msg2=null;
  String gmsg=null;
  try {
    if (cmp == start) {
      final int p=Integer.parseInt(ports.getText());
      ctx.prop.set(Prop.SERVERPORT,p);
      if (host.getText().equals("localhost")) {
        ctx.prop.set(Prop.PORT,p);
        portc.setText(ports.getText());
      }
      final String path=IOFile.file(getClass().getProtectionDomain().getCodeSource().getLocation().toString());
      final String mem="-Xmx" + Runtime.getRuntime().maxMemory();
      final String clazz=org.basex.BaseXServer.class.getName();
      new ProcessBuilder(new String[]{"java",mem,"-cp",path,clazz,"-p",String.valueOf(p)}).start();
      for (int c=0; c < 3; c++) {
        running=ping(true);
        if (running)         break;
        Performance.sleep(500);
      }
      if (!running) {
        msg=SERVERBIND;
      }
 else {
        gmsg=INFOSERVOK;
      }
    }
 else     if (cmp == stop) {
      BaseXServer.stop(gui.context);
      running=ping(true);
      connected=connected && ping(false);
      if (!connected)       gmsg=INFOSERVDW;
    }
 else     if (cmp == connect) {
      gui.prop.set(GUIProp.SERVERUSER,loguser.getText());
      gui.prop.set(GUIProp.SERVERPASS,new String(logpass.getPassword()));
      ctx.prop.set(Prop.HOST,host.getText());
      ctx.prop.set(Prop.PORT,Integer.parseInt(portc.getText()));
      cs=new ClientSession(ctx,gui.prop.get(GUIProp.SERVERUSER),gui.prop.get(GUIProp.SERVERPASS));
      user.setSess(cs);
      dbsP.setSess(cs);
      connected=true;
      refreshSess();
    }
 else     if (cmp == disconnect) {
      cs.execute(new Exit());
      connected=false;
      logpass.setText("");
    }
 else     if (cmp == refreshSess) {
      refreshSess();
    }
 else     if (cmp == refreshLog) {
      byte[] cont=Token.EMPTY;
      if (logc.getSelectedIndex() != -1) {
        cont=IO.get(logdir + logc.getSelectedItem().toString()).content();
      }
      logt.setText(cont);
    }
 else     if (cmp == delete) {
      final File f=new File(logdir + logc.getSelectedItem().toString());
      if (f.delete()) {
        logc.setSelectedIndex(-1);
        refreshLog();
      }
 else {
        msg2=Main.info(DBNOTDELETED,f.getName());
      }
    }
 else     if (cmp == deleteAll) {
      for (int i=0; i < logc.getItemCount(); i++) {
        final File f=new File(logdir + logc.getItemAt(i).toString());
        if (!f.delete()) {
          msg2=Main.info(DBNOTDELETED,f.getName());
          break;
        }
      }
      logc.setSelectedIndex(-1);
      refreshLog();
    }
 else     if (cmp == logc) {
      action(refreshLog);
    }
 else     if (connected) {
      if (tab == 1)       user.action(cmp);
      if (tab == 2)       dbsP.action(cmp);
    }
  }
 catch (  final IOException ex) {
    Main.debug(ex);
    if (ex instanceof BindException)     msg=SERVERBIND;
 else     if (ex instanceof LoginException)     msg=SERVERLOGIN;
 else {
      msg=ex.getMessage();
      if (msg.equals(Main.info(PERMNO,CmdPerm.values()[3]))) {
        try {
          cs.execute(new Exit());
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
    }
  }
  final boolean valp=portc.getText().matches("[\\d]+") && Integer.parseInt(portc.getText()) <= 65535;
  final boolean valpl=ports.getText().matches("[\\d]+") && Integer.parseInt(ports.getText()) <= 65535;
  final boolean vallu=loguser.getText().matches("[\\w]*");
  final boolean vallp=new String(logpass.getPassword()).matches("[\\w]*");
  final boolean valh=host.getText().matches("([\\w]+://)?[\\w.-]+");
  boolean warn=true;
  if (msg != null || msg2 != null) {
    warn=false;
  }
 else   if (!(valpl && valh && valp&& vallu&& vallp)) {
    msg=Main.info(INVALID,!valpl ? LOCALPORT : !valh ? HOST : !valp ? PORT : !vallu ? SERVERUSER : SERVERPW);
  }
  info.setError(msg,warn);
  info2.setError(msg2,warn);
  if (gmsg != null) {
    info.setText(gmsg);
    info.setIcon(BaseXLayout.icon("ok"));
  }
  ports.setEnabled(!running);
  start.setEnabled(!running && valpl);
  stop.setEnabled(running);
  loguser.setEnabled(!connected);
  logpass.setEnabled(!connected);
  host.setEnabled(!connected);
  portc.setEnabled(!connected);
  connect.setEnabled(!connected && vallu && vallp&& valh&& valp&& !loguser.getText().isEmpty()&& logpass.getPassword().length != 0);
  disconnect.setEnabled(connected);
  tabs.setEnabledAt(1,connected);
  tabs.setEnabledAt(2,connected);
  tabs.setEnabledAt(3,connected);
  tabs.setEnabledAt(4,running || logc.getItemCount() > 0);
  refreshLog.setEnabled(logc.getSelectedIndex() != -1);
  delete.setEnabled(logc.getSelectedIndex() != -1);
  deleteAll.setEnabled(logc.getItemCount() > 0);
  if (loguser.hasFocus()) {
    logpass.setText("");
    connect.setEnabled(false);
  }
  ctx.prop.write();
}
