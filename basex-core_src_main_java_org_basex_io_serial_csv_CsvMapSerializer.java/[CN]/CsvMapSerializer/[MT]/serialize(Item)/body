{
  if (sep && level == 0)   print(' ');
  if (!(item instanceof Map))   BXCS_SERIAL.thrwIO("Top level must be a map; " + item.type + " found");
  try {
    final TokenList tl=new TokenList();
    final Map map=(Map)item;
    final Value keys=map.keys();
    long rows=0;
    for (    final Item key : keys) {
      if (key.type != AtomType.ITR)       BXCS_SERIAL.thrwIO("Key " + key + " is not numeric");
      final long n=key.itr(null);
      if (n <= 0)       BXCS_SERIAL.thrwIO("Key '" + n + "' is no positive integer");
      rows=Math.max(rows,n);
    }
    for (int i=0; i < rows; i++) {
      final Value row=map.get(Int.get(i + 1),null);
      if (row.size() == 1 && row instanceof Map) {
        final Map r=(Map)row;
        if (i == 0) {
          for (          final Item key : r.keys())           tl.add(key.string(null));
          record(tl);
          tl.reset();
        }
        for (        final Item key : r.keys()) {
          final Value val=r.get(key,null);
          if (val.size() != 1)           BXCS_SERIAL.thrwIO("Single value expected as entry.");
          tl.add(((Item)val).string(null));
        }
      }
 else {
        for (        final Item it : row)         tl.add(it.string(null));
      }
      record(tl);
      tl.reset();
    }
  }
 catch (  final QueryException ex) {
    throw new QueryIOException(ex);
  }
  sep=true;
}
