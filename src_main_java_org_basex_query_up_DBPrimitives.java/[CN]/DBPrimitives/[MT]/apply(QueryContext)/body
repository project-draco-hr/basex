{
  int par=-2;
  int first=-1;
  for (int i=nodes.size() - 1; i >= 0; i--) {
    final int pre=nodes.get(i);
    final int parT=d.parent(pre,d.kind(pre));
    if (parT != par) {
      if (first > -1)       mergeTexts(par,first);
      first=-1;
      par=parT;
    }
    int add=0;
    final NodePrimitives prim=op.get(pre);
    prim.optimize();
    if (prim.textAdjacency())     first=pre;
    for (    final UpdatePrimitive p : prim) {
      final PrimitiveType t=p.type();
      p.apply(add);
      if (t == INSERTBEFORE)       add=((NodeCopy)p).md.meta.size;
    }
  }
  if (first > -1)   mergeTexts(par,first);
  d.flush();
  if (d.meta.prop.is(Prop.WRITEBACK)) {
    try {
      Export.export(ctx.resource.context,d);
    }
 catch (    final IOException ex) {
      UPPUTERR.thrw(null,d.meta.file);
    }
  }
}
