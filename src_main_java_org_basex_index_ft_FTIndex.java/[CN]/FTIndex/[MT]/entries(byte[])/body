{
  return new EntryIterator(){
    int ti=prefix.length - 1, i, e, nr;
    boolean inner;
    @Override public synchronized byte[] next(){
      if (inner) {
        if (i < e) {
          final byte[] entry=inY.readBytes(i,ti);
          if (startsWith(entry,prefix)) {
            final long poi=inY.read5();
            nr=inY.read4();
            if (prefix.length != 0)             cache.add(entry,nr,poi);
            i+=ti + ENTRY;
            return entry;
          }
        }
      }
      while (++ti < tp.length - 1) {
        i=tp[ti];
        if (i == -1)         continue;
        int c=ti + 1;
        do         e=tp[c++];
 while (e == -1);
        nr=0;
        inner=true;
        i=find(prefix,i,e,ti);
        final byte[] n=next();
        if (n != null)         return n;
      }
      return null;
    }
    @Override public int count(){
      return nr;
    }
  }
;
}
