{
  if (io.isDir()) {
    for (    final IO f : ((IOFile)io).children())     parse(b,f);
  }
 else {
    src=io;
    while (io.more(archives)) {
      b.checkStop();
      final long l=io.length();
      if (l != -1)       b.meta.filesize+=l;
      String targ=target;
      String path=io.path();
      final String name=io.name();
      if (path.endsWith('/' + name)) {
        path=path.substring(0,path.length() - name.length());
        if (path.startsWith(root))         path=path.substring(root.length());
        targ=(targ + path).replace("//","/");
      }
      boolean exclude=false;
      if (filter != null) {
        String nm=io.name();
        if (Prop.WIN)         nm=name.toLowerCase(Locale.ENGLISH);
        exclude=!filter.matcher(nm).matches();
      }
      if (exclude) {
        if (addRaw && rawPath != null) {
          Store.store(io.inputSource(),new IOFile(rawPath,targ + name));
        }
      }
 else {
        if (rawParser) {
          if (rawPath != null) {
            Store.store(io.inputSource(),new IOFile(rawPath,targ + name));
          }
        }
 else {
          boolean ok=true;
          IO in=io;
          if (skipCorrupt) {
            try {
              if (!(io instanceof IOContent)) {
                in=new IOContent(io.read());
                in.name(io.name());
              }
              parser=Parser.singleParser(in,prop,targ);
              MemBuilder.build("",parser);
            }
 catch (            final IOException ex) {
              Util.debug(ex.getMessage());
              skipped.add(io.path());
              ok=false;
            }
          }
          if (ok) {
            parser=Parser.singleParser(in,prop,targ);
            parser.parse(b);
          }
          parser=null;
          if (Prop.debug && (++c & 0x3FF) == 0)           Util.err(";");
        }
      }
    }
  }
}
