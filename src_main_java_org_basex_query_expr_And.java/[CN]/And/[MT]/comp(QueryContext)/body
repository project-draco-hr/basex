{
  super.comp(ctx);
  for (int e=0; e < expr.length; e++) {
    final Expr ex=expr[e];
    if (!ex.i())     continue;
    if (!((Item)ex).bool()) {
      ctx.compInfo(OPTFALSE,ex);
      return Bln.FALSE;
    }
    ctx.compInfo(OPTTRUE,ex);
    expr=Array.delete(expr,e--);
    if (expr.length == 0)     return Bln.TRUE;
  }
  Expr[] ex={};
  Pos ps=null;
  CmpR cr=null;
  for (  final Expr e : expr) {
    Expr tmp=null;
    if (e instanceof Pos) {
      tmp=ps == null ? e : ps.intersect((Pos)e);
      if (!(tmp instanceof Pos))       return tmp;
      ps=(Pos)tmp;
    }
 else     if (e instanceof CmpR) {
      tmp=cr == null ? e : cr.intersect((CmpR)e);
      if (!(tmp instanceof CmpR))       return tmp;
      cr=(CmpR)tmp;
    }
    if (tmp == null)     ex=Array.add(ex,e);
  }
  expr=ex;
  if (ps != null)   expr=Array.add(expr,ps);
  if (cr != null)   expr=Array.add(expr,cr);
  if (expr.length != 1)   return this;
  final SeqType ret=expr[0].returned(ctx);
  return ret.type == Type.BLN && ret.occ == SeqType.OCC_1 ? expr[0] : this;
}
