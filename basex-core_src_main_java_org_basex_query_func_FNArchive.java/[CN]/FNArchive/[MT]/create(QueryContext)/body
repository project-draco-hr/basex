{
  final Iter entr=ctx.iter(expr[0]);
  final Iter cont=ctx.iter(expr[1]);
  final Item opt=expr.length > 2 ? expr[2].item(ctx,info) : null;
  final ArchiveOptions opts=new ArchiveOptions();
  new FuncOptions(Q_OPTIONS,info).parse(opt,opts);
  final String format=opts.get(ArchiveOptions.FORMAT);
  final ArchiveOut out=ArchiveOut.get(format.toLowerCase(Locale.ENGLISH),info);
  final String alg=opts.get(ArchiveOptions.ALGORITHM);
  int level=ZipEntry.DEFLATED;
  if (alg != null) {
    if (format.equals("zip") && !eq(alg,STORED,DEFLATE) || format.equals("gzip") && !eq(alg,DEFLATE)) {
      ARCH_SUPP.thrw(info,ArchiveOptions.ALGORITHM.name,alg);
    }
    if (eq(alg,STORED))     level=ZipEntry.STORED;
 else     if (eq(alg,DEFLATE))     level=ZipEntry.DEFLATED;
  }
  out.level(level);
  try {
    int e=0;
    int c=0;
    Item en, cn;
    while (true) {
      en=entr.next();
      cn=cont.next();
      if (en == null || cn == null)       break;
      if (out instanceof GZIPOut && c > 0)       ARCH_ONE.thrw(info,format.toUpperCase(Locale.ENGLISH));
      add(checkElmStr(en),cn,out,level,ctx);
      e++;
      c++;
    }
    if (cn != null)     do     c++;
 while (cont.next() != null);
    if (en != null)     do     e++;
 while (entr.next() != null);
    if (e != c)     throw ARCH_DIFF.thrw(info,e,c);
  }
 catch (  final IOException ex) {
    throw ARCH_FAIL.thrw(info,ex);
  }
 finally {
    out.close();
  }
  return new B64(out.toArray());
}
