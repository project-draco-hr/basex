{
  final FElem testsuite=new FElem(TESTSUITE).add(NAME,sc.baseURI().string());
  final ArrayList<StaticFunc> before=new ArrayList<>(1);
  final ArrayList<StaticFunc> after=new ArrayList<>(1);
  final ArrayList<StaticFunc> beforeModule=new ArrayList<>(1);
  final ArrayList<StaticFunc> afterModule=new ArrayList<>(1);
  final ArrayList<StaticFunc> tests=new ArrayList<>(1);
  final Performance p=new Performance();
  for (  final StaticFunc uf : funcs) {
    final Ann ann=uf.ann;
    final int as=ann.size();
    boolean xq=false;
    for (int a=0; !xq && a < as; a++) {
      xq|=eq(ann.names[a].uri(),QueryText.UNITURI);
    }
    if (!xq)     continue;
    if (uf.updating)     throw UNIT_UPDATE.get(info,uf.name.local());
    if (uf.args.length > 0)     throw UNIT_ARGS.get(info,uf.name.local());
    if (indexOf(uf,BEFORE) != -1)     before.add(uf);
    if (indexOf(uf,AFTER) != -1)     after.add(uf);
    if (indexOf(uf,BEFORE_MODULE) != -1)     beforeModule.add(uf);
    if (indexOf(uf,AFTER_MODULE) != -1)     afterModule.add(uf);
    if (indexOf(uf,TEST) != -1)     tests.add(uf);
  }
  int s=0;
  int f=0;
  int e=0;
  int t=0;
  try {
    for (    final StaticFunc uf : beforeModule)     eval(uf);
    for (    final StaticFunc uf : tests) {
      final Value values=uf.ann.values[indexOf(uf,TEST)];
      final long vs=values.size();
      byte[] code=null;
      if (vs != 0) {
        if (vs == 2 && eq(EXPECTED,values.itemAt(0).string(info))) {
          code=values.itemAt(1).string(info);
        }
 else {
          throw UNIT_ANN.get(info,'%',uf.ann.names[0]);
        }
      }
      final FElem testcase=new FElem(TESTCASE).add(NAME,uf.name.local());
      t++;
      final Performance pt=new Performance();
      final int skip=indexOf(uf,IGNORE);
      if (skip == -1) {
        try {
          for (          final StaticFunc fn : before)           eval(fn);
          eval(uf);
          for (          final StaticFunc fn : after)           eval(fn);
          if (code != null) {
            f++;
            testcase.add(new FElem(FAILURE).add(new FElem(EXPECTED).add(code)));
          }
        }
 catch (        final QueryException ex) {
          final QNm name=ex.qname();
          if (code == null || !eq(code,name.local())) {
            final boolean failure=eq(name.uri(),QueryText.UNITURI);
            if (failure)             f++;
 else             e++;
            final FElem error=new FElem(failure ? FAILURE : ERROR);
            error.add(LINE,token(ex.line()));
            error.add(COLUMN,token(ex.column()));
            if (ex instanceof UnitException) {
              final UnitException ue=(UnitException)ex;
              error.add(elem(ue.returned,RETURNED,ue.count));
              error.add(elem(ue.expected,EXPECTED,ue.count));
            }
 else {
              error.add(TYPE,ex.qname().local());
              error.add(ex.getLocalizedMessage());
            }
            testcase.add(error);
          }
        }
      }
 else {
        final Value sv=uf.ann.values[skip];
        testcase.add(SKIPPED,sv.isEmpty() ? EMPTY : sv.itemAt(0).string(info));
        s++;
      }
      testcase.add(TIME,time(pt));
      testsuite.add(testcase);
    }
    for (    final StaticFunc uf : afterModule)     eval(uf);
  }
 catch (  final QueryException ex) {
    final FElem test=new FElem(TESTCASE).add(NAME,current.name.local());
    test.add(TIME,time(p));
    testsuite.add(test);
  }
  testsuite.add(TIME,time(p));
  testsuite.add(TESTS,token(t));
  testsuite.add(FAILURES,token(f));
  testsuite.add(ERRORS,token(e));
  testsuite.add(SKIPPED,token(s));
  return testsuite;
}
