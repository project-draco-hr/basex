{
  if (comma.get(level))   out.print(',');
 else   comma.set(level,true);
  if (level > 0) {
    indent();
    final byte[] ptype=types.get(level - 1);
    if (eq(ptype,OBJECT)) {
      if (atts && !eq(elem.string(),PAIR))       throw error("<%> found, <%> expected",elem,PAIR);
      if (key == null)       throw error("<%> has no name attribute",elem);
      out.print('"');
      final byte[] name=atts ? key : XMLToken.decode(key,lax);
      if (name == null)       throw error("Name of element <%> is invalid",key);
      out.print(name);
      out.print("\":");
    }
 else     if (eq(ptype,ARRAY)) {
      if (atts) {
        if (!eq(elem.string(),ITEM))         throw error("<%> found, <%> expected",elem,ITEM);
        if (key != null)         throw error("<%> must have no name attribute",elem);
      }
 else {
        if (!eq(elem.string(),VALUE))         throw error("<%> found, <%> expected",elem,VALUE);
      }
    }
 else {
      throw error("<%> is typed as \"%\" and cannot be nested",elems.get(level - 1),ptype);
    }
  }
  byte[] type=types.get(level);
  if (type == null) {
    if (key != null) {
      final int tl=typeCache.length;
      for (int t=0; t < tl && type == null; t++) {
        if (typeCache[t].contains(key))         type=TYPES[t];
      }
    }
    if (type == null)     type=STRING;
    types.set(level,type);
  }
  if (eq(type,OBJECT)) {
    out.print('{');
  }
 else   if (eq(type,ARRAY)) {
    out.print('[');
  }
}
