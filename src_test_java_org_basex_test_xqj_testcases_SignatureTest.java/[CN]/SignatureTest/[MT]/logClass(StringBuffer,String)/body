{
  final Class c=Class.forName("javax.xml.xquery." + name);
  TreeSet set;
  Iterator it;
  sb.append(Modifier.toString(c.getModifiers()));
  sb.append(' ');
  sb.append(c.getName());
  if (c.getSuperclass() != null) {
    sb.append(" extends ");
    sb.append(c.getSuperclass().getName());
  }
  final Class[] interfaces=c.getInterfaces();
  set=new TreeSet();
  if (interfaces != null && interfaces.length > 0) {
    for (    final Class interface1 : interfaces) {
      set.add(interface1.getName());
    }
    sb.append(" implements ");
    it=set.iterator();
    while (it.hasNext()) {
      sb.append((String)it.next());
      if (it.hasNext())       sb.append(',');
    }
  }
  sb.append("\r\n{\r\n");
  set=new TreeSet();
  final Field[] fields=c.getFields();
  for (int i=0; i < fields.length; ++i) {
    if (!fields[i].getDeclaringClass().equals(c))     continue;
    final StringBuffer tmp=new StringBuffer();
    tmp.append(Modifier.toString(fields[i].getModifiers()));
    tmp.append(' ');
    tmp.append(fields[i].getType().getName());
    tmp.append(' ');
    tmp.append(fields[i].getName());
    tmp.append("\r\n");
    set.add(tmp.toString());
  }
  it=set.iterator();
  while (it.hasNext()) {
    sb.append((String)it.next());
  }
  set=new TreeSet();
  final Constructor[] constructors=c.getConstructors();
  for (  final Constructor constructor : constructors) {
    final StringBuffer tmp=new StringBuffer();
    tmp.append(Modifier.toString(constructor.getModifiers()));
    tmp.append(' ');
    tmp.append(c.getName());
    tmp.append(" (");
    final Class[] parameters=constructor.getParameterTypes();
    for (int j=0; j < parameters.length; ++j) {
      tmp.append(parameters[j].getName());
      if (j != parameters.length - 1)       tmp.append(',');
    }
    tmp.append(')');
    final Class[] exceptions=constructor.getExceptionTypes();
    if (exceptions != null && exceptions.length > 0) {
      tmp.append(" throws ");
      for (int j=0; j < exceptions.length; ++j) {
        tmp.append(exceptions[j].getName());
        if (j != exceptions.length - 1)         tmp.append(',');
      }
    }
    tmp.append("\r\n");
    set.add(tmp.toString());
  }
  it=set.iterator();
  while (it.hasNext()) {
    sb.append((String)it.next());
  }
  set=new TreeSet();
  final Method[] methods=c.getMethods();
  for (int i=0; i < methods.length; ++i) {
    final StringBuffer tmp=new StringBuffer();
    if (!methods[i].getDeclaringClass().equals(c))     continue;
    tmp.append(Modifier.toString(methods[i].getModifiers()));
    tmp.append(' ');
    tmp.append(methods[i].getReturnType().getName());
    tmp.append(' ');
    tmp.append(methods[i].getName());
    tmp.append(" (");
    final Class[] parameters=methods[i].getParameterTypes();
    for (int j=0; j < parameters.length; ++j) {
      tmp.append(parameters[j].getName());
      if (j != parameters.length - 1)       tmp.append(',');
    }
    tmp.append(')');
    final Class[] exceptions=methods[i].getExceptionTypes();
    if (exceptions != null && exceptions.length > 0) {
      tmp.append(" throws ");
      for (int j=0; j < exceptions.length; ++j) {
        tmp.append(exceptions[j].getName());
        if (j != exceptions.length - 1)         tmp.append(',');
      }
    }
    tmp.append("\r\n");
    set.add(tmp.toString());
  }
  it=set.iterator();
  while (it.hasNext()) {
    sb.append((String)it.next());
  }
  sb.append("}\r\n\r\n");
  return sb.toString();
}
