{
  while (true) {
    final Item it1=iter1.next(), it2=iter2.next();
    if (it1 == null || it2 == null)     return it1 == null && it2 == null;
    Type t1=it1.type, t2=it2.type;
    if (t1.isFunction() || t2.isFunction()) {
      if (t1.isMap() && t2.isMap()) {
        final Map map1=(Map)it1, map2=(Map)it2;
        if (!map1.deep(info,map2))         return false;
        continue;
      }
      FICMP.thrw(info,t1.isFunction() ? it1 : it2);
    }
    if (!t1.isNode() && !t2.isNode()) {
      if (!it1.equiv(info,it2))       return false;
      continue;
    }
    if (t1 != t2)     return false;
    ANode s1=(ANode)it1, s2=(ANode)it2;
    AxisIter ch1=s1.children(), ch2=s2.children();
    final Stack<AxisIter> stack=new Stack<AxisIter>();
    stack.push(ch1);
    stack.push(ch2);
    boolean skip=false;
    do {
      t1=s1 != null ? s1.type : null;
      t2=s2 != null ? s2.type : null;
      if (skip) {
        if (t1 == NodeType.COM || t1 == NodeType.PI) {
          s1=ch1.next();
          continue;
        }
        if (t2 == NodeType.COM || t2 == NodeType.PI) {
          s2=ch2.next();
          continue;
        }
      }
      if (s1 == null || s2 == null) {
        if (s1 != s2)         return false;
        ch2=stack.pop();
        ch1=stack.pop();
      }
 else {
        if (t1 != t2)         return false;
        QNm n1=s1.qname(), n2=s2.qname();
        if (n1 != null && (!n1.eq(n2) || flags.contains(Flag.NAMESPACES) && !eq(n1.prefix(),n2.prefix())))         return false;
        if (t1 == NodeType.TXT || t1 == NodeType.ATT || t1 == NodeType.COM || t1 == NodeType.PI) {
          if (!eq(s1.string(),s2.string()))           return false;
        }
 else         if (t1 == NodeType.ELM) {
          if (s1.attributes().value().size() != s2.attributes().value().size())           return false;
          final AxisIter ai1=s1.attributes();
          LOOP:           for (ANode a1; (a1=ai1.next()) != null; ) {
            n1=a1.qname();
            final AxisIter ai2=s2.attributes();
            for (ANode a2; (a2=ai2.next()) != null; ) {
              n2=a2.qname();
              if (!n1.eq(n2))               continue;
              if (flags.contains(Flag.NAMESPACES) && !eq(n1.prefix(),n2.prefix()) || !eq(a1.string(),a2.string()))               return false;
              continue LOOP;
            }
            return false;
          }
          if (flags.contains(Flag.NAMESPACES)) {
            final Atts ns1=s1.namespaces();
            final Atts ns2=s2.namespaces();
            if (ns1.size() != ns2.size())             return false;
            LOOP:             for (int i1=0; i1 < ns1.size(); i1++) {
              for (int i2=0; i2 < ns2.size(); i2++) {
                if (!eq(ns1.name(i1),ns2.name(i2)))                 continue;
                if (!eq(ns1.string(i1),ns2.string(i2)))                 return false;
                continue LOOP;
              }
              return false;
            }
          }
          stack.push(ch1);
          stack.push(ch2);
          ch1=s1.children();
          ch2=s2.children();
        }
      }
      s1=ch1.next();
      s2=ch2.next();
      skip=!flags.contains(Flag.ALLNODES);
    }
 while (!stack.isEmpty());
  }
}
