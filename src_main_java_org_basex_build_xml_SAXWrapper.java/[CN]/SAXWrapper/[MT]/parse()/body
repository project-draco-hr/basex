{
  final InputSource is=wrap(saxs.getInputSource());
  final String in=saxs.getSystemId() == null ? DOTS : saxs.getSystemId();
  try {
    XMLReader r=saxs.getXMLReader();
    if (r == null) {
      final SAXParserFactory f=SAXParserFactory.newInstance();
      f.setFeature(EXTDTD,prop.is(Prop.DTD));
      f.setFeature("http://xml.org/sax/features/use-entity-resolver2",false);
      f.setNamespaceAware(true);
      f.setValidating(false);
      f.setXIncludeAware(true);
      r=f.newSAXParser().getXMLReader();
    }
    saxh=new SAXHandler(builder,prop.is(Prop.CHOP),prop.is(Prop.STRIPNS));
    final String cat=prop.get(Prop.CATFILE);
    if (!cat.isEmpty())     CatalogWrapper.set(r,cat);
    r.setDTDHandler(saxh);
    r.setContentHandler(saxh);
    r.setProperty(LEXHANDLER,saxh);
    r.setErrorHandler(saxh);
    if (is != null)     r.parse(is);
 else     r.parse(saxs.getSystemId());
  }
 catch (  final SAXParseException ex) {
    final String msg=Util.info(SCANPOS_X_X,in,ex.getLineNumber(),ex.getColumnNumber()) + COLS + ex.getMessage();
    final IOException ioe=new IOException(msg);
    ioe.setStackTrace(ex.getStackTrace());
    throw ioe;
  }
catch (  final ProgressException ex) {
    throw ex;
  }
catch (  final Exception ex) {
    String msg=ex.getMessage();
    if (in != null)     msg='"' + in + '"'+ COLS+ msg;
    final IOException ioe=new IOException(msg);
    ioe.setStackTrace(ex.getStackTrace());
    throw ioe;
  }
 finally {
    if (is == null)     return;
    try {
      final Reader r=is.getCharacterStream();
      if (r != null)       r.close();
      final InputStream ist=is.getByteStream();
      if (ist != null)       ist.close();
    }
 catch (    final IOException ex) {
      Util.debug(ex);
    }
  }
}
