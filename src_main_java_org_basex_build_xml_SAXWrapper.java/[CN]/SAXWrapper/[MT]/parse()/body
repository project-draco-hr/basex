{
  final InputSource is=wrap(src.getInputSource());
  final String input=src.getSystemId() == null ? "..." : src.getSystemId();
  try {
    XMLReader r=src.getXMLReader();
    if (r == null) {
      final SAXParserFactory f=SAXParserFactory.newInstance();
      f.setNamespaceAware(true);
      f.setValidating(false);
      r=f.newSAXParser().getXMLReader();
    }
    sax=new SAXHandler(builder);
    final String cat=prop.get(Prop.CATFILE);
    if (!cat.isEmpty())     CatalogResolverWrapper.set(r,cat);
    r.setDTDHandler(sax);
    r.setContentHandler(sax);
    r.setProperty("http://xml.org/sax/properties/lexical-handler",sax);
    r.setErrorHandler(sax);
    if (is != null)     r.parse(is);
 else     r.parse(src.getSystemId());
  }
 catch (  final SAXParseException ex) {
    final String msg=Util.info(SCANPOS,input,ex.getLineNumber(),ex.getColumnNumber()) + ": " + ex.getMessage();
    final IOException ioe=new IOException(msg);
    ioe.setStackTrace(ex.getStackTrace());
    throw ioe;
  }
catch (  final ProgressException ex) {
    throw ex;
  }
catch (  final Exception ex) {
    String msg=ex.getMessage();
    if (input != null)     msg="\"" + input + "\": "+ msg;
    final IOException ioe=new IOException(msg);
    ioe.setStackTrace(ex.getStackTrace());
    throw ioe;
  }
 finally {
    try {
      final InputStream in=is.getByteStream();
      if (in != null)       in.close();
      final Reader r=is.getCharacterStream();
      if (r != null)       r.close();
    }
 catch (    final IOException ex) {
      Util.debug(ex);
    }
  }
}
