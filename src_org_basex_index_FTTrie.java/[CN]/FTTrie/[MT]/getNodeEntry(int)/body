{
  int sp=inS.readInt(id * 4L);
  int ep=inS.readInt((id + 1) * 4L);
  final int[] ne=new int[(int)(ep - sp - 5L)];
  int c=0;
  ne[c++]=inN.readBytes(sp,sp + 1L)[0];
  sp+=1L;
  for (int j=0; j < ne[0]; j++)   ne[c++]=inN.readBytes(sp + 1L * j,sp + 1L * j + 1L)[0];
  sp+=ne[0];
  if (sp + 9L < ep) {
    while (sp < ep - 9L) {
      ne[c++]=inN.readInt(sp);
      sp+=4L;
      ne[c++]=inN.readBytes(sp,sp + 1L)[0];
      sp+=1L;
    }
  }
  ne[c++]=inN.readInt(ep - 9L);
  did=inN.read5(ep - 5L);
  final int[] r=new int[c];
  System.arraycopy(ne,0,r,0,c);
  return r;
}
