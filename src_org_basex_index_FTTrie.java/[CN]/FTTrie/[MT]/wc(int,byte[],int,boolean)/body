{
  final byte[] vsn=sn;
  byte[] aw=null;
  byte[] bw=null;
  final int currentLength=0;
  int resultNode;
  IndexArrayIterator d=IndexArrayIterator.EMP;
  if (posw > 0) {
    bw=new byte[posw];
    System.arraycopy(vsn,0,bw,0,posw);
    resultNode=wc(cn,bw);
    if (resultNode == -1)     return IndexArrayIterator.EMP;
  }
 else {
    resultNode=0;
  }
  final byte wildcard=posw + 1 >= vsn.length ? (byte)'.' : vsn[posw + 1];
  if (wildcard == '?') {
    byte[] sc=new byte[vsn.length - 2 - currentLength];
    if (bw != null) {
      System.arraycopy(bw,0,sc,0,bw.length);
    }
    if (bw == null) {
      System.arraycopy(vsn,posw + 2,sc,0,sc.length);
    }
 else {
      System.arraycopy(vsn,posw + 2,sc,bw.length,sc.length - bw.length);
    }
    d=get(0,sc);
    sc=new byte[vsn.length - 1];
    if (bw != null) {
      System.arraycopy(bw,0,sc,0,bw.length);
      sc[bw.length]='.';
      System.arraycopy(vsn,posw + 2,sc,bw.length + 1,sc.length - bw.length - 1);
    }
 else {
      sc[0]='.';
      System.arraycopy(vsn,posw + 2,sc,1,sc.length - 1);
    }
    d=IndexArrayIterator.merge(wc(0,sc,posw,false),d);
    return d;
  }
  if (wildcard == '*') {
    if (!(posw == 0 && vsn.length == 2)) {
      final byte[] searchChar=new byte[vsn.length - 2 - currentLength];
      if (bw != null) {
        System.arraycopy(bw,0,searchChar,0,bw.length);
      }
      if (bw == null) {
        aw=new byte[searchChar.length];
        System.arraycopy(vsn,posw + 2,searchChar,0,searchChar.length);
        System.arraycopy(vsn,posw + 2,aw,0,searchChar.length);
      }
 else {
        aw=new byte[searchChar.length - bw.length];
        System.arraycopy(vsn,posw + 2,searchChar,bw.length,searchChar.length - bw.length);
        System.arraycopy(vsn,posw + 2,aw,0,searchChar.length - bw.length);
      }
      d=get(0,searchChar);
      if (bw != null && counter[1] != bw.length)       return d;
    }
    idata=IndexArrayIterator.EMP;
    wc(resultNode,aw,false,counter[0],0);
    return IndexArrayIterator.merge(d,idata);
  }
  if (wildcard == '+') {
    final int[] rne=entry(resultNode);
    final byte[] nvsn=new byte[vsn.length + 1];
    int l=0;
    if (bw != null) {
      System.arraycopy(bw,0,nvsn,0,bw.length);
      l=bw.length;
    }
    if (0 < vsn.length - posw - 2) {
      System.arraycopy(vsn,posw + 2,nvsn,posw + 3,vsn.length - posw - 2);
    }
    nvsn[l + 1]='.';
    nvsn[l + 2]='*';
    IndexArrayIterator tmpres=IndexArrayIterator.EMP;
    if (rne[0] > counter[0] && resultNode > 0) {
      nvsn[l]=(byte)rne[counter[0] + 1];
      tmpres=wc(nvsn,l + 1);
    }
 else     if (rne[0] == counter[0] || resultNode == 0) {
      if (!hasNextNodes(rne))       return IndexArrayIterator.EMP;
      for (int t=rne[0] + 1; t < rne.length - 1; t+=2) {
        nvsn[l]=(byte)rne[t + 1];
        tmpres=IndexArrayIterator.merge(wc(nvsn,l + 1),tmpres);
      }
    }
    return tmpres;
  }
  final int[] rne=entry(resultNode);
  if (rne[0] > counter[0] && resultNode > 0) {
    vsn[posw]=(byte)rne[counter[0] + 1];
    final IndexArrayIterator resultData=get(0,vsn);
    if (resultData.size() != 0 && recCall) {
      valuesFound=new byte[]{(byte)rne[counter[0] + 1]};
    }
    return resultData;
  }
  if (rne[0] == counter[0] || resultNode == 0) {
    if (!hasNextNodes(rne))     return IndexArrayIterator.EMP;
    IndexArrayIterator tmpNode=IndexArrayIterator.EMP;
    aw=new byte[vsn.length - posw];
    System.arraycopy(vsn,posw + 1,aw,1,aw.length - 1);
    if (!recCall) {
      for (int t=rne[0] + 1; t < rne.length - 1; t+=2) {
        aw[0]=(byte)rne[t + 1];
        tmpNode=IndexArrayIterator.merge(get(rne[t],aw),tmpNode);
      }
      return tmpNode;
    }
    valuesFound=new byte[rne.length - 1 - rne[0]- 1];
    for (int t=rne[0] + 1; t < rne.length - 1; t+=2) {
      aw[0]=(byte)rne[t + 1];
      valuesFound[t - rne[0] - 1]=(byte)rne[t + 1];
      tmpNode=IndexArrayIterator.merge(get(rne[t],aw),tmpNode);
    }
  }
  return IndexArrayIterator.EMP;
}
