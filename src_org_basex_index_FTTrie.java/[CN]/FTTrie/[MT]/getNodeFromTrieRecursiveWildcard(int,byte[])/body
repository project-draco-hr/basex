{
  byte[] vsn=sn;
  final int[] cne=getNodeEntry(cn);
  if (cn != 0) {
    counter[1]+=cne[0];
    int i=0;
    while (i < vsn.length && i < cne[0] && cne[i + 1] == vsn[i]) {
      i++;
    }
    if (cne[0] == i) {
      if (vsn.length == i) {
        counter[0]=i;
        return cn;
      }
 else {
        final byte[] tmp=new byte[vsn.length - i];
        System.arraycopy(vsn,i,tmp,0,tmp.length);
        vsn=tmp;
        final int pos=getInsertingPosition(cne,vsn[0]);
        if (!found) {
          counter[0]=i;
          counter[1]=counter[1] - cne[0] + i;
          return cn;
        }
 else {
          return getNodeFromTrieRecursiveWildcard(cne[pos],vsn);
        }
      }
    }
 else {
      counter[0]=i;
      counter[1]=counter[1] - cne[0] + i;
      return cn;
    }
  }
 else {
    final int pos=getInsertingPosition(cne,vsn[0]);
    if (!found) {
      counter[0]=-1;
      counter[1]=-1;
      return -1;
    }
 else {
      return getNodeFromTrieRecursiveWildcard(cne[pos],vsn);
    }
  }
}
