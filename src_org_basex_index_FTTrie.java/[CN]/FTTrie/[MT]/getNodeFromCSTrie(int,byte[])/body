{
  byte[] vsn=sn;
  long ldid;
  final int[] ne=getNodeEntry(cn);
  if (cn != 0) {
    int i=0;
    while (i < vsn.length && i < ne[0] && Token.lc(ne[i + 1]) == vsn[i]) {
      i++;
    }
    if (ne[0] == i) {
      if (vsn.length == i) {
        ldid=did;
        return getDataFromDataArray(ne[ne.length - 1],ldid);
      }
 else {
        final byte[] tmp=new byte[vsn.length - i];
        System.arraycopy(vsn,i,tmp,0,tmp.length);
        vsn=tmp;
        final int p=getInsPosLinCSF(ne,vsn[0]);
        if (!found) {
          if (Token.lc(ne[p + 1]) != vsn[0])           return null;
 else           return getNodeFromCSTrie(ne[p],vsn);
        }
 else {
          int[][] d=getNodeFromCSTrie(ne[p],vsn);
          if (Token.lc(ne[p + 3]) == vsn[0]) {
            d=calculateFTOr(d,getNodeFromCSTrie(ne[p + 2],vsn));
          }
          return d;
        }
      }
    }
 else {
      return null;
    }
  }
 else {
    final int p=getInsPosLinCSF(ne,vsn[0]);
    if (!found) {
      if (Token.lc(ne[p + 1]) != vsn[0])       return null;
 else       return getNodeFromCSTrie(ne[p],vsn);
    }
 else {
      int[][] d=getNodeFromCSTrie(ne[p],vsn);
      if (Token.lc(ne[p + 3]) == vsn[0]) {
        d=calculateFTOr(d,getNodeFromCSTrie(ne[p + 2],vsn));
      }
      return d;
    }
  }
}
