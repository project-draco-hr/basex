{
  int[][] val1=values1;
  int[][] val2=values2;
  if (val1 == null || val1[0].length == 0)   return val2;
  if (val2 == null || val2[0].length == 0)   return val1;
  final int[][] maxResult=new int[2][val1[0].length + val2[0].length];
  final int max=Math.max(val1[0].length,val2[0].length);
  if (max == val1.length) {
    final int[][] tmp=val1;
    val1=val2;
    val2=tmp;
  }
  int i=0;
  int k=0;
  int c=0;
  while (val1[0].length > i) {
    if (k >= val2[0].length)     break;
    final int cmp=compareIntArrayEntry(val1[0][i],val1[1][i],val2[0][k],val2[1][k]);
    final boolean l=cmp > 0;
    maxResult[0][c]=l ? val2[0][k] : val1[0][i];
    maxResult[1][c]=l ? val2[1][k] : val1[1][i];
    if (cmp >= 0)     k++;
    if (cmp <= 0)     i++;
    c++;
  }
  if (c == 0)   return null;
  final boolean l=k == val2[0].length && i < val1[0].length;
  final int[] left=l ? val1[0] : val2[0];
  final int v=left.length - (l ? i : k);
  final int[][] result=new int[2][c + v];
  System.arraycopy(maxResult[0],0,result[0],0,c);
  System.arraycopy(maxResult[1],0,result[1],0,c);
  System.arraycopy(left,l ? i : k,result[0],c,v);
  System.arraycopy(left,l ? i : k,result[1],c,v);
  return result;
}
