{
  int[] vsn=searchNode;
  final int[] ne=getNodeEntry(cn);
  if (cn != 0) {
    int i=0;
    while (i < vsn.length && i < ne[0] && ne[i + 1] == vsn[i]) {
      i++;
      cl++;
    }
    if (ne[0] == i) {
      if (vsn.length == i) {
        if (hasNextNodes(ne)) {
          idNN[0][c]=cn;
          idNN[1][c]=0;
        }
        return cn;
      }
 else {
        final int[] tmp=new int[vsn.length - i];
        System.arraycopy(vsn,i,tmp,0,tmp.length);
        vsn=tmp;
        final int position=getInsertingPosition(ne,vsn[0]);
        if (!found) {
          return -1;
        }
 else {
          idNN[0][c]=cn;
          idNN[1][c]=position + 2;
          return getNodeIdsForRQ(ne[position],vsn,c + 1,idNN);
        }
      }
    }
 else {
      return -1;
    }
  }
 else {
    final int position=getInsertingPosition(ne,vsn[0]);
    if (!found) {
      return -1;
    }
 else {
      idNN[0][c]=cn;
      idNN[1][c]=position + 2;
      return getNodeIdsForRQ(ne[position],vsn,c + 1,idNN);
    }
  }
}
