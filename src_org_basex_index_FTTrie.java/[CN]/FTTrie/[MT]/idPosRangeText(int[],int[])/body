{
  final int[][] idNNF=new int[2][tokFrom.length + 1];
  final int[][] idNNT=new int[2][tokTo.length];
  int c=0;
  int b;
  IndexArrayIterator dt=null;
  int[] ne;
  long ldid;
  cl=0;
  b=getNodeIdsForRQ(0,tokTo,c,idNNF);
  if (b == -1) {
    int k=tokTo.length - 1;
    while (k > -1 && idNNT[0][k] == 0)     k--;
    if (k > -1)     b=idNNT[0][k];
 else     b=-1;
  }
 else {
    ne=getNodeEntry(b);
    ldid=did;
    dt=FTFuzzy.getData(ldid,ne[ne.length - 1],inD,data);
    dt=getAllNodes(b,b,dt);
  }
  c=0;
  cl=0;
  int id;
  id=getNodeIdsForRQ(0,tokFrom,c,idNNF);
  c=0;
  if (id > -1) {
    ne=getNodeEntry(id);
    ldid=did;
    final IndexArrayIterator tmp=FTFuzzy.getData(ldid,ne[ne.length - 1],inD,data);
    dt=IndexArrayIterator.merge(getAllNodes(id,b,tmp),dt);
  }
  for (int i=0; i < idNNF[0].length; i++) {
    if (i > 0 && idNNF[0][i] == 0 && idNNF[1][i] == 0)     break;
    ne=getNodeEntry(idNNF[0][i]);
    ldid=did;
    if (ne.length - 2 - ne[0] / 2 >= idNNF[1][i]) {
      for (int k=idNNF[1][i]; k < ne.length - 2 - ne[0]; k+=2)       dt=IndexArrayIterator.merge(getAllNodes(ne[k],b,dt),dt);
    }
  }
  return dt;
}
