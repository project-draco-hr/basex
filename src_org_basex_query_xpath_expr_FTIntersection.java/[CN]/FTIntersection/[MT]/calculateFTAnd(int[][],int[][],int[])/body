{
  int lastId=-1;
  int[][] values1=val1;
  int[][] values2=val2;
  if (values1 == null || values1[0].length == 0 || values2 == null || values2[0].length == 0) {
    return new Object[]{null,null};
  }
  int[] pn=new int[val1[0].length + val2[0].length + 1];
  if (p != null)   pn[0]=p[0] + 1;
 else   pn[0]=1;
  int min=Math.min(values1[0].length,values2[0].length);
  int[][] maxResult=new int[2][values1[0].length + values2[0].length];
  boolean co=false;
  if (min == values2[0].length && min != values1[0].length) {
    int[][] tmp=values2;
    values2=values1;
    values1=tmp;
    co=true;
  }
  int i=0;
  int k=0;
  int counter=0;
  int cmpResult;
  while (i < values1[0].length && k < values2[0].length) {
    cmpResult=Array.compareIntArrayEntry(values1[0][i],values1[1][i],values2[0][k],values2[1][k]);
    if (cmpResult == -1) {
      maxResult[0][counter]=values1[0][i];
      maxResult[1][counter]=values1[1][i];
      pn[counter + 1]=co ? pn[0] : p != null ? p[i + 1] : 0;
      lastId=values1[0][i];
      counter++;
      i++;
    }
 else     if (cmpResult == -2) {
      if (lastId != values1[0][i]) {
        i++;
      }
 else {
        while (i < values1[0].length && lastId == values1[0][i]) {
          maxResult[0][counter]=values1[0][i];
          maxResult[1][counter]=values1[1][i];
          pn[counter + 1]=co ? pn[0] : p != null ? p[i + 1] : 0;
          counter++;
          i++;
        }
      }
    }
 else     if (cmpResult == 2) {
      if (lastId != values2[0][k]) {
        k++;
      }
 else {
        while (k < values2[0].length && lastId == values2[0][k]) {
          maxResult[0][counter]=values2[0][k];
          maxResult[1][counter]=values2[1][k];
          pn[counter + 1]=!co ? pn[0] : p != null ? p[k + 1] : 0;
          counter++;
          k++;
        }
      }
    }
 else     if (cmpResult == 1) {
      maxResult[0][counter]=values2[0][k];
      maxResult[1][counter]=values2[1][k];
      pn[counter + 1]=!co ? pn[0] : p != null ? p[k + 1] : 0;
      lastId=values2[0][k];
      counter++;
      k++;
    }
 else {
      maxResult[0][counter]=values2[0][k];
      maxResult[1][counter]=values2[1][k];
      counter++;
      pn[counter + 1]=!co ? pn[0] : p != null ? p[k + 1] : 0;
      i++;
      k++;
    }
  }
  while (k > 0 && values1[0].length > i && values1[0][i] == values2[0][k - 1]) {
    maxResult[0][counter]=values1[0][i];
    maxResult[1][counter]=values1[1][i];
    pn[counter + 1]=co ? pn[0] : p != null ? p[i + 1] : 0;
    counter++;
    i++;
  }
  while (i > 0 && values2[0].length > k && values2[0][k] == values1[0][i - 1]) {
    maxResult[0][counter]=values2[0][k];
    maxResult[1][counter]=values2[1][k];
    pn[counter + 1]=!co ? pn[0] : p != null ? p[k + 1] : 0;
    counter++;
    k++;
  }
  if (counter == 0)   return new int[][]{};
  int[][] returnArray=new int[2][counter];
  System.arraycopy(maxResult[0],0,returnArray[0],0,counter);
  System.arraycopy(maxResult[1],0,returnArray[1],0,counter);
  int[] poi=new int[counter + 1];
  System.arraycopy(pn,0,poi,0,counter + 1);
  return new Object[]{returnArray,poi};
}
