{
switch (cmd) {
case CREATE:
switch (consume(CmdCreate.class,cmd)) {
case DATABASE:
case DB:
case XML:
      final String fn=path(cmd);
    final String db=name(null);
  return new CreateDB(fn,db == null ? fn : db);
case MAB:
case MAB2:
return new CreateMAB(path(cmd),name(null));
case FS:
return ctx.prop.is(Prop.FUSE) ? new CreateFS(path(cmd),name(cmd),path(cmd),path(cmd)) : new CreateFS(path(cmd),name(cmd));
case INDEX:
return new CreateIndex(consume(CmdIndex.class,cmd));
}
break;
case OPEN:
return new Open(name(cmd));
case INFO:
switch (consume(CmdInfo.class,cmd)) {
case NULL:
return new Info();
case DATABASE:
case DB:
return new InfoDB();
case INDEX:
return new InfoIndex();
case TABLE:
String arg1=number(null);
final String arg2=arg1 != null ? number(null) : null;
if (arg1 == null) arg1=xquery(null);
return new InfoTable(arg1,arg2);
}
break;
case CLOSE:
return new Close();
case LIST:
return new List();
case DROP:
switch (consume(CmdDrop.class,cmd)) {
case DATABASE:
case DB:
return new DropDB(name(cmd));
case INDEX:
return new DropIndex(consume(CmdIndex.class,cmd));
}
break;
case OPTIMIZE:
return new Optimize();
case EXPORT:
return new Export(path(cmd));
case XQUERY:
return new XQuery(xquery(cmd));
case XQUERYMV:
return new XQueryMV(number(cmd),number(cmd),xquery(cmd));
case RUN:
return new Run(path(cmd));
case FIND:
return new Find(string(cmd));
case CS:
return new Cs(xquery(null));
case COPY:
final String num=number(cmd);
final String xp1=xquery(cmd);
consume(',');
final String xp2=xquery(cmd);
return new Copy(num,xp1,xp2);
case DELETE:
return new Delete(xquery(cmd));
case INSERT:
final CmdUpdate ins=consume(CmdUpdate.class,cmd);
final String in=ins.toString();
switch (ins) {
case FRAGMENT:
return new Insert(in,xquery(cmd),number(cmd),xquery(cmd));
case ELEMENT:
case TEXT:
case COMMENT:
return new Insert(in,name(cmd),number(cmd),xquery(cmd));
case PI:
return new Insert(in,name(cmd),name(cmd),number(cmd),xquery(cmd));
case ATTRIBUTE:
return new Insert(in,name(cmd),name(cmd),xquery(cmd));
}
break;
case UPDATE:
final CmdUpdate upd=consume(CmdUpdate.class,cmd);
final String up=upd.toString();
switch (upd) {
case ELEMENT:
case TEXT:
case COMMENT:
return new Update(up,name(cmd),xquery(cmd));
case PI:
case ATTRIBUTE:
return new Update(up,name(cmd),name(cmd),xquery(cmd));
default :
}
break;
case SET:
final String opt=name(cmd).toUpperCase();
String val=string(null,false);
final Object type=ctx.prop.object(opt.toUpperCase());
if (type == null) help(null,cmd);
return new Set(opt,val);
case HELP:
String hc=name(null);
if (hc != null) {
qp=qm;
hc=consume(Cmd.class,cmd).toString();
}
return new Help(hc);
case PROMPT:
return new Prompt();
case GETRESULT:
return new GetResult(number(null));
case GETINFO:
return new GetInfo(number(null));
case EXIT:
case QUIT:
return new Exit();
default :
}
return null;
}
