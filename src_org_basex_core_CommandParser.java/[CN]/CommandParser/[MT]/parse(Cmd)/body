{
switch (cmd) {
case CREATE:
case C:
switch (consume(CmdCreate.class,cmd)) {
case DATABASE:
case DB:
      return new CreateDB(string(cmd),name(null));
case INDEX:
    return new CreateIndex(consume(CmdIndex.class,cmd));
case FS:
  return ctx.prop.is(Prop.FUSE) ? new CreateFS(string(cmd),name(cmd),string(cmd)) : new CreateFS(string(cmd),name(cmd));
case MAB:
return new CreateMAB(string(cmd),name(null));
}
break;
case OPEN:
case O:
return new Open(name(cmd));
case INFO:
case I:
switch (consume(CmdInfo.class,cmd)) {
case NULL:
return new Info();
case DATABASE:
case DB:
return new InfoDB();
case INDEX:
return new InfoIndex();
case TABLE:
String arg1=number(null);
final String arg2=arg1 != null ? number(null) : null;
if (arg1 == null) arg1=xquery(null);
return new InfoTable(arg1,arg2);
}
break;
case CLOSE:
return new Close();
case LIST:
return new List();
case DROP:
switch (consume(CmdDrop.class,cmd)) {
case DATABASE:
case DB:
return new DropDB(name(cmd));
case INDEX:
return new DropIndex(consume(CmdIndex.class,cmd));
}
break;
case OPTIMIZE:
return new Optimize();
case EXPORT:
return new Export(string(cmd));
case XQUERY:
case X:
return new XQuery(xquery(cmd));
case XQUERYMV:
return new XQueryMV(number(cmd),number(cmd),xquery(cmd));
case RUN:
return new Run(string(cmd));
case FIND:
return new Find(string(cmd));
case CS:
return new Cs(xquery(cmd));
case COPY:
return new Copy(xquery(cmd),target(INTO,cmd),pos(cmd));
case DELETE:
return new Delete(xquery(cmd));
case INSERT:
final CmdUpdate ins=consume(CmdUpdate.class,cmd);
switch (ins) {
case ELEMENT:
String val=name(cmd);
return new Insert(ins,target(INTO,cmd),pos(cmd),val);
case TEXT:
case COMMENT:
case FRAGMENT:
val=string(cmd);
return new Insert(ins,target(INTO,cmd),pos(cmd),val);
case PI:
val=name(cmd);
String val2=string(cmd);
return new Insert(ins,target(INTO,cmd),pos(cmd),val,val2);
case ATTRIBUTE:
val=name(cmd);
val2=string(cmd);
return new Insert(ins,target(INTO,cmd),val,val2);
}
break;
case UPDATE:
final CmdUpdate upd=consume(CmdUpdate.class,cmd);
switch (upd) {
case ELEMENT:
String val=name(cmd);
return new Update(upd,target(AT,cmd),val);
case TEXT:
case COMMENT:
val=string(cmd);
return new Update(upd,target(AT,cmd),val);
case PI:
case ATTRIBUTE:
val=name(cmd);
String val2=string(cmd);
return new Update(upd,target(AT,cmd),val,val2);
default :
}
break;
case SET:
final String opt=name(cmd);
String val=string(null);
final Object type=ctx.prop.object(opt.toUpperCase());
if (type == null) help(null,cmd);
return new Set(opt,val);
case HELP:
String hc=name(null);
if (hc != null) {
qp=qm;
hc=consume(Cmd.class,cmd).toString();
}
return new Help(hc);
case EXIT:
case QUIT:
case Q:
return new Exit();
case INTPROMPT:
return new IntPrompt();
case INTOUTPUT:
return new IntOutput();
case INTINFO:
return new IntInfo();
case INTSTOP:
return new IntStop();
case KILL:
return new Kill();
case SHOW:
final CmdShow show=consume(CmdShow.class,cmd);
switch (show) {
case DATABASES:
case SESSIONS:
return new Show(show);
default :
}
break;
default :
}
return null;
}
