{
  return new NodeIter(){
    final Nod[] items=new Nod[iter.length];
    @Override public Nod next() throws QueryException {
      for (int i=0; i != iter.length; ++i)       if (!next(i))       return null;
      for (int i=1; i != items.length; ++i) {
        final int d=items[0].diff(items[i]);
        if (d < 0) {
          if (!next(0))           return null;
          i=0;
        }
 else         if (d > 0) {
          if (!next(i--))           return null;
        }
      }
      return items[0];
    }
    private boolean next(    final int i) throws QueryException {
      final Item it=iter[i].next();
      if (it == null)       return false;
      if (!it.node())       Err.type(InterSect.this,Type.NOD,it);
      items[i]=(Nod)it;
      return true;
    }
  }
;
}
