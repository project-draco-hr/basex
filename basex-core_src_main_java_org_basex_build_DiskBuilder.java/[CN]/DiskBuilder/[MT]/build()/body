{
  final MetaData md=new MetaData(dbname,context);
  md.assign(parser);
  md.dirty=true;
  final Runtime rt=Runtime.getRuntime();
  int bs=(int)Math.min(md.filesize,Math.min(1 << 22,rt.maxMemory() - rt.freeMemory() >> 2));
  bs=Math.max(IO.BLOCKSIZE,bs - bs % IO.BLOCKSIZE);
  final StaticOptions sopts=context.soptions;
  DropDB.drop(dbname,sopts);
  sopts.dbpath(dbname).md();
  meta=md;
  elemNames=new Names(md);
  attrNames=new Names(md);
  try {
    tout=new DataOutput(new TableOutput(md,DATATBL));
    xout=new DataOutput(md.dbfile(DATATXT),bs);
    vout=new DataOutput(md.dbfile(DATAATV),bs);
    sout=new DataOutput(md.dbfile(DATATMP),bs);
    final Performance perf=Prop.debug ? new Performance() : null;
    Util.debug(tit() + DOTS);
    parse();
    if (Prop.debug)     Util.errln(" " + perf + " ("+ Performance.getMemory()+ ')');
  }
 catch (  final IOException ex) {
    try {
      close();
    }
 catch (    final IOException ignored) {
    }
    throw ex;
  }
  close();
  try (final DataInput in=new DataInput(md.dbfile(DATATMP))){
    final TableAccess ta=new TableDiskAccess(md,true);
    for (; spos < ssize; ++spos)     ta.write4(in.readNum(),8,in.readNum());
    ta.close();
  }
   md.dbfile(DATATMP).delete();
  return new DiskData(md,elemNames,attrNames,path,ns);
}
