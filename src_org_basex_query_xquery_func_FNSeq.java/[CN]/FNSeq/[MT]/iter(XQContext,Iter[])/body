{
  final Iter iter=arg[0];
  Item i;
switch (func) {
case INDEXOF:
    final Item it=arg[1].atomic(this,false);
  if (arg.length == 3)   checkColl(arg[2]);
return indexOf(iter,it);
case DISTINCT:
if (arg.length == 2) checkColl(arg[1]);
return distinctPipelined(iter);
case INSBEF:
final Iter sub=arg[2];
long r=Math.max(1,checkItr(arg[1]));
final SeqIter si=new SeqIter();
while ((i=iter.next()) != null) {
if (--r == 0) si.add(sub);
si.add(i.iter());
}
if (r > 0) si.add(sub);
return si;
case REVERSE:
if (iter instanceof RangeIter) {
((RangeIter)iter).reverse();
return iter;
}
final SeqIter sr=new SeqIter();
while ((i=iter.next()) != null) sr.insert(i,0);
return sr;
case REMOVE:
final long pos=checkItr(arg[1]);
return remove(iter,pos);
case SUBSEQ:
final long start=checkItr(arg[1]);
final long end=arg.length > 2 ? start + checkItr(arg[2]) : Long.MAX_VALUE;
return subseq(iter,start,end);
case DEEPEQ:
return Bln.get(deep(arg)).iter();
default :
throw new RuntimeException("Not defined: " + func);
}
}
