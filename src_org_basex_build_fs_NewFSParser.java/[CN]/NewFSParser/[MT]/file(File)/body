{
  curr=f;
  final long size=f.length();
  if (!singlemode) {
    final String name=f.getName();
    builder.startElem(FILE_NS,fsAtts(f));
    if ((prop.is(Prop.FSMETA) || prop.is(Prop.FSCONT)) && f.canRead() && f.isFile()) {
      if (prop.is(Prop.SPOTLIGHT)) {
        if (prop.is(Prop.FSMETA))         spotlight.parse(f);
        if (prop.is(Prop.FSCONT)) {
          try {
            final BufferedFileChannel fc=new BufferedFileChannel(f,buffer);
            try {
              fallbackParserInstance.readContent(fc,this);
            }
  finally {
              try {
                fc.close();
              }
 catch (              final IOException e) {
              }
            }
          }
 catch (          final IOException ex) {
            Main.debug("Failed to parse file: %",ex);
          }
        }
      }
 else       if (name.indexOf('.') != -1) {
        final int dot=name.lastIndexOf('.');
        final String suffix=name.substring(dot + 1).toLowerCase();
        if (size > 0) {
          AbstractParser parser=getParser(suffix);
          if (parser == null)           parser=getFallbackParser();
          if (parser != null) {
            try {
              final BufferedFileChannel fc=new BufferedFileChannel(f,buffer);
              try {
                lastContentOffset=0;
                lastContentSize=size;
                contentOpenedCounter=0;
                parse0(parser,fc);
              }
  finally {
                try {
                  fc.close();
                }
 catch (                final IOException e1) {
                }
              }
            }
 catch (            final Exception ex) {
              Main.debug("Failed to parse file (%): %",f.getAbsolutePath(),ex);
            }
          }
        }
      }
    }
    builder.endElem(FILE_NS);
  }
  sizeStack[lvl]+=size;
}
