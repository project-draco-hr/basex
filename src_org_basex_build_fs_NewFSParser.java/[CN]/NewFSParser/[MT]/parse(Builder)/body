{
  builder=build;
  builder.encoding(Prop.ENCODING);
  builder.meta.backing=mybackingpath;
  builder.meta.mount=mountpoint;
  final boolean fuse=prop.is(Prop.FUSE);
  if (fuse && !singlemode) {
    final File bs=new File(mybackingpath);
    if (!bs.mkdirs() && bs.exists())     throw new IOException(BACKINGEXISTS + mybackingpath);
  }
  builder.startDoc(token(io.name()));
  if (singlemode) {
    file(new File(io.path()).getCanonicalFile());
  }
 else {
    atts.reset();
    final byte[] mnt=fuse ? token(mountpoint) : NOTMOUNTED;
    final byte[] bck=fuse ? token(mybackingpath) : token(fsimportpath);
    atts.add(MOUNTPOINT,mnt);
    atts.add(BACKINGSTORE,bck);
    atts.add(SIZE,EMPTY);
    builder.startNS(FSPREF,FSURL);
    if (prop.is(Prop.FSMETA)) {
      builder.startNS(FSMETAPREF,FSMETAURL);
      builder.startNS(FSDCPREF,FSDCURL);
    }
    if (ADD_ATTS) {
      builder.startNS(FSXSIPREF,FSXSIURL);
    }
    int sizeAttId=builder.startElem(DEEPFS_NS,atts) + 3;
    for (    final File f : root ? File.listRoots() : new File[]{new File(fsimportpath).getCanonicalFile()}) {
      if (f.isHidden())       continue;
      importRootLength=f.getAbsolutePath().length();
      sizeStack[0]=0;
      parse(f);
      addFSElems(f,sizeStack[0]);
      addFSAtts(sizeAttId,f,sizeStack[0]);
    }
    builder.endElem(DEEPFS_NS);
  }
  builder.endDoc();
}
