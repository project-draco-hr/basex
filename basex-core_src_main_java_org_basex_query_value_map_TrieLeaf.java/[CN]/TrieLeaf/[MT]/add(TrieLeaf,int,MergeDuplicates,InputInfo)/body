{
  if (hash == o.hash) {
    if (!key.sameKey(o.key,ii))     return new TrieList(hash,key,value,o.key,o.value);
switch (merge) {
case USE_FIRST:
case UNSPECIFIED:
      return o;
case USE_LAST:
    return this;
case COMBINE:
  return new TrieLeaf(hash,key,ValueBuilder.concat(o.value,value));
default :
throw MERGE_DUPLICATE_X.get(ii,key);
}
}
final TrieNode[] ch=new TrieNode[KIDS];
final int k=key(hash,l), ok=key(o.hash,l), nu;
if (k == ok) {
ch[k]=add(o,l + 1,merge,ii);
nu=1 << k;
}
 else {
ch[k]=this;
ch[ok]=o;
nu=1 << k | 1 << ok;
}
return new TrieBranch(ch,nu,2);
}
