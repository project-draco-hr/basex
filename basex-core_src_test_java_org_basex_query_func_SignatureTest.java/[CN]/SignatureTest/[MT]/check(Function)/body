{
  final String desc=def.toString();
  final String name=desc.replaceAll("\\(.*","");
  final String[] names=def.names();
  assertTrue(def + Arrays.toString(names),names.length == (def.max == Integer.MAX_VALUE ? def.min : def.max));
  final Set<String> set=new HashSet<String>(Arrays.asList(names));
  assertEquals("Duplicate argument names: " + def,names.length,set.size());
  if (def.max == Integer.MAX_VALUE)   assertTrue(names[names.length - 1].matches(".*\\d+$"));
  for (int al=Math.max(def.min - 1,0); al <= def.max + 1; al++) {
    final boolean in=al >= def.min && al <= def.max;
    final StringBuilder qu=new StringBuilder(name + '(');
    int any=0;
    for (int a=0; a < al; a++) {
      if (a != 0)       qu.append(", ");
      if (in) {
        if (def.args[a].type == AtomType.STR) {
          qu.append('1');
        }
 else {
          qu.append("'X'");
          if (SeqType.STR.instanceOf(def.args[a]))           any++;
        }
      }
 else {
        qu.append("'x'");
      }
    }
    if ((def.min > 0 || al != 0) && (any == 0 || any != al)) {
      final String query=qu.append(')').toString();
      if (in)       error(query,Err.INVCAST,Err.NONUMBER,Err.INVFUNCITEM,Err.STRNODTYPE,Err.ELMMAPTYPE,Err.BINARYTYPE,Err.STRBINTYPE,Err.WHICHRES,Err.BXDB_NODB,Err.BXDB_INDEX);
 else       error(query,Err.FUNCARGSG,Err.FUNCARGPL);
    }
  }
}
