{
  final boolean grp=ctx.grouping;
  ctx.grouping=group != null;
  final int vs=ctx.vars.size();
  for (  final ForLet f : fl) {
    final boolean fast=ctx.ftfast;
    ctx.ftfast&=f.simple();
    f.comp(ctx);
    ctx.ftfast=fast;
  }
  boolean empty=false;
  if (where != null) {
    where=checkUp(where,ctx).comp(ctx).compEbv(ctx);
    if (where.value()) {
      empty=!where.ebv(ctx,input).bool(input);
      if (!empty) {
        ctx.compInfo(OPTREMOVE,desc(),where);
        where=null;
      }
    }
  }
  if (group != null)   group.comp(ctx);
  if (order != null)   order.comp(ctx);
  ret=ret.comp(ctx);
  ctx.vars.reset(vs);
  ctx.grouping=grp;
  if (empty) {
    ctx.compInfo(OPTREMOVE,desc(),where);
    return Empty.SEQ;
  }
  for (int f=0; f != fl.length; ++f) {
    if (fl[f].var.expr() != null) {
      ctx.compInfo(OPTFLWOR);
      return Empty.SEQ;
    }
  }
  type=SeqType.get(ret.type().type,SeqType.Occ.ZM);
  return this;
}
