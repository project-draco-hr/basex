{
  int ix=get(key);
  if (ix < 0) {
    ix=-(ix + 1);
    for (int i=size; i > ix; --i)     idxr.write5(i * 5L,idxr.read5((i - 1) * 5L));
    idxr.write5(ix * 5L,idxl.appendNums(new int[]{id}));
    ctext.add(ix,key);
    ++size;
  }
 else {
    final long pos=idxr.read5(ix * 5L);
    final int num=idxl.readNum(pos);
    final int[] ids=new int[num + 1];
    boolean notadded=true;
    int cid=0;
    for (int i=0, j=-1; i < num; ++i) {
      int v=idxl.readNum();
      if (notadded && id < cid + v) {
        ids[++j]=id - cid;
        notadded=false;
        v-=id - cid;
        cid=id;
      }
      ids[++j]=v;
      cid+=v;
    }
    if (notadded)     ids[ids.length - 1]=id - cid;
    final long newpos=idxl.appendNums(ids);
    idxr.write5(ix * 5L,newpos);
    final int cacheid=cache.id(key);
    if (cacheid > 0)     cache.update(cacheid,ids.length,newpos + Num.length(ids.length));
  }
}
