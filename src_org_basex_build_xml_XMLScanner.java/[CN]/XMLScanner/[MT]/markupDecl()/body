{
  if (consume(ENT)) {
    checkS();
    if (consume('%')) {
      checkS();
      final byte[] key=name(true);
      checkS();
      byte[] val=entityValue(true);
      if (val == null) {
        val=externalID(true,false);
        if (val == null)         error(INVEND);
      }
      s();
      pents.add(key,val);
    }
 else {
      final byte[] key=name(true);
      checkS();
      byte[] val=entityValue(false);
      if (val == null) {
        val=externalID(true,false);
        if (val == null)         error(INVEND);
        if (s()) {
          check(ND);
          checkS();
          name(true);
        }
      }
      s();
      ents.add(key,val);
    }
    check('>');
    pe=true;
  }
 else   if (consume(ELEM)) {
    checkS();
    name(true);
    checkS();
    pe=true;
    if (!consume(EMP) && !consume(ANY)) {
      if (consume('(')) {
        s();
        if (consume(PC)) {
          s();
          boolean alt=false;
          while (consume('|')) {
            s();
            name(true);
            s();
            alt=true;
          }
          check(')');
          if (!consume('*') && alt)           error(INVEND);
        }
 else {
          cp();
          check(')');
          occ();
        }
      }
 else {
        error(INVEND);
      }
    }
    s();
    check('>');
  }
 else   if (consume(ATTL)) {
    pe=true;
    checkS();
    name(true);
    s();
    while (name(false) != null) {
      checkS();
      if (!consume(CD) && !consume(IDRS) && !consume(IDR)&& !consume(ID)&& !consume(ENTS)&& !consume(ENT1)&& !consume(NMTS)&& !consume(NMT)) {
        if (consume(NOT)) {
          checkS();
          check('(');
          s();
          name(true);
          s();
          while (consume('|')) {
            s();
            name(true);
            s();
          }
          check(')');
        }
 else {
          check('(');
          s();
          nmtoken();
          s();
          while (consume('|')) {
            s();
            nmtoken();
            s();
          }
          check(')');
        }
      }
      pe=true;
      checkS();
      if (!consume(REQ) && !consume(IMP)) {
        if (consume(FIX))         checkS();
        quote=qu();
        attValue(consume());
      }
      s();
    }
    check('>');
  }
 else   if (consume(NOTA)) {
    checkS();
    name(true);
    s();
    externalID(false,false);
    s();
    check('>');
  }
 else   if (consume(COMS)) {
    comment();
  }
 else   if (consume(XML)) {
    pi();
  }
 else {
    return false;
  }
  s();
  pe=false;
  return true;
}
