{
  byte[] vsn=sn;
  byte[] cne=crne;
  if (crne == null)   cne=getNodeEntry(cn);
  int[] cde;
  if (cn != 0) {
    int i=0;
    while (i < vsn.length && i < cne[0] && cne[i + 1] == vsn[i]) {
      i++;
    }
    if (cne[0] == i) {
      if (vsn.length == i) {
        cde=getDataEntry(cn);
        if (c >= d + p + r) {
          int[][] ld=null;
          byte[] nne;
          ld=getDataFromDataArray(cne,cde);
          int[] nn=getNextNodes(cne);
          if (nn != null) {
            for (int t=0; t < nn.length; t++) {
              nne=getNodeEntry(nn[t]);
              ld=FTUnion.calculateFTOr(ld,getNodeFuzzy(nn[t],nne,new byte[]{nne[1]},d,p + 1,r,c));
            }
          }
          return ld;
        }
 else         return null;
      }
 else {
        int[][] ld=null;
        final byte[] tmp=new byte[vsn.length - i];
        System.arraycopy(vsn,i,tmp,0,tmp.length);
        vsn=tmp;
        if (cne[cne[0] + 1] > 0) {
          return null;
        }
        final int[] nn=getNextNodes(cne);
        byte[] b;
        byte[] ne;
        for (int k=0; k < nn.length; k++) {
          if (c > d + p + r) {
            ne=getNodeEntry(nn[k]);
            if (ne[1] == vsn[0]) {
              b=new byte[vsn.length];
              System.arraycopy(vsn,0,b,0,vsn.length);
              ld=FTUnion.calculateFTOr(ld,getNodeFuzzy(nn[k],ne,b,d,p,r,c));
            }
            b=new byte[vsn.length + 1];
            b[0]=ne[1];
            System.arraycopy(vsn,0,b,1,vsn.length);
            ld=FTUnion.calculateFTOr(ld,getNodeFuzzy(nn[k],ne,b,d,p + 1,r,c));
            if (vsn.length > 0) {
              b=new byte[vsn.length - 1];
              System.arraycopy(vsn,1,b,0,b.length);
              ld=FTUnion.calculateFTOr(ld,getNodeFuzzy(nn[k],ne,b,d + 1,p,r,c));
              b=new byte[vsn.length];
              System.arraycopy(vsn,1,b,1,vsn.length - 1);
              b[0]=ne[1];
              ld=FTUnion.calculateFTOr(ld,getNodeFuzzy(nn[k],ne,b,d,p,r + 1,c));
            }
          }
 else {
            return ld;
          }
        }
        return ld;
      }
    }
 else {
      int[][] ld=null;
      byte[] b;
      if (c > d + p + r) {
        b=new byte[vsn.length + 1];
        System.arraycopy(vsn,0,b,0,i);
        b[i]=cne[i + 1];
        System.arraycopy(vsn,i,b,i + 1,vsn.length - i);
        ld=FTUnion.calculateFTOr(ld,getNodeFuzzy(cn,cne,b,d,p + 1,r,c));
        if (vsn.length > 0 && i < vsn.length) {
          b=new byte[vsn.length];
          System.arraycopy(vsn,0,b,0,vsn.length);
          b[i]=cne[i + 1];
          ld=FTUnion.calculateFTOr(ld,getNodeFuzzy(cn,cne,b,d,p,r + 1,c));
          if (vsn.length > 1) {
            b=new byte[vsn.length - 1];
            System.arraycopy(vsn,0,b,0,i);
            System.arraycopy(vsn,i + 1,b,i,vsn.length - i - 1);
            ld=FTUnion.calculateFTOr(ld,getNodeFuzzy(cn,cne,b,d + 1,p,r,c));
          }
        }
      }
 else {
        return ld;
      }
      return ld;
    }
  }
 else {
    if (cne[cne[0] + 1] > 0) {
      return null;
    }
    final int[] nn=getNextNodes(cne);
    byte[] ne;
    int[][] ld=null;
    byte[] b;
    for (int k=0; k < nn.length; k++) {
      if (c > d + p + r) {
        ne=getNodeEntry(nn[k]);
        if (ne[1] == vsn[0]) {
          b=new byte[vsn.length];
          System.arraycopy(vsn,0,b,0,vsn.length);
          ld=FTUnion.calculateFTOr(ld,getNodeFuzzy(nn[k],ne,b,d,p,r,c));
        }
        b=new byte[vsn.length + 1];
        b[0]=ne[1];
        System.arraycopy(vsn,0,b,1,vsn.length);
        ld=FTUnion.calculateFTOr(ld,getNodeFuzzy(nn[k],ne,b,d,p + 1,r,c));
        if (vsn.length > 0) {
          b=new byte[vsn.length - 1];
          System.arraycopy(vsn,1,b,0,b.length);
          ld=FTUnion.calculateFTOr(ld,getNodeFuzzy(nn[k],ne,b,d + 1,p,r,c));
          b=new byte[vsn.length];
          System.arraycopy(vsn,1,b,1,vsn.length - 1);
          b[0]=ne[1];
          ld=FTUnion.calculateFTOr(ld,getNodeFuzzy(nn[k],ne,b,d,p,r + 1,c));
        }
      }
 else {
        return ld;
      }
    }
    return ld;
  }
}
