{
  byte[] vsn=sn;
  if (cn != 0) {
    int i=0;
    while (i < vsn.length && i < ne[0] && ne[i + 1] == vsn[i]) {
      i++;
    }
    if (ne[0] == i) {
      if (vsn.length == i) {
        return cn;
      }
 else {
        byte[] tmp=new byte[vsn.length - i];
        System.arraycopy(vsn,i,tmp,0,tmp.length);
        vsn=tmp;
        int pos=getInsertingPositionLinear(vsn[0],ne);
        if (!found) {
          return -1;
        }
 else {
          int id=getIdOnDataArray(ne);
          id=getDataEntry(id,pos);
          return getNodeIdFromTrieRecursive(id,getNodeEntry(id),vsn);
        }
      }
    }
 else {
      return -1;
    }
  }
 else {
    int pos=getInsertingPositionLinear(vsn[0],ne);
    if (!found) {
      return -1;
    }
 else {
      int id=getIdOnDataArray(ne);
      id=getDataEntry(id,pos);
      return getNodeIdFromTrieRecursive(id,getNodeEntry(id),vsn);
    }
  }
}
