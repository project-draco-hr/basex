{
  int j=pointerEnding;
  int i=pointerNode;
  boolean last=lastFound;
  final byte[] ne=getNodeEntry(node);
  final int[] curDataEntry=getDataEntry(node);
  if (ending == null || ending.length == 0) {
    adata=ftOR(adata,getDataFromDataArray(ne,curDataEntry));
    final int[] nextNodes=getNextNodes(ne);
    if (nextNodes != null) {
      for (      final int n : nextNodes) {
        astericsWildCardTraversing(n,null,last,0,0);
      }
    }
    return;
  }
  if (ne != null) {
    while (!last && i < ne[0] + 1 && ne[i] != ending[j])     i++;
    while (i + ending.length < ne[0] + 1 && ne[i + 1] == ending[0])     i++;
    countSkippedChars=countSkippedChars + i - pointerNode - 1;
    while (i < ne[0] + 1 && j < ending.length && ne[i] == ending[j]) {
      i++;
      j++;
      last=true;
    }
  }
 else {
    countSkippedChars=0;
    return;
  }
  if (node == 0 || j == ending.length && i < ne[0] + 1) {
    if (ne[ne[0] + 1] > 0) {
      countSkippedChars=0;
      return;
    }
    final int[] nextNodes=getNextNodes(ne);
    for (    final int n : nextNodes) {
      astericsWildCardTraversing(n,ending,false,1,0);
    }
    countSkippedChars=0;
    return;
  }
 else   if (j == ending.length && i == ne[0] + 1) {
    final int[][] d=getDataFromDataArray(ne,curDataEntry);
    if (d != null) {
      adata=ftOR(adata,d);
    }
    countSkippedChars=0;
    final int[] nextNodes=getNextNodes(ne);
    if (nextNodes != null) {
      for (      final int n : nextNodes) {
        if (j == 1) {
          astericsWildCardTraversing(n,ending,false,0,0);
        }
        astericsWildCardTraversing(n,ending,last,0,j);
      }
    }
    return;
  }
 else   if (j < ending.length && i < ne[0] + 1) {
    if (ne[ne[0] + 1] > 0) {
      countSkippedChars=0;
      return;
    }
    astericsWildCardTraversing(node,ending,false,i + 1,0);
    return;
  }
 else   if (j < ending.length && i == ne[0] + 1) {
    if (ne[ne[0] + 1] > 0) {
      countSkippedChars=0;
      return;
    }
    final int[] nextNodes=getNextNodes(ne);
    for (    final int n : nextNodes) {
      if (j == 1) {
        astericsWildCardTraversing(n,ending,last,1,0);
      }
      astericsWildCardTraversing(n,ending,last,1,j);
    }
  }
}
