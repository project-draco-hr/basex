{
  final byte[] valueSearchNode=searchNode;
  byte[] afterWildcard=null;
  byte[] beforeWildcard=null;
  final int currentLength=0;
  int resultNode;
  int[][] d=null;
  if (posWildcard > 0) {
    beforeWildcard=new byte[posWildcard];
    System.arraycopy(valueSearchNode,0,beforeWildcard,0,posWildcard);
    resultNode=getNodeFromTrieRecursiveWildcard(currentCompressedTrieNode,beforeWildcard);
    if (resultNode == -1) {
      return null;
    }
  }
 else {
    resultNode=0;
  }
  byte wildcard;
  if (posWildcard + 1 >= valueSearchNode.length) {
    wildcard='.';
  }
 else {
    wildcard=valueSearchNode[posWildcard + 1];
  }
  if (wildcard == '?') {
    byte[] searchChar=new byte[valueSearchNode.length - 2 - currentLength];
    if (beforeWildcard != null) {
      System.arraycopy(beforeWildcard,0,searchChar,0,beforeWildcard.length);
    }
    if (beforeWildcard == null) {
      System.arraycopy(valueSearchNode,posWildcard + 2,searchChar,0,searchChar.length);
    }
 else {
      System.arraycopy(valueSearchNode,posWildcard + 2,searchChar,beforeWildcard.length,searchChar.length - beforeWildcard.length);
    }
    d=getNodeFromTrieRecursive(0,searchChar);
    searchChar=new byte[valueSearchNode.length - 1];
    if (beforeWildcard != null) {
      System.arraycopy(beforeWildcard,0,searchChar,0,beforeWildcard.length);
      searchChar[beforeWildcard.length]='.';
      System.arraycopy(valueSearchNode,posWildcard + 2,searchChar,beforeWildcard.length + 1,searchChar.length - beforeWildcard.length - 1);
    }
 else {
      searchChar[0]='.';
      System.arraycopy(valueSearchNode,posWildcard + 2,searchChar,1,searchChar.length - 1);
    }
    d=CTArrayX.ftOR(d,getNodeFromTrieWithWildCard(0,searchChar,posWildcard,false));
    return d;
  }
 else   if (wildcard == '*') {
    if (!(posWildcard == 0 && valueSearchNode.length == 2)) {
      final byte[] searchChar=new byte[valueSearchNode.length - 2 - currentLength];
      if (beforeWildcard != null) {
        System.arraycopy(beforeWildcard,0,searchChar,0,beforeWildcard.length);
      }
      if (beforeWildcard == null) {
        afterWildcard=new byte[searchChar.length];
        System.arraycopy(valueSearchNode,posWildcard + 2,searchChar,0,searchChar.length);
        System.arraycopy(valueSearchNode,posWildcard + 2,afterWildcard,0,searchChar.length);
      }
 else {
        afterWildcard=new byte[searchChar.length - beforeWildcard.length];
        System.arraycopy(valueSearchNode,posWildcard + 2,searchChar,beforeWildcard.length,searchChar.length - beforeWildcard.length);
        System.arraycopy(valueSearchNode,posWildcard + 2,afterWildcard,0,searchChar.length - beforeWildcard.length);
      }
      d=getNodeFromTrieRecursive(0,searchChar);
      if (beforeWildcard != null && counter[1] != beforeWildcard.length) {
        return d;
      }
    }
    astericsWildCardData=null;
    astericsWildCardTraversing(resultNode,afterWildcard,false,counter[0],0);
    return CTArrayX.ftOR(d,astericsWildCardData);
  }
 else   if (wildcard == '+') {
    final byte[] searchChar=new byte[valueSearchNode.length - 1 - currentLength];
    if (beforeWildcard != null) {
      System.arraycopy(beforeWildcard,0,searchChar,0,beforeWildcard.length);
    }
    searchChar[posWildcard]='.';
    if (beforeWildcard == null) {
      if (!(posWildcard == 0 && valueSearchNode.length == 2)) {
        afterWildcard=new byte[searchChar.length];
        System.arraycopy(valueSearchNode,posWildcard + 2,searchChar,1,searchChar.length);
        System.arraycopy(valueSearchNode,posWildcard + 2,afterWildcard,1,searchChar.length);
      }
    }
 else {
      afterWildcard=new byte[searchChar.length - beforeWildcard.length - 1];
      System.arraycopy(valueSearchNode,posWildcard + 2,searchChar,beforeWildcard.length + 1,searchChar.length - beforeWildcard.length - 1);
      System.arraycopy(valueSearchNode,posWildcard + 2,afterWildcard,0,searchChar.length - beforeWildcard.length - 1);
    }
    d=getNodeFromTrieWithWildCard(0,searchChar,posWildcard,true);
    if (d == null) {
      return null;
    }
    byte[] newValue;
    if (afterWildcard != null) {
      newValue=new byte[beforeWildcard.length + 3 + afterWildcard.length];
      System.arraycopy(afterWildcard,0,newValue,beforeWildcard.length + 3,afterWildcard.length);
    }
 else {
      if (beforeWildcard == null)       newValue=new byte[3];
 else       newValue=new byte[beforeWildcard.length + 3];
    }
    newValue[beforeWildcard.length + 1]='.';
    newValue[beforeWildcard.length + 2]='*';
    System.arraycopy(beforeWildcard,0,newValue,0,beforeWildcard.length);
    for (    final byte v : valuesFound) {
      if (v != 0) {
        newValue[beforeWildcard.length]=v;
        d=CTArrayX.ftOR(d,getNodeFromTrieWithWildCard(newValue,beforeWildcard.length + 1));
      }
    }
    return d;
  }
 else {
    final byte[] resNodeEntry=getNodeEntry(resultNode);
    if (resNodeEntry[0] > counter[0]) {
      valueSearchNode[posWildcard]=resNodeEntry[counter[0] + 1];
      final int[][] resultData=getNodeFromTrieRecursive(0,valueSearchNode);
      if (resultData != null && recCall) {
        valuesFound=new byte[]{resNodeEntry[counter[0] + 1]};
      }
      return resultData;
    }
 else     if (resNodeEntry[0] == counter[0]) {
      if (resNodeEntry[resNodeEntry[0] + 1] > 0) {
        return null;
      }
      int[][] tmpNode=null;
      afterWildcard=new byte[valueSearchNode.length - posWildcard];
      System.arraycopy(valueSearchNode,posWildcard + 1,afterWildcard,1,afterWildcard.length - 1);
      final int[] nextNodes=getNextNodes(resNodeEntry);
      if (!recCall) {
        byte[] ne;
        for (        final int n : nextNodes) {
          ne=getNodeEntry(n);
          afterWildcard[0]=ne[1];
          tmpNode=CTArrayX.ftOR(tmpNode,getNodeFromTrieRecursive(n,afterWildcard));
        }
        return tmpNode;
      }
 else {
        valuesFound=new byte[nextNodes.length];
        byte[] ne;
        for (int i=0; i < nextNodes.length; i++) {
          ne=getNodeEntry(nextNodes[i]);
          afterWildcard[0]=ne[1];
          valuesFound[i]=ne[1];
          tmpNode=CTArrayX.ftOR(tmpNode,getNodeFromTrieRecursive(nextNodes[i],afterWildcard));
        }
      }
    }
  }
  return null;
}
