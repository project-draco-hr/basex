{
  final byte[] vsn=searchNode;
  byte[] aw=null;
  byte[] bw=null;
  final int currentLength=0;
  int resultNode;
  int[][] d=null;
  if (posw > 0) {
    bw=new byte[posw];
    System.arraycopy(vsn,0,bw,0,posw);
    resultNode=getNodeFromTrieRecursiveWildcard(currentCompressedTrieNode,bw);
    if (resultNode == -1) {
      return null;
    }
  }
 else {
    resultNode=0;
  }
  byte wildcard;
  if (posw + 1 >= vsn.length) {
    wildcard='.';
  }
 else {
    wildcard=vsn[posw + 1];
  }
  if (wildcard == '?') {
    byte[] searchChar=new byte[vsn.length - 2 - currentLength];
    if (bw != null) {
      System.arraycopy(bw,0,searchChar,0,bw.length);
    }
    if (bw == null) {
      System.arraycopy(vsn,posw + 2,searchChar,0,searchChar.length);
    }
 else {
      System.arraycopy(vsn,posw + 2,searchChar,bw.length,searchChar.length - bw.length);
    }
    d=getNodeFromTrieRecursive(0,searchChar);
    searchChar=new byte[vsn.length - 1];
    if (bw != null) {
      System.arraycopy(bw,0,searchChar,0,bw.length);
      searchChar[bw.length]='.';
      System.arraycopy(vsn,posw + 2,searchChar,bw.length + 1,searchChar.length - bw.length - 1);
    }
 else {
      searchChar[0]='.';
      System.arraycopy(vsn,posw + 2,searchChar,1,searchChar.length - 1);
    }
    d=ftOR(d,getNodeFromTrieWithWildCard(0,searchChar,posw,false));
    return d;
  }
 else   if (wildcard == '*') {
    if (!(posw == 0 && vsn.length == 2)) {
      final byte[] searchChar=new byte[vsn.length - 2 - currentLength];
      if (bw != null) {
        System.arraycopy(bw,0,searchChar,0,bw.length);
      }
      if (bw == null) {
        aw=new byte[searchChar.length];
        System.arraycopy(vsn,posw + 2,searchChar,0,searchChar.length);
        System.arraycopy(vsn,posw + 2,aw,0,searchChar.length);
      }
 else {
        aw=new byte[searchChar.length - bw.length];
        System.arraycopy(vsn,posw + 2,searchChar,bw.length,searchChar.length - bw.length);
        System.arraycopy(vsn,posw + 2,aw,0,searchChar.length - bw.length);
      }
      d=getNodeFromTrieRecursive(0,searchChar);
      if (bw != null && counter[1] != bw.length) {
        return d;
      }
    }
    adata=null;
    astericsWildCardTraversing(resultNode,aw,false,counter[0],0);
    return ftOR(d,adata);
  }
 else   if (wildcard == '+') {
    final byte[] searchChar=new byte[vsn.length - 1 - currentLength];
    if (bw != null) {
      System.arraycopy(bw,0,searchChar,0,bw.length);
    }
    searchChar[posw]='.';
    if (bw == null) {
      if (!(posw == 0 && vsn.length == 2)) {
        aw=new byte[searchChar.length];
        System.arraycopy(vsn,posw + 2,searchChar,1,searchChar.length);
        System.arraycopy(vsn,posw + 2,aw,1,searchChar.length);
      }
    }
 else {
      aw=new byte[searchChar.length - bw.length - 1];
      System.arraycopy(vsn,posw + 2,searchChar,bw.length + 1,searchChar.length - bw.length - 1);
      System.arraycopy(vsn,posw + 2,aw,0,searchChar.length - bw.length - 1);
    }
    d=getNodeFromTrieWithWildCard(0,searchChar,posw,true);
    if (d == null)     return null;
    byte[] newValue;
    if (aw != null) {
      newValue=new byte[bw.length + 3 + aw.length];
      System.arraycopy(aw,0,newValue,bw.length + 3,aw.length);
    }
 else {
      newValue=new byte[3 + (bw == null ? 0 : bw.length)];
    }
    newValue[bw.length + 1]='.';
    newValue[bw.length + 2]='*';
    System.arraycopy(bw,0,newValue,0,bw.length);
    for (    final byte v : valuesFound) {
      if (v != 0) {
        newValue[bw.length]=v;
        d=ftOR(d,getNodeFromTrieWithWildCard(newValue,bw.length + 1));
      }
    }
    return d;
  }
 else {
    final byte[] rne=getNodeEntry(resultNode);
    if (rne[0] > counter[0]) {
      vsn[posw]=rne[counter[0] + 1];
      final int[][] resultData=getNodeFromTrieRecursive(0,vsn);
      if (resultData != null && recCall) {
        valuesFound=new byte[]{rne[counter[0] + 1]};
      }
      return resultData;
    }
 else     if (rne[0] == counter[0]) {
      if (rne[rne[0] + 1] > 0) {
        return null;
      }
      int[][] tmpNode=null;
      aw=new byte[vsn.length - posw];
      System.arraycopy(vsn,posw + 1,aw,1,aw.length - 1);
      final int[] nextNodes=getNextNodes(rne);
      if (!recCall) {
        byte[] ne;
        for (        final int n : nextNodes) {
          ne=getNodeEntry(n);
          aw[0]=ne[1];
          tmpNode=ftOR(tmpNode,getNodeFromTrieRecursive(n,aw));
        }
        return tmpNode;
      }
 else {
        valuesFound=new byte[nextNodes.length];
        byte[] ne;
        for (int i=0; i < nextNodes.length; i++) {
          ne=getNodeEntry(nextNodes[i]);
          aw[0]=ne[1];
          valuesFound[i]=ne[1];
          tmpNode=ftOR(tmpNode,getNodeFromTrieRecursive(nextNodes[i],aw));
        }
      }
    }
  }
  return null;
}
