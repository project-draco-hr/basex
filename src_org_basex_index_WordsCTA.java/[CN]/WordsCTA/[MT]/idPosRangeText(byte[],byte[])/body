{
  int[][] idNNF=new int[2][tokFrom.length + 1];
  int[][] idNNT=new int[2][tokTo.length];
  int c=0;
  int b;
  int[][] dt=null;
  cl=0;
  b=getNodeIdsForRQ(0,tokTo,c,idNNF);
  if (b == -1) {
    int k=tokTo.length - 1;
    while (k > -1 && idNNT[0][k] == 0)     k--;
    if (k > -1)     b=idNNT[0][k];
 else     b=-1;
  }
 else   if (toi) {
    dt=getDataFromDataArray(getNodeEntry(b),getDataEntry(b));
    dt=getAllNodes(b,b,dt);
  }
  c=0;
  cl=0;
  byte[] nodeEntry;
  int id;
  id=getNodeIdsForRQ(0,tokFrom,c,idNNF);
  c=0;
  if (id > -1 && fromi) {
    int[][] tmp=getDataFromDataArray(getNodeEntry(id),getDataEntry(id));
    dt=FTUnion.calculateFTOr(dt,getAllNodes(id,b,tmp));
  }
  for (int i=0; i < idNNF[0].length; i++) {
    if (i > 0 && idNNF[0][i] == 0 && idNNF[1][i] == 0)     break;
    nodeEntry=getNodeEntry(idNNF[0][i]);
    if (-1 * nodeEntry[nodeEntry[0] + 1] >= idNNF[1][i]) {
      for (int k=idNNF[1][i]; k < -1 * nodeEntry[nodeEntry[0] + 1]; k++)       dt=FTUnion.calculateFTOr(dt,getAllNodes(getDataEntry(idNNF[0][i],k),b,dt));
    }
  }
  return dt;
}
