{
  final TokenSet instVers=installedVersions(dep.pkg);
  if (instVers.size() == 0)   return false;
  if (dep.versions != null) {
    final TokenSet accept=acceptVersions(dep.versions);
    for (    final byte[] nextVer : accept)     if (instVers.id(nextVer) != 0)     return true;
  }
 else   if (dep.semver != null) {
    final PkgVersion semVer=new PkgVersion(dep.semver);
    for (    final byte[] v : instVers)     if (new PkgVersion(v).isCompatible(semVer))     return true;
  }
 else   if (dep.semverMin != null && dep.semverMax == null) {
    final PkgVersion semVer=new PkgVersion(dep.semverMin);
    for (    final byte[] nextVer : instVers) {
      final PkgVersion v=new PkgVersion(nextVer);
      if (v.isCompatible(semVer) || v.compareTo(semVer) >= 0)       return true;
    }
  }
 else   if (dep.semverMin == null && dep.semverMax != null) {
    final PkgVersion semVer=new PkgVersion(dep.semverMax);
    for (    final byte[] nextVer : instVers) {
      final PkgVersion v=new PkgVersion(nextVer);
      if (v.isCompatible(semVer) || v.compareTo(semVer) <= 0)       return true;
    }
  }
 else   if (dep.semverMin != null && dep.semverMax != null) {
    final PkgVersion min=new PkgVersion(dep.semverMin);
    final PkgVersion max=new PkgVersion(dep.semverMax);
    for (    final byte[] nextVer : instVers) {
      final PkgVersion v=new PkgVersion(nextVer);
      if (v.compareTo(min) >= 0 && v.compareTo(max) < 0)       return true;
    }
  }
 else {
    return true;
  }
  return false;
}
