{
  final byte[] res=token("result");
  final byte[] pref=token("preferred");
  final byte[] std=token("standard");
  final byte[] chal=token("challenge");
  final byte[] na=token("na");
  out.openElement(res);
  out.out.print(NL);
  out.openElement(pref);
  parse("count(/site/people/person/profile[@income >= 100000])").query(root).serialize(out);
  out.closeElement();
  out.out.print(NL);
  out.openElement(std);
  qu("count(/site/people/person/profile[@income < 100000 and " + "@income >= 30000])").serialize(out);
  out.closeElement();
  out.out.print(NL);
  out.openElement(chal);
  qu("count(/site/people/person/profile[@income < 30000])").serialize(out);
  out.closeElement();
  out.out.print(NL);
  out.openElement(na);
  qu("count(/site/people/person[not(profile/@income)])").serialize(out);
  out.closeElement();
  out.out.print(NL);
  out.closeElement();
  return 1;
}
