{
  super(args);
  session();
  final StringBuilder serial=new StringBuilder();
  final StringBuilder bind=new StringBuilder();
  boolean v=false, qi=false, qp=false;
  console=true;
  try {
    for (int i=0; i < ops.size(); i++) {
      final int c=ops.get(i);
      String val=vals.get(i);
      Object[] prop=null;
      if (c == 'b') {
        if (bind.length() != 0)         bind.append(',');
        val=bind.append(val.replaceAll(",",",,")).toString();
        prop=Prop.BINDINGS;
      }
 else       if (c == 'c') {
        execute(val);
        console=false;
      }
 else       if (c == 'C') {
        script(val);
        console=false;
      }
 else       if (c == 'd') {
        context.mprop.set(MainProp.DEBUG,!context.mprop.is(MainProp.DEBUG));
      }
 else       if (c == 'D') {
        prop=Prop.DOTPLAN;
      }
 else       if (c == 'f') {
        query(val);
        console=false;
      }
 else       if (c == 'i') {
        execute(new Set(Prop.MAINMEM,true),false);
        execute(new Check(val),verbose);
        execute(new Set(Prop.MAINMEM,false),false);
      }
 else       if (c == 'L') {
        newline=true;
      }
 else       if (c == 'o') {
        if (out != System.out)         out.close();
        out=new PrintOutput(val);
      }
 else       if (c == 'q') {
        execute(new XQuery(val),verbose);
        console=false;
      }
 else       if (c == 'r') {
        prop=Prop.RUNS;
      }
 else       if (c == 's') {
        if (serial.length() != 0)         serial.append(',');
        val=serial.append(val).toString();
        prop=Prop.SERIALIZER;
      }
 else       if (c == 'u') {
        prop=Prop.WRITEBACK;
      }
 else       if (c == 'v') {
        v^=true;
      }
 else       if (c == 'V') {
        qi^=true;
        prop=Prop.QUERYINFO;
      }
 else       if (c == 'w') {
        prop=Prop.CHOP;
      }
 else       if (c == 'W') {
        writeProps^=true;
      }
 else       if (c == 'x') {
        prop=Prop.XMLPLAN;
        qp^=true;
      }
 else       if (c == 'X') {
        prop=Prop.COMPPLAN;
      }
 else       if (c == 'z') {
        prop=Prop.SERIALIZE;
      }
      if (prop != null)       execute(new Set(prop,val),false);
      verbose=qi || qp || v;
    }
    if (console) {
      Util.outln(CONSOLE + TRY_MORE_X,sa() ? LOCALMODE : CLIENTMODE);
      console();
    }
    if (writeProps)     context.mprop.write();
  }
  finally {
    quit();
  }
}
