{
  super(args,ctx);
  final StaticOptions sopts=context.soptions;
  final int port=sopts.get(StaticOptions.SERVERPORT);
  final int eport=sopts.get(StaticOptions.EVENTPORT);
  if (port == eport)   throw new BaseXException(PORT_TWICE_X,port);
  final String host=sopts.get(StaticOptions.SERVERHOST);
  final InetAddress addr=host.isEmpty() ? null : InetAddress.getByName(host);
  if (service) {
    start(port,args);
    if (!quiet)     Util.outln(SRV_STARTED_PORT_X,port);
    Performance.sleep(1000);
    return;
  }
  if (stop) {
    stop(port,eport);
    if (!quiet)     Util.outln(SRV_STOPPED_PORT_X,port);
    Performance.sleep(1000);
    return;
  }
  try {
    for (    final String c : commands)     execute(c);
    socket=new ServerSocket();
    socket.setReuseAddress(true);
    socket.bind(new InetSocketAddress(addr,port));
    esocket=new ServerSocket();
    esocket.setReuseAddress(true);
    esocket.bind(new InetSocketAddress(addr,eport));
    stopFile=stopFile(port);
  }
 catch (  final IOException ex) {
    context.log.writeServer(LogType.ERROR,Util.message(ex));
    throw ex;
  }
  new Thread(this).start();
  do   Thread.yield();
 while (!running);
  context.log.writeServer(LogType.OK,Util.info(SRV_STARTED_PORT_X,port));
  if (!quiet)   Util.outln(S_CONSOLE + Util.info(SRV_STARTED_PORT_X,port),S_SERVER);
  Runtime.getRuntime().addShutdownHook(new Thread(){
    @Override public void run(){
      context.log.writeServer(LogType.OK,Util.info(SRV_STOPPED_PORT_X,port));
      Util.outln(SRV_STOPPED_PORT_X,port);
    }
  }
);
}
