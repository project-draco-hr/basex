{
  final FunItem lt=withArity(0,2,ctx);
  final ItemCache ic=expr[1].value(ctx).cache();
  try {
    Arrays.sort(ic.item,0,(int)ic.size(),new Comparator<Item>(){
      @Override public int compare(      final Item it1,      final Item it2){
        try {
          return checkType(lt.invItem(ctx,input,it1,it2),AtomType.BLN).bool(input) ? -1 : 1;
        }
 catch (        final QueryException qe) {
          throw new QueryError(qe);
        }
      }
    }
);
  }
 catch (  final QueryError err) {
    throw err.wrapped();
  }
  return ic;
}
