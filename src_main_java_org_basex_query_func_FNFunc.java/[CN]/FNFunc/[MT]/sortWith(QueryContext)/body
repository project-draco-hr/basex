{
  final FunItem lt=withArity(0,2,ctx);
  final ItemCache items=ItemCache.get(expr[1].iter(ctx));
  try {
    Arrays.sort(items.item,0,(int)items.size(),new Comparator<Item>(){
      @Override public int compare(      final Item it1,      final Item it2){
        try {
          return checkType(lt.invItem(ctx,input,it1,it2),AtomType.BLN).bool(input) ? -1 : 1;
        }
 catch (        final QueryException qe) {
          throw new QueryError(qe);
        }
      }
    }
);
  }
 catch (  final QueryError err) {
    throw err.wrapped();
  }
  return items;
}
