{
  final MapRects rects=new MapRects();
  int ni=ns;
  int start=ns;
  final double yy=r.y;
  final double hh=r.h;
  double xx=r.x;
  double ww=r.w;
  MapRects row=new MapRects();
  int width;
  double weight=0;
  double sumweight=1;
  double tmpratio;
  double rowratio=Double.MAX_VALUE;
  while (ni <= ne && xx + ww <= r.x + r.w && yy + hh <= r.y + r.h) {
    weight+=ml.weight[ni];
    width=(int)(weight / sumweight * ww);
    width=width > 0 ? width : 1;
    final MapRects tmp=new MapRects();
    double y=yy;
    for (int i=start; i <= ni; ++i) {
      int h=i == ni ? (int)(yy + hh - y) : (int)(ml.weight[i] / weight * hh);
      h=h > 0 ? h : 1;
      if (yy <= yy + hh)       tmp.add(new MapRect((int)xx,(int)y,width,h,ml.get(i),r.level));
 else       break;
      y+=h;
    }
    tmpratio=lineRatio(tmp);
    if (tmpratio > rowratio) {
      rects.add(row);
      rowratio=Double.MAX_VALUE;
      ww-=row.get(0).w;
      xx+=row.get(0).w;
      tmp.reset();
      row.reset();
      start=ni;
      sumweight-=weight - ml.weight[ni];
      weight=0;
      if (ne == ni) {
        row.add(new MapRect((int)xx,(int)yy,(int)ww,(int)hh,ml.get(ni),r.level));
        break;
      }
    }
 else {
      row=tmp;
      rowratio=tmpratio;
      ++ni;
    }
  }
  for (  final MapRect rect : row)   rect.w=(int)ww;
  rects.add(row);
  return rects;
}
