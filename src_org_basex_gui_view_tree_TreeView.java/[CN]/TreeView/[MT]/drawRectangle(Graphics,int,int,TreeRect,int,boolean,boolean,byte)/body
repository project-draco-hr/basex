{
  final int y=getYperLevel(lv);
  final int h=nodeHeight;
  final boolean br=cache.isBigRectangle(rn,lv);
  boolean txt=!br && fontHeight <= h;
  Color borderColor=null;
  Color fillColor=null;
switch (type) {
case DRAW_RECTANGLE:
    borderColor=getColorPerLevel(lv,false);
  fillColor=getColorPerLevel(lv,true);
txt=txt && DRAW_NODE_TEXT;
break;
case DRAW_HIGHLIGHT:
borderColor=color6;
fillColor=GUIConstants.COLORCELL;
break;
case DRAW_MARK:
borderColor=h > 2 ? colormarkA : colormark1;
fillColor=colormark1;
}
if (border) {
final int xx=br ? 1 : r.x + BORDER_PADDING;
final int w=r.w - BORDER_PADDING;
g.setColor(borderColor);
g.drawRect(xx,y,w,h);
if (type == DRAW_HIGHLIGHT) g.drawRect(xx + 1,y + 1,w - 2,h - 2);
}
if (fill) {
final int xx=br ? 2 : r.x + BORDER_PADDING + 1;
g.setColor(fillColor);
g.fillRect(xx,y + 1,r.w - (BORDER_PADDING + 1),h - 1);
}
if (txt) drawRectangleText(g,rn,lv,r,pre);
}
