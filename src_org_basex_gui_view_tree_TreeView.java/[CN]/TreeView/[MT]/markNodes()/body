{
  refreshedMark=false;
  markedImage=createImage();
  final Graphics mIg=markedImage.getGraphics();
  if (gui.context.marked == null)   return;
  final int size=gui.context.marked.size();
  final int[] marked=Arrays.copyOf(gui.context.marked.nodes,size);
  final int rn=0;
  for (int i=0; i < cache.getHeight(rn); i++) {
    final int y=getYperLevel(i);
    if (cache.isBigRectangle(rn,i)) {
      for (int j=0; j < size; j++) {
        final int pre=marked[j];
        if (pre == -1)         continue;
        final int index=cache.getPreIndex(rn,i,pre);
        if (index > -1) {
          final int x=(int)(getWidth() * index / (double)cache.getLevelSize(rn,i));
          mIg.setColor(Color.RED);
          mIg.drawLine(x,y,x,y + nodeHeight);
          marked[j]=-1;
        }
      }
    }
 else {
      for (int j=0; j < size; j++) {
        final int pre=marked[j];
        final TreeRect rect=cache.searchRect(rn,i,pre);
        if (rect != null) {
          mIg.setColor(Color.RED);
          mIg.fillRect(rect.x + 1,y,rect.w - 1,nodeHeight);
          drawTextIntoRectangle(mIg,pre,rect.x + (int)(rect.w / 2f),rect.w,y);
          marked[j]=-1;
        }
      }
    }
  }
}
