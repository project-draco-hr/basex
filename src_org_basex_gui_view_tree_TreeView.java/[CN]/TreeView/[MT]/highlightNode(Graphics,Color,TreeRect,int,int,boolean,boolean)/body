{
  if (level == -1)   return;
  final int y=getYperLevel(level);
  final int h=nodeHeight;
  final Data data=gui.context.data();
  final int pre=r.pre;
  final int kind=data.kind(pre);
  final int size=data.size(pre,kind);
  int multiPreX=-1;
  g.setColor(c);
  g.drawRect(r.x,y,r.w,h);
  if (r.multiPres != null) {
    final int index=searchPreArrayPosition(r.multiPres,pre);
    final double ratio=index / (double)(r.multiPres.length - 1);
    multiPreX=(int)(r.w * ratio);
    g.drawLine(multiPreX,y,multiPreX,y + nodeHeight);
  }
  if (childX > -1) {
    g.drawLine(childX,getYperLevel(level + 1) - 1,multiPreX == -1 ? (2 * r.x + r.w) / 2 : multiPreX,y + nodeHeight + 1);
  }
  if (showParent && pre > 0) {
    final int par=data.parent(pre,kind);
    final int l=level - 1;
    TreeRect parRect=null;
    if (l >= 0) {
      final ArrayList<TreeRect> rList=rectsPerLevel.get(l);
      if (rList.get(0).multiPres != null) {
        final TreeRect mPreRect=rList.get(0);
        mPreRect.pre=par;
        highlightNode(g,Color.DARK_GRAY,mPreRect,l,multiPreX == -1 ? (2 * r.x + r.w) / 2 : multiPreX,true,false);
      }
 else {
        parRect=searchRect(rList,par);
        if (parRect != null) {
          highlightNode(g,Color.DARK_GRAY,parRect,l,multiPreX == -1 ? (2 * r.x + r.w) / 2 : multiPreX,true,false);
        }
      }
    }
  }
  if (showChildren && size > 1 && level + 1 < rectsPerLevel.size()) {
  }
  String s="";
  if (s.length() > 0)   s+=" | ";
  if (kind == Data.ELEM) {
    s+=Token.string(data.tag(pre));
  }
 else {
    s+=Token.string(data.text(pre));
  }
  final int w=BaseXLayout.width(g,s);
  g.setColor(highlightColor);
}
