{
  if (level == -1)   return;
  final int y=getYperLevel(level);
  final int h=nodeHeight;
  final Data data=gui.context.data();
  final int pre=r.pre;
  final int kind=data.kind(pre);
  final int size=data.size(pre,kind);
  g.setColor(c);
  g.drawRect(r.x,y,r.w,h);
  if (r.multiPres != null) {
    final int index=searchPreArrayPosition(r.multiPres,pre);
    final double ratio=index / (double)(r.multiPres.length - 1);
    g.drawLine((int)(r.w * ratio),y,(int)(r.w * ratio),y + nodeHeight);
  }
  if (showParent && pre > 0) {
    final int par=data.parent(pre,kind);
    final int l=level - 1;
    TreeRect parRect=null;
    if (l >= 0) {
      final ArrayList<TreeRect> rList=rectsPerLevel.get(l);
      if (rList.get(0).multiPres != null) {
        final TreeRect mPreRect=rList.get(0);
        mPreRect.pre=par;
        g.drawLine(mPreRect.w / 2,getYperLevel(l) + nodeHeight + 1,mPreRect.w / 2,y - 1);
        final int pIndex=searchPreArrayPosition(mPreRect.multiPres,par);
        final double pRatio=pIndex / (double)(mPreRect.multiPres.length - 1);
        g.setColor(Color.RED);
        g.drawLine((int)(mPreRect.w * pRatio),getYperLevel(l),(int)(mPreRect.w * pRatio),getYperLevel(l) + nodeHeight);
        highlightNode(g,Color.RED,mPreRect,l,true,false);
      }
 else {
        parRect=searchRect(rList,par);
        if (parRect != null) {
          g.drawLine((2 * parRect.x + parRect.w) / 2,getYperLevel(l) + nodeHeight + 1,(2 * r.x + r.w) / 2,y - 1);
          highlightNode(g,Color.RED,parRect,l,true,false);
        }
      }
    }
  }
  if (showChildren && size > 1 && level + 1 < rectsPerLevel.size()) {
  }
  String s="";
  if (s.length() > 0)   s+=" | ";
  if (kind == Data.ELEM) {
    s+=Token.string(data.tag(pre));
  }
 else {
    s+=Token.string(data.text(pre));
  }
  int w=BaseXLayout.width(g,s);
  g.setColor(highlightColor);
  if (r.pre == 0) {
    g.fillRect(r.x,y + fontHeight + 1,w + 2,h);
    g.setColor(Color.WHITE);
    g.drawString(s,r.x + 1,y + fontHeight + h - 2);
  }
 else {
    g.fillRect(r.x,y - fontHeight,w + 2,h);
    g.setColor(Color.WHITE);
    g.drawString(s,r.x + 1,(int)(y - h / (float)fontHeight) - 2);
  }
}
