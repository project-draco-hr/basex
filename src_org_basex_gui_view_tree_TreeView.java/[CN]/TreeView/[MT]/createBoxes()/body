{
  final int s=GUIProp.fontsize;
  boxMargin=s >> 2;
  lineH=s + boxMargin;
  boxW=s - boxMargin;
  final int sp=Math.max(1,s >> 4);
  emptyBox=new BufferedImage(boxW + 1,boxW + 1,BufferedImage.TYPE_INT_ARGB);
  Graphics2D g=emptyBox.createGraphics();
  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  g.setColor(GUIConstants.color6);
  g.fillOval((boxW >> 2) - 1,(boxW >> 2) + 1,boxW >> 1,boxW >> 1);
  g.setColor(GUIConstants.color4);
  g.fillOval((boxW >> 2) - 2,boxW >> 2,boxW >> 1,boxW >> 1);
  openedBox=new BufferedImage(boxW + 1,boxW + 1,BufferedImage.TYPE_INT_ARGB);
  g=openedBox.createGraphics();
  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  Polygon p=new Polygon(new int[]{0,boxW,boxW >> 1},new int[]{boxW - sp >> 1,boxW - sp >> 1,boxW},3);
  p.translate(0,-1);
  g.setColor(GUIConstants.color6);
  g.fillPolygon(p);
  p.translate(-1,-1);
  g.setColor(GUIConstants.color4);
  g.fillPolygon(p);
  closedBox=new BufferedImage(boxW + 1,boxW + 1,BufferedImage.TYPE_INT_ARGB);
  g=closedBox.createGraphics();
  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  p=new Polygon(new int[]{boxW - sp >> 1,boxW,boxW - sp >> 1},new int[]{0,boxW >> 1,boxW},3);
  p.translate(-1,1);
  g.setColor(GUIConstants.color6);
  g.fillPolygon(p);
  p.translate(-1,-1);
  g.setColor(GUIConstants.color4);
  g.fillPolygon(p);
}
