{
  super.keyPressed(e);
  if (working || opened == null)   return;
  int focus=focusedPos == -1 ? 0 : focusedPos;
  if (focused == -1)   focused=0;
  final int focusPre=focused;
  final Data data=GUI.context.data();
  int kind=data.kind(focusPre);
  int key=e.getKeyCode();
  if (e.isShiftDown() && key == KeyEvent.VK_ENTER && focusPre != -1) {
    FSUtils.launch(data,focused);
  }
 else   if (key == KeyEvent.VK_RIGHT || key == KeyEvent.VK_LEFT) {
    final boolean open=key == KeyEvent.VK_RIGHT;
    final boolean fs=data.deepfs;
    if (e.isShiftDown()) {
      opened[focusPre]=open;
      final int s=data.size;
      for (int pre=focusPre + (fs ? data.attSize(focusPre,kind) : 1); pre != s && data.parent(pre,data.kind(pre)) >= focusPre; pre+=fs ? data.attSize(pre,kind) : 1) {
        opened[pre]=open;
        kind=data.kind(pre);
      }
      refreshHeight();
      repaint();
      return;
    }
    if ((open ^ opened[focusPre]) && (!ViewData.isLeaf(data,focusPre) || data.attSize(focusPre,kind) > 1)) {
      opened[focusPre]=open;
      refreshHeight();
      repaint();
    }
 else {
      key=open ? KeyEvent.VK_DOWN : KeyEvent.VK_UP;
    }
  }
  if (key == KeyEvent.VK_DOWN) {
    focus=Math.min(data.size - 1,focus + 1);
  }
 else   if (key == KeyEvent.VK_UP) {
    focus=Math.max(0,focus - 1);
  }
 else   if (key == KeyEvent.VK_PAGE_DOWN) {
    focus=Math.min(data.size - 1,focus + getHeight() / lineH);
  }
 else   if (key == KeyEvent.VK_PAGE_UP) {
    focus=Math.max(0,focus - getHeight() / lineH);
  }
 else   if (key == KeyEvent.VK_HOME) {
    focus=0;
  }
 else   if (key == KeyEvent.VK_END) {
    focus=data.size - 1;
  }
  if (focus == focusedPos)   return;
  focused=-1;
  final Nodes curr=GUI.context.current();
  int pre=curr.nodes[0];
  final TreeIterator it=new TreeIterator(this);
  while (it.more() && focus-- != 0)   pre=it.pre;
  if (pre == curr.nodes[0] && key == KeyEvent.VK_DOWN)   pre++;
  notifyFocus(pre,this);
  jumpTo(pre,false);
  repaint();
}
