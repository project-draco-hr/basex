{
  if (l == -1)   return;
  final int y=getYperLevel(l);
  final int h=nodeHeight;
  final Data data=gui.context.data();
  final int pre=r.pre;
  final int kind=data.kind(pre);
  final int size=data.size(pre,kind);
  int multiPreX=-1;
  g.setColor(c);
  if (fillNodes) {
    drawRectangle(g,l,r.x,r.w,y,h,null,c,false,true);
  }
 else {
    drawRectangle(g,l,r.x,r.w,y,h,c,null,true,false);
  }
  if (r.multiPres != null) {
    final int index=searchPreArrayPosition(r.multiPres,pre);
    final double ratio=index / (double)(r.multiPres.length - 1);
    multiPreX=(int)(r.w * ratio);
    g.drawLine(multiPreX,y,multiPreX,y + nodeHeight);
  }
  if (childX > -1) {
    g.drawLine(childX,getYperLevel(l + 1) - 1,multiPreX == -1 ? (2 * r.x + r.w) / 2 : multiPreX,y + nodeHeight + 1);
  }
  if (showParent && pre > 0) {
    final int par=data.parent(pre,kind);
    final int lv=l - 1;
    TreeRect parRect=null;
    if (lv >= 0) {
      final ArrayList<TreeRect> rList=rectsPerLevel.get(lv);
      if (rList.get(0).multiPres != null) {
        final TreeRect mPreRect=rList.get(0);
        mPreRect.pre=par;
        highlightNode(g,ancestorHighlightColor,mPreRect,lv,multiPreX == -1 ? (2 * r.x + r.w) / 2 : multiPreX,false,true,false);
      }
 else {
        parRect=searchRect(rList,par);
        if (parRect != null) {
          highlightNode(g,ancestorHighlightColor,parRect,lv,multiPreX == -1 ? (2 * r.x + r.w) / 2 : multiPreX,true,true,false);
        }
      }
    }
  }
  if (showChildren && size > 1 && l + 1 < rectsPerLevel.size()) {
    final int lv=l + 1;
    final ArrayList<TreeRect> rList=rectsPerLevel.get(lv);
    final ChildIterator chIt=new ChildIterator(data,pre);
    if (rList.get(0).multiPres != null) {
    }
 else {
      while (chIt.more()) {
        TreeRect sRect=searchRect(rList,chIt.next());
        g.setColor(new Color(0x38323D4F,true));
        g.fillPolygon(new int[]{multiPreX == -1 ? (2 * r.x + r.w) / 2 : multiPreX,sRect.x,sRect.x + sRect.w},new int[]{getYperLevel(l) + nodeHeight,getYperLevel(lv) - 1,getYperLevel(lv) - 1},3);
        highlightNode(g,descendantHighlightColor,sRect,lv,-1,true,false,true);
      }
    }
  }
  if (!(showParent && showChildren))   return;
  String s=getText(pre);
  final int w=BaseXLayout.width(g,s);
  g.setColor(highlightColor);
  if (r.pre == 0) {
    g.fillRect(r.x,y + fontHeight + 1,w + 2,h);
    g.setColor(Color.WHITE);
    g.drawString(s,r.x + 1,y + fontHeight + h - 2);
  }
 else {
    g.fillRect(r.x,y - fontHeight,w + 2,h);
    g.setColor(Color.WHITE);
    g.drawString(s,r.x + 1,(int)(y - h / (float)fontHeight) - 2);
  }
}
