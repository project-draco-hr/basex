{
  Msg icon=Msg.SUCCESS;
  String msg=null;
  String msg2=null;
  try {
    if (cmp == start || cmp == ports) {
      final int p=Integer.parseInt(ports.getText());
      gui.setMain(MainProp.SERVERPORT,p);
      if (host.getText().equals(LOCALHOST)) {
        gui.setMain(MainProp.PORT,p);
        portc.setText(ports.getText());
      }
      try {
        BaseXServer.start(p);
        msg=SRV_STARTED;
        running=true;
      }
 catch (      final BaseXException ex) {
        msg=ex.getMessage();
        icon=Msg.ERROR;
      }
    }
 else     if (cmp == stop) {
      if (running)       BaseXServer.stop(ctx.mprop.num(MainProp.SERVERPORT),ctx.mprop.num(MainProp.EVENTPORT));
      running=ping(true);
      connected=connected && ping(false);
      if (!connected)       msg=SRV_STOPPED;
      if (host.getText().equals(LOCALHOST))       logpass.setText("");
      if (!connected)       super.setTitle(S_SERVER_ADMIN);
    }
 else     if (cmp == connect || cmp == loguser || cmp == logpass || cmp == host || cmp == portc) {
      gui.gprop.set(GUIProp.SERVERUSER,loguser.getText());
      final String pw=new String(logpass.getPassword());
      gui.setMain(MainProp.HOST,host.getText());
      gui.setMain(MainProp.PORT,Integer.parseInt(portc.getText()));
      cs=new ClientSession(ctx,gui.gprop.get(GUIProp.SERVERUSER),pw);
      user.setSess(cs);
      dbsP.setSess(cs);
      connected=true;
      super.setTitle(S_SERVER_ADMIN + LI + loguser.getText()+ "@"+ host.getText()+ COL+ portc.getText());
      msg=Util.info(S_CONNECTED,host.getText(),portc.getText());
      refreshSess();
    }
 else     if (cmp == disconnect) {
      cs.execute(new Exit());
      connected=false;
      logpass.setText("");
      super.setTitle(S_SERVER_ADMIN);
      msg=S_DISCONNECTED;
    }
 else     if (cmp == refreshSess) {
      refreshSess();
    }
 else     if (cmp == refreshLog || cmp == logc) {
      byte[] cont=Token.EMPTY;
      if (logc.getSelectedIndex() != -1) {
        final File f=new File(logdir,logc.getSelectedItem().toString());
        cont=new IOFile(f).read();
      }
      logt.setText(cont);
      logt.scrollToEnd();
    }
 else     if (cmp == delete) {
      final File f=new File(logdir,logc.getSelectedItem().toString());
      if (f.delete()) {
        logc.setSelectedIndex(-1);
        refreshLog();
      }
 else {
        msg2=Util.info(FILE_NOT_DELETED_X,f.getName());
        icon=Msg.ERROR;
      }
    }
 else     if (cmp == deleteAll) {
      File file=null;
      for (int i=0; i < logc.getItemCount(); ++i) {
        final File f=new File(logdir,logc.getItemAt(i).toString());
        if (!f.delete())         file=f;
      }
      if (file != null) {
        msg2=Util.info(FILE_NOT_DELETED_X,file.getName());
        icon=Msg.ERROR;
      }
      logc.setSelectedIndex(-1);
      refreshLog();
    }
 else     if (connected) {
      if (tab == 1)       user.action(cmp);
      if (tab == 2)       dbsP.action(cmp);
    }
  }
 catch (  final Exception ex) {
    icon=Msg.ERROR;
    msg=Util.message(ex);
    if (msg.equals(Util.info(PERM_NEEDED_X,CmdPerm.values()[4]))) {
      try {
        cs.execute(new Exit());
      }
 catch (      final IOException exx) {
        Util.stack(exx);
      }
    }
  }
  final boolean valp=portc.getText().matches("[\\d]+") && Integer.parseInt(portc.getText()) <= 65535;
  final boolean valpl=ports.getText().matches("[\\d]+") && Integer.parseInt(ports.getText()) <= 65535;
  final boolean vallu=loguser.getText().matches("[\\w]*");
  final boolean vallp=new String(logpass.getPassword()).matches("[^ ;'\"]*");
  final boolean valh=host.getText().matches("([\\w]+://)?[\\w.-]+");
  if (msg == null && msg2 == null && !(valpl && valh && valp&& vallu&& vallp)) {
    msg=Util.info(INVALID_X,!valpl ? S_LOCALPORT : !valh ? S_HOST : !valp ? S_PORT : !vallu ? USERNAME : PASSWORD);
    icon=Msg.WARN;
  }
  infoC.setText(msg,icon);
  infoL.setText(msg2,icon);
  ports.setEnabled(!running);
  start.setEnabled(!running && valpl);
  stop.setEnabled(running);
  loguser.setEnabled(!connected);
  logpass.setEnabled(!connected);
  host.setEnabled(!connected);
  portc.setEnabled(!connected);
  connect.setEnabled(!connected && vallu && vallp&& valh&& valp&& !loguser.getText().isEmpty()&& logpass.getPassword().length != 0);
  disconnect.setEnabled(connected);
  tabs.setEnabledAt(1,connected);
  tabs.setEnabledAt(2,connected);
  tabs.setEnabledAt(3,connected);
  tabs.setEnabledAt(4,running || logc.getItemCount() > 0);
  refreshLog.setEnabled(logc.getSelectedIndex() != -1);
  delete.setEnabled(logc.getSelectedIndex() != -1);
  deleteAll.setEnabled(logc.getItemCount() > 0);
  if (loguser.hasFocus()) {
    logpass.setText("");
    connect.setEnabled(false);
  }
  ctx.mprop.write();
}
