{
  final byte[] query=toToken(exprs[0],qc);
  final HashMap<String,Value> bindings=toBindings(1,qc);
  final EvalOptions opts=new EvalOptions();
  if (exprs.length > 2)   toOptions(2,null,opts,qc);
  final String uri=opts.get(EvalOptions.BASE_URI);
  final boolean cache=opts.get(EvalOptions.CACHE);
  final Context ctx=qc.context;
  final QueryProcessor qp=new QueryProcessor(string(query),ctx);
  qp.http(qc.http);
  for (  final Entry<String,Value> it : bindings.entrySet()) {
    final String key=it.getKey();
    final Value val=CachedXQuery.copy(it.getValue().iter(),ctx);
    if (key.isEmpty())     qp.context(val);
 else     qp.bind(key,val);
  }
  qp.parse(uri);
  if (ctx.jobs.jobs.size() >= JobPool.MAXQUERIES)   throw JOBS_OVERFLOW.get(info);
  final CachedXQuery job=new CachedXQuery(qp,cache,info);
  new Thread(job).start();
  return Str.get(job.job().id());
}
