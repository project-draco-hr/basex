{
  final String file=doc.replaceAll("\"","\\\\\"");
  final String name=Util.name(QueryTest.class);
  final boolean up=this instanceof XQUPTest;
  new CreateDB(name,file).execute(context);
  final StringBuilder sb=new StringBuilder();
  int fail=0;
  for (  final Object[] qu : queries) {
    final String title=(String)qu[0];
    if (up && title.startsWith("xxx")) {
      new CreateDB(name,file).execute(context);
    }
    final boolean correct=qu.length == 3;
    final String query=qu[correct ? 2 : 1].toString();
    final Result cmp=correct ? (Result)qu[1] : null;
    final Command c=new XQuery(query);
    try {
      c.execute(context);
      final Result val=c.result();
      if (cmp instanceof Nodes) {
        ((Nodes)cmp).data=context.data();
      }
      if (!correct || !val.sameAs(cmp)) {
        sb.append("[" + qu[0] + "] "+ query);
        String s=correct && cmp.size() != 1 ? "#" + cmp.size() : "";
        sb.append("\n[E" + s + "] ");
        if (correct) {
          final String cp=cmp.toString();
          sb.append('\'');
          sb.append(cp.length() > 1000 ? cp.substring(0,1000) + "..." : cp);
          sb.append('\'');
        }
 else {
          sb.append("error");
        }
        final TokenBuilder types=new TokenBuilder();
        if (val instanceof ValueBuilder) {
          final ValueBuilder vb=(ValueBuilder)val;
          for (          final Item i : vb)           types.add(i.type.toString()).add(" ");
        }
 else {
          types.add(Util.name(val));
        }
        s=val.size() != 1 ? "#" + val.size() : "";
        sb.append("\n[F" + s + "] '"+ val+ "', "+ types+ details()+ '\n');
        ++fail;
      }
    }
 catch (    final Exception ex) {
      final String msg=ex.getMessage();
      if (correct || msg == null || msg.contains("mailman")) {
        final String cp=correct && (!(cmp instanceof Nodes) || ((Nodes)cmp).data != null) ? cmp.toString() : "()";
        sb.append("[" + qu[0] + "] "+ query+ "\n[E] "+ cp+ "\n[F] "+ (msg == null ? Util.name(ex) : msg.replaceAll("\r\n?|\n"," "))+ ' '+ details()+ '\n');
        ++fail;
      }
    }
  }
  if (fail != 0)   fail(fail + " Errors. [E] = expected, [F] = found:\n" + sb.toString().trim());
}
