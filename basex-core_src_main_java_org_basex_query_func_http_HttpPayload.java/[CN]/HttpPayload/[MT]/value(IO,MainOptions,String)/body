{
  final String ctype=MimeTypes.type(contentType);
  final String ext=MimeTypes.parameters(contentType);
  Value val=null;
  if (ctype != null) {
    if (APP_JSON.equals(ctype)) {
      final JsonParserOptions opts=new JsonParserOptions(options.get(MainOptions.JSONPARSER));
      opts.parse(ext);
      val=new DBNode(new JsonParser(input,options,opts));
    }
 else     if (TEXT_CSV.equals(ctype)) {
      final CsvParserOptions opts=new CsvParserOptions(options.get(MainOptions.CSVPARSER));
      opts.parse(ext);
      val=new DBNode(new CsvParser(input,options,opts));
    }
 else     if (TEXT_HTML.equals(ctype)) {
      final HtmlOptions opts=new HtmlOptions(options.get(MainOptions.HTMLPARSER));
      opts.parse(ext);
      val=new DBNode(new HtmlParser(input,options,opts));
    }
 else     if (APP_FORM_URLENCODED.equals(ctype)) {
      final String enc=charset(ext);
      val=Str.get(URLDecoder.decode(string(input.read()),enc == null ? Strings.UTF8 : enc));
    }
 else     if (isXML(ctype)) {
      val=new DBNode(input);
    }
 else     if (isText(ctype)) {
      val=Str.get(new NewlineInput(input).content());
    }
 else     if (isMultipart(ctype)) {
      try (final InputStream is=input.inputStream()){
        final HttpPayload hp=new HttpPayload(is,true,null,options);
        hp.extractParts(concat(DASHES,hp.boundary(ext)),null);
        val=hp.payloads();
      }
     }
  }
  return val == null ? new B64(input.read()) : val;
}
