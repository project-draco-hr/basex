{
  byte[] valueSearchNode=searchNode;
  if (currentCompressedTrieNode != 0) {
    counter[1]+=nodes[currentCompressedTrieNode].length;
    int i=0;
    while (i < valueSearchNode.length && i < nodes[currentCompressedTrieNode].length && nodes[currentCompressedTrieNode][i] == valueSearchNode[i]) {
      i++;
    }
    if (nodes[currentCompressedTrieNode].length == i) {
      if (valueSearchNode.length == i) {
        counter[0]=i;
        return currentCompressedTrieNode;
      }
 else {
        final byte[] tmp=new byte[valueSearchNode.length - i];
        for (int j=0; j < tmp.length; j++) {
          tmp[j]=valueSearchNode[i + j];
        }
        valueSearchNode=tmp;
        final int position=getInsertingPositionLinear(currentCompressedTrieNode,valueSearchNode[0]);
        if (!found) {
          counter[0]=i;
          counter[1]=counter[1] - nodes[currentCompressedTrieNode].length + i;
          return currentCompressedTrieNode;
        }
 else {
          return getNodeFromTrieRecursiveWildcard(next[currentCompressedTrieNode][position],valueSearchNode);
        }
      }
    }
 else {
      counter[0]=i;
      counter[1]=counter[1] - nodes[currentCompressedTrieNode].length + i;
      return currentCompressedTrieNode;
    }
  }
 else {
    final int position=getInsertingPositionLinear(currentCompressedTrieNode,valueSearchNode[0]);
    if (!found) {
      counter[0]=-1;
      counter[1]=-1;
      return -1;
    }
 else {
      return getNodeFromTrieRecursiveWildcard(next[currentCompressedTrieNode][position],valueSearchNode);
    }
  }
}
