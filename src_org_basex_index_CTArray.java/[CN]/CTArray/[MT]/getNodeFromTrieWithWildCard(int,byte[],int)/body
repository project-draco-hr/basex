{
  byte[] afterWildcard=null;
  byte[] beforWildcard=null;
  final int currentLength=0;
  int resultNode;
  int[][] d=null;
  if (posWildcard > 0) {
    beforWildcard=new byte[posWildcard];
    System.arraycopy(valueSearchNode,0,beforWildcard,0,posWildcard);
    resultNode=getNodeFromTrieRecursiveWildcard(currentCompressedTrieNode,beforWildcard);
    if (resultNode == -1) {
      return null;
    }
  }
 else {
    resultNode=0;
  }
  byte wildcard;
  if (posWildcard + 1 >= valueSearchNode.length) {
    wildcard='.';
  }
 else {
    wildcard=valueSearchNode[posWildcard + 1];
  }
  if (wildcard == '?') {
    byte[] searchChar=new byte[valueSearchNode.length - 2 - currentLength];
    if (beforWildcard != null) {
      System.arraycopy(beforWildcard,0,searchChar,0,beforWildcard.length);
    }
    if (beforWildcard == null) {
      System.arraycopy(valueSearchNode,posWildcard + 2,searchChar,0,searchChar.length);
    }
 else {
      System.arraycopy(valueSearchNode,posWildcard + 2,searchChar,beforWildcard.length,searchChar.length - beforWildcard.length);
    }
    d=getNodeFromTrie(searchChar);
    searchChar=new byte[valueSearchNode.length - 1];
    if (beforWildcard != null) {
      System.arraycopy(beforWildcard,0,searchChar,0,beforWildcard.length);
      searchChar[beforWildcard.length]='.';
      System.arraycopy(valueSearchNode,posWildcard + 2,searchChar,beforWildcard.length + 1,searchChar.length - beforWildcard.length - 1);
    }
 else {
      searchChar[0]='.';
      System.arraycopy(valueSearchNode,posWildcard + 2,searchChar,1,searchChar.length - 1);
    }
    d=ftOR(d,getNodeFromTrieWithWildCard(0,searchChar,posWildcard));
    return d;
  }
 else   if (wildcard == '*') {
    if (!(posWildcard == 0 && valueSearchNode.length == 2)) {
      final byte[] searchChar=new byte[valueSearchNode.length - 2 - currentLength];
      if (beforWildcard != null) {
        System.arraycopy(beforWildcard,0,searchChar,0,beforWildcard.length);
      }
      if (beforWildcard == null) {
        afterWildcard=new byte[searchChar.length];
        System.arraycopy(valueSearchNode,posWildcard + 2,searchChar,0,searchChar.length);
        System.arraycopy(valueSearchNode,posWildcard + 2,afterWildcard,0,searchChar.length);
      }
 else {
        afterWildcard=new byte[searchChar.length - beforWildcard.length];
        System.arraycopy(valueSearchNode,posWildcard + 2,searchChar,beforWildcard.length,searchChar.length - beforWildcard.length);
        System.arraycopy(valueSearchNode,posWildcard + 2,afterWildcard,0,searchChar.length - beforWildcard.length);
      }
      d=getNodeFromTrie(searchChar);
      if (beforWildcard != null && counter[1] != beforWildcard.length) {
        return d;
      }
    }
    astericsWildCardData=null;
    astericsWildCardTraversing(resultNode,afterWildcard,false,counter[0],0);
    return ftOR(d,astericsWildCardData);
  }
 else   if (wildcard == '+') {
    final byte[] searchChar=new byte[valueSearchNode.length - 1 - currentLength];
    if (beforWildcard != null) {
      System.arraycopy(beforWildcard,0,searchChar,0,beforWildcard.length);
    }
    searchChar[posWildcard]='.';
    if (beforWildcard == null) {
      if (!(posWildcard == 0 && valueSearchNode.length == 2)) {
        afterWildcard=new byte[searchChar.length];
        System.arraycopy(valueSearchNode,posWildcard + 2,searchChar,1,searchChar.length);
        System.arraycopy(valueSearchNode,posWildcard + 2,afterWildcard,1,searchChar.length);
      }
    }
 else {
      afterWildcard=new byte[searchChar.length - beforWildcard.length - 1];
      System.arraycopy(valueSearchNode,posWildcard + 2,searchChar,beforWildcard.length + 1,searchChar.length - beforWildcard.length - 1);
      System.arraycopy(valueSearchNode,posWildcard + 2,afterWildcard,0,searchChar.length - beforWildcard.length - 1);
    }
    d=getNodeFromTrieWithWildCard(searchChar,posWildcard);
    if (beforWildcard != null && counter[1] != beforWildcard.length) {
      return d;
    }
    astericsWildCardData=null;
    astericsWildCardTraversing(resultNode,afterWildcard,false,counter[0],0);
    return ftOR(d,astericsWildCardData);
  }
 else   if (wildcard == '{') {
    final int from=Character.getNumericValue((char)valueSearchNode[posWildcard + 2]);
    byte[] dots;
    if (from == 0) {
      dots=new byte[1];
      dots[0]='?';
    }
 else {
      dots=new byte[from - 1];
      if (from > 1) {
        dots[0]='.';
      }
    }
    for (int i=1; i < dots.length; i++) {
      dots[i]='.';
    }
    final byte[] newSearchValue=new byte[posWildcard + valueSearchNode.length - posWildcard - 5 + dots.length];
    System.arraycopy(valueSearchNode,0,newSearchValue,0,posWildcard + 1);
    System.arraycopy(dots,0,newSearchValue,posWildcard + 1,dots.length);
    System.arraycopy(valueSearchNode,posWildcard + 6,newSearchValue,dots.length + posWildcard + 1,valueSearchNode.length - posWildcard - 6);
  }
 else {
    if (nodes[resultNode].length > counter[0]) {
      valueSearchNode[posWildcard]=nodes[resultNode][counter[0]];
      if (valueSearchNode[posWildcard + 1] == '.') {
      }
 else {
        return getNodeFromTrie(valueSearchNode);
      }
    }
 else     if (nodes[resultNode].length == counter[0]) {
      if (next[resultNode] == null) {
        return null;
      }
      int[][] tmpNode=null;
      afterWildcard=new byte[valueSearchNode.length - posWildcard];
      System.arraycopy(valueSearchNode,posWildcard + 1,afterWildcard,1,afterWildcard.length - 1);
      for (int i=0; i < next[resultNode].length; i++) {
        afterWildcard[0]=nodes[next[resultNode][i]][0];
        if (afterWildcard.length > 1 && afterWildcard[1] == '.') {
          tmpNode=ftOR(tmpNode,getNodeFromTrieRecursive(next[resultNode][i],afterWildcard));
        }
      }
      return tmpNode;
    }
  }
  return null;
}
