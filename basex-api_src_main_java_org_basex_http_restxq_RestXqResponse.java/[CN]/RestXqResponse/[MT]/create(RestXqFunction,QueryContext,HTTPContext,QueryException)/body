{
  final StaticFunc sf=function.function;
  final Expr[] args=new Expr[sf.args.length];
  function.bind(http,args,error,qc);
  qc.mainModule(MainModule.get(sf,args));
  qc.http(http);
  qc.context.register(qc);
  final RestXqSession session=new RestXqSession(http,function.key,qc);
  String redirect=null, forward=null;
  RestXqRespBuilder response=null;
  try {
    final Iter iter=qc.iter();
    Item item=iter.next();
    if (item instanceof ANode) {
      final ANode node=(ANode)item;
      if (REST_REDIRECT.eq(node)) {
        final ANode ch=node.children().next();
        if (ch == null || ch.type != NodeType.TXT)         throw function.error(NO_VALUE,node.name());
        redirect=string(ch.string()).trim();
        return;
      }
      if (REST_FORWARD.eq(node)) {
        final ANode ch=node.children().next();
        if (ch == null || ch.type != NodeType.TXT)         throw function.error(NO_VALUE,node.name());
        forward=string(ch.string()).trim();
        return;
      }
      if (REST_RESPONSE.eq(node)) {
        response=new RestXqRespBuilder();
        response.build(node,function,iter,http);
        return;
      }
    }
    if (function.methods.size() == 1 && function.methods.contains(HttpMethod.HEAD.name()))     throw function.error(HEAD_METHOD);
    final SerializerOptions sp=function.output;
    http.sopts(sp);
    http.initResponse();
    try (final Serializer ser=Serializer.get(http.res.getOutputStream(),sp)){
      for (; item != null; item=iter.next())       ser.serialize(item);
    }
   }
  finally {
    qc.close();
    qc.context.unregister(qc);
    session.close();
    if (redirect != null) {
      http.redirect(redirect);
    }
 else     if (forward != null) {
      http.forward(forward);
    }
 else     if (response != null) {
      if (response.status != 0)       http.status(response.status,response.message,response.error);
      final byte[] out=response.cache.finish();
      if (out.length != 0)       http.res.getOutputStream().write(out);
    }
  }
}
