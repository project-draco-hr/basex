{
  final Performance p=new Performance();
  String error;
  if (cause != null) {
    error=Util.message(cause);
  }
 else {
    try {
      long hits=0;
      final boolean run=options.get(MainOptions.RUNQUERY);
      final boolean serial=options.get(MainOptions.SERIALIZE);
      final int runs=Math.max(1,options.get(MainOptions.RUNS));
      for (int r=0; r < runs; ++r) {
        if (r != 0)         qp=null;
        qp(query,context);
        parse(p);
        if (r == 0)         plan(false);
        qp.compile();
        info.compiling+=p.time();
        if (r == 0)         plan(true);
        if (!run)         continue;
        final PrintOutput po=r == 0 && serial ? out : new NullOutput();
        final Serializer ser;
        if (options.get(MainOptions.CACHEQUERY)) {
          result=qp.execute();
          info.evaluating+=p.time();
          ser=qp.getSerializer(po);
          result.serialize(ser);
          hits=result.size();
        }
 else {
          hits=0;
          final Iter ir=qp.iter();
          info.evaluating+=p.time();
          Item it=ir.next();
          ser=qp.getSerializer(po);
          while (it != null) {
            checkStop();
            ser.serialize(it);
            it=ir.next();
            ++hits;
          }
        }
        ser.close();
        qp.close();
        info.serializing+=p.time();
      }
      out.flush();
      if (soptions.get(StaticOptions.GLOBALLOCK) && qp.updating) {
        info.readLocked=null;
        info.writeLocked=null;
      }
      return info(info.toString(qp,out.size(),hits,options.get(MainOptions.QUERYINFO)));
    }
 catch (    final QueryException|IOException ex) {
      cause=ex;
      error=Util.message(ex);
    }
catch (    final ProcException ex) {
      error=INTERRUPTED;
    }
catch (    final StackOverflowError ex) {
      Util.debug(ex);
      error=BASX_STACKOVERFLOW.desc;
    }
catch (    final RuntimeException ex) {
      extError("");
      Util.debug(info());
      throw ex;
    }
 finally {
      if (qp != null)       qp.close();
    }
  }
  return extError(error);
}
