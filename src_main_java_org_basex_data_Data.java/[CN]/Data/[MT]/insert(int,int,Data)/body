{
  meta.update();
  final boolean empty=empty() && data.kind(0) == DOC;
  final boolean struct=ipre != meta.size || empty;
  if (struct)   meta.docindex=false;
  final int[] preStack=new int[IO.MAXHEIGHT];
  int l=0;
  final int ms=data.meta.size;
  final int buf=Math.min(ms,IO.BLOCKSIZE >> IO.NODEPOWER);
  buffer(buf);
  final TokenMap nsScope=new TokenMap();
  NSNode n=ns.current;
  do {
    for (int i=0; i < n.vals.length; i+=2)     nsScope.add(ns.pref(n.vals[i]),ns.uri(n.vals[i + 1]));
    final int pos=n.fnd(ipar);
    if (pos < 0)     break;
    n=n.ch[pos];
  }
 while (n.pre <= ipar && ipar < n.pre + size(n.pre,ELEM));
  int mdpre=-1;
  final NSNode t=ns.current;
  final Set<NSNode> newNodes=new HashSet<NSNode>();
  while (++mdpre != ms) {
    if (mdpre != 0 && mdpre % buf == 0)     insert(ipre + mdpre - buf);
    final int mdk=data.kind(mdpre);
    final int mdpar=data.parent(mdpre,mdk);
    final int pre=ipre + mdpre;
    final int dis=mdpar >= 0 ? mdpre - mdpar : pre - ipar;
    final int par=pre - dis;
    if (mdpre == 0) {
      final List<NSNode> cand=new LinkedList<NSNode>();
      NSNode cn=ns.root;
      cand.add(cn);
      for (int cI; (cI=cn.fnd(par)) > -1; ) {
        cn=cn.ch[cI];
        cand.add(0,cn);
      }
      cn=ns.root;
      if (cand.size() > 1) {
        int ancPre=par;
        NSNode curr=cand.remove(0);
        while (ancPre > -1 && cn == ns.root) {
          if (curr.pre == ancPre)           cn=curr;
 else           if (curr.pre < ancPre) {
            while ((ancPre=parent(ancPre,kind(ancPre))) > curr.pre)             ;
            if (curr.pre == ancPre)             cn=curr;
          }
          if (cand.size() > 0)           curr=cand.remove(0);
        }
      }
      ns.setNearestRoot(cn,par);
    }
    while (l > 0 && preStack[l - 1] > par)     ns.close(preStack[--l]);
switch (mdk) {
case DOC:
      doc(pre,data.size(mdpre,mdk),data.text(mdpre,true));
    meta.ndocs++;
  ns.open();
preStack[l++]=pre;
if (!struct) docindex.add(this,pre);
break;
case ELEM:
boolean ne=false;
if (data.nsFlag(mdpre)) {
final Atts at=data.ns(mdpre);
for (int a=0; a < at.size; ++a) {
final byte[] old=nsScope.get(at.key[a]);
if (old == null || !eq(old,at.val[a])) {
newNodes.add(ns.add(at.key[a],at.val[a],pre));
ne=true;
}
}
}
ns.open();
byte[] nm=data.name(mdpre,mdk);
elem(dis,tagindex.index(nm,null,false),data.attSize(mdpre,mdk),data.size(mdpre,mdk),ns.uri(nm,true),ne);
preStack[l++]=pre;
break;
case TEXT:
case COMM:
case PI:
text(pre,dis,data.text(mdpre,true),mdk);
break;
case ATTR:
nm=data.name(mdpre,mdk);
if (data.nsFlag(mdpre)) {
ns.add(par,l == 0 ? ipar : preStack[l - 1],pref(nm),data.ns.uri(data.uri(mdpre,mdk)));
table.write2(ipar,1,1 << 15 | name(ipar));
}
attr(pre,dis,atnindex.index(nm,null,false),data.text(mdpre,false),ns.uri(nm,false),false);
break;
}
}
while (l > 0) ns.close(preStack[--l]);
ns.setRoot(t);
if (bp != 0) insert(ipre + mdpre - 1 - (mdpre - 1) % buf);
buffer(1);
int p=ipar;
while (p >= 0) {
final int k=kind(p);
size(p,k,size(p,k) + ms);
p=parent(p,k);
}
updateDist(ipre + ms,ms);
ns.update(ipre,ms,true,newNodes);
if (empty) delete(0);
}
