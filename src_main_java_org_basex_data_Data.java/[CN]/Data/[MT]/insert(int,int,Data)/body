{
  meta.update();
  if (meta.updindex)   indexBegin();
  resources.insert(ipre,data);
  final boolean dummy=empty() && data.kind(0) == DOC;
  final int dsize=data.meta.size;
  final int buf=Math.min(dsize,IO.BLOCKSIZE >> IO.NODEPOWER);
  buffer(buf);
  final TokenMap nsScope=new TokenMap();
  NSNode n=nspaces.current;
  do {
    for (int i=0; i < n.vals.length; i+=2)     nsScope.add(nspaces.prefix(n.vals[i]),nspaces.uri(n.vals[i + 1]));
    final int pos=n.fnd(ipar);
    if (pos < 0)     break;
    n=n.ch[pos];
  }
 while (n.pre <= ipar && ipar < n.pre + size(n.pre,ELEM));
  final IntList preStack=new IntList();
  int dpre=-1;
  final NSNode t=nspaces.current;
  final Set<NSNode> newNodes=new HashSet<NSNode>();
  final IntList flagPres=new IntList();
  while (++dpre != dsize) {
    if (dpre != 0 && dpre % buf == 0)     insert(ipre + dpre - buf);
    final int pre=ipre + dpre;
    final int dkind=data.kind(dpre);
    final int dpar=data.parent(dpre,dkind);
    final int dis=dpar >= 0 ? dpre - dpar : ipar >= 0 ? pre - ipar : 0;
    final int par=dis == 0 ? -1 : pre - dis;
    if (dpre == 0) {
      final List<NSNode> cand=new LinkedList<NSNode>();
      NSNode cn=nspaces.root;
      cand.add(cn);
      for (int cI; (cI=cn.fnd(par)) > -1; ) {
        cn=cn.ch[cI];
        cand.add(0,cn);
      }
      cn=nspaces.root;
      if (cand.size() > 1) {
        int ancPre=par;
        NSNode curr=cand.remove(0);
        while (ancPre > -1 && cn == nspaces.root) {
          if (curr.pre == ancPre)           cn=curr;
 else           if (curr.pre < ancPre) {
            while ((ancPre=parent(ancPre,kind(ancPre))) > curr.pre)             ;
            if (curr.pre == ancPre)             cn=curr;
          }
          if (cand.size() > 0)           curr=cand.remove(0);
        }
      }
      nspaces.setNearestRoot(cn,par);
    }
    while (preStack.size() != 0 && preStack.peek() > par)     nspaces.close(preStack.pop());
switch (dkind) {
case DOC:
      final int s=data.size(dpre,dkind);
    doc(pre,s,data.text(dpre,true));
  meta.ndocs++;
nspaces.open();
preStack.push(pre);
break;
case ELEM:
boolean ne=false;
if (data.nsFlag(dpre)) {
final Atts at=data.ns(dpre);
for (int a=0; a < at.size(); ++a) {
final byte[] old=nsScope.get(at.name(a));
if (old == null || !eq(old,at.string(a))) {
newNodes.add(nspaces.add(at.name(a),at.string(a),pre));
ne=true;
}
}
}
nspaces.open();
byte[] nm=data.name(dpre,dkind);
elem(dis,tagindex.index(nm,null,false),data.attSize(dpre,dkind),data.size(dpre,dkind),nspaces.uri(nm,true),ne);
preStack.push(pre);
break;
case TEXT:
case COMM:
case PI:
text(pre,dis,data.text(dpre,true),dkind);
break;
case ATTR:
nm=data.name(dpre,dkind);
final byte[] attPref=prefix(nm);
if (data.nsFlag(dpre) && nsScope.get(attPref) == null) {
nspaces.add(par,preStack.size() == 0 ? -1 : preStack.peek(),attPref,data.nspaces.uri(data.uri(dpre,dkind)));
flagPres.add(par);
}
attr(pre,dis,atnindex.index(nm,null,false),data.text(dpre,false),nspaces.uri(nm,false),false);
break;
}
}
while (preStack.size() != 0) nspaces.close(preStack.pop());
nspaces.setRoot(t);
if (bp != 0) insert(ipre + dpre - 1 - (dpre - 1) % buf);
buffer(1);
for (final int toFlag : flagPres.toArray()) table.write2(toFlag,1,name(toFlag) | 1 << 15);
int p=ipar;
while (p >= 0) {
final int k=kind(p);
size(p,k,size(p,k) + dsize);
p=parent(p,k);
}
updateDist(ipre + dsize,dsize);
nspaces.update(ipre,dsize,true,newNodes);
if (meta.updindex) {
idmap.insert(ipre,id(ipre),dsize);
indexEnd();
}
if (dummy) delete(0);
}
