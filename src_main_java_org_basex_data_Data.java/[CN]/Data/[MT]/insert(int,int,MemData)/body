{
  meta.update();
  final int[] preStack=new int[IO.MAXHEIGHT];
  int l=0;
  final int ms=md.meta.size;
  final int buf=Math.min(ms,IO.BLOCKSIZE >> IO.NODEPOWER);
  buffer(buf);
  int mpre=-1;
  while (++mpre != ms) {
    if (mpre != 0 && mpre % buf == 0)     insert(ipre + mpre - buf);
    final int mk=md.kind(mpre);
    final int mpar=md.parent(mpre,mk);
    final int pre=ipre + mpre;
    final int dis=mpar >= 0 ? mpre - mpar : pre - ipar;
    final int par=pre - dis;
    while (l > 0 && preStack[l - 1] > par)     ns.close(preStack[--l]);
switch (mk) {
case DOC:
      doc(pre,md.size(mpre,mk),md.text(mpre,true));
    meta.ndocs++;
  ns.open();
preStack[l++]=pre;
break;
case ELEM:
final boolean ne=md.nsFlag(mpre);
if (ne) {
final Atts at=md.ns(mpre);
for (int a=0; a < at.size; a++) ns.add(at.key[a],at.val[a],pre);
}
ns.open();
byte[] nm=md.name(mpre,mk);
elem(dis,tags.index(nm,null,false),md.attSize(mpre,mk),md.size(mpre,mk),ns.uri(nm,true),ne);
preStack[l++]=pre;
break;
case TEXT:
case COMM:
case PI:
text(pre,dis,md.text(mpre,true),mk);
break;
case ATTR:
nm=md.name(mpre,mk);
if (md.nsFlag(mpre)) {
ns.add(par,l == 0 ? ipar : preStack[l - 1],pref(nm),md.ns.uri(md.uri(mpre,mk)));
table.write2(ipar,1,1 << 15 | name(ipar));
}
attr(pre,dis,atts.index(nm,null,false),md.text(mpre,false),ns.uri(nm,false),false);
break;
}
}
while (l > 0) ns.close(preStack[--l]);
if (bp != 0) insert(ipre + (mpre - 1) - (mpre - 1) % buf);
buffer(1);
int p=ipar;
while (p >= 0) {
final int k=kind(p);
size(p,k,size(p,k) + ms);
p=parent(p,k);
}
updateDist(ipre + ms,ms);
if (size(0,DOC) == 1) delete(0);
}
