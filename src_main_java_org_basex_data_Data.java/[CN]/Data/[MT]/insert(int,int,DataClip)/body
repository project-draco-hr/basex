{
  meta.update();
  if (meta.updindex)   indexBegin();
  resources.insert(ipre,clip);
  final int dsize=clip.size();
  final int buf=Math.min(dsize,IO.BLOCKSIZE >> IO.NODEPOWER);
  buffer(buf);
  final TokenMap nsScope=nspaces.scope(ipar,this);
  final IntList preStack=new IntList();
  final NSNode nsRoot=nspaces.current();
  final HashSet<NSNode> newNodes=new HashSet<NSNode>();
  final IntList flagPres=new IntList();
  final Data data=clip.data;
  int c=0;
  for (int dpre=clip.start; dpre < clip.end; ++dpre, ++c) {
    if (c != 0 && c % buf == 0)     insert(ipre + c - buf);
    final int pre=ipre + c;
    final int dkind=data.kind(dpre);
    final int dpar=data.parent(dpre,dkind);
    final int dis=dpar >= 0 ? dpre - dpar : ipar >= 0 ? pre - ipar : 0;
    final int par=dis == 0 ? -1 : pre - dis;
    if (c == 0)     nspaces.root(par,this);
    while (!preStack.isEmpty() && preStack.peek() > par)     nspaces.close(preStack.pop());
switch (dkind) {
case DOC:
      nspaces.prepare();
    final int s=data.size(dpre,dkind);
  doc(pre,s,data.text(dpre,true));
meta.ndocs++;
preStack.push(pre);
break;
case ELEM:
nspaces.prepare();
boolean ne=false;
if (data.nsFlag(dpre)) {
final Atts at=data.ns(dpre);
for (int a=0; a < at.size(); ++a) {
final byte[] old=nsScope.get(at.name(a));
if (old == null || !eq(old,at.value(a))) {
newNodes.add(nspaces.add(at.name(a),at.value(a),pre));
ne=true;
}
}
}
byte[] nm=data.name(dpre,dkind);
elem(dis,tagindex.index(nm,null,false),data.attSize(dpre,dkind),data.size(dpre,dkind),nspaces.uri(nm,true),ne);
preStack.push(pre);
break;
case TEXT:
case COMM:
case PI:
text(pre,dis,data.text(dpre,true),dkind);
break;
case ATTR:
nm=data.name(dpre,dkind);
final byte[] attPref=prefix(nm);
if (data.nsFlag(dpre) && nsScope.get(attPref) == null) {
nspaces.add(par,preStack.isEmpty() ? -1 : preStack.peek(),attPref,data.nspaces.uri(data.uri(dpre,dkind)),this);
flagPres.add(par);
}
attr(pre,dis,atnindex.index(nm,null,false),data.text(dpre,false),nspaces.uri(nm,false),false);
break;
}
}
while (!preStack.isEmpty()) nspaces.close(preStack.pop());
nspaces.root(nsRoot);
if (bp != 0) insert(ipre + c - 1 - (c - 1) % buf);
buffer(1);
for (int f=0; f < flagPres.size(); f++) {
final int fl=flagPres.get(f);
table.write2(fl,1,name(fl) | 1 << 15);
}
int p=ipar;
while (p >= 0) {
final int k=kind(p);
size(p,k,size(p,k) + dsize);
p=parent(p,k);
}
if (meta.updindex) {
idmap.insert(ipre,id(ipre),dsize);
indexEnd();
}
if (!cache) updateDist(ipre + dsize,dsize);
if (ipar != -1) nspaces.insert(ipre,dsize,newNodes);
}
