{
  boolean res=false;
  final Class<?> classClassLoader=ClassLoader.class;
  java.lang.reflect.Field nativeLibraries=null;
  try {
    nativeLibraries=classClassLoader.getDeclaredField("nativeLibraries");
  }
 catch (  final NoSuchFieldException e1) {
    Util.err(e1.getMessage());
  }
  if (nativeLibraries == null) {
    return res;
  }
  nativeLibraries.setAccessible(true);
  Object obj=null;
  try {
    obj=nativeLibraries.get(cl);
  }
 catch (  final IllegalAccessException e1) {
    Util.err(e1.getMessage());
  }
  if (!(obj instanceof Vector)) {
    return res;
  }
  res=true;
  final Vector<Object> nativeLib=(Vector<Object>)obj;
  for (  final Object lib : nativeLib) {
    java.lang.reflect.Method finalize=null;
    try {
      finalize=lib.getClass().getDeclaredMethod("finalize",new Class[0]);
    }
 catch (    final NoSuchMethodException e) {
      Util.err(e.getMessage());
    }
    if (finalize != null) {
      finalize.setAccessible(true);
      try {
        finalize.invoke(lib,new Object[0]);
      }
 catch (      final IllegalAccessException e) {
        Util.err(e.getMessage());
      }
catch (      final InvocationTargetException e) {
        Util.err(e.getMessage());
      }
    }
  }
  return res;
}
