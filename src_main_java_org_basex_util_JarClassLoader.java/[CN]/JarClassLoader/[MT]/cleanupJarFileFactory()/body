{
  boolean res=false;
  Class<?> classJarURLConnection=null;
  try {
    classJarURLConnection=Class.forName("sun.net.www.protocol.jar.JarURLConnection");
  }
 catch (  ClassNotFoundException e) {
    Util.err(e.getMessage());
  }
  if (classJarURLConnection == null) {
    return res;
  }
  Field f=null;
  try {
    f=classJarURLConnection.getDeclaredField("factory");
  }
 catch (  NoSuchFieldException e) {
    Util.err(e.getMessage());
  }
  if (f == null) {
    return res;
  }
  f.setAccessible(true);
  Object obj=null;
  try {
    obj=f.get(null);
  }
 catch (  IllegalAccessException e) {
    Util.err(e.getMessage());
  }
  if (obj == null) {
    return res;
  }
  Class<?> classJarFileFactory=obj.getClass();
  HashMap<Object,Object> fileCache=null;
  try {
    f=classJarFileFactory.getDeclaredField("fileCache");
    f.setAccessible(true);
    obj=f.get(null);
    if (obj instanceof HashMap) {
      fileCache=(HashMap<Object,Object>)obj;
    }
  }
 catch (  NoSuchFieldException e) {
    Util.err(e.getMessage());
  }
catch (  IllegalAccessException e) {
    Util.err(e.getMessage());
  }
  HashMap<Object,Object> urlCache=null;
  try {
    f=classJarFileFactory.getDeclaredField("urlCache");
    f.setAccessible(true);
    obj=f.get(null);
    if (obj instanceof HashMap) {
      urlCache=(HashMap<Object,Object>)obj;
    }
  }
 catch (  NoSuchFieldException e) {
    Util.err(e.getMessage());
  }
catch (  IllegalAccessException e) {
    Util.err(e.getMessage());
  }
  if (urlCache != null) {
    HashMap<Object,Object> urlCacheTmp=(HashMap<Object,Object>)urlCache.clone();
    Iterator<Object> it=urlCacheTmp.keySet().iterator();
    while (it.hasNext()) {
      obj=it.next();
      if (!(obj instanceof JarFile)) {
        continue;
      }
      JarFile jarFile=(JarFile)obj;
      if (setJarFileNames2Close.contains(jarFile.getName())) {
        try {
          jarFile.close();
        }
 catch (        IOException e) {
          Util.err(e.getMessage());
        }
        if (fileCache != null) {
          fileCache.remove(urlCache.get(jarFile));
        }
        urlCache.remove(jarFile);
      }
    }
    res=true;
  }
 else   if (fileCache != null) {
    HashMap<Object,Object> fileCacheTmp=(HashMap<Object,Object>)fileCache.clone();
    Iterator<Object> it=fileCacheTmp.keySet().iterator();
    while (it.hasNext()) {
      Object key=it.next();
      obj=fileCache.get(key);
      if (!(obj instanceof JarFile)) {
        continue;
      }
      JarFile jarFile=(JarFile)obj;
      if (setJarFileNames2Close.contains(jarFile.getName())) {
        try {
          jarFile.close();
        }
 catch (        IOException e) {
          Util.err(e.getMessage());
        }
        fileCache.remove(key);
      }
    }
    res=true;
  }
  setJarFileNames2Close.clear();
  return res;
}
