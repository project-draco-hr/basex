{
  final FTIndexIterator it=FTIndexIterator.FTEMPTY;
  final FTWildcard wc=new FTWildcard(token);
  if (!wc.parse())   return it;
  final IntList pr=new IntList();
  final IntList ps=new IntList();
  final byte[] pref=wc.prefix();
  final int l=Math.min(tp.length - 1,wc.max());
  for (int ti=pref.length; ti <= l; ti++) {
    int i=tp[ti];
    if (i == -1)     continue;
    int c=ti + 1;
    int e=-1;
    while (c < tp.length && e == -1)     e=tp[c++];
    i=find(pref,i,e,ti);
    while (i < e) {
      final byte[] t=inY.readBytes(i,ti);
      if (!startsWith(t,pref))       break;
      if (wc.match(t)) {
        inZ.cursor(pointer(i,ti));
        final int s=size(i,ti);
        for (int d=0; d < s; d++) {
          pr.add(inZ.readNum());
          ps.add(inZ.readNum());
        }
      }
      i+=ti + ENTRY;
    }
  }
  return iter(new FTCache(pr,ps));
}
