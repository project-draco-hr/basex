{
  token=new IntArrayList[Token.MAXLEN];
  token[0]=new IntArrayList();
  token[0].add(new int[]{0});
  ftpre=new IntArrayList[Token.MAXLEN];
  ftpre[0]=new IntArrayList();
  ftpre[0].add(new int[]{0});
  ftpos=new IntArrayList[Token.MAXLEN];
  ftpos[0]=new IntArrayList();
  ftpos[0].add(new int[]{0});
  Performance p=new Performance();
  total=data.size;
  for (id=0; id < total; id++) {
    checkStop();
    if (data.kind(id) == Data.TEXT)     index(data.text(id),id);
  }
  if (Prop.debug) {
    Performance.gc(5);
    System.out.println("Indexed: " + Performance.getMem() + ", "+ p);
  }
  int isize=token[0].list[0][0];
  final String db=data.meta.dbname;
  final String f=DATAFTX;
  DataOutput outi=new DataOutput(db,f + 'x');
  DataOutput outt=new DataOutput(db,f + 'y');
  DataOutput outd=new DataOutput(db,f + 'z');
  outi.write((byte)(isize + 1));
  int[][] ind=new int[isize + 1][2];
  int c=0, tr=0, dr=0, j=1;
  for (; j < token.length; j++) {
    if (c == isize)     break;
    if (token[j] != null) {
      int t=0;
      while (t < token[j].list.length && token[j].list[t] != null) {
        if (t == 0) {
          outi.write((byte)j);
          outi.writeInt(tr);
          ind[c][0]=j;
          ind[c][1]=tr;
        }
        for (int k=0; k < token[j].list[t].length - 1; k++) {
          outt.write((byte)token[j].list[t][k]);
        }
        outt.writeInt(dr);
        int ds=token[j].list[t][token[j].list[t].length - 1];
        outt.writeInt(ds);
        for (int d=0; d < ds; d++)         outd.writeInt(ftpre[j].list[t][d]);
        for (int d=0; d < ds; d++)         outd.writeInt(ftpos[j].list[t][d]);
        dr+=8L * ds;
        tr+=ind[c][0] + 8L;
        t++;
      }
      c++;
    }
  }
  outi.write((byte)(j - 1));
  outi.writeInt((int)(tr - j - 7L));
  ind[c][0]=j - 1;
  ind[c][1]=(int)(tr - j - 7L);
  token=null;
  ftpre=null;
  ftpos=null;
  outi.close();
  outt.close();
  outd.close();
  if (Prop.debug) {
    Performance.gc(5);
    System.out.println("Written: " + Performance.getMem() + ", "+ p);
  }
  return new Fuzzy(data.meta.dbname);
}
