{
  final XQuery query=new XQuery("\n" + "        declare variable $root as document-node() := . treat as document-node(); \n" + "        <empty> { (: attribute axis, and all other axes that inference can assert might produce attributes. \n"+ "             These are placed first, so we don't raise XQTY0024. :) \n"+ "             $root/foo/child::attribute(foo), \n"+ "             $root//element()/self::attribute(), \n"+ "             $root//text()/self::attribute(), \n"+ "             $root/self::attribute(), \n"+ "             $root/foo/descendant::attribute(foo), \n"+ "             $root//processing-instruction()/self::attribute(), \n"+ "             $root/attribute(foo), $root/attribute(), \n"+ "             $root/attribute::attribute(), \n"+ "             $root//parent::attribute(), \n"+ "             $root//document-node()/self::attribute(), \n"+ "             $root/@*, $root/*/@*[self::*], \n"+ "             $root//comment()/descendant-or-self::attribute(), \n"+ "             $root//processing-instruction()/descendant-or-self::attribute(), \n"+ "             $root//text()/descendant-or-self::attribute(), \n"+ "             $root//document-node()/descendant-or-self::attribute(), \n"+ "             $root//parent::attribute(), \n"+ "             $root//ancestor::attribute(), \n"+ "             $root//ancestor-or-self::attribute(), \n"+ "             $root/self::attribute(), \n"+ "             $root//attribute()/child::node(), \n"+ "             $root//attribute::text(), \n"+ "             $root//attribute::comment(), \n"+ "             $root//attribute::processing-instruction(), \n"+ "             $root//attribute::document-node(), \n"+ "             $root//attribute::document-node(element(foo)),\n"+ "             $root//attribute()/self::text(),\n"+ "             $root//attribute()/self::processing-instruction(), \n"+ "             $root//attribute()/self::element(), \n"+ "             $root//attribute()/self::document-node(), \n"+ "             $root//attribute()/self::comment(), \n"+ "             $root//*/attribute()//node(), \n"+ "             $root//*/attribute()/descendant::node(), \n"+ "             $root//attribute::element(), \n"+ "             $root//comment()/child::node(), \n"+ "             $root//processing-instruction()/child::node(), \n"+ "             $root//text()/child::node(),\n"+ "             $root//attribute()/descendant::node(), \n"+ "             $root//comment()/descendant::node(), \n"+ "             $root//text()/descendant::node(), \n"+ "             $root//processing-instruction()/descendant::node(), \n"+ "             $root//comment()/descendant-or-self::text(), \n"+ "             $root//comment()/descendant-or-self::processing-instruction(), \n"+ "             $root//comment()/descendant-or-self::element(), \n"+ "             $root//comment()/descendant-or-self::document-node(), \n"+ "             $root//processing-instruction()/descendant-or-self::text(), \n"+ "             $root//processing-instruction()/descendant-or-self::comment(), \n"+ "             $root//processing-instruction()/descendant-or-self::element(), \n"+ "             $root//processing-instruction()/descendant-or-self::document-node(), \n"+ "             $root//text()/descendant-or-self::processing-instruction(), \n"+ "             $root//text()/descendant-or-self::comment(), \n"+ "             $root//text()/descendant-or-self::element(), \n"+ "             $root//text()/descendant-or-self::document-node(), \n"+ "             $root//attribute()/descendant-or-self::processing-instruction(), \n"+ "             $root//attribute()/descendant-or-self::text(), \n"+ "             $root//attribute()/descendant-or-self::comment(), \n"+ "             $root//attribute()/descendant-or-self::element(), \n"+ "             $root//attribute()/descendant-or-self::document-node(), \n"+ "             $root/.., $root//parent::comment(), \n"+ "             $root//parent::processing-instruction(), \n"+ "             $root//parent::text(), \n"+ "             $root//ancestor::comment(), \n"+ "             $root//ancestor::processing-instruction(), \n"+ "             $root//ancestor::text(), \n"+ "             $root/self::comment(), \n"+ "             $root/self::processing-instruction(), \n"+ "             $root/self::text(), \n"+ "             $root/self::element(), \n"+ "             $root//element()/self::text(), \n"+ "             $root//element()/self::processing-instruction(), \n"+ "             $root//element()/self::document-node(), \n"+ "             $root//element()/self::comment(), \n"+ "             $root//processing-instruction()/self::text(), \n"+ "             $root//processing-instruction()/self::element(), \n"+ "             $root//processing-instruction()/self::document-node(), \n"+ "             $root//processing-instruction()/self::comment(), \n"+ "             $root//text()/self::processing-instruction(), \n"+ "             $root//text()/self::element(), \n"+ "             $root//text()/self::document-node(), \n"+ "             $root//text()/self::comment(), \n"+ "             $root//document-node()/self::processing-instruction(), \n"+ "             $root//document-node()/self::element(), \n"+ "             $root//document-node()/self::text(), \n"+ "             $root//document-node()/self::comment() } </empty>, \n"+ "             exists($root//*/attribute()/descendant-or-self::node())",ctx);
  try {
    query.context(node(file("prod/AxisStep/TopMany.xml")));
    result=new QT3Result(query.value());
  }
 catch (  final Throwable trw) {
    result=new QT3Result(trw);
  }
 finally {
    query.close();
  }
  test((assertSerialization("<empty/>true",false) || error("XPST0005")));
}
