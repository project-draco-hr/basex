{
  super(null);
  back=new BaseXBack(FILL.NONE);
  back.setLayout(new BorderLayout());
  header=new BaseXLabel(GUIConstants.XPATHVIEW,10);
  back.add(header,BorderLayout.NORTH);
  input=new BaseXTextField(null);
  input.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    final KeyEvent e){
      int c=e.getKeyCode();
      if (all.size == 0) {
        String[] test=keys(GUI.context.data());
        for (int i=1; i < test.length; i++) {
          all.add(test[i]);
        }
        String[] cmdList={"ancestor-or-self::","ancestor::","attribute::","child::","comment()","descendant-or-self::","following-sibling::","following::","namespace::","node()","parent::","preceding-sibling::","preceding::","processing-instruction()","self::","text()"};
        for (int j=0; j < test.length; j++) {
          all.add(cmdList[j]);
        }
      }
      if (c == KeyEvent.VK_SLASH) {
        slashC++;
        showPopAll();
      }
 else       if (c == KeyEvent.VK_DELETE || c == KeyEvent.VK_BACK_SPACE) {
        if (input.getText().length() == 0) {
          slashC=0;
          tmpIn="";
          if (popInit) {
            pop.hide();
          }
        }
      }
 else       if (c == KeyEvent.VK_DOWN) {
        if (box.getSelectedItem() == null) {
          box.setSelectedIndex(0);
        }
 else {
          int tmp=box.getSelectedIndex();
          box.setSelectedIndex(tmp + 1);
        }
      }
 else       if (c == KeyEvent.VK_UP) {
        if (box.getSelectedItem() != null) {
          int tmp=box.getSelectedIndex();
          box.setSelectedIndex(tmp - 1);
        }
      }
 else       if (c == KeyEvent.VK_ENTER) {
        if (box.getSelectedItem() != null) {
          input.setText(tmpIn + box.getSelectedItem().toString());
          pop.hide();
        }
      }
 else {
        if (popInit) {
          if (tmpIn.length() == 0) {
            pop.hide();
          }
 else {
            slashC=0;
            showSpecPop();
          }
        }
      }
      if (c == KeyEvent.VK_ESCAPE)       return;
      final String query=input.getText();
      GUI.get().execute(Commands.XPATH,query);
    }
  }
);
  setBorder(10,10,10,10);
  setLayout(new BorderLayout(0,4));
  back.add(input,BorderLayout.CENTER);
  add(back,BorderLayout.NORTH);
  refreshLayout();
}
