{
  super(null);
  back=new BaseXBack(FILL.NONE);
  back.setLayout(new BorderLayout());
  header=new BaseXLabel(GUIConstants.XPATHVIEW,10);
  back.add(header,BorderLayout.NORTH);
  input=new BaseXTextField(null);
  input.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    final KeyEvent e){
      int c=e.getKeyCode();
      if (c == KeyEvent.VK_SLASH) {
        slashC++;
        if (slashC <= 2) {
          showPopAll();
        }
 else {
          pop.hide();
        }
      }
 else       if (c == KeyEvent.VK_DELETE || c == KeyEvent.VK_BACK_SPACE) {
        if (input.getText().length() == 0) {
          slashC=0;
          tempIn="";
          if (popInit) {
            pop.hide();
          }
        }
 else         if (input.getText().endsWith("/")) {
          if ('/' == input.getText().charAt(input.getText().length() - 1)) {
            slashC=1;
            showPopAll();
          }
 else           if ('/' == input.getText().charAt(input.getText().length() - 2)) {
            slashC=2;
            showPopAll();
          }
        }
 else {
          tempIn=input.getText();
          slashC=0;
          pop.hide();
        }
      }
 else       if (c == KeyEvent.VK_DOWN) {
        if (box.getSelectedItem() != null && box.getSelectedIndex() < box.getItemCount() - 1) {
          int tmp=box.getSelectedIndex();
          box.setSelectedIndex(tmp + 1);
        }
 else {
          box.setSelectedIndex(0);
        }
      }
 else       if (c == KeyEvent.VK_UP) {
        if (box.getSelectedItem() != null) {
          int tmp=box.getSelectedIndex();
          box.setSelectedIndex(tmp - 1);
        }
 else {
          box.setSelectedIndex(box.getItemCount() - 1);
        }
      }
 else       if (c == KeyEvent.VK_ENTER) {
        if (box.getSelectedItem() != null) {
          input.setText(tempIn + box.getSelectedItem().toString());
          if (box.getSelectedItem().toString().endsWith("::")) {
            if (box.getSelectedItem().toString().equals("attribute::")) {
              tempIn=input.getText();
              atts=true;
              showSpecPop();
            }
 else {
              tempIn=input.getText();
              nodes=true;
              showSpecPop();
            }
          }
          slashC=0;
          if (box.getSelectedItem() != null) {
            pop.hide();
          }
        }
      }
 else       if (c == KeyEvent.VK_SHIFT) {
        return;
      }
 else {
        if (popInit) {
          if (tempIn.length() == 0) {
            pop.hide();
          }
 else {
            slashC=0;
            showSpecPop();
          }
        }
      }
      if (c == KeyEvent.VK_ESCAPE)       return;
      final String query=input.getText();
      final XPParser parser=new XPParser(query);
      try {
        parser.parse();
        GUI.get().execute(Commands.XPATH,query);
      }
 catch (      final QueryException ex) {
      }
    }
  }
);
  setBorder(10,10,10,10);
  setLayout(new BorderLayout(0,4));
  back.add(input,BorderLayout.CENTER);
  add(back,BorderLayout.NORTH);
  refreshLayout();
}
