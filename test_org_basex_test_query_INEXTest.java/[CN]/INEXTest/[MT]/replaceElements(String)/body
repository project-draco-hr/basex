{
  byte[] b=str.getBytes();
  final byte[] or=new byte[]{' ','o','r',' '};
  final byte[] co=new byte[]{' ',',',' '};
  final byte[] txt=new byte[]{'/','t','e','x','t','(',')'};
  int i=0;
  int sp=-1, sb=-1, sbb=-1, os=-1, ebb=-1;
  byte[] path=new byte[]{};
  ;
  TokenList tl;
  while (i < b.length) {
switch (b[i]) {
case '/':
      sp=sp == -1 ? i : sp;
    break;
case '(':
  sb=i;
i++;
if (b[i] == ')' || b[i] == ' ') break;
boolean f=false;
while (i < b.length && b[i] != ')' && !f) {
f=b[i] == '"' || b[i] == '\'';
i++;
}
if (f) break;
i=sb;
path=new byte[i - sp];
System.arraycopy(b,sp,path,0,path.length);
tl=new TokenList();
os=i + 1;
while (i < b.length && b[i] != ')') {
if (b[i] == '|') {
final byte[] tok=new byte[i - os];
System.arraycopy(b,os,tok,0,tok.length);
tl.add(tok);
os=i + 1;
}
i++;
}
if (tl.size() > 0) {
final byte[] tok=new byte[i - os];
System.arraycopy(b,os,tok,0,tok.length);
tl.add(tok);
path=new byte[sb - sp];
System.arraycopy(b,sp,path,0,path.length);
}
i++;
if (sbb > -1 && ebb > -1) {
os=0;
byte[] bn=new byte[]{};
final byte[][] tok=tl.finish();
for (int k=0; k < tok.length; k++) {
bn=Array.add(bn,b,0,ebb + 1);
bn=Array.add(bn,b,ebb + 1,sb);
bn=Array.add(bn,tok[k],0,tok[k].length);
if (k < tl.size() - 1) bn=Array.add(bn,co,0,co.length);
}
i=bn.length;
b=bn;
}
 else if (sbb == -1 && ebb == -1) {
sbb=i;
while (sbb < b.length && b[sbb] != '[') sbb++;
byte[] bn=new byte[]{};
final byte[][] tok=tl.finish();
for (int k=0; k < tok.length; k++) {
bn=Array.add(bn,b,0,sb);
bn=Array.add(bn,tok[k],0,tok[k].length);
bn=Array.add(bn,b,sbb,b.length);
if (k < tok.length - 1) bn=Array.add(bn,or,0,or.length);
}
i=sb;
b=bn;
}
 else {
ebb=i + 1;
while (ebb < b.length && !(b[ebb] == ']' || ebb + 2 < b.length && b[ebb] == ' ' && b[ebb + 1] == 'o' && b[ebb + 2] == 'r' || ebb + 3 < b.length && b[ebb] == ' ' && b[ebb + 1] == 'a' && b[ebb + 2] == 'n' && b[ebb + 3] == 'd')) ebb++;
byte[] bn=new byte[]{};
final byte[][] tok=tl.finish();
bn=Array.add(bn,b,0,sbb);
for (int k=0; k < tl.size(); k++) {
bn=Array.add(bn,b,sbb + (k == 0 ? 0 : 1),sb);
bn=Array.add(bn,tok[k],0,tok[k].length);
bn=Array.add(bn,b,i,ebb);
if (k < tok.length - 1) bn=Array.add(bn,or,0,or.length);
}
bn=Array.add(bn,b,ebb,b.length);
b=bn;
ebb=-1;
}
break;
case '[':
sbb=i;
break;
case ']':
ebb=i;
break;
case 'o':
if (ebb > 0 && i + 1 < b.length && b[i + 1] == 'r') {
sp=-1;
sb=-1;
sbb=-1;
os=-1;
ebb=-1;
}
break;
case '.':
if (b[i + 1] != '/') {
final byte[] bn=new byte[b.length + 1 + txt.length];
System.arraycopy(b,0,bn,0,i + 1);
bn[i + 1]='/';
System.arraycopy(txt,0,bn,i + 2,txt.length);
System.arraycopy(b,i + 1,bn,i + 2 + txt.length,b.length - i - 1);
b=bn;
}
 else {
final int j=i;
while (i < b.length && b[i] != ' ') i++;
if (b.length - 6 > 0 && b[i - 6] == 't' && b[i - 5] == 'e' && b[i - 4] == 'x' && b[i - 3] == 't' && b[i - 2] == '(' && b[i - 1] == ')') break;
final byte[] bn=new byte[b.length + txt.length];
System.arraycopy(b,0,bn,0,i);
System.arraycopy(txt,0,bn,i,txt.length);
System.arraycopy(b,i,bn,i + txt.length,b.length - i);
b=bn;
i=j;
}
break;
}
i++;
}
return new String(b);
}
