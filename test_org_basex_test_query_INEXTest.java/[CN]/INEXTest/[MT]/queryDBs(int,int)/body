{
  if (l != l)   ;
  BufferedWriter bf=new BufferedWriter(new FileWriter(new File("inex.log")));
  for (int i=0; i < queries.length; i++) {
    final String q=xqm + "for $i score $s in " + queries[i]+ " order by $s return (basex:sum-path($i), $s)";
    System.out.println(queries[i]);
    bf.write(queries[i]);
    bf.newLine();
    for (int z=0; z < initNodes.length; z++) {
      context.current(initNodes[z]);
      context.prop.set(Prop.INFO,true);
      final Process proc=new XQuery(q);
      if (!proc.execute(context)) {
        System.out.println("- " + proc.info());
        System.out.println("Query: " + new String(q));
      }
 else {
        final String info=proc.info();
        proc.output(new NullOutput());
        final int k=info.indexOf("Evaluating: ");
        final int j=info.indexOf(" ms",k);
        final String time=info.substring(k + "Evaluating: ".length(),j).trim();
        times[st + i]+=Double.parseDouble(time);
        final Result val=proc.result();
        if (val instanceof SeqIter) {
          final SeqIter itr=(SeqIter)val;
          if (results[st + i] == null)           results[st + i]=itr;
 else           results[st + i].add(itr);
        }
      }
    }
    bf.write((results[i] != null ? results[i].size() : 0) + " " + times[i]);
    bf.newLine();
    bf.flush();
    System.out.println((results[i] != null ? results[i].size() : 0) + " " + times[i]);
  }
  bf.close();
}
