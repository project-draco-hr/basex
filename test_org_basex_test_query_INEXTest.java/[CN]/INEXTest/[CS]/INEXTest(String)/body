{
  new Open(db).execute(context,null);
  BufferedWriter out=new BufferedWriter(new FileWriter(new File("INEX/INEX1.log")));
  BufferedWriter sub=new BufferedWriter(new FileWriter(new File("INEX/sub")));
  final File file=new File("INEX/co1.que");
  if (!file.exists()) {
    System.out.println("Could not read \"" + file.getAbsolutePath() + "\"");
    return;
  }
  Prop.serialize=true;
  Prop.info=true;
  if (s) {
    sub.write("<efficiency-submission ");
    sub.write("participant-id=\"1111111\" ");
    sub.write("run-id=\"1111111\" ");
    sub.write("taks=\"" + task[0] + "\" ");
    sub.write("type=\"" + type[0] + "\" ");
    sub.write("query=\"automatic\" ");
    sub.write("sequential=\"yes\"");
    sub.write(">");
    sub.newLine();
    sub.write("<topic-fields ");
    sub.write("co_title=" + "\"no\" ");
    sub.write("cas_title=" + "\"no\" ");
    sub.write("xpath_title=" + "\"yes\" ");
    sub.write("text_predicates=" + "\"no\" ");
    sub.write("description=" + "\"no\" ");
    sub.write("narrative=" + "\"no\" ");
    sub.write("/>");
    sub.newLine();
    sub.write("<general_description>");
    sub.newLine();
    sub.write("</general_description>");
    sub.newLine();
    sub.write("<ranking_description>");
    sub.newLine();
    sub.write("</ranking_description>");
    sub.newLine();
    sub.write("<indexing_description>");
    sub.newLine();
    sub.write("</indexing_description>");
    sub.newLine();
    sub.write("<caching_description>");
    sub.newLine();
    sub.write("</caching_description>");
    sub.newLine();
  }
  final FileInputStream fis=new FileInputStream(file);
  final InputStreamReader isr=new InputStreamReader(fis,"UTF8");
  final BufferedReader br=new BufferedReader(isr);
  String line=null;
  while ((line=br.readLine()) != null) {
    int s0=line.indexOf('"');
    int s1=line.indexOf('"',s0 + 1);
    final int tid=Integer.parseInt(line.substring(s0 + 1,s1));
    s0=line.indexOf('"',s1 + 1);
    s1=line.indexOf('"',s0 + 1);
    s0=line.indexOf('/',s1);
    String q=line.substring(s0);
    q=xqm + "for $i score $s in " + q+ " return (basex:sum-path($i), $s)";
    final Process proc=new XQuery(q);
    if (!proc.execute(context)) {
      System.out.println("- " + proc.info());
      System.out.println("Query: " + q);
    }
 else {
      final String info=proc.info();
      int i=info.indexOf("Total Time: ");
      int j=info.indexOf(" ms",i);
      String time=info.substring(i + "Total Time: ".length() + 2,j);
      if (s) {
        sub.write("<topic ");
        sub.write("topic-id=\"" + tid + "\" ");
        sub.write("total_time_ms=\"" + time + "\" ");
        sub.write(">");
        sub.newLine();
        sub.write("<result>");
        sub.newLine();
        sub.write("<file>" + file + "</file>");
        sub.newLine();
        Result val=proc.result();
        if (val instanceof SeqIter) {
          SeqIter itr=(SeqIter)val;
          System.out.println(itr.size());
          Item a;
          int r=1;
          while ((a=itr.next()) != null) {
            if (a instanceof Str) {
              sub.write("<path>" + a + "</path>");
              sub.newLine();
              sub.write("<rank>" + r++ + "</rank>");
              sub.newLine();
            }
 else             if (a instanceof Dbl) {
              sub.write("<rsv>" + ((Dbl)a).dbl() + "</rsv>");
              sub.newLine();
            }
          }
        }
        sub.write("</result>");
        sub.newLine();
        sub.write("</topic>");
        sub.newLine();
      }
    }
    if (++curr >= STOPAFTER)     break;
  }
  out.flush();
  out.close();
  br.close();
  if (s) {
    sub.write("</efficiency-submission>");
    sub.flush();
    sub.close();
  }
}
