{
  final String xquery=query != null ? query : ".";
  final int s=start != null ? Integer.valueOf(start) : 0;
  final int m=count != null ? Integer.valueOf(count) : Integer.MAX_VALUE - s;
  SerializeProp props=null;
  try {
    props=new SerializeProp(serialize);
    if (wrap != null) {
      if (wrap.equals(SerializeProp.YES)) {
        props.set(SerializeProp.WRAP_PRE,JAXRX);
        props.set(SerializeProp.WRAP_URI,URL);
      }
 else       if (!wrap.equals(SerializeProp.NO)) {
        badRequest(Main.info(Text.SETVAL + Text.NL,EURLParameter.WRAP,wrap));
      }
    }
  }
 catch (  final IOException ex) {
    badRequest(ex.toString());
  }
  final Context ctx=new Context();
  try {
    new Open(resource).execute(ctx);
  }
 catch (  BaseXException ex) {
    notFound(ex.getMessage());
  }
  QueryProcessor qp=null;
  try {
    final XMLSerializer xml=new XMLSerializer(out,props);
    qp=new QueryProcessor(xquery,ctx);
    final Iter iter=qp.iter();
    for (int c=0; c < s + m; c++) {
      final Item it=iter.next();
      if (it == null)       break;
      if (c < s)       continue;
      xml.openResult();
      it.serialize(xml);
      xml.closeResult();
    }
    xml.close();
  }
 catch (  final QueryException ex) {
    badRequest(ex.getMessage());
  }
catch (  final IOException ex) {
    error(ex);
  }
 finally {
    try {
      if (qp != null)       qp.close();
    }
 catch (    final Exception ex) {
    }
    ctx.close();
  }
}
