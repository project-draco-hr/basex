{
  System.out.println("\nCreating random tokens...");
  indexed=new String[nrTokens];
  copy=new String[nrTokens];
  for (int i=0; i < nrTokens; i++) {
    indexed[i]=randomToken();
    copy[i]=new String(indexed[i].toString());
  }
  System.out.println(nrTokens + " tokens created.");
  Performance.gc(5);
  System.out.println(Performance.getMem());
  System.out.println("\nBuilding index...");
  CTArrayNew index=new CTArrayNew(nrTokens);
  for (int i=0; i < nrTokens; i++) {
    index.index(indexed[i].getBytes(),i,i * nrTokens);
  }
  System.out.println(nrTokens + " tokens indexed.");
  Performance.gc(5);
  System.out.println(Performance.getMem());
  if (nrTokens > 100) {
    System.out.println("- Index might contain duplicate tokens.");
  }
  System.out.println("\nRequesting indexed tokens...");
  int[][] data;
  for (int i=0; i < nrTokens; i++) {
    data=index.getNodeFromTrie(copy[i].getBytes());
    if (data == null) {
      System.out.println("- Token " + indexed[i] + " was not found.");
      break;
    }
 else     if (data[0][0] != i && data[1][0] != i * nrTokens) {
      System.out.println(CTArrayNew.intArrayToString(data[0]));
      System.out.println(CTArrayNew.intArrayToString(data[1]));
    }
  }
  indexed=null;
  for (int i=0; i < nrTokens; i++) {
    copy[i]=randomToken();
  }
  System.out.println("\nRequesting random tokens...");
  for (int i=0; i < nrTokens; i++) {
    index.getNodeFromTrie(copy[i].getBytes());
  }
}
