{
  final double dstart=checkDbl(expr[1],ctx);
  if (Double.isNaN(dstart))   return Empty.SEQ;
  final long start=StrictMath.round(dstart);
  final boolean sinf=start == Long.MIN_VALUE;
  long length=Long.MAX_VALUE;
  if (expr.length > 2) {
    final double dlength=checkDbl(expr[2],ctx);
    if (Double.isNaN(dlength))     return Empty.SEQ;
    if (sinf && dlength == Double.POSITIVE_INFINITY)     return Empty.SEQ;
    length=StrictMath.round(dlength);
  }
  final boolean linf=length == Long.MAX_VALUE;
  if (sinf)   return linf ? expr[0].value(ctx) : Empty.SEQ;
  final Iter iter=ctx.iter(expr[0]);
  if (iter instanceof ValueIter) {
    final Value val=iter.value();
    final long rs=val.size();
    final long from=Math.max(1,start) - 1;
    final long len=Math.min(rs - from,length + Math.min(0,start - 1));
    return SubSeq.get(val,from,len);
  }
  final long max=iter.size();
  if (max >= 0) {
    final long from=Math.max(1,start) - 1;
    final long len=Math.min(max - from,length + Math.min(0,start - 1));
    if (from >= max || len <= 0)     return Empty.SEQ;
    final ValueBuilder vb=new ValueBuilder(Math.max((int)len,1));
    for (long i=0; i < len; i++)     vb.add(iter.get(from + i));
    return vb.value();
  }
  final long e=linf ? length : start + length;
  final ValueBuilder build=new ValueBuilder();
  Item i;
  for (int c=1; (i=iter.next()) != null; c++) {
    if (c >= e) {
      iter.reset();
      break;
    }
    if (c >= start)     build.add(i);
  }
  return build.value();
}
