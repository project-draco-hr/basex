{
  final double ds=checkDbl(expr[1],ctx);
  if (Double.isNaN(ds))   return Empty.ITER;
  final long s=StrictMath.round(ds);
  final boolean si=s == Long.MIN_VALUE;
  long l=Long.MAX_VALUE;
  if (expr.length > 2) {
    final double dl=checkDbl(expr[2],ctx);
    if (Double.isNaN(dl))     return Empty.ITER;
    if (si && dl == Double.POSITIVE_INFINITY)     return Empty.ITER;
    l=StrictMath.round(dl);
  }
  final boolean li=l == Long.MAX_VALUE;
  if (si)   return li ? expr[0].iter(ctx) : Empty.ITER;
  final Iter iter=ctx.iter(expr[0]);
  if (iter instanceof ValueIter) {
    final Value val=iter.value();
    final long rs=val.size();
    final long from=Math.max(1,s) - 1;
    final long len=Math.min(rs - from,l + Math.min(0,s - 1));
    return SubSeq.get(val,from,len).iter();
  }
  final long max=iter.size();
  final long e=li ? l : s + l;
  if (max != -1)   return new Iter(){
    final long m=Math.min(e,max + 1);
    long c=Math.max(1,s);
    @Override public Item next() throws QueryException {
      return c < m ? iter.get(c++ - 1) : null;
    }
    @Override public Item get(    final long i) throws QueryException {
      return iter.get(c + i - 1);
    }
    @Override public long size(){
      return Math.max(0,m - c);
    }
    @Override public boolean reset(){
      c=Math.max(1,s);
      return true;
    }
  }
;
  return new Iter(){
    long c;
    @Override public Item next() throws QueryException {
      while (true) {
        final Item i=iter.next();
        if (i == null || ++c >= e)         return null;
        if (c >= s)         return i;
      }
    }
  }
;
}
