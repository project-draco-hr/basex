{
  final Constr c=new Constr(ctx,expr[1]);
  final NodIter seq=c.children;
  final NodIter aSeq=c.ats;
  if (c.errAtt)   Err.or(UPNOATTRPER);
  if (c.duplAtt != null)   Err.or(UPATTDUPL,c.duplAtt);
  final Iter t=SeqIter.get(expr[0].iter(ctx));
  Item i=t.next();
  if (i == null)   Err.or(UPSEQEMP,this);
  if (!(i instanceof Nod) || t.size() > 1)   Err.or(UPTRGTYP,this);
  final Nod n=(Nod)i;
  if (before || after) {
    if (n.type == Type.ATT)     Err.or(UPTRGTYP2,this);
    if (n.parent() == null)     Err.or(UPPAREMPTY,this);
  }
 else {
    if (n.type != Type.ELM && n.type != Type.DOC)     Err.or(UPTRGTYP,this);
  }
  final Nod par=n.parent();
  if (aSeq.size() > 0) {
    if (before || after) {
      if (par == null)       Err.or(UPDATE,this);
      if (par.type == Type.DOC)       Err.or(UPWRTRGTYP2,this);
      ctx.updates.addPrimitive(new InsertAttribute(par,aSeq,-1));
    }
 else {
      if (n.type == Type.DOC)       Err.or(UPWRTRGTYP2,this);
      ctx.updates.addPrimitive(new InsertAttribute(n,aSeq,-1));
    }
  }
  if (seq.size() > 0) {
    UpdatePrimitive up=null;
    if (before) {
      up=new InsertBeforePrimitive(n,seq,-1);
    }
 else     if (after) {
      up=new InsertAfterPrimitive(n,seq,-1);
    }
 else {
      if (first)       up=new InsertIntoFirstPrimitive(n,seq,-1);
 else       if (last)       up=new InsertIntoLastPrimitive(n,seq,-1);
 else       up=new InsertIntoPrimitive(n,seq,-1);
    }
    ctx.updates.addPrimitive(up);
  }
  return Iter.EMPTY;
}
