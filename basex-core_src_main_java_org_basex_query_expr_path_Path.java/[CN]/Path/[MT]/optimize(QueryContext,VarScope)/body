{
  final Value v=initial(qc);
  if (v != null && v.isEmpty() || emptyPath(v))   return optPre(qc);
  for (  final Expr step : steps)   if (step.isEmpty())   return optPre(qc);
  Expr e=mergeSteps(qc);
  if (e != this)   return e.optimize(qc,scp);
  if (v != null) {
    e=index(qc,v);
    if (e != this)     return e.optimize(qc,scp);
    e=children(qc,v);
    if (e != this)     return e.optimize(qc,scp);
  }
  final Path path=get(info,root,steps);
  final int sl=path.steps.length;
  final Expr lastExpr=path.steps[sl - 1];
  path.size=path.size(qc);
  path.seqType=SeqType.get(lastExpr.seqType().type,path.size);
  if (path.root == null && sl == 1 && lastExpr instanceof Step) {
    final Step lastStep=(Step)lastExpr;
    if (lastStep.axis == ATTR && lastStep.test.unique) {
      lastStep.seqType=lastStep.seqType.withOcc(Occ.ZERO_ONE);
      path.seqType=lastStep.seqType;
    }
  }
  return path;
}
