{
  index=reverse ? root.size : 0;
  trees=new Deep[8];
  trees[0]=root;
  tTop=0;
  nodes=new InnerNode[8];
  poss=new int[8];
  nTop=-1;
  Node<?,E> curr=reverse ? root.right[root.right.length - 1] : root.left[0];
  while (curr instanceof InnerNode) {
    final InnerNode<?,E> inner=(InnerNode<?,E>)curr;
    final int idx=reverse ? inner.arity() - 1 : 0;
    if (++nTop == nodes.length) {
      nodes=Arrays.copyOf(nodes,2 * nodes.length);
      poss=Arrays.copyOf(poss,2 * poss.length);
    }
    nodes[nTop]=inner;
    poss[nTop]=idx;
    curr=inner.getSub(idx);
  }
  deepPos=reverse ? root.right.length : -root.left.length;
  leaf=(Node<E,E>)curr;
  leafPos=reverse ? curr.arity() : 0;
}
