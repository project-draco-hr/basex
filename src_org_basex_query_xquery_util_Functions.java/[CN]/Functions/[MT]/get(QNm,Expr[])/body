{
  final Uri uri=name.uri;
  final byte[] ln=name.ln();
  if (uri.eq(Uri.XS)) {
    final SeqType seq=new SeqType(name,1,false);
    if (seq.type == null)     typeErr(name);
    if (args.length != 1)     Err.or(FUNCTYPE,name.str());
    return new Cast(args[0],seq);
  }
  if (Token.startsWith(uri.str(),JAVAPRE)) {
    final String c=Token.string(Token.substring(uri.str(),JAVAPRE.length));
    final StringBuilder sb=new StringBuilder(c);
    sb.append(".");
    boolean dash=false;
    for (    final char b : Token.string(ln).toCharArray()) {
      if (dash) {
        sb.append(Character.toUpperCase(b));
        dash=false;
      }
 else {
        dash=b == '-';
        if (!dash)         sb.append(b);
      }
    }
    final String java=sb.toString();
    try {
      final int i=java.lastIndexOf(".");
      final Class<?> cls=Class.forName(java.substring(0,i));
      final String mth=java.substring(i + 1);
      return new FunJava(cls,mth,args);
    }
 catch (    final ClassNotFoundException ex) {
      Err.or(FUNCJAVA,java);
    }
  }
  final Fun fun=FNIndex.get().get(ln,uri,args);
  if (fun != null)   return fun;
  for (int l=0; l < size; l++) {
    final QNm qn=func[l].var.name;
    final Uri u=qn.uri;
    final byte[] nm=qn.ln();
    if (Token.eq(ln,nm) && uri.eq(u) && args.length == func[l].args.length) {
      return new FunCall(l,args);
    }
  }
  if (Type.find(name,true) == null) {
    final Func f=new Func(new Var(name),new Var[args.length],false);
    return new FunCall(add(f),args);
  }
  return null;
}
