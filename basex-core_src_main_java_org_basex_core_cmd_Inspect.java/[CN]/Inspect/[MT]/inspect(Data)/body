{
  final MetaData md=data.meta;
  final Check invKind=new Check();
  final Check parRef=new Check();
  final Check parChild=new Check();
  final Check idPre=md.updindex ? new Check() : null;
  for (int pre=0; pre < md.size; pre++) {
    final int kind=data.kind(pre);
    if (kind > 6)     invKind.add(pre);
    final int par=data.parent(pre,kind);
    if (par >= 0) {
      final int parKind=data.kind(par);
      if (par >= pre)       parRef.add(pre);
      if (parKind != Data.DOC && parKind != Data.ELEM || par + data.size(par,parKind) < pre)       parChild.add(pre);
    }
    if (idPre != null && data.pre(data.id(pre)) != pre)     idPre.add(pre);
  }
  final TokenBuilder info=new TokenBuilder();
  info.addExt("Checking main table (% nodes):",md.size).add(Prop.NL);
  info.add(invKind.info("invalid node kinds"));
  info.add(parRef.info("invalid parent references"));
  info.add(parChild.info("wrong parent/descendant relationships"));
  if (idPre != null)   info.add(idPre.info("wrong id/pre mappings"));
  if (invKind.invalid + parRef.invalid + parChild.invalid == 0) {
    info.add("No inconsistencies found.").add(Prop.NL);
  }
 else {
    info.add("Warning: Database is inconsistent.").add(Prop.NL);
  }
  return info.toString();
}
