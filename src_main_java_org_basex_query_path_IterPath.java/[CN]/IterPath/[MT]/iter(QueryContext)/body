{
  return new NodeIter(){
    Expr[] expr;
    Iter[] iter;
    ANode node;
    int p;
    @Override public ANode next() throws QueryException {
      if (iter == null) {
        if (expr == null) {
          expr=steps;
          if (root != null) {
            expr=new Expr[steps.length + 1];
            expr[0]=root;
            System.arraycopy(steps,0,expr,1,steps.length);
          }
        }
        iter=new Iter[expr.length];
        iter[0]=ctx.iter(expr[0]);
      }
      final Value cv=ctx.value;
      final long cp=ctx.pos;
      final long cs=ctx.size;
      try {
        while (true) {
          final Item item=iter[p].next();
          if (item == null) {
            if (--p == -1) {
              node=null;
              break;
            }
          }
 else           if (p < iter.length - 1) {
            ++p;
            ctx.value=item;
            if (iter[p] == null || !iter[p].reset())             iter[p]=ctx.iter(expr[p]);
          }
 else {
            if (!item.type.isNode())             NODESPATH.thrw(input,this,item.type);
            final ANode n=(ANode)item;
            if (node == null || !node.is(n)) {
              node=n;
              break;
            }
          }
        }
        return node;
      }
  finally {
        ctx.value=cv;
        ctx.pos=cp;
        ctx.size=cs;
      }
    }
    @Override public boolean reset(){
      iter=null;
      node=null;
      p=0;
      return true;
    }
  }
;
}
