{
  return new Iter(){
    Expr[] expr;
    Iter[] iter;
    Nod node;
    int p;
    @Override public Nod next() throws QueryException {
      if (iter == null) {
        if (expr == null) {
          expr=step;
          if (root != null) {
            expr=new Expr[step.length + 1];
            expr[0]=root;
            System.arraycopy(step,0,expr,1,step.length);
          }
        }
        iter=new Iter[expr.length];
        iter[0]=ctx.iter(expr[0]);
      }
      final Value cv=ctx.resource.value;
      final long cp=ctx.pos;
      while (true) {
        final Item item=iter[p].next();
        if (item == null) {
          if (--p == -1) {
            node=null;
            break;
          }
        }
 else         if (p < iter.length - 1) {
          ++p;
          ctx.resource.value=item;
          if (iter[p] == null || !iter[p].reset())           iter[p]=ctx.iter(expr[p]);
        }
 else {
          if (!item.node())           NODESPATH.thrw(input,this,item.type);
          final Nod n=(Nod)item;
          if (node == null || !node.is(n)) {
            node=n;
            break;
          }
        }
      }
      ctx.resource.value=cv;
      ctx.pos=cp;
      return node;
    }
    @Override public boolean reset(){
      iter=null;
      node=null;
      p=0;
      return true;
    }
  }
;
}
