{
  final byte[] pkgDir=ctx.context.repo.pkgDict.get(pkgName);
  if (pkgDir == null)   error(PKGNOTINSTALLED);
  final File pkgDesc=new File(ctx.context.prop.get(Prop.REPOPATH) + Prop.DIRSEP + string(pkgDir)+ Prop.DIRSEP+ PKGDESC);
  if (!pkgDesc.exists())   error(PKGDESCMISS,string(pkgName));
  final IOFile io=new IOFile(pkgDesc);
  final Package pkg=PackageParser.parse(io,ctx.context,input());
  if (pkg.dep.size() != 0)   pkgsToLoad.add(pkgName);
  for (  final Dependency dep : pkg.dep) {
    final byte[] depPkg=PkgValidator.getDepPkg(dep,ctx.context);
    if (depPkg == null) {
      error(PKGNOTINSTALLED,string(dep.pkg));
    }
 else {
      if (pkgsToLoad.id(depPkg) != 0)       error(CIRCMODULE);
      loadPackage(depPkg);
    }
  }
  for (  final Component comp : pkg.comps) {
    final String moduleFile=ctx.context.prop.get(Prop.REPOPATH) + Prop.DIRSEP + string(pkgDir)+ Prop.DIRSEP+ string(pkg.abbrev)+ Prop.DIRSEP+ string(comp.file);
    if (!modules.contains(comp.namespace) && !ctx.modLoaded.contains(moduleFile))     module(moduleFile,Uri.uri(comp.namespace));
  }
  if (pkgsToLoad.id(pkgName) != 0)   pkgsToLoad.delete(pkgName);
}
