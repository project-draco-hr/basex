{
  ForLet[] fl=null;
  boolean comma=false;
  do {
    final boolean fr=wdConsumeWs(FOR,DOLLAR,NOFOR);
    boolean score=!fr && wdConsumeWs(LET,SCORE,NOLET);
    if (score)     wsCheck(SCORE);
 else     if (!fr && !wdConsumeWs(LET,DOLLAR,NOLET))     return fl;
    do {
      if (comma && !fr)       score=wsConsumeWs(SCORE);
      final QNm name=varName();
      final SeqType type=score ? SeqType.DBL : wsConsumeWs(AS) ? sequenceType() : null;
      final Var var=new Var(input(),name,type);
      final Var ps=fr && wsConsumeWs(AT) ? new Var(input(),varName(),SeqType.ITR) : null;
      final Var sc=fr && wsConsumeWs(SCORE) ? new Var(input(),varName(),SeqType.DBL) : null;
      wsCheck(fr ? IN : ASSIGN);
      final Expr e=check(single(),NOVARDECL);
      ctx.vars.add(var);
      if (fl == null)       fl=new ForLet[1];
 else       fl=Arrays.copyOf(fl,fl.length + 1);
      if (sc != null) {
        if (sc.name.eq(name) || ps != null && sc.name.eq(ps.name))         error(VARDEFINED,sc);
        ctx.vars.add(sc);
      }
      if (ps != null) {
        if (name.eq(ps.name))         error(VARDEFINED,ps);
        ctx.vars.add(ps);
      }
      fl[fl.length - 1]=fr ? new For(input(),e,var,ps,sc) : new Let(input(),e,var,score);
      score=false;
      comma=true;
    }
 while (wsConsume(COMMA));
    comma=false;
  }
 while (true);
}
