{
  if (pkgsLoaded.id(pkgName) != 0)   return;
  final byte[] pDir=ctx.context.repo.pkgDict().get(pkgName);
  if (pDir == null)   error(NECPKGNOTINST);
  final IOFile pkgDir=ctx.context.repo.path(string(pDir));
  final IO pkgDesc=new IOFile(pkgDir,PkgText.DESCRIPTOR);
  if (!pkgDesc.exists())   Util.debug(PkgText.NOTEXP,string(pkgName));
  final Package pkg=new PkgParser(ctx.context,input()).parse(pkgDesc);
  final IO jarDesc=new IOFile(pkgDir,PkgText.JARDESC);
  if (jarDesc.exists())   loadJars(jarDesc,pkgDir,string(pkg.abbrev));
  if (pkg.dep.size() != 0)   pkgsToLoad.add(pkgName);
  for (  final Dependency d : pkg.dep) {
    if (d.pkg != null) {
      final byte[] depPkg=new PkgValidator(ctx.context,input()).getDepPkg(d);
      if (depPkg == null) {
        error(NECPKGNOTINST,string(d.pkg));
      }
 else {
        if (pkgsToLoad.id(depPkg) != 0)         error(CIRCMODULE);
        loadPackage(depPkg,pkgsToLoad,pkgsLoaded);
      }
    }
  }
  for (  final Component comp : pkg.comps) {
    final String path=new IOFile(new IOFile(pkgDir,string(pkg.abbrev)),string(comp.file)).path();
    module(token(path),Uri.uri(comp.uri));
  }
  if (pkgsToLoad.id(pkgName) != 0)   pkgsToLoad.delete(pkgName);
  pkgsLoaded.add(pkgName);
}
