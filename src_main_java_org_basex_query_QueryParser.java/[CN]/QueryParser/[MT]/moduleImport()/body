{
  byte[] ns=EMPTY;
  if (wsConsumeWs(NSPACE)) {
    ns=ncName(XPNAME);
    wsCheck(IS);
  }
  final byte[] uri=trim(stringLiteral());
  if (uri.length == 0)   error(NSMODURI);
  if (modules.contains(uri))   error(DUPLMODULE,uri);
  modules.add(uri);
  if (ns != EMPTY)   ctx.sc.ns.add(ns,uri,input());
  try {
    if (wsConsumeWs(AT)) {
      do {
        module(stringLiteral(),uri);
      }
 while (wsConsumeWs(COMMA));
      return;
    }
    if (startsWith(uri,JAVAPRE)) {
      final String path=string(substring(uri,JAVAPRE.length));
      final Class<?> clz=Reflect.find(path);
      if (clz == null)       error(NOMODULE,uri);
      if (clz.getSuperclass() != QueryModule.class)       error(NOCONS,path,QueryModule.class);
      final QueryModule jm=(QueryModule)Reflect.get(clz);
      if (jm == null)       error(NOINV,uri);
      jm.init(ctx,input());
      final ArrayList<Method> list=new ArrayList<Method>();
      for (      final Method m : clz.getMethods()) {
        if (m.getDeclaringClass() == clz)         list.add(m);
      }
      ctx.javaModules.put(jm,list);
      return;
    }
    final TokenSet pkgs=ctx.context.repo.nsDict().get(uri);
    if (pkgs != null) {
      for (      final byte[] pkg : pkgs) {
        if (pkg != null)         loadPackage(pkg,new TokenSet(),new TokenSet());
      }
      return;
    }
    boolean found=false;
    for (    final byte[] u : MODULES)     found|=eq(uri,u);
    final byte[] path=ctx.modDeclared.get(uri);
    if (path != null) {
      module(path,uri);
    }
 else     if (!found)     error(NOMODULE,uri);
  }
 catch (  final StackOverflowError ex) {
    error(CIRCMODULE);
  }
}
