{
  skipWS();
  final QNm name=eQName(QNAMEINV,ctx.sc.xquery3() ? XQURI : URICHECK);
  final byte[] val=stringLiteral();
  final String key=string(name.local());
  if (ctx.sc.xquery3() && eq(name.uri(),OUTPUTURI)) {
    if (module != null)     error(MODOUT);
    if (ctx.serProp == null)     ctx.serProp=new SerializerProp();
    if (ctx.serProp.get(key) == null)     error(OUTWHICH,key);
    if (!decl.add("S " + key))     error(OUTDUPL,key);
    if (key.equals(SerializerProp.S_PARAMETER_DOCUMENT[0].toString())) {
      final IO io=IO.get(string(resolvedUri(val).string()));
      try {
        final ANode node=new DBNode(io,ctx.context.prop).children().next();
        final InputInfo info=info();
        final TokenMap tm=FuncParams.serializerMap(node,info);
        FuncParams.serializerProp(tm,info);
        for (        final byte[] sk : tm)         ctx.serProp.set(string(sk),string(tm.get(sk)));
      }
 catch (      final IOException ex) {
        OUTDOC.thrw(info(),val);
      }
    }
    ctx.serProp.set(key,string(val));
  }
 else   if (ctx.sc.xquery3() && eq(name.uri(),XQURI)) {
    final boolean pf=key.equals(PROHIBIT_FEATURE);
    final boolean rf=!pf && key.equals(REQUIRE_FEATURE);
    if (!pf && !rf)     error(DECLOPTION,name);
    for (    final byte[] vl : split(val,' ')) {
      if (!XMLToken.isQName(vl))       error(DECLQNAME,val);
      final QNm qn=new QNm(vl,ctx);
      if (!qn.hasURI()) {
        if (qn.hasPrefix())         error(NSDECL,qn.prefix());
        qn.uri(XQURI);
      }
      final String k=string(qn.local());
      if (eq(qn.uri(),XQURI) && eq(k,F_SCHEMA_AWARE,F_STATIC_TYPING,F_MODULE,F_HIGHER_ORDER_FUNCTION,F_ALL_EXTENSIONS,F_ALL_OPTIONAL_FEATURES)) {
        if (eq(k,F_STATIC_TYPING,F_SCHEMA_AWARE,F_ALL_OPTIONAL_FEATURES))         error(pf ? FEATPROH : FEATNOTSUPP,k);
        if (rf && eq(k,F_ALL_EXTENSIONS))         error(FEATREQUALL,k);
        if (module != null && eq(k,F_MODULE))         error(FEATMODULE,k);
        if (decl.contains(k + (pf ? 'R' : 'P')))         error(FEATREQPRO,k);
        if (pf && eq(k,F_MODULE,F_HIGHER_ORDER_FUNCTION,F_ALL_EXTENSIONS,F_ALL_OPTIONAL_FEATURES))         error(FEATPROH,k);
        decl.add(k + (pf ? 'P' : 'R'));
      }
 else {
        error(DECLFEAT,vl);
      }
    }
  }
 else   if (eq(name.uri(),DBURI)) {
    final String ukey=key.toUpperCase(Locale.ENGLISH);
    final Object obj=ctx.context.prop.get(ukey);
    if (obj == null)     error(BASX_OPTIONS,ukey);
    ctx.globalOpt.put(ukey,obj);
    ctx.dbOptions.add(ukey);
    ctx.dbOptions.add(string(val));
  }
 else   if (eq(name.uri(),QUERYURI)) {
    if (key.equals(READ_LOCK)) {
      for (      final byte[] lock : split(val,','))       ctx.readLocks.add(DBLocking.USER_PREFIX + string(lock).trim());
    }
 else     if (key.equals(WRITE_LOCK)) {
      for (      final byte[] lock : split(val,','))       ctx.writeLocks.add(DBLocking.USER_PREFIX + string(lock).trim());
    }
 else {
      error(BASX_OPTIONS,key);
    }
  }
}
