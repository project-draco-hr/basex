{
  skipWS();
  final QNm name=eQName(QNAMEINV,URICHECK);
  final byte[] val=stringLiteral();
  if (ctx.sc.xquery3() && eq(name.uri(),OUTPUTURI)) {
    final String key=string(name.local());
    if (module != null)     error(MODOUT);
    if (ctx.serProp == null)     ctx.serProp=new SerializerProp();
    if (ctx.serProp.get(key) == null)     error(OUTWHICH,key);
    if (serial.contains(key))     error(OUTDUPL,key);
    ctx.serProp.set(key,string(val));
    serial.add(key);
  }
 else   if (eq(name.uri(),DBURI)) {
    final String key=string(uc(name.local()));
    final Object obj=ctx.context.prop.get(key);
    if (obj == null)     error(BASX_OPTIONS,key);
    ctx.globalOpt.put(key,obj);
    ctx.dbOptions.add(key);
    ctx.dbOptions.add(string(val));
  }
 else   if (eq(name.uri(),QUERYURI)) {
    if (eq(name.local(),READ_LOCK)) {
      for (      final byte[] lock : split(val,','))       ctx.userReadLocks.add(DBLocking.USER_PREFIX + string(lock).trim());
    }
 else     if (eq(name.local(),WRITE_LOCK)) {
      for (      final byte[] lock : split(val,','))       ctx.userWriteLocks.add(DBLocking.USER_PREFIX + string(lock).trim());
    }
 else {
      error(BASX_OPTIONS,string(name.local()));
    }
  }
}
