{
  final int p=qp;
  if (!consumeWS(INSERT) || !consumeWS(NODE) && !consumeWS(NODES)) {
    qp=p;
    return null;
  }
  final Expr s=check(single(),INCOMPLETE);
  boolean first=false;
  boolean last=false;
  boolean before=false;
  boolean after=false;
  if (consumeWS(AS)) {
    first=consumeWS(FIRST);
    if (!first) {
      check(LAST);
      last=true;
    }
    check(INTO);
  }
 else   if (!consumeWS(INTO)) {
    after=consumeWS(AFTER);
    before=!after && consumeWS(BEFORE);
    if (!after && !before)     Err.or(INCOMPLETE);
  }
  final Expr trg=check(single(),INCOMPLETE);
  ctx.updating=true;
  return new Insert(info(),s,first,last,before,after,trg);
}
