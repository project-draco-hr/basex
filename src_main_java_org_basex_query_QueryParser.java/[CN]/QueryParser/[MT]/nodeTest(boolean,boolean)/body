{
  final int p=qp;
  if (consume('*')) {
    if (!consume(':'))     return new NameTest(att,input());
    return new NameTest(new QNm(ncName(QNAMEINV)),NameTest.Name.NAME,att,input());
  }
  final QNm name=eQName(null,SKIPCHECK);
  if (name != null) {
    final int p2=qp;
    if (all && wsConsumeWs(PAR1)) {
      final NodeType type=NodeType.find(name);
      if (type != null) {
        tok.reset();
        while (!consume(PAR2)) {
          if (!more())           error(TESTINCOMPLETE);
          tok.add(consume());
        }
        skipWS();
        return tok.trim().size() == 0 ? Test.get(type) : kindTest(type,tok.finish());
      }
    }
 else {
      qp=p2;
      if (name.hasPrefix() || !consume(':')) {
        skipWS();
        names.add(new QNmCheck(name,!att));
        return new NameTest(name,NameTest.Name.STD,att,input());
      }
      if (consume('*')) {
        final QNm nm=new QNm(concat(name.string(),COLON));
        names.add(new QNmCheck(nm,!att));
        return new NameTest(nm,NameTest.Name.NS,att,input());
      }
    }
  }
 else   if (ctx.xquery3 && quote(curr())) {
    final byte[] u=stringLiteral();
    if (consume(':') && consume('*')) {
      final QNm nm=new QNm(COLON,u);
      return new NameTest(nm,NameTest.Name.NS,att,input());
    }
  }
  qp=p;
  return null;
}
