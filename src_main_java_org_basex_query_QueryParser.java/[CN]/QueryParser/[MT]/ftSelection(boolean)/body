{
  FTExpr expr=ftOr(prg);
  FTExpr old;
  FTExpr first=null;
  boolean ordered=false;
  do {
    old=expr;
    if (consumeWS(ORDERED)) {
      ordered=true;
      old=null;
    }
 else     if (consumeWS(WINDOW)) {
      expr=new FTWindow(input(),expr,additive(),ftUnit());
    }
 else     if (consumeWS(DISTANCE)) {
      final Expr[] rng=ftRange();
      if (rng == null)       error(FTRANGE);
      expr=new FTDistance(input(),expr,rng,ftUnit());
    }
 else     if (consumeWS(AT)) {
      final boolean start=consumeWS(START);
      final boolean end=!start && consumeWS(END);
      if (!start && !end)       error(INCOMPLETE);
      expr=new FTContent(input(),expr,start,end);
    }
 else     if (consumeWS(ENTIRE)) {
      check(CONTENT);
      expr=new FTContent(input(),expr,false,false);
    }
 else {
      final boolean same=consumeWS(SAME);
      final boolean diff=!same && consumeWS(DIFFERENT);
      if (same || diff) {
        FTUnit unit=null;
        if (consumeWS(SENTENCE))         unit=FTUnit.SENTENCE;
 else         if (consumeWS(PARAGRAPH))         unit=FTUnit.PARAGRAPH;
 else         error(INCOMPLETE);
        expr=new FTScope(input(),expr,unit,same);
      }
    }
    if (first == null && old != null && old != expr)     first=expr;
  }
 while (old != expr);
  if (ordered) {
    if (first == null)     return new FTOrder(input(),expr);
    first.expr[0]=new FTOrder(input(),first.expr[0]);
  }
  return expr;
}
