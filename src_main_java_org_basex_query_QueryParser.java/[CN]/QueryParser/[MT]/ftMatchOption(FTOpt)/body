{
  if (!wsConsumeWs(USING))   return false;
  if (wsConsumeWs(LOWERCASE)) {
    if (opt.set(LC) || opt.set(UC) || opt.set(CS))     error(FTDUP,CASE);
    opt.set(CS,true);
    opt.set(LC,true);
  }
 else   if (wsConsumeWs(UPPERCASE)) {
    if (opt.set(LC) || opt.set(UC) || opt.set(CS))     error(FTDUP,CASE);
    opt.set(CS,true);
    opt.set(UC,true);
  }
 else   if (wsConsumeWs(CASE)) {
    if (opt.set(LC) || opt.set(UC) || opt.set(CS))     error(FTDUP,CASE);
    opt.set(CS,wsConsumeWs(SENSITIVE));
    if (!opt.is(CS))     wsCheck(INSENSITIVE);
  }
 else   if (wsConsumeWs(DIACRITICS)) {
    if (opt.set(DC))     error(FTDUP,DIACRITICS);
    opt.set(DC,wsConsumeWs(SENSITIVE));
    if (!opt.is(DC))     wsCheck(INSENSITIVE);
  }
 else   if (wsConsumeWs(LANGUAGE)) {
    if (opt.ln != null)     error(FTDUP,LANGUAGE);
    final byte[] lan=stringLiteral();
    opt.ln=Language.get(string(lan));
    if (opt.ln == null)     error(FTLAN,lan);
  }
 else   if (wsConsumeWs(OPTION)) {
    optionDecl();
  }
 else {
    final boolean using=!wsConsumeWs(NO);
    if (wsConsumeWs(STEMMING)) {
      if (opt.set(ST))       error(FTDUP,STEMMING);
      opt.set(ST,using);
    }
 else     if (wsConsumeWs(THESAURUS)) {
      if (opt.th != null)       error(FTDUP,THESAURUS);
      opt.th=new ThesQuery();
      if (using) {
        final boolean par=wsConsume(PAR1);
        if (!wsConsumeWs(DEFAULT))         ftThesaurusID(opt.th);
        while (par && wsConsume(COMMA))         ftThesaurusID(opt.th);
        if (par)         wsCheck(PAR2);
      }
    }
 else     if (wsConsumeWs(STOP)) {
      wsCheck(WORDS);
      if (opt.sw != null)       error(FTDUP,STOP + ' ' + WORDS);
      opt.sw=new StopWords();
      if (wsConsumeWs(DEFAULT)) {
        if (!using)         error(FTSTOP);
      }
 else {
        boolean union=false;
        boolean except=false;
        while (using) {
          if (wsConsume(PAR1)) {
            do {
              final byte[] sl=stringLiteral();
              if (except)               opt.sw.delete(sl);
 else               if (!union || opt.sw.id(sl) == 0)               opt.sw.add(sl);
            }
 while (wsConsume(COMMA));
            wsCheck(PAR2);
          }
 else           if (wsConsumeWs(AT)) {
            String fn=string(stringLiteral());
            if (ctx.stop != null)             fn=ctx.stop.get(fn);
            IO fl=IO.get(fn);
            if (!fl.exists() && file != null)             fl=file.merge(fn);
            if (!opt.sw.read(fl,except))             error(NOSTOPFILE,fl);
          }
 else           if (!union && !except) {
            error(FTSTOP);
          }
          union=wsConsumeWs(UNION);
          except=!union && wsConsumeWs(EXCEPT);
          if (!union && !except)           break;
        }
      }
    }
 else     if (wsConsumeWs(WILDCARDS)) {
      if (opt.set(WC))       error(FTDUP,WILDCARDS);
      if (opt.is(FZ))       error(FTFZWC);
      opt.set(WC,using);
    }
 else     if (wsConsumeWs(FUZZY)) {
      if (opt.set(FZ))       error(FTDUP,FUZZY);
      if (opt.is(WC))       error(FTFZWC);
      opt.set(FZ,using);
    }
 else {
      error(FTMATCH,consume());
      return false;
    }
  }
  return true;
}
