{
  if (!consumeWS(USING))   return false;
  if (consumeWS(LOWERCASE)) {
    if (opt.isSet(FTOpt.LC) || opt.isSet(FTOpt.UC) || opt.isSet(FTOpt.CS))     error(FTDUP,CASE);
    opt.set(FTOpt.CS,true);
    opt.set(FTOpt.LC,true);
  }
 else   if (consumeWS(UPPERCASE)) {
    if (opt.isSet(FTOpt.LC) || opt.isSet(FTOpt.UC) || opt.isSet(FTOpt.CS))     error(FTDUP,CASE);
    opt.set(FTOpt.CS,true);
    opt.set(FTOpt.UC,true);
  }
 else   if (consumeWS(CASE)) {
    if (opt.isSet(FTOpt.LC) || opt.isSet(FTOpt.UC) || opt.isSet(FTOpt.CS))     error(FTDUP,CASE);
    opt.set(FTOpt.CS,consumeWS(SENSITIVE));
    if (!opt.is(FTOpt.CS))     check(INSENSITIVE);
  }
 else   if (consumeWS(DIACRITICS)) {
    if (opt.isSet(FTOpt.DC))     error(FTDUP,DIACRITICS);
    opt.set(FTOpt.DC,consumeWS(SENSITIVE));
    if (!opt.is(FTOpt.DC))     check(INSENSITIVE);
  }
 else   if (consumeWS(LANGUAGE)) {
    if (opt.ln != null)     error(FTDUP,LANGUAGE);
    opt.ln=lc(stringLiteral());
    if (!eq(opt.ln,EN))     error(FTLAN,opt.ln);
  }
 else   if (consumeWS(OPTION)) {
    optionDecl();
  }
 else {
    final boolean using=!consumeWS(NO);
    if (consumeWS2(STEMMING)) {
      if (opt.isSet(FTOpt.ST))       error(FTDUP,STEMMING);
      opt.set(FTOpt.ST,using);
    }
 else     if (consumeWS2(THESAURUS)) {
      if (opt.th != null)       error(FTDUP,THESAURUS);
      opt.th=new ThesQuery();
      if (using) {
        final boolean par=consumeWS2(PAR1);
        if (!consumeWS2(DEFAULT))         ftThesaurusID(opt.th);
        while (par && consumeWS2(COMMA))         ftThesaurusID(opt.th);
        if (par)         check(PAR2);
      }
    }
 else     if (consumeWS(STOP)) {
      check(WORDS);
      if (opt.sw != null)       error(FTDUP,STOP + ' ' + WORDS);
      opt.sw=new StopWords();
      if (consumeWS(DEFAULT)) {
        if (!using)         error(FTSTOP);
      }
 else {
        boolean union=false;
        boolean except=false;
        while (using) {
          if (consumeWS2(PAR1)) {
            do {
              final byte[] sl=stringLiteral();
              if (except)               opt.sw.delete(sl);
 else               if (!union || opt.sw.id(sl) == 0)               opt.sw.add(sl);
            }
 while (consumeWS2(COMMA));
            check(PAR2);
          }
 else           if (consumeWS2(AT)) {
            String fn=string(stringLiteral());
            if (ctx.stop != null)             fn=ctx.stop.get(fn);
            IO fl=IO.get(fn);
            if (!fl.exists() && file != null)             fl=file.merge(fn);
            if (!opt.sw.read(fl,except))             error(NOSTOPFILE,fl);
          }
 else           if (!union && !except) {
            error(FTSTOP);
          }
          union=consumeWS2(UNION);
          except=!union && consumeWS2(EXCEPT);
          if (!union && !except)           break;
        }
      }
    }
 else     if (consumeWS2(WILDCARDS)) {
      if (opt.isSet(FTOpt.WC))       error(FTDUP,WILDCARDS);
      if (opt.is(FTOpt.FZ))       error(FTFZWC);
      opt.set(FTOpt.WC,using);
    }
 else     if (consumeWS2(FUZZY)) {
      if (opt.isSet(FTOpt.FZ))       error(FTDUP,FUZZY);
      if (opt.is(FTOpt.WC))       error(FTFZWC);
      opt.set(FTOpt.FZ,using);
    }
 else {
      error(FTMATCH,consume());
      return false;
    }
  }
  return true;
}
