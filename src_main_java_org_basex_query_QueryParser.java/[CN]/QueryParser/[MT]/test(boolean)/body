{
  final int p=qp;
  final char ch=curr();
  if (XMLToken.isXMLLetter(ch)) {
    final byte[] name=qName(null);
    final int p2=qp;
    if (consumeWS(PAR1)) {
      final Type type=Type.node(new QNm(name));
      if (type != null) {
        tok.reset();
        while (!consumeWS(PAR2)) {
          if (curr() == 0)           error(TESTINCOMPLETE);
          tok.add(consume());
        }
        final byte[] ext=tok.finish();
        final QNm qn=checkTest(type,ext);
        return type == Type.NOD ? Test.NODE : new KindTest(type,qn);
      }
    }
 else {
      qp=p2;
      if (contains(name,':')) {
        skipWS();
        return new NameTest(new QNm(name,ctx,input()),NameTest.Kind.STD,att,input());
      }
      if (!consume(':')) {
        skipWS();
        final QNm nm=new QNm(name,att ? Uri.EMPTY : null);
        return new NameTest(nm,NameTest.Kind.STD,att,input());
      }
      if (consume('*')) {
        final QNm nm=new QNm(EMPTY,ctx.ns.uri(name,false,input()));
        return new NameTest(nm,NameTest.Kind.NS,att,input());
      }
    }
  }
 else   if (consume('*')) {
    if (!consume(':'))     return new NameTest(att,input());
    return new NameTest(new QNm(qName(QNAMEINV)),NameTest.Kind.NAME,att,input());
  }
  qp=p;
  return null;
}
