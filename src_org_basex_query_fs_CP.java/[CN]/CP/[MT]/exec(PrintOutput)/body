{
  String targetfile=paths.remove(paths.size - 1);
  while (paths.size > 0) {
    String sourcefile=paths.remove(0);
    final int[] sources=FSUtils.getChildren(data,curPre,sourcefile);
    sourcefile=sourcefile.substring(sourcefile.lastIndexOf('/') + 1);
    final int[] target=FSUtils.getChildren(data,curPre,targetfile);
    targetfile=targetfile.substring(targetfile.lastIndexOf('/') + 1);
    int preOfNewFile=4;
switch (sources.length) {
case 0:
      error(sourcefile,2);
    break;
case 1:
  if (FSUtils.isDir(data,sources[0])) {
    if (fRecursive) {
      cpRecursive(sources[0],target,targetfile);
      break;
    }
 else {
      error(FSUtils.getName(data,sources[0]),100);
      break;
    }
  }
final byte[] size=FSUtils.getSize(data,sources[0]);
final byte[] mtime=FSUtils.currTime();
if (target.length == 1) {
if (FSUtils.isDir(data,target[0])) {
final byte[] name=FSUtils.getName(data,sources[0]);
final byte[] suffix=FSUtils.getSuffix(data,sources[0]);
if (!(target[0] == FSUtils.getROOTDIR())) {
  preOfNewFile=target[0] + FSUtils.NUMATT;
}
FSUtils.insert(data,false,name,suffix,size,mtime,target[0],preOfNewFile);
}
 else {
FSUtils.setSize(data,target[0],size);
FSUtils.setMtime(data,target[0],mtime);
}
}
 else {
final byte[] name=Token.token(targetfile);
final byte[] suffix=getSuffix(targetfile);
if (!(curPre == FSUtils.getROOTDIR())) {
preOfNewFile=curPre + FSUtils.NUMATT;
}
FSUtils.insert(data,false,name,suffix,size,mtime,curPre,preOfNewFile);
}
break;
default :
if (target.length != 1) {
error("",99);
break;
}
if (FSUtils.isFile(data,target[0])) {
error(FSUtils.getName(data,target[0]),20);
break;
}
if (!(target[0] == FSUtils.getROOTDIR())) {
preOfNewFile=target[0] + FSUtils.NUMATT;
}
final TokenList toInsert=new TokenList();
int sizeToAdd=0;
for (int i : sources) {
i+=sizeToAdd;
if (FSUtils.isDir(data,i)) {
if (fRecursive) {
sizeToAdd+=data.size(i,Data.ELEM);
cpRecursive(i,target,"");
continue;
}
 else {
error(FSUtils.getName(data,i),100);
continue;
}
}
toInsert.add(FSUtils.getName(data,i));
toInsert.add(FSUtils.getSuffix(data,i));
toInsert.add(FSUtils.getSize(data,i));
}
for (int j=0; j < toInsert.size; ++j) {
FSUtils.insert(data,false,toInsert.delete(0),toInsert.delete(0),toInsert.delete(0),FSUtils.currTime(),target[0],preOfNewFile);
}
break;
}
}
}
