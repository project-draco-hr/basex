{
  final Item it=(expr.length != 0 ? expr[0] : checkCtx(ctx)).item(ctx,input);
switch (def) {
case NODE_NAME:
    QNm qname=it != null ? checkNode(it).qname() : null;
  return qname != null && qname.string().length != 0 ? qname : null;
case DOCUMENT_URI:
if (it == null) return null;
final ANode node=checkNode(it);
if (node.type != NodeType.DOC) return null;
final byte[] uri=node.baseURI();
return uri.length == 0 ? null : Uri.uri(uri);
case NILLED:
return it == null || checkNode(it).type != NodeType.ELM ? null : Bln.FALSE;
case BASE_URI:
if (it == null) return null;
ANode n=checkNode(it);
if (n.type != NodeType.ELM && n.type != NodeType.DOC && n.parent() == null) return null;
Uri base=Uri.EMPTY;
while (!base.isAbsolute()) {
if (n == null) {
base=ctx.baseURI().resolve(base);
break;
}
base=Uri.uri(n.baseURI()).resolve(base);
n=n.parent();
}
return base;
case NAME:
qname=it != null ? checkNode(it).qname() : null;
return qname != null ? Str.get(qname.string()) : Str.ZERO;
case LOCAL_NAME:
qname=it != null ? checkNode(it).qname() : null;
return qname != null ? Str.get(qname.local()) : Str.ZERO;
case NAMESPACE_URI:
qname=it != null ? checkNode(it).qname() : null;
return qname != null ? Uri.uri(qname.uri()) : Uri.EMPTY;
case ROOT:
if (it == null) return null;
n=checkNode(it);
while (n.parent() != null) n=n.parent();
return n;
case GENERATE_ID:
return it == null ? Str.ZERO : Str.get(new TokenBuilder(QueryText.ID).addLong(checkNode(it).id).finish());
case HAS_CHILDREN:
return Bln.get(it != null && checkNode(it).hasChildren());
case PATH:
return it != null ? path(it) : null;
default :
return super.item(ctx,ii);
}
}
