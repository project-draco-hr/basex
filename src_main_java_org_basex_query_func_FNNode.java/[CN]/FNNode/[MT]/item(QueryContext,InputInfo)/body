{
  final Item it=(expr.length != 0 ? expr[0] : checkCtx(ctx)).item(ctx,input);
switch (def) {
case NODE_NAME:
    if (it == null)     return null;
  QNm qname=checkNode(it).qname();
return qname != null && qname.atom().length != 0 ? qname : null;
case DOCUMENT_URI:
if (it == null) return null;
ANode node=checkNode(it);
if (node.type != NodeType.DOC) return null;
final byte[] uri=node.baseURI();
return uri.length == 0 ? null : Uri.uri(uri);
case NILLED:
return it == null || checkNode(it).type != NodeType.ELM ? null : Bln.FALSE;
case BASE_URI:
if (it == null) return null;
ANode n=checkNode(it);
if (n.type != NodeType.ELM && n.type != NodeType.DOC && n.parent() == null) return null;
Uri base=Uri.EMPTY;
while (!base.absolute()) {
if (n == null) {
base=ctx.baseURI.resolve(base);
break;
}
base=Uri.uri(n.baseURI()).resolve(base);
n=n.parent();
}
return base;
case NAME:
if (it == null) return Str.ZERO;
qname=checkNode(it).qname();
return qname != null ? Str.get(qname.atom()) : Str.ZERO;
case LOCAL_NAME:
if (it == null) return Str.ZERO;
qname=checkNode(it).qname();
return qname != null ? Str.get(qname.ln()) : Str.ZERO;
case NAMESPACE_URI:
if (it == null || it.type == NodeType.PI) return Uri.EMPTY;
node=checkNode(it);
while (node != null) {
qname=node.qname();
if (qname == null) break;
if (qname.hasUri()) return qname.uri();
final Atts ns=node.nsScope();
if (ns != null) {
final int pos=ns.get(qname.pref());
if (pos != -1) return Uri.uri(ns.val[pos]);
}
node=node.parent();
}
return Uri.uri(ctx.nsElem);
case ROOT:
if (it == null) return null;
n=checkNode(it);
while (n.parent() != null) n=n.parent();
return n;
case GENERATE_ID:
return it == null ? Str.ZERO : Str.get(new TokenBuilder(QueryText.ID).addLong(checkNode(it).id).finish());
case HAS_CHILDREN:
return Bln.get(it != null && checkNode(it).hasChildren());
case PATH:
if (it == null) return null;
return path(it);
default :
return super.item(ctx,ii);
}
}
