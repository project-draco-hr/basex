{
  final CountDownLatch sync=new CountDownLatch(1), test1=new CountDownLatch(1), test2=new CountDownLatch(1);
  final String[] obj1=new String[]{"1","2","3"};
  final String[] obj2=new String[]{obj1[2],obj1[0]};
  final String[] obj0=new String[]{obj1[1]};
  final LockTester thread0=new LockTester(null,true,obj0,sync);
  final LockTester thread1=new LockTester(sync,true,obj1,test1);
  final LockTester thread2=new LockTester(sync,true,obj2,test2);
  thread0.start();
  thread1.start();
  thread2.start();
  Thread.sleep(WAIT);
  thread0.release();
  assertTrue("One of the threads should be able to fetch its second lock.",test1.await(WAIT,TimeUnit.MILLISECONDS) ^ test2.await(WAIT,TimeUnit.MILLISECONDS));
  boolean first=false;
  if (test1.await(0,TimeUnit.MILLISECONDS)) {
    thread1.release();
    first=true;
  }
  if (test2.await(0,TimeUnit.MILLISECONDS))   thread2.release();
  assertTrue("Both threads should be finished now.",test1.await(WAIT,TimeUnit.MILLISECONDS) && test2.await(WAIT,TimeUnit.MILLISECONDS));
  if (first)   thread2.release();
 else   thread1.release();
}
