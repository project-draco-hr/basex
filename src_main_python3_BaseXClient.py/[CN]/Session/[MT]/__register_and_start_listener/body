def __register_and_start_listener(self, receive_bytes_encoding=None, send_bytes_encoding=None):
    'register and start listener.'
    if receive_bytes_encoding:
        receive_bytes_encoding_ = receive_bytes_encoding
    else:
        receive_bytes_encoding_ = self.__swrapper.receive_bytes_encoding
    if send_bytes_encoding:
        send_bytes_encoding_ = send_bytes_encoding
    else:
        send_bytes_encoding_ = self.__swrapper.send_bytes_encoding
    self.__swrapper.sendall(chr(10))
    event_port = int(self.recv_c_str())
    self.__event_socket_wrapper = SocketWrapper(socket.socket(socket.AF_INET, socket.SOCK_STREAM), receive_bytes_encoding=receive_bytes_encoding_, send_bytes_encoding=send_bytes_encoding_)
    self.__event_socket_wrapper.settimeout(5000)
    self.__event_socket_wrapper.connect((self.__event_host, event_port))
    token = self.recv_c_str()
    self.__event_socket_wrapper.sendall((token + chr(0)))
    ign = self.__event_socket_wrapper.recv_single_byte()
    self.__event_listening_thread = threading.Thread(target=self.__event_listening_loop)
    self.__event_listening_thread.daemon = True
    self.__event_listening_thread.start()
