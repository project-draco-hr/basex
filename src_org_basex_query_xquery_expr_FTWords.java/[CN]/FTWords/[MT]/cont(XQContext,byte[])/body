{
  final FTOptions opt=ctx.ftopt;
  final FTTokenizer tk=ctx.ftitem;
  tk.stem=opt.st.bool();
  tk.dc=opt.dc.bool();
  tk.sens=opt.cs.bool();
  tk.init();
  sb.init(sub);
  sb.stem=tk.stem;
  sb.dc=tk.dc;
  sb.sens=tk.sens;
  sb.uc=opt.uc.bool();
  sb.lc=opt.lc.bool();
  sb.wc=opt.wc.bool();
  sb.fz=opt.fz.bool();
  IntList il=null;
  while (tk.more()) {
    final int tp=tk.p;
    byte[] t=tk.next();
    boolean f=true;
    boolean c=false;
    sb.init();
    final int tpos=tk.pos;
    while (f && sb.more()) {
      final byte[] s=sb.next();
      if (c) {
        tk.more();
        t=tk.next();
      }
 else {
        c=true;
      }
      if (opt.sw != null) {
        final boolean s1=opt.sw.id(s) != 0;
        final boolean s2=opt.sw.id(t) != 0;
        f=!(s1 ^ s2);
        if (s1 || s2)         continue;
      }
      f=sb.fz ? Levenshtein.similar(t,s) : sb.wc ? string(t).matches(string(s)) : eq(t,s);
    }
    if (f) {
      if (il == null)       il=new IntList();
      il.add(tpos);
    }
    tk.p=tp;
  }
  if (il != null)   ctx.ftselect.add(sub,il);
  return il == null ? 0 : il.size;
}
