{
  final Context ctx=gui.context;
  if (refresh) {
    choice.setData(ShowBackups.listdbs(ctx).toArray());
    choice.requestFocusInWindow();
    refresh=false;
  }
  final StringList dbs=choice.getValues();
  final String db=choice.getValue().trim();
  final ObjList<Command> cmds=new ObjList<Command>();
  boolean o=dbs.size() > 0;
  ok=o;
  if (cmp == open) {
    if (dbs.size() == 1) {
      cmds.add(new Open(dbs.get(0)));
    }
    close();
  }
 else   if (cmp == drop) {
    if (!Dialog.confirm(gui,Util.info(DROPCONF,dbs.size())))     return;
    refresh=true;
    for (    final String s : dbs)     cmds.add(new DropDB(s));
  }
 else   if (cmp == rename) {
    final DialogInput dr=new DialogInput(db,RENAMETITLE,gui,1);
    if (!dr.ok() || dr.input().equals(db))     return;
    refresh=true;
    cmds.add(new AlterDB(db,dr.input()));
  }
 else   if (cmp == copy) {
    final DialogInput dc=new DialogInput(db,COPYTITLE,gui,2);
    if (!dc.ok() || dc.input().equals(db))     return;
    refresh=true;
    cmds.add(new Copy(db,dc.input()));
  }
 else   if (cmp == backup) {
    for (    final String s : dbs)     cmds.add(new CreateBackup(s));
  }
 else   if (cmp == restore) {
    int exist=0;
    for (    final String d : dbs)     if (gui.context.mprop.dbexists(d))     exist++;
    if (exist > 0 && !Dialog.confirm(gui,Util.info(RESTOREEXIST,exist)))     return;
    if (dbs.size() == 1) {
      cmds.add(new Restore((String)backupchoice.getSelectedItem()));
    }
 else     for (    final String s : dbs)     cmds.add(new Restore(s));
  }
 else   if (cmp == backupchoice) {
  }
 else   if (cmp == delete) {
    if (dbs.size() == 1) {
      if (!Dialog.confirm(gui,DROPBACKUP))       return;
      cmds.add(new DropBackup((String)backupchoice.getSelectedItem()));
    }
  }
 else {
    o=ctx.mprop.dbexists(db);
    if (o) {
      DataInput in=null;
      final MetaData meta=new MetaData(db,ctx);
      try {
        in=new DataInput(meta.dbfile(DATAINF));
        meta.read(in);
        detail.setText(InfoDB.db(meta,true,true,true));
      }
 catch (      final IOException ex) {
        detail.setText(Token.token(ex.getMessage()));
      }
 finally {
        if (in != null)         try {
          in.close();
        }
 catch (        final IOException ex) {
        }
      }
    }
    final String[] backups=ShowBackups.findBackups(db,ctx).toArray();
    if (!o && backups.length > 0) {
      detail.setText(Token.token(ONLYBACKUP));
    }
    backupchoice.setModel(new DefaultComboBoxModel(backups));
    enableOK(buttons,BUTTONOPEN,o);
    enableOK(buttons,BUTTONBACKUP,o);
    enableOK(buttons,BUTTONDROP,o);
    enableOK(buttons,BUTTONRENAME,o);
    enableOK(buttons,BUTTONCOPY,o);
    boolean backupsavl=backupchoice.getModel().getSize() > 0;
    restore.setEnabled(backupsavl);
    delete.setEnabled(backupsavl);
    o=true;
    for (    final String s : dbs)     o&=Restore.list(s,ctx).size() != 0;
    enableOK(buttons,BUTTONRESTORE,o);
  }
  if (cmds.size() != 0) {
    DialogProgress.execute(this,"",cmds.toArray(new Command[cmds.size()]));
  }
}
