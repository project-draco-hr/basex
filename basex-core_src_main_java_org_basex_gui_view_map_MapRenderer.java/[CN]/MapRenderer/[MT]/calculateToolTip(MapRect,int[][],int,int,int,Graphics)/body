{
  if (r.thumbf == 0)   return null;
  final boolean sen=r.thumbal < 2;
  final boolean ds=r.thumbal < 1;
  final FTPos ftp=r.pos;
  final int ww=r.w;
  int yy=r.y + 3;
  ul=-1;
  final TokenList tl=new TokenList();
  ttcol=new BoolList();
  int cc=0;
  int sl=0;
  int pl=0;
  int ppl=0;
  int psl=0;
  double error=0;
  double ll=0;
  final int[] data0=data[0], data1=data[1], data2=data[2], data3=data[3], data4=data[4];
  final int dl0=data0.length, dl1=data1.length, dl2=data2.length, dl3=data3.length;
  for (int i=0; i < dl0; ++i) {
    double wl=data0[i] * r.thumbf;
    error+=data0[i] * r.thumbf - wl;
    if (error >= 1) {
      wl+=error;
      error-=(int)error;
    }
    pl+=data0[i];
    sl+=data0[i];
    cc+=data0[i];
    boolean ir=false;
    if (ll + wl + (ds && psl < dl1 && data1[psl] == sl ? r.thumbsw : 0) >= ww) {
      if (ds) {
        yy+=r.thumblh;
        ir=inRect(r.x,yy,wl,r.thumbfh,x,y);
        ll=wl + (psl < dl1 && data1[psl] == sl ? r.thumbsw : r.thumbf);
      }
 else {
        yy+=r.thumblh;
        wl-=ww - ll;
        ir=inRect(r.x,yy,wl,r.thumbfh,x,y);
        ll=wl + (psl < dl1 && data1[psl] == sl ? r.thumbsw : r.thumbf);
      }
    }
 else {
      ir|=inRect(r.x + ll,yy,wl,r.thumbfh,x,y);
      ll+=wl + (ds ? r.thumbf : 0);
    }
    if (ir) {
      final int si=i;
      final int[] cw=fontWidths(g.getFont());
      final int sp=BaseXLayout.width(g,cw,' ');
      final int sd=BaseXLayout.width(g,cw,'.');
      final int bpsl=data1[psl] == sl ? psl + 1 : psl;
      final int bsl=data1[psl] == sl ? 0 : sl;
      ll=sd * 2 + sp;
      int l;
      int p=cc >= data0[i] ? cc - data0[i] : 0;
      boolean apm;
      while (p > -1 && i > -1) {
        apm=psl < dl1 && data1[psl] == sl;
        final byte[] tok=new byte[data0[i] + (apm ? 1 : 0)];
        final int ts=tok.length;
        for (int k=0; k < ts - (apm ? 1 : 0); ++k)         tok[k]=(byte)data3[p + k];
        if (apm) {
          tok[ts - 1]=(byte)data4[psl];
          ++sl;
        }
        sl-=ts;
        if (sl == 0) {
          --psl;
          if (psl == -1)           psl=dl1;
 else           sl=data1[psl];
        }
        l=0;
        for (int n=0; n < ts; n+=cl(tok,n))         l+=BaseXLayout.width(g,cw,cp(tok,n));
        if (si > i && ll + l + sp >= w / 2d)         break;
        ll+=l + sp;
        tl.add(tok);
        ttcol.add(ftp != null && ftp.contains(i));
        if (i == 0)         break;
        p-=data0[i - 1];
        --i;
      }
      if (i > 0) {
        tl.add(new byte[]{'.','.'});
        ttcol.add(false);
      }
      i=si + 1;
      p=cc;
      ul=tl.size() - 1;
      final byte[][] toks=tl.next();
      final boolean[] tc=ttcol.next();
      final int tsl=toks.length;
      for (int j=tsl - 1; j >= 0; j--) {
        tl.add(toks[j]);
        ttcol.add(tc[j]);
      }
      ll=0;
      sl=bsl;
      psl=bpsl;
      while (p < dl3 && i < dl0) {
        apm=false;
        if (psl < dl1 && data1[psl] == sl + data0[i]) {
          apm=true;
          sl=0;
          ++psl;
        }
        final byte[] tok=new byte[data0[i] + (apm ? 1 : 0)];
        final int ts=tok.length;
        l=0;
        for (int k=0; k < ts - (apm ? 1 : 0); ++k) {
          tok[k]=(byte)data3[p + k];
        }
        if (apm)         tok[ts - 1]=(byte)data4[psl - 1];
        sl+=apm ? sl : ts;
        for (int n=0; n < ts; n+=cl(tok,n))         l+=BaseXLayout.width(g,cw,cp(tok,n));
        if (ll + l + sp+ 2 * sd >= w / 2d)         break;
        ll+=l + sp;
        tl.add(tok);
        ttcol.add(ftp != null && ftp.contains(i));
        p+=ts - (apm ? 1 : 0);
        ++i;
      }
      if (i < dl0) {
        tl.add(new byte[]{'.','.'});
        ttcol.add(false);
      }
      return tl;
    }
    if (ds && psl < dl1 && data1[psl] == sl) {
      if (ll + r.thumbsw >= ww) {
        yy+=r.thumblh;
        ll-=ww;
      }
      ll+=r.thumbsw;
      sl=0;
      ++psl;
    }
    if (ppl < dl2 && data2[ppl] == pl) {
      pl=0;
      ++ppl;
      if (sen) {
        yy+=r.thumblh;
        ll=0;
      }
    }
  }
  return tl;
}
