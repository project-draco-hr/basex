{
  final TokenList nsp=data.ns.size() != 0 ? new TokenList() : null;
  final int[] parent=new int[IO.MAXHEIGHT];
  final byte[][] names=new byte[IO.MAXHEIGHT][];
  names[0]=dn;
  int l=0;
  int p=pre;
  final int s=pre + data.size(pre,data.kind(p));
  while (p < s && !finished()) {
    int k=data.kind(p);
    final int r=data.parent(p,k);
    while (l > 0 && parent[l - 1] >= r) {
      closeElement();
      l--;
    }
    if (k == Data.DOC) {
      p++;
    }
 else     if (k == Data.TEXT) {
      final FTPos ftd=ft != null ? ft.get(p) : null;
      if (ftd != null)       text(data.text(p++),ftd);
 else       text(data.text(p++));
    }
 else     if (k == Data.COMM) {
      comment(data.text(p++));
    }
 else     if (k == Data.ATTR) {
      attribute(data.attName(p),data.attValue(p++));
    }
 else     if (k == Data.PI) {
      byte[] n=data.text(p++);
      byte[] v=EMPTY;
      final int i=indexOf(n,' ');
      if (i != -1) {
        v=substring(n,i + 1);
        n=substring(n,0,i);
      }
      pi(n,v);
    }
 else {
      final byte[] name=data.tag(p);
      openElement(name);
      byte[] empty=names[l];
      if (nsp != null) {
        nsp.reset();
        int pp=p;
        do {
          final int[] nm=data.ns(pp);
          for (int n=0; n < nm.length; n+=2) {
            final byte[] key=data.ns.key(nm[n]);
            if (!nsp.contains(key)) {
              final byte[] val=data.ns.key(nm[n + 1]);
              nsp.add(key);
              namespace(key,val);
              if (key.length == 0)               empty=val;
            }
          }
          pp=data.parent(pp,k);
          k=data.kind(pp);
        }
 while (k == Data.ELEM && l == 0 && tags.size() == 1);
        final byte[] key=pref(name);
        byte[] val=data.ns.key(data.tagNS(p));
        if (val == null)         val=EMPTY;
        if (key.length != 0) {
          if (ns.get(key) == -1)           namespace(key,val);
        }
 else         if (!eq(val,empty)) {
          namespace(key,val);
          empty=val;
        }
      }
 else       if (l == 0 && dn != EMPTY) {
        namespace(EMPTY,EMPTY);
      }
      final int as=p + data.attSize(p,k);
      while (++p != as)       attribute(data.attName(p),data.attValue(p));
      parent[l++]=r;
      names[l]=empty;
    }
  }
  while (--l >= 0)   closeElement();
  return s;
}
