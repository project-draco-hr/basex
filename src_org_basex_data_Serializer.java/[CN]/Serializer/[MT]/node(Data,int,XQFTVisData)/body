{
  final Atts nsp=new Atts();
  final int[] parent=new int[IO.MAXHEIGHT];
  int l=0;
  int p=pre;
  final int s=pre + data.size(pre,data.kind(p));
  while (p < s && !finished()) {
    int k=data.kind(p);
    final int pa=data.parent(p,k);
    while (l > 0 && parent[l - 1] >= pa) {
      closeElement();
      l--;
    }
    if (k == Data.DOC) {
      p++;
    }
 else     if (k == Data.TEXT) {
      final int[][] ftd=ft != null ? ft.get(p) : null;
      if (ftd != null)       text(data.text(p++),ftd[0],ftd[1],ft);
 else       text(data.text(p++));
    }
 else     if (k == Data.COMM) {
      comment(data.text(p++));
    }
 else     if (k == Data.ATTR) {
      attribute(data.attName(p),data.attValue(p++));
    }
 else     if (k == Data.PI) {
      byte[] n=data.text(p++);
      byte[] v=EMPTY;
      final int i=indexOf(n,' ');
      if (i != -1) {
        v=substring(n,i + 1);
        n=substring(n,0,i);
      }
      pi(n,v);
    }
 else {
      final byte[] name=data.tag(p);
      openElement(name);
      nsp.reset();
      final int as=p + data.attSize(p,k);
      int pp=p;
      do {
        addNS(data,pp,nsp);
        pp=data.parent(pp,k);
        k=data.kind(pp);
      }
 while (tags.size == 1 && l == 0 && k == Data.ELEM);
      for (int n=0; n < nsp.size; n++)       namespace(nsp.key[n],nsp.val[n]);
      final byte[] key=pre(name);
      byte[] uri=data.ns.key(data.tagNS(p));
      if (uri == null)       uri=EMPTY;
      if (key.length != 0) {
        if (ns.get(key) == -1)         namespace(key,uri);
      }
 else       if (!eq(uri,dn)) {
        dn=uri;
        namespace(EMPTY,uri);
      }
      while (++p != as)       attribute(data.attName(p),data.attValue(p));
      parent[l++]=pa;
    }
  }
  while (--l >= 0)   closeElement();
  return s;
}
