{
  final String pth=text("@FilePath",root);
  final String outname=text("@name",root);
  if (single != null && !outname.startsWith(single))   return true;
  final Performance perf=new Performance();
  if (verbose)   Util.out("- " + outname);
  boolean inspect=false;
  boolean correct=true;
  final Value states=states(root);
  final long ss=states.size();
  for (int s=0; s < ss; s++) {
    final Item state=states.itemAt(s);
    final String inname=text("*:query/@name",state);
    final IOFile query=new IOFile(queries + pth + inname+ IO.XQSUFFIX);
    context.options.set(MainOptions.QUERYPATH,query.path());
    final String in=read(query);
    String er=null;
    Value value=null;
    final Value cont=nodes("*:contextItem",state);
    Value curr=null;
    if (!cont.isEmpty()) {
      final String p=srcs.get(string(cont.itemAt(0).string(null)));
      final Data d=new DBNode(IO.get(p)).data();
      curr=DBNodeSeq.get(d.resources.docs(),d,true,true);
    }
    context.options.set(MainOptions.QUERYINFO,compile);
    try (final QueryProcessor qp=new QueryProcessor(in,context)){
      if (curr != null)       qp.context(curr);
      context.options.set(MainOptions.QUERYINFO,false);
      final ArrayOutput ao=new ArrayOutput();
      final TokenBuilder files=new TokenBuilder();
      try {
        files.add(file(nodes("*:input-file",state),nodes("*:input-file/@variable",state),qp,s == 0));
        files.add(file(nodes("*:defaultCollection",state),null,qp,s == 0));
        var(nodes("*:input-URI",state),nodes("*:input-URI/@variable",state),qp);
        eval(nodes("*:input-query/@name",state),nodes("*:input-query/@variable",state),pth,qp);
        parse(qp,state);
        for (        final Item node : nodes("*:module",root)) {
          final String uri=text("@namespace",node);
          final String file=IO.get(mods.get(string(node.string(null))) + IO.XQSUFFIX).path();
          qp.module(uri,file);
        }
        value=qp.value();
        final SerializerOptions sopts=context.options.get(MainOptions.SERIALIZER);
        try (final Serializer ser=Serializer.get(ao,sopts)){
          for (          final Item it : value)           ser.serialize(it);
        }
       }
 catch (      final Exception ex) {
        if (!(ex instanceof QueryException || ex instanceof IOException)) {
          Util.errln("\n*** " + outname + " ***");
          Util.errln(in + '\n');
          Util.stack(ex);
        }
        er=ex.getMessage();
        if (er.startsWith(STOPPED_AT))         er=er.substring(er.indexOf('\n') + 1);
        if (!er.isEmpty() && er.charAt(0) == '[')         er=er.replaceAll("\\[(.*?)\\] (.*)","$1 $2");
      }
      if (compile) {
        Util.errln("---------------------------------------------------------");
        Util.err(qp.info());
        Util.errln(in);
      }
      final Value expOut=nodes("*:output-file/text()",state);
      final TokenList result=new TokenList();
      for (      final Item item : expOut) {
        final String resFile=string(item.string(null));
        final IOFile exp=new IOFile(expected + pth + resFile);
        result.add(read(exp).replaceAll("\r\n|\r|\n",Prop.NL));
      }
      final Value cmpFiles=nodes("*:output-file/@compare",state);
      boolean xml=false, frag=false, ignore=false;
      for (      final Item item : cmpFiles) {
        final byte[] type=item.string(null);
        xml|=eq(type,XML);
        frag|=eq(type,FRAGMENT);
        ignore|=eq(type,IGNORE);
      }
      String expError=text("*:expected-error/text()",state);
      final StringBuilder log=new StringBuilder(pth + inname + IO.XQSUFFIX);
      if (!files.isEmpty())       log.append(" [").append(files).append(']');
      log.append(NL);
      log.append(norm(in)).append(NL);
      final String logStr=log.toString();
      final boolean print=currTime || !logStr.contains("current-");
      boolean correctError=false;
      if (er != null && (expOut.size() == 0 || !expError.isEmpty())) {
        expError=error(pth + outname,expError);
        final String code=er.substring(0,Math.min(8,er.length()));
        for (        final String e : SLASH.split(expError)) {
          if (code.equals(e)) {
            correctError=true;
            break;
          }
        }
      }
      if (correctError) {
        if (print) {
          logOK.append(logStr);
          logOK.append("[Right] ");
          logOK.append(norm(er));
          logOK.append(NL);
          logOK.append(NL);
          addLog(pth,outname + ".log",er);
        }
        ++ok;
      }
 else       if (er == null) {
        int r=-1;
        final int rs=result.size();
        while (!ignore && ++r < rs) {
          inspect|=r < cmpFiles.size() && eq(cmpFiles.itemAt(r).string(null),INSPECT);
          final String expect=string(result.get(r));
          final String actual=ao.toString();
          if (expect.equals(actual))           break;
          if (xml || frag) {
            try {
              final Value v=toValue(expect.replaceAll("^<\\?xml.*?\\?>","").trim(),frag);
              if (new DeepEqual().equal(value.iter(),v.iter()))               break;
              if (new DeepEqual().equal(toValue(actual,frag).iter(),v.iter()))               break;
            }
 catch (            final Throwable ex) {
              Util.errln('\n' + outname + ':');
              Util.stack(ex);
            }
          }
        }
        if ((rs > 0 || !expError.isEmpty()) && r == rs && !inspect) {
          if (print) {
            if (expOut.size() == 0)             result.add(error(pth + outname,expError));
            logErr.append(logStr);
            logErr.append('[' + testid + " ] ");
            logErr.append(norm(string(result.get(0))));
            logErr.append(NL);
            logErr.append("[Wrong] ");
            logErr.append(norm(ao.toString()));
            logErr.append(NL);
            logErr.append(NL);
            addLog(pth,outname + (xml ? IO.XMLSUFFIX : ".txt"),ao.toString());
          }
          correct=false;
          ++err;
        }
 else {
          if (print) {
            logOK.append(logStr);
            logOK.append("[Right] ");
            logOK.append(norm(ao.toString()));
            logOK.append(NL);
            logOK.append(NL);
            addLog(pth,outname + (xml ? IO.XMLSUFFIX : ".txt"),ao.toString());
          }
          ++ok;
        }
      }
 else {
        if (expOut.size() == 0 || !expError.isEmpty()) {
          if (print) {
            logOK2.append(logStr);
            logOK2.append('[' + testid + " ] ");
            logOK2.append(norm(expError));
            logOK2.append(NL);
            logOK2.append("[Rght?] ");
            logOK2.append(norm(er));
            logOK2.append(NL);
            logOK2.append(NL);
            addLog(pth,outname + ".log",er);
          }
          ++ok2;
        }
 else {
          if (print) {
            logErr2.append(logStr);
            logErr2.append('[' + testid + " ] ");
            logErr2.append(norm(string(result.get(0))));
            logErr2.append(NL);
            logErr2.append("[Wrong] ");
            logErr2.append(norm(er));
            logErr2.append(NL);
            logErr2.append(NL);
            addLog(pth,outname + ".log",er);
          }
          correct=false;
          ++err2;
        }
      }
    }
   }
  if (reporting) {
    logReport.append("    <test-case name=\"");
    logReport.append(outname);
    logReport.append("\" result='");
    logReport.append(correct ? "pass" : "fail");
    if (inspect)     logReport.append("' todo='inspect");
    logReport.append("'/>");
    logReport.append(NL);
  }
  final long nano=perf.time();
  final boolean slow=nano / 1000000 > timer;
  if (verbose) {
    if (slow)     Util.out(": " + Performance.getTime(nano,1));
    Util.outln();
  }
 else   if (slow) {
    Util.out(NL + "- " + outname+ ": "+ Performance.getTime(nano,1));
  }
  return single == null || !outname.equals(single);
}
