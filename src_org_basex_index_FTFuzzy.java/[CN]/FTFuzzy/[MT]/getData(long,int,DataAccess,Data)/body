{
  if (s == 0 || p < 0)   return IndexArrayIterator.EMP;
  if (d.meta.ftittr) {
    return new IndexArrayIterator(s){
      boolean f=true;
      int lpre=-1;
      int c=0;
      long pos=p;
      FTNode n=new FTNode();
      @Override public boolean more(){
        if (c == s)         return false;
        IntList il=new IntList();
        int pre;
        if (f) {
          f=false;
          pre=da.readNum(pos);
          pos=da.pos();
        }
 else {
          pre=lpre;
        }
        f=false;
        il.add(pre);
        il.add(da.readNum(pos));
        c++;
        while (c < s && (lpre=da.readNum()) == pre) {
          il.add(da.readNum());
          c++;
        }
        pos=da.pos();
        n=new FTNode(il.finish(),1);
        return true;
      }
      @Override public FTNode nextFTNode(){
        n.genPointer(toknum);
        if (tok != null)         n.setToken(tok);
        return n;
      }
      @Override public int next(){
        return n.getPre();
      }
    }
;
  }
 else {
    final int[][] dt=new int[2][s];
    da.cursor(p);
    for (int i=0; i < s; i++)     dt[0][i]=da.readNum();
    for (int i=0; i < s; i++)     dt[1][i]=da.readNum();
    return new IndexArrayIterator(dt,true);
  }
}
