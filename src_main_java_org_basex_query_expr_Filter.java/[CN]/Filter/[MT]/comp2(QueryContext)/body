{
  final SeqType t=root.type();
  final long s=root.size();
  if (s != -1) {
    if (pos != null) {
      size=Math.max(0,s + 1 - pos.min) - Math.max(0,s - pos.max);
    }
 else     if (last) {
      size=s > 0 ? 1 : 0;
    }
    if (size == 0)     return optPre(null,ctx);
    type=SeqType.get(t.type,size);
  }
 else {
    type=SeqType.get(t.type,t.zeroOrOne() ? SeqType.Occ.ZO : SeqType.Occ.ZM);
  }
  if (!super.uses(Use.POS))   return new IterFilter(this);
  if (preds.length == 1 && (last || pos != null)) {
    if (root.value() && t.one() && (last || pos.min == 1 && pos.max == 1)) {
      return optPre(root,ctx);
    }
  }
  final boolean off=preds.length == 1 && preds[0].type().num() && !preds[0].uses(Use.CTX);
  final boolean iter=!off && useIterator();
  return off || iter ? new IterPosFilter(this,off) : this;
}
