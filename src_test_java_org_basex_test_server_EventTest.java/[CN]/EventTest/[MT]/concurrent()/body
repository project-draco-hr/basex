{
  try {
    session.execute("create event " + NAME);
    session.execute("create event " + NAME + 1);
  }
 catch (  final BaseXException ignore) {
  }
  final CountDownLatch doneSignal=new CountDownLatch(CLIENTS * sessions.length);
  for (  final ClientSession cs : sessions) {
    cs.watch(NAME,new EventNotifier(){
      @Override public void notify(      final String data){
        doneSignal.countDown();
        assertEquals(RETURN,data);
      }
    }
);
    cs.watch(NAME + 1,new EventNotifier(){
      @Override public void notify(      final String data){
        doneSignal.countDown();
        assertEquals(RETURN,data);
      }
    }
);
  }
  final Client[] clients=new Client[CLIENTS];
  for (int i=0; i < sessions.length; i++) {
    clients[i]=new Client(i % 2 == 0,RETURN);
  }
  for (  final Client c : clients)   c.start();
  for (  final Client c : clients)   c.join();
  assertTrue(doneSignal.await(500,TimeUnit.MILLISECONDS));
  for (  final ClientSession cs : sessions) {
    cs.unwatch(NAME);
    cs.unwatch(NAME + 1);
  }
  session.execute("drop event " + NAME);
  session.execute("drop event " + NAME + 1);
}
