{
  treeAwareUpdates();
  if (!data.updating(true))   LOCK.thrw(null,data.meta.name);
  try {
    NodeUpdates recent=null;
    for (int i=nodes.size() - 1; i >= 0; i--) {
      final NodeUpdates current=updatePrimitives.get(nodes.get(i));
      if (recent == null)       current.makePrimitivesEffective();
 else       recent.resolveExternalTextNodeAdjacency(current.makePrimitivesEffective());
      recent=current;
    }
    recent.resolveExternalTextNodeAdjacency(0);
  }
  finally {
    data.flush();
    if (!data.updating(false))     UNLOCK.thrw(null,data.meta.name);
  }
  if (data.meta.prop.is(Prop.WRITEBACK) && !data.meta.original.isEmpty()) {
    try {
      Export.export(data,data.meta.original);
    }
 catch (    final IOException ex) {
      UPPUTERR.thrw(null,data.meta.original);
    }
  }
}
