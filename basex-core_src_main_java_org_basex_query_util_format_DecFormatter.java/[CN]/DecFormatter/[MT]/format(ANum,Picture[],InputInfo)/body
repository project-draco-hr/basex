{
  final double d=item.dbl(ii);
  if (Double.isNaN(d))   return nan;
  final boolean neg=d < 0 || d == 0 && Double.doubleToLongBits(d) == Long.MIN_VALUE;
  final Picture pic=pics[neg && pics.length == 2 ? 1 : 0];
  final IntList res=new IntList(), intgr=new IntList(), fract=new IntList();
  int exp=0;
  ANum num=item;
  if (pic.pc)   num=(ANum)Calc.MULT.ev(num,Int.get(100),ii);
  if (pic.pm)   num=(ANum)Calc.MULT.ev(num,Int.get(1000),ii);
  if (Double.isInfinite(num.dbl(ii))) {
    intgr.add(new TokenParser(inf).toArray());
  }
 else {
    if (pic.minExp != 0 && d != 0) {
      BigDecimal dec=num.dec(ii).abs().stripTrailingZeros();
      int scl=0;
      if (dec.compareTo(BigDecimal.ONE) >= 0) {
        scl=dec.setScale(0,RoundingMode.HALF_DOWN).precision();
      }
 else {
        while (dec.compareTo(BigDecimal.ONE) < 0) {
          dec=dec.multiply(BigDecimal.TEN);
          scl--;
        }
        scl++;
      }
      exp=scl - pic.scaling;
      if (exp != 0) {
        final BigDecimal n=BigDecimal.TEN.pow(Math.abs(exp));
        num=(ANum)Calc.MULT.ev(num,Dec.get(exp > 0 ? BigDecimal.ONE.divide(n) : n),ii);
      }
    }
    num=num.round(pic.maxFrac,true).abs();
    String s=(num instanceof Dbl || num instanceof Flt ? Dec.get(BigDecimal.valueOf(num.dbl(ii))) : num).toString();
    if (s.startsWith("0"))     s=s.substring(1);
    final int fracSep=s.indexOf('.');
    final int sl=s.length();
    final int il=fracSep != -1 ? fracSep : sl;
    for (int i=il; i < pic.minInt; ++i)     intgr.add(zero);
    for (int i=0; i < il; i++)     intgr.add(zero + s.charAt(i) - '0');
    final int gil=pic.groupInt.size();
    if (gil == 1 && pic.groupInt.get(0) > 0) {
      for (int p=intgr.size() - (neg ? 2 : 1); p > 0; --p) {
        if (p % pic.groupInt.get(0) == 0)         intgr.insert(intgr.size() - p,grouping);
      }
    }
 else {
      for (int g=0; g < gil; g++) {
        final int pos=intgr.size() - pic.groupInt.get(g);
        if (pos > 0)         intgr.insert(pos,grouping);
      }
    }
    final int fl=fracSep == -1 ? 0 : sl - il - 1;
    if (fl != 0)     for (int i=fracSep + 1; i < sl; i++)     fract.add(zero + s.charAt(i) - '0');
    for (int i=fl; i < pic.minFrac; ++i)     fract.add(zero);
    final int ul=fract.size();
    for (int p=pic.groupFrac.size() - 1; p >= 0; p--) {
      final int pos=pic.groupFrac.get(p);
      if (pos < ul)       fract.insert(pos,grouping);
    }
  }
  if (neg && pics.length != 2)   res.add(minus);
  res.add(pic.prefix.toArray()).add(intgr.finish());
  if (!fract.isEmpty())   res.add(decimal).add(fract.finish());
  if (pic.minExp != 0) {
    res.add(exponent);
    if (exp < 0)     res.add(minus);
    final String s=Integer.toString(Math.abs(exp));
    final int sl=s.length();
    for (int i=sl; i < pic.minExp; i++)     res.add(zero);
    for (int i=0; i < sl; i++)     res.add(zero + s.charAt(i) - '0');
  }
  res.add(pic.suffix.toArray());
  return new TokenBuilder(res.finish()).finish();
}
