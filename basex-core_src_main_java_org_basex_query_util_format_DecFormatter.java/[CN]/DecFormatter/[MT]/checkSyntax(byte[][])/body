{
  for (  final byte[] pt : patterns) {
    boolean frac=false, act=false, expAct=false, exp=false, digMant=false;
    boolean optInt=false, optFrac=false, per=false;
    int cl, last=0;
    final int pl=pt.length;
    for (int i=0; i < pl; i+=cl) {
      final int ch=ch(pt,i);
      cl=cl(pt,i);
      final boolean digit=contains(digits,ch);
      boolean active=contains(actives,ch), expon=false;
      if (ch == decimal) {
        if (frac)         return false;
        frac=true;
      }
 else       if (ch == grouping) {
        if (i == 0 && frac || last == decimal || i + cl < pl ? ch(pt,i + cl) == decimal : !frac)         return false;
        if (last == grouping)         return false;
      }
 else       if (ch == exponent) {
        if (act && containsActive(pt,i + cl)) {
          if (exp)           return false;
          expon=true;
        }
 else {
          active=false;
        }
      }
 else       if (ch == percent || ch == permille) {
        if (per)         return false;
        per=true;
      }
 else       if (ch == optional) {
        if (frac) {
          optFrac=true;
        }
 else {
          if (digMant)           return false;
          optInt=true;
        }
      }
 else       if (digit) {
        if (!exp && optFrac)         return false;
        digMant=true;
      }
      if (active) {
        if (exp) {
          if (!digit)           return false;
          expAct=true;
        }
        act=true;
      }
 else {
        if (act && containsActive(pt,i + cl))         return false;
      }
      last=ch;
      if (expon)       exp=true;
    }
    if (!optInt && !optFrac && !digMant)     return false;
    if (per && exp)     return false;
    if (exp && !expAct)     return false;
  }
  return true;
}
