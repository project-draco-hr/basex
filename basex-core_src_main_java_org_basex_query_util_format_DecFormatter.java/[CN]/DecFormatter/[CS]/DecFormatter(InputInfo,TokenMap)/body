{
  int z='0';
  if (map != null) {
    for (    final byte[] key : map) {
      final String k=string(key);
      final byte[] v=map.get(key);
      if (k.equals(DF_INF)) {
        inf=v;
      }
 else       if (k.equals(DF_NAN)) {
        nan=v;
      }
 else       if (v.length != 0 && cl(v,0) == v.length) {
        final int cp=cp(v,0);
        if (k.equals(DF_DEC))         decimal=cp;
 else         if (k.equals(DF_GRP))         grouping=cp;
 else         if (k.equals(DF_PAT))         pattern=cp;
 else         if (k.equals(DF_MIN))         minus=cp;
 else         if (k.equals(DF_DIG))         optional=cp;
 else         if (k.equals(DF_PC))         percent=cp;
 else         if (k.equals(DF_PM))         permille=cp;
 else         if (k.equals(DF_ZG)) {
          z=zeroes(cp);
          if (z == -1)           throw INVDECFORM.get(info,k,v);
          if (z != cp)           throw INVDECZERO.get(info,(char)cp);
        }
      }
 else {
        throw INVDECSINGLE.get(info,k,v);
      }
    }
  }
  zero=z;
  final IntSet is=new IntSet();
  final int[] ss={decimal,grouping,percent,permille,zero,optional,pattern};
  for (  final int s : ss)   if (!is.add(s))   throw DUPLDECFORM.get(info,(char)s);
  final TokenBuilder tb=new TokenBuilder();
  for (int i=0; i < 10; i++)   tb.add(zero + i);
  digits=tb.toArray();
  active=tb.add(decimal).add(grouping).add(optional).finish();
}
