{
  String pm=p;
  final int l=in.length();
  int s=-1;
  if (l != 0) {
    final int ch=cp(in,0);
    final int cu=ch & 0xDF;
    if (cu == 'A' || cu == 'I') {
      s=1;
    }
 else     if (cu == 'W' || cu == 'N') {
      s=cp(in,1) == (ch | 0x20) ? 2 : 1;
    }
 else     if (digit(ch) || ch == '#') {
      s=decimal(in);
      error=s == -1;
    }
    if (s != -1)     pm=in.substring(0,s);
  }
  if (s == -1)   s=l;
  if (s < l) {
    if (cp(in,s) == 'o') {
      final StringBuilder sb=new StringBuilder();
      if (cp(in,++s) == '(') {
        while (cp(in,++s) != ')') {
          error=s == l;
          if (error)           break;
          sb.append(cp(in,s));
        }
      }
      ord=sb.toString();
    }
  }
  if (s < l) {
    if (cp(in,s) == ',') {
      pm+=in.substring(s);
    }
 else {
      error=true;
    }
  }
  if (ext) {
    final int w=pm.lastIndexOf(',');
    if (w != -1) {
      final String wd=pm.substring(w + 1);
      pm=pm.substring(0,w);
      final Matcher match=WIDTH.matcher(wd);
      if (match.find()) {
        int m=toInt(match.group(1));
        if (m != Integer.MIN_VALUE)         min=m;
        final String mc=match.group(3);
        m=mc != null ? toInt(mc) : Integer.MIN_VALUE;
        if (m != Integer.MIN_VALUE)         max=m;
      }
 else {
        error=true;
      }
    }
  }
  cs=pm.length() > 1 ? Case.STANDARD : (cp(pm,0) & 0x20) != 0 ? Case.LOWER : Case.UPPER;
  pres=pm.toLowerCase();
}
