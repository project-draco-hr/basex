{
  Prop.mainmem=mm;
  Proc.execute(context,Commands.OPEN,db);
  final File file=new File("tests/queries.mv");
  if (!file.exists()) {
    System.out.println("Could not read \"" + file.getAbsolutePath() + "\"");
    return;
  }
  Prop.serialize=true;
  final FileInputStream fis=new FileInputStream(file);
  final InputStreamReader isr=new InputStreamReader(fis,"ISO-8859-15");
  final BufferedReader br=new BufferedReader(isr);
  String line=null;
  while ((line=br.readLine()) != null) {
    final String[] split=line.split(" ");
    final StringBuilder query=new StringBuilder("\"/descendant::MEDIUM");
    for (int s=0; s < split.length; s++) {
      String type="node()/text()";
      String op="contains";
      String val=split[s];
      if (val.startsWith("<")) {
        type=val.substring(1);
        if (type.equals("TYP"))         op="=";
        if (type.equals("YEA")) {
          val=split[++s];
          final int i=val.indexOf("-");
          final int j=val.indexOf(">",i);
          int y1=Integer.parseInt(val.substring(0,i));
          final int y2=Integer.parseInt(val.substring(i + 1,j));
          if (y2 - y1 < 20) {
            final StringBuilder sb=new StringBuilder();
            while (y1 <= y2)             sb.append("YEA = '" + y1++ + "' or ");
            val=sb.toString().substring(0,sb.length() - 4);
          }
 else {
            val="YEA >= " + y1 + " and YEA <= "+ y2;
          }
        }
 else {
          val="";
          do {
            val+=split[++s] + " ";
          }
 while (!split[s].endsWith(">"));
          val=val.substring(0,val.length() - 2);
          val=type + " " + op+ " \""+ val+ "\"";
        }
      }
 else {
        val=type + " " + op+ " \""+ val+ "\"";
      }
      query.append("[" + val + "]");
    }
    query.append("[position() <= " + MAX + "]\"");
    final Proc proc=Proc.get(context,Commands.XPATHMV,Integer.toString(MAX),Integer.toString(SUB),query.toString());
    if (!proc.execute()) {
      System.out.println("ERR\t" + query);
    }
 else {
      proc.output(new NullOutput());
      final String info=proc.info();
      int i=info.indexOf("Total Time: ");
      int j=info.indexOf(" ms",i);
      String time=info.substring(i + "Total Time: ".length(),j);
      time=time.replace('.',',');
      i=info.indexOf("Results   : ");
      j=info.indexOf(" Node",i);
      final String nodes=info.substring(i + "Results   : ".length(),j);
      System.out.println(time + "\t" + nodes+ "\t"+ query);
    }
  }
  br.close();
}
