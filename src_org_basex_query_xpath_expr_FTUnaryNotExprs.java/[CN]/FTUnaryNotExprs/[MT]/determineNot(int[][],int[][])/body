{
  if ((resA == null && resB == null) || resA == null || resA[0].length == 0 && resB[0].length == 0 || resA[0].length == 0) {
    return null;
  }
  if (resB == null || resB[0].length == 0) {
    return resA;
  }
  int i=0;
  int k=0;
  int count=0;
  int[][] maxResult=new int[2][resA[0].length];
  for (; i < resA[0].length; i++) {
    while (k < resB[0].length && resA[0][i] > resB[0][k])     k++;
    if (k == resB[0].length)     break;
    if (resA[0][i] == resB[0][k]) {
      while (i < resA[0].length - 1 && resA[0][i] == resA[0][i + 1]) {
        i++;
      }
      while (k < resB[0].length - 1 && resB[0][k] == resB[0][k + 1])       k++;
      k++;
    }
 else {
      maxResult[0][count]=resA[0][i];
      maxResult[1][count]=resA[1][i];
      count++;
    }
  }
  int[][] result;
  if (i == resA[0].length) {
    if (count == 0)     return null;
    result=new int[2][count];
    System.arraycopy(maxResult[0],0,result[0],0,count);
    System.arraycopy(maxResult[1],0,result[1],0,count);
  }
 else {
    result=new int[2][count + resA[0].length - i];
    System.arraycopy(maxResult[0],0,result[0],0,count);
    System.arraycopy(maxResult[1],0,result[1],0,count);
    System.arraycopy(resA[0],i,result[0],count,resA[0].length - i);
    System.arraycopy(resA[1],i,result[1],count,resA[0].length - i);
  }
  return result;
}
