{
  final Runnable r=new Runnable(){
    @Override public void run(){
      while (true) {
        final boolean hasNext=iterator.hasNext();
        try {
          if (!hasNext)           break;
          final Span next=iterator.next();
          queue.put(next);
        }
 catch (        final InterruptedException e) {
          e.printStackTrace();
        }
      }
      try {
        queue.put(LAST);
      }
 catch (      final InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
;
  final Thread t=new Thread(r);
  t.start();
  return new Iterator<Span>(){
    Span buffer;
    @Override public boolean hasNext(){
      if (LAST == buffer)       return false;
      if (null != buffer)       return true;
      try {
        buffer=queue.take();
      }
 catch (      final InterruptedException e) {
        e.printStackTrace();
      }
      return LAST != buffer;
    }
    @Override public Span next(){
      if (hasNext()) {
        final Span res=buffer;
        buffer=null;
        return res;
      }
      throw new NoSuchElementException();
    }
    @Override public void remove(){
      Util.notimplemented();
    }
  }
;
}
