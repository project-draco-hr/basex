{
  final Table table=new Table();
  table.description=JOBS;
  table.header.add(uc(ID));
  table.header.add(TYPE);
  table.header.add(STATE);
  table.header.add(USER);
  table.header.add(DURATION);
  table.header.add(START);
  table.header.add(END);
  final JobPool jobs=context.jobs;
  for (  final byte[] key : ids(context)) {
    final String id=string(key);
    Job job=jobs.active.get(id);
    final JobTask jt=jobs.tasks.get(id);
    final JobResult jr=jobs.results.get(id);
    if (job == null && jr != null)     job=jr.job;
    if (job == null && jt != null)     job=jt.job;
    if (job == null)     continue;
    final JobContext jc=job.job();
    final long ms=jc.performance != null ? (System.nanoTime() - jc.performance.start()) / 1000000 : jr != null ? jr.time / 1000000 : -1;
    final TokenList tl=new TokenList(5);
    tl.add(id);
    tl.add(jc.type());
    tl.add(job.state.toString().toLowerCase(Locale.ENGLISH));
    tl.add(jc.context.user().name());
    tl.add(ms >= 0 ? DTDur.get(ms).string(null) : EMPTY);
    tl.add(jt != null ? Dtm.get(jt.start).string(null) : EMPTY);
    tl.add(jt != null && jt.end != Long.MAX_VALUE ? Dtm.get(jt.end).string(null) : EMPTY);
    table.contents.add(tl);
  }
  out.println(table.sort().finish());
  return true;
}
