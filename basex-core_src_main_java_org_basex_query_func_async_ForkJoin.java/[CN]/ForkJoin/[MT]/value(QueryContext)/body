{
  final Value items=qc.value(exprs[0]);
  final ArrayList<FItem> funcs=new ArrayList<>();
  for (  final Item item : items) {
    if (item instanceof FItem) {
      final FItem func=(FItem)item;
      if (func.arity() == 0) {
        funcs.add(func);
        continue;
      }
    }
    throw ZEROFUNCS_X_X.get(info,item.type,item);
  }
  Options opts=new ForkJoinOptions();
  if (exprs.length > 2)   opts=toOptions(1,null,opts,qc);
  final int threads=opts.get(ForkJoinOptions.THREADS);
  final int split=opts.get(ForkJoinOptions.SPLIT);
  final ForkJoinPool pool=new ForkJoinPool(threads);
  final ForkJoinTask<Value> task=new ForkJoinTask<>(funcs,split,qc,info);
  try {
    return pool.invoke(task);
  }
 catch (  final Exception ex) {
    final Throwable e=Util.rootException(ex);
    throw e instanceof QueryException ? (QueryException)e : ASYNC_ERR_X.get(info,e);
  }
 finally {
    pool.shutdown();
  }
}
