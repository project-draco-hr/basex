{
  final XQuery query=new XQuery("\n" + "        declare variable $input-context1 := $string;\n" + "        declare variable $input-context2 := $company-data;\n"+ "\n"+ "        declare function local:partners($company as xs:string) as element()*\n"+ "        {\n"+ "            let $c := $input-context2//company[name = $company]\n"+ "            return $c//partner\n"+ "        };\n"+ "\n"+ "        let $foobar_partners := local:partners(\"Foobar Corporation\")\n"+ "\n"+ "        for $item in $input-context1//news_item\n"+ "        where\n"+ "          some $t in $item//title satisfies\n"+ "            (contains(exactly-one($t/text()), \"Foobar Corporation\")\n"+ "            and (some $partner in $foobar_partners satisfies\n"+ "              contains(exactly-one($t/text()), $partner/text())))\n"+ "          or (some $par in $item//par satisfies\n"+ "           (contains(string($par), \"Foobar Corporation\")\n"+ "             and (some $partner in $foobar_partners satisfies\n"+ "                contains(string($par), $partner/text()))))\n"+ "        return\n"+ "            <news_item>\n"+ "                { $item/title }\n"+ "                { $item/date }\n"+ "            </news_item>\n"+ "      ",ctx);
  try {
    query.bind("$string",node(file("docs/string.xml")));
    query.bind("$company-data",node(file("docs/company-data.xml")));
    result=new QT3Result(query.value());
  }
 catch (  final Throwable trw) {
    result=new QT3Result(trw);
  }
 finally {
    query.close();
  }
  test(assertSerialization("<news_item><title> Gorilla Corporation acquires YouNameItWeIntegrateIt.com </title><date>1-20-2000</date></news_item><news_item><title>Foobar Corporation releases its new line of Foo products\r\n   today</title><date>1-20-2000</date></news_item><news_item><title>Foobar Corporation is suing Gorilla Corporation for\r\n   patent infringement </title><date>1-20-2000</date></news_item>",false));
}
