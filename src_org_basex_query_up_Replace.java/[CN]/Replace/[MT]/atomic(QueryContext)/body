{
  final Iter t=SeqIter.get(expr[0].iter(ctx));
  Item i=t.next();
  if (i == null)   Err.or(UPSEQEMP,i);
  if (t.size() > 1 || !(i instanceof Nod) || i.type == Type.DOC)   Err.or(UPTRGMULT,i);
  final Nod n=(Nod)i;
  final Nod p=n.parent();
  final boolean a=n.type == Type.ATT;
  if (p == null)   Err.or(UPNOPAR,i);
  final Iter r=SeqIter.get(expr[1].iter(ctx));
  if (!a && !value) {
    final SeqIter seq=new SeqIter();
    i=r.next();
    while (i != null) {
      if (i.type.num || i.type.str)       seq.add(new FTxt(i.str(),null));
 else       if (i instanceof Nod) {
        final Nod tn=(Nod)i;
        if (tn.type == Type.ATT)         Err.or(UPWRELM,i);
        if (tn.type == Type.DOC)         seq.add(tn.child());
 else         seq.add(tn);
      }
 else       Err.or(UPMISS1,this);
      i=r.next();
    }
    seq.reset();
    ctx.updates.add(new ReplacePrimitive(n,seq,false));
    return Seq.EMPTY;
  }
  if (a && !value) {
    i=r.next();
    final HashSet<String> set=new HashSet<String>();
    boolean bpar=false;
    boolean brep=false;
    while (i != null) {
      if (i.type != Type.ATT)       Err.or(UPWRATTR,i);
      brep=checkNS(set,(Nod)i) | brep;
      i=r.next();
    }
    final SeqIter tAttr=SeqIter.get(n.parent().attr());
    i=tAttr.next();
    while (i != null) {
      bpar=checkNS(set,(Nod)i) | bpar;
      i=tAttr.next();
    }
    if (bpar)     Err.or(UPCONFNSPAR,i);
    if (brep)     Err.or(UPCONFNS,i);
    r.reset();
    ctx.updates.add(new ReplacePrimitive(n,r,true));
  }
 else {
    i=r.next();
    if (i == null)     Err.or(UPMISS2,this);
    if (i.type.num || i.type.str)     ctx.updates.add(n.type == Type.ELM ? new ReplaceElemContent(n,i.str()) : new ReplaceValue(n,i.str()));
 else     Err.or(UPMISS3,this);
  }
  return Seq.EMPTY;
}
