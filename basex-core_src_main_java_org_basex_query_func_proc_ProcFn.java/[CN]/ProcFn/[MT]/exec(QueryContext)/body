{
  checkCreate(qc);
  final TokenList tl=new TokenList();
  tl.add(toToken(exprs[0],qc));
  if (exprs.length > 1) {
    final Iter ir=qc.iter(exprs[1]);
    for (Item it; (it=ir.next()) != null; )     tl.add(toToken(it));
  }
  final String[] args=tl.toStringArray();
  final String c=exprs.length > 2 ? string(toToken(exprs[2],qc)) : Prop.ENCODING;
  final Charset cs;
  try {
    cs=Charset.forName(c);
  }
 catch (  final Exception ex) {
    throw BXPR_ENC_X.get(info,c);
  }
  final Result result=new Result();
  final Process proc;
  try {
    proc=new ProcessBuilder(args).start();
  }
 catch (  final IOException ex) {
    try {
      result.error.write(token(Util.message(ex)));
    }
 catch (    final IOException ignored) {
    }
    result.code=9999;
    return result;
  }
  try {
    final Thread outt=reader(proc.getInputStream(),result.output,cs);
    final Thread errt=reader(proc.getErrorStream(),result.error,cs);
    outt.start();
    errt.start();
    proc.waitFor();
    outt.join();
    errt.join();
  }
 catch (  final InterruptedException ex) {
    try {
      result.error.write(token(Util.message(ex)));
    }
 catch (    final IOException ignored) {
    }
  }
  result.code=proc.exitValue();
  return result;
}
