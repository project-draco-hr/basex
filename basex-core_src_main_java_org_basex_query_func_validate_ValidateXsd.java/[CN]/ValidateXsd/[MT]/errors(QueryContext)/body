{
  checkCreate(qc);
  return process(new Validation(){
    @Override void process(    final ErrorHandler handler) throws IOException, SAXException, QueryException {
      final IO in=read(toNodeOrAtomItem(exprs[0],qc),qc,null);
      final Item schema=exprs.length > 1 ? toNodeOrAtomItem(exprs[1].item(qc,info)) : null;
      final String version=exprs.length > 2 ? Token.string(toToken(exprs[2],qc)) : null;
      final boolean xsd11=VERSION_11.equals(version);
      String cp=null;
      if (Reflect.find(XERCES11_CP) != null) {
        cp=xsd11 ? XERCES11_CP : XERCES_CP;
      }
 else       if (Reflect.find(SAXON_CP) != null) {
        cp=SAXON_CP;
      }
      final String uri;
      if (version == null || version.equals(VERSION_10)) {
        uri=cp == null ? XMLConstants.W3C_XML_SCHEMA_NS_URI : XSD10_URI;
      }
 else       if (xsd11 && cp != null) {
        uri=XSD11_URI;
      }
 else {
        throw BXVA_XSDVERSION_X.get(info,version);
      }
      if (cp != null)       System.setProperty(SCHEMA_FACTORY_CP + ':' + uri,cp);
      final SchemaFactory sf=SchemaFactory.newInstance(uri);
      if (SAXON_CP.equals(cp))       sf.setProperty(SAXON_VERSION_URI,xsd11 ? VERSION_11 : VERSION_10);
      final Schema s;
      if (schema == null) {
        s=sf.newSchema();
      }
 else {
        s=sf.newSchema(new URL(prepare(read(schema,qc,null),handler).url()));
      }
      final Validator v=s.newValidator();
      v.setErrorHandler(handler);
      final String url=in.url();
      v.validate(url.isEmpty() ? new StreamSource(in.inputStream()) : new StreamSource(url));
    }
  }
);
}
