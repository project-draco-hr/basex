{
  final int as=arities.size();
  if (as == 0)   return FUNCARGNUM_X_X.get(info,func,arguments(arity));
  int min=Integer.MAX_VALUE, max=Integer.MIN_VALUE;
  for (int a=0; a < as; a++) {
    final int m=arities.get(a);
    if (m < min)     min=m;
    if (m > max)     max=m;
  }
  final StringBuilder ext=new StringBuilder();
  if (as > 2 && max - min + 1 == as) {
    ext.append(min).append('-').append(max);
  }
 else {
    for (int a=0; a < as; a++) {
      if (a != 0)       ext.append(a + 1 < as ? ", " : " or ");
      ext.append(arities.get(a));
    }
  }
  return FUNCTYPES_X_X_X.get(info,func,arguments(arity),ext);
}
