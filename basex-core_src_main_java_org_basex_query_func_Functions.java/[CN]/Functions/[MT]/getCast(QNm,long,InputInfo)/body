{
  final byte[] ln=name.local();
  Type type=ListType.find(name);
  if (type == null)   type=AtomType.find(name,false);
  if (type != null && type != AtomType.NOT && type != AtomType.AAT) {
    if (arity == 1)     return type;
    throw FUNCTYPES_X_X_X_X.get(ii,name.string(),arity,"s",1);
  }
  final Levenshtein ls=new Levenshtein();
  for (  final AtomType t : AtomType.VALUES) {
    if (t.parent == null)     continue;
    final byte[] u=t.name.uri();
    if (eq(u,XS_URI) && t != AtomType.NOT && t != AtomType.AAT && ls.similar(lc(ln),lc(t.string())))     throw FUNCSIMILAR_X_X.get(ii,name.string(),t.string());
  }
  throw FUNCUNKNOWN_X.get(ii,name.string());
}
