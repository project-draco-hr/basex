{
  if (eq(name.uri(),XS_URI)) {
    final Type type=getCast(name,arity,info);
    final VarScope scp=new VarScope(sc);
    final Var[] args={scp.addNew(new QNm(ITEMM,""),SeqType.AAT_ZO,true,qc,info)};
    final Expr e=new Cast(sc,info,new VarRef(info,args[0]),type.seqType());
    final AnnList anns=new AnnList();
    final FuncType ft=FuncType.get(anns,e.seqType(),args);
    return closureOrFItem(anns,name,args,ft,e,scp,info,runtime,false);
  }
  final Function fn=get().getBuiltIn(name,arity,info);
  if (fn != null) {
    final AnnList anns=new AnnList();
    final VarScope scp=new VarScope(sc);
    final FuncType ft=fn.type(arity,anns);
    final QNm[] argNames=fn.argNames(arity);
    final Var[] args=new Var[arity];
    final Expr[] calls=new Expr[arity];
    for (int i=0; i < arity; i++) {
      args[i]=scp.addNew(argNames[i],ft.argTypes[i],true,qc,info);
      calls[i]=new VarRef(info,args[i]);
    }
    final StandardFunc sf=fn.get(sc,info,calls);
    final boolean upd=sf.has(Flag.UPD);
    if (upd) {
      anns.add(new Ann(info,Annotation.UPDATING));
      qc.updating();
    }
    return sf.has(Flag.CTX) || sf.has(Flag.POS) ? new FuncLit(anns,name,args,sf,ft,scp,info) : closureOrFItem(anns,name,args,fn.type(arity,anns),sf,scp,info,runtime,upd);
  }
  final StaticFunc sf=qc.funcs.get(name,arity,info,false);
  if (sf != null) {
    final FuncType ft=sf.funcType();
    final VarScope scp=new VarScope(sc);
    final Var[] args=new Var[arity];
    final Expr[] calls=new Expr[arity];
    for (int a=0; a < arity; a++) {
      args[a]=scp.addNew(sf.argName(a),ft.argTypes[a],true,qc,info);
      calls[a]=new VarRef(info,args[a]);
    }
    final boolean upd=sf.updating;
    final TypedFunc tf=qc.funcs.getFuncRef(sf.name,calls,sc,info);
    final Expr f=closureOrFItem(tf.anns,sf.name,args,ft,tf.fun,scp,info,runtime,upd);
    if (upd)     qc.updating();
    return f;
  }
  final VarScope scp=new VarScope(sc);
  final FuncType jt=FuncType.arity(arity);
  final Var[] vs=new Var[arity];
  final Expr[] args=new Expr[vs.length];
  final int vl=vs.length;
  for (int v=0; v < vl; v++) {
    vs[v]=scp.addNew(new QNm(ARG + (v + 1),""),null,true,qc,info);
    args[v]=new VarRef(info,vs[v]);
  }
  final Expr jf=JavaFunction.get(name,args,qc,sc,info);
  return jf == null ? null : new FuncLit(new AnnList(),name,vs,jf,jt,scp,info);
}
