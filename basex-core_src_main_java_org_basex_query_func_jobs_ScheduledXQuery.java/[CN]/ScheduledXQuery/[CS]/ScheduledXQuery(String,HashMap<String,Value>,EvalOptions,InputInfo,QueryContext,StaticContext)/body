{
  this.query=query;
  this.bindings=bindings;
  this.info=info;
  this.cache=opts.get(EvalOptions.CACHE);
  this.job().context=qc.context;
  final String bu=opts.get(EvalOptions.BASE_URI);
  uri=bu != null ? bu : string(sc.baseURI().string());
  final String del=opts.get(EvalOptions.START);
  final long delay=del.isEmpty() ? 0 : ms(del,0,qc);
  long interval=0;
  final String inter=opts.get(EvalOptions.INTERVAL);
  if (!inter.isEmpty())   interval=ms(new DTDur(Token.token(inter),info));
  if (interval < 1000 && interval != 0)   throw JOBS_RANGE_X.get(info,inter);
  repeat=interval > 0;
  final String dur=opts.get(EvalOptions.END);
  final long duration=dur.isEmpty() ? Long.MAX_VALUE : ms(dur,delay,qc);
  final JobPool pool=qc.context.jobs;
  String id=opts.get(EvalOptions.ID);
  if (id != null) {
    if (id.startsWith(JobContext.PREFIX))     throw JOBS_ID_INVALID_X.get(info,id);
    if (pool.tasks.containsKey(id) || pool.active.containsKey(id) || pool.results.containsKey(id))     throw JOBS_ID_EXISTS_X.get(info,id);
    job().id(id);
  }
 else {
    id=job().id();
  }
  if (cache) {
    if (repeat)     throw JOBS_CONFLICT.get(info);
    pool.results.put(id,result);
  }
  new JobTask(this,pool,delay,interval,duration);
}
