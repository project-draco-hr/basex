{
  final Context ctx=job().context;
  try {
    qp=parse();
    pushJob(qp);
    register(ctx);
    result.value=copy(qp.iter(),ctx,qp.qc);
  }
 catch (  final JobException ex) {
    ctx.jobs.results.remove(job().id());
  }
catch (  final QueryException ex) {
    result.exception=ex;
  }
catch (  final Throwable ex) {
    result.exception=BXXQ_UNEXPECTED_X.get(info,ex);
  }
 finally {
    result.time=job().performance.time();
    if (cache) {
      ctx.jobs.scheduleResult(this);
      state(JobState.CACHED);
    }
 else {
      state(JobState.SCHEDULED);
    }
    if (qp != null) {
      qp.close();
      unregister(ctx);
      popJob();
      qp=null;
      job().performance=null;
    }
  }
}
