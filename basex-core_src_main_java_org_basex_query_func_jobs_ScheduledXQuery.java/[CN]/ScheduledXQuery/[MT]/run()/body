{
  final Context ctx=qp.qc.context;
  try {
    pushJob(qp);
    register(ctx);
    result.value=copy(qp.iter(),ctx,qp.qc);
  }
 catch (  final JobException ex) {
    ctx.jobs.results.remove(job().id());
  }
catch (  final QueryException ex) {
    result.exception=ex;
  }
catch (  final Throwable ex) {
    result.exception=BXXQ_UNEXPECTED_X.get(info,ex);
  }
 finally {
    qp.close();
    unregister(ctx);
    result.time=System.currentTimeMillis();
    if (cache)     ctx.jobs.schedule(this);
    popJob();
  }
}
