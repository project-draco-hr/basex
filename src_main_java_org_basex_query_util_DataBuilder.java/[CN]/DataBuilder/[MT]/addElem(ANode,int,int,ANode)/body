{
  final int ms=data.meta.size;
  final QNm q=nd.qname();
  data.ns.open();
  boolean ne=false;
  Atts ns=null;
  if (!preserve) {
    ns=nd.namespaces();
    final Atts ns2=inherit ? nd.nsScope() : nd.namespaces();
    int uid;
    if ((uid=ns2.get(EMPTY)) != -1)     ns.add(ns2.key(uid),ns2.value(uid));
  }
 else {
    ns=par == 0 && inherit ? nd.nsScope() : nd.namespaces();
  }
  if (ns != null) {
    if (ns.size() > 0 && ndPar != null && preserve) {
      final Atts nsPar=inherit ? nd.nsScope() : nd.namespaces();
      for (int j=0; j < nsPar.size(); ++j) {
      }
    }
    ne=ns.size() > 0;
    for (int a=0; ne && a < ns.size(); ++a)     data.ns.add(ns.key(a),ns.value(a),ms);
  }
  final byte[] uri=q.uri();
  final int u=uri.length != 0 ? data.ns.addURI(uri) : 0;
  final int tn=data.tagindex.index(q.string(),null,false);
  final int s=size(nd,false);
  data.elem(pre - par,tn,size(nd,true),s,u,ne);
  data.insert(ms);
  final int pp=pre;
  int p=pre + 1;
  AxisIter ai=nd.attributes();
  for (ANode ch; (ch=ai.next()) != null; )   p=addNode(ch,p,pre,nd);
  ai=nd.children();
  for (ANode ch; (ch=ai.next()) != null; )   p=addNode(ch,p,pre,nd);
  data.ns.close(ms);
  if (s != p - pp)   data.size(ms,Data.ELEM,p - pp);
  return p;
}
