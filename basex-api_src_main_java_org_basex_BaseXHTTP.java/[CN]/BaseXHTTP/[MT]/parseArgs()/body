{
  final MainParser arg=new MainParser(this);
  boolean serve=true;
  while (arg.more()) {
    if (arg.dash()) {
switch (arg.next()) {
case 'd':
        Prop.put(StaticOptions.DEBUG,true);
      Prop.debug=true;
    break;
case 'D':
  serve=false;
break;
case 'h':
httpPort=arg.number();
break;
case 'l':
Prop.put(StaticOptions.HTTPLOCAL,true);
break;
case 'n':
final String n=arg.string();
Prop.put(StaticOptions.HOST,n);
Prop.put(StaticOptions.SERVERHOST,n);
break;
case 'p':
final int p=arg.number();
Prop.put(StaticOptions.PORT,p);
Prop.put(StaticOptions.SERVERPORT,p);
break;
case 'P':
Prop.put(StaticOptions.PASSWORD,arg.string());
break;
case 's':
Prop.put(StaticOptions.STOPPORT,arg.number());
break;
case 'S':
service=serve;
break;
case 'U':
Prop.put(StaticOptions.USER,arg.string());
break;
case 'z':
Prop.put(StaticOptions.LOG,false);
break;
default :
throw arg.usage();
}
}
 else {
if (!"stop".equalsIgnoreCase(arg.string())) throw arg.usage();
stopped=true;
}
}
}
