{
  super(args);
  parseArgs();
  context=HTTPContext.init();
  final StaticOptions sopts=context.soptions;
  final String webapp=sopts.get(StaticOptions.WEBPATH);
  final WebAppContext wac=new WebAppContext(webapp,"/");
  jetty=(Server)new XmlConfiguration(initJetty(webapp).inputStream()).configure();
  jetty.setHandler(wac);
  if (httpPort != 0) {
    for (    final Connector c : jetty.getConnectors()) {
      if (c instanceof SelectChannelConnector) {
        c.setPort(httpPort);
        break;
      }
    }
  }
  final String startX=HTTP + ' ' + SRV_STARTED_PORT_X;
  final String stopX=HTTP + ' ' + SRV_STOPPED_PORT_X;
  if (stopped) {
    stop();
    for (    final Connector c : jetty.getConnectors())     Util.outln(stopX,c.getPort());
    Performance.sleep(1000);
    return;
  }
  final Connector connector=jetty.getConnectors()[0];
  if (service) {
    start(connector.getPort(),connector instanceof SslSelectChannelConnector,args);
    for (    final Connector c : jetty.getConnectors()) {
      Util.outln(startX,c.getPort());
    }
    Performance.sleep(1000);
    return;
  }
  final String user=Prop.get(StaticOptions.USER);
  String pw=Prop.get(StaticOptions.PASSWORD);
  if (user != null && !user.isEmpty()) {
    while (pw == null || pw.isEmpty()) {
      Util.out(PASSWORD + COLS);
      pw=Util.password();
      Prop.put(StaticOptions.PASSWORD,pw);
    }
  }
  try {
    jetty.start();
  }
 catch (  final BindException ex) {
    throw new IOException(Util.info(HTTP + ' ' + SRV_RUNNING_X,connector.getPort()),ex);
  }
  final IOException ex=HTTPContext.exception();
  if (ex != null)   throw ex;
  for (  final Connector c : jetty.getConnectors())   Util.outln(startX,c.getPort());
  HTTPContext.init(wac.getServletContext());
  final int stop=sopts.get(StaticOptions.STOPPORT);
  if (stop >= 0)   new StopServer(sopts.get(StaticOptions.SERVERHOST),stop).start();
  Runtime.getRuntime().addShutdownHook(new Thread(){
    @Override public void run(){
      for (      final Connector c : jetty.getConnectors()) {
        Util.outln(stopX,c.getPort());
      }
      final Log l=context.log;
      if (l != null) {
        for (        final Connector c : jetty.getConnectors()) {
          l.writeServer(LogType.OK,Util.info(stopX,c.getPort()));
        }
      }
      context.close();
    }
  }
);
  for (  final Connector c : jetty.getConnectors()) {
    context.log.writeServer(LogType.OK,Util.info(startX,c.getPort()));
  }
}
