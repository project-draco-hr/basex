{
  final String plain="...plain text version of message goes here...." + Prop.NL;
  final String rich=".... richtext version of same message goes here ...";
  final String fancy=".... fanciest formatted version of same  message  " + "goes  here...";
  final Request req=new Request();
  req.isMultipart=true;
  req.payloadAttrs.add(token("media-type"),token("multipart/alternative"));
  req.payloadAttrs.add(token("boundary"),token("boundary42"));
  final Part p1=new Part();
  p1.headers.add(token("Content-Type"),token("text/plain; " + "charset=us-ascii"));
  p1.bodyAttrs.add(token("media-type"),token("text/plain"));
  p1.bodyContent.add(Str.get(plain));
  final Part p2=new Part();
  p2.headers.add(token("Content-Type"),token("text/richtext"));
  p2.bodyAttrs.add(token("media-type"),token("text/richtext"));
  p2.bodyContent.add(Str.get(rich));
  final Part p3=new Part();
  p3.headers.add(token("Content-Type"),token("text/x-whatever"));
  p3.bodyAttrs.add(token("media-type"),token("text/x-whatever"));
  p3.bodyContent.add(Str.get(fancy));
  req.parts.add(p1);
  req.parts.add(p2);
  req.parts.add(p3);
  final FakeHttpConnection fakeConn=new FakeHttpConnection(new URL("http://www.test.com"));
  HTTPClient.setRequestContent(fakeConn.getOutputStream(),req,null);
  final String expResult="--boundary42" + CRLF + "Content-Type: text/plain; charset=us-ascii"+ CRLF+ CRLF+ plain+ CRLF+ "--boundary42"+ CRLF+ "Content-Type: text/richtext"+ CRLF+ CRLF+ rich+ CRLF+ "--boundary42"+ CRLF+ "Content-Type: text/x-whatever"+ CRLF+ CRLF+ fancy+ CRLF+ "--boundary42--"+ CRLF;
  final String fake=fakeConn.getOutputStream().toString();
  assertTrue(expResult.equals(fake));
}
