{
  final String name=args[0];
  if (!MetaData.validName(name,false))   return error(NAME_INVALID_X,name);
  IO io;
  try {
    io=sourceToIO(name);
    if (in != null) {
      final LookupInput li=new LookupInput(io.inputStream());
      io=li.lookup() == -1 ? null : new IOStream(li,io.name());
    }
  }
 catch (  final IOException ex) {
    Util.debug(ex);
    return error(Util.message(ex));
  }
  if (io != null) {
    if (!io.exists())     return error(RES_NOT_FOUND_X,io);
    parser=new DirParser(io,prop,mprop.dbpath(name));
  }
 else   if (parser == null) {
    parser=Parser.emptyParser(context.prop);
  }
  new Close().run(context);
  try {
    if (prop.is(Prop.MAINMEM)) {
      final Data data=progress(new MemBuilder(name,parser)).build();
      context.openDB(data);
      context.dbs.add(data);
    }
 else {
      if (context.pinned(name))       return error(DB_PINNED_X,name);
      progress(new DiskBuilder(name,parser,context)).build().close();
      final Open open=new Open(name);
      if (!open.run(context))       return error(open.info());
      final Data data=context.data();
      try {
        if (data.meta.createtext)         create(IndexType.TEXT,data,this);
        if (data.meta.createattr)         create(IndexType.ATTRIBUTE,data,this);
        if (data.meta.createftxt)         create(IndexType.FULLTEXT,data,this);
      }
  finally {
        data.finishUpdate();
      }
    }
    if (prop.is(Prop.CREATEONLY))     new Close().run(context);
    return info(parser.info() + DB_CREATED_X_X,name,perf);
  }
 catch (  final ProgressException ex) {
    throw ex;
  }
catch (  final IOException ex) {
    Util.debug(ex);
    abort();
    final String msg=ex.getMessage();
    return error(msg != null && !msg.isEmpty() ? msg : Util.info(NOT_PARSED_X,parser.src));
  }
catch (  final Exception ex) {
    Util.debug(ex);
    abort();
    return error(Util.info(NOT_PARSED_X,parser.src));
  }
}
