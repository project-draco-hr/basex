{
  if (!checkDB())   return false;
  final Data data=context.data();
  Nodes src=gui ? context.copied() : query(args[0],null);
  Nodes trg=gui ? context.marked() : query(args[1],COPYTAGS);
  if (src == null || trg == null)   return false;
  if (gui)   context.copy(null);
  final int size=src.size();
  final Data[] srcDocs=new Data[src.size()];
  for (int c=0; c < size; c++)   srcDocs[c]=copy(src.data,src.nodes[c]);
  final IntList marked=gui ? new IntList() : null;
  int copied=0;
  final TokenList tl=new TokenList();
  for (int c=0; c < size; c++) {
    if (srcDocs[c].meta.size == 1 && srcDocs[c].kind(0) == Data.ATTR) {
      final byte[] name=srcDocs[c].attName(0);
      if (tl.contains(name))       return error(ATTDUPL,srcDocs[c].attName(0));
      tl.add(name);
    }
  }
  for (int n=trg.size() - 1; n >= 0; n--) {
    final int par=trg.nodes[n];
    if (data.kind(par) != Data.ELEM)     return error(COPYTAGS);
    for (int c=0; c < size; c++) {
      if (srcDocs[c].meta.size == 1 && srcDocs[c].kind(0) == Data.ATTR) {
        final int att=srcDocs[c].attNameID(0);
        final int last=par + data.attSize(par,Data.ELEM);
        for (int p=par + 1; p < last; p++) {
          if (att == data.attNameID(p))           return error(ATTDUPL,data.attName(p));
        }
      }
    }
  }
  for (int n=trg.size() - 1; n >= 0; n--) {
    final int par=trg.nodes[n];
    for (int c=0; c < size; c++) {
      int pre=pre(par,pos,data);
      final int s=srcDocs[c].meta.size - 1;
      final int txt=s != 0 ? -1 : Insert.checkText(data,pre,par,srcDocs[c].kind(s));
      if (txt != -1) {
        data.update(txt,Token.concat(data.text(txt),srcDocs[c].text(s)));
        if (gui && !marked.contains(txt))         marked.add(txt);
      }
 else {
        if (s == 0 && srcDocs[c].kind(0) == Data.ATTR) {
          pre=par + data.attSize(par,data.kind(par));
        }
        data.insert(pre,par,srcDocs[c]);
        if (gui)         marked.add(pre);
      }
    }
    copied+=size;
  }
  if (gui) {
    if (context.current().size() > 1 || context.current().nodes[0] == src.nodes[0]) {
      context.current(new Nodes(0,data));
    }
    context.marked(new Nodes(marked.finish(),data));
  }
  data.flush();
  context.update();
  return info(INSERTINFO,copied,perf.getTimer());
}
