{
  final int curr=next();
switch (curr) {
case 'n':
case 'r':
case 't':
case '\\':
case '|':
case '.':
case '?':
case '*':
case '+':
case '(':
case ')':
case '{':
case '}':
case '$':
case '-':
case '[':
case ']':
case '^':
    return SINGLE_ESC;
case 's':
case 'S':
case 'i':
case 'I':
case 'c':
case 'C':
case 'd':
case 'D':
case 'w':
case 'W':
  return MULTI_ESC;
case 'p':
case 'P':
final String p="\\" + (char)curr;
final int nxt=next();
if (nxt != '{') throw error(p,nxt);
for (int cp=next(); cp != '}'; cp=next()) if (cp == -1) throw error(tb.toString(),cp);
final String in=tb.toString().substring(3,tb.size() - 1);
final Matcher m=CAT_REGEX.matcher(in);
if (!m.matches()) throw error("{",nxt);
payload=in;
return CAT_ESC;
default :
if (curr < '0' || curr > '9') throw error("\\",(char)curr);
return BACK_REF;
}
}
