{
  final Data data=ictx.data;
  return new FTIter(){
    FTIndexIterator ftiter;
    int len;
    @Override public FTNode next() throws QueryException {
      if (ftiter == null) {
        final FTLexer lex=new FTLexer(ftt.opt);
        FTIndexIterator ii;
        int t=0;
        for (        final byte[] k : unique(txt != null ? txt : tokens(ctx))) {
          lex.init(k);
          ii=null;
          if (!lex.hasNext())           return null;
          int d=0;
          do {
            final byte[] tok=lex.nextToken();
            t+=tok.length;
            if (ftt.opt.sw != null && ftt.opt.sw.contains(tok)) {
              ++d;
            }
 else {
              final FTIndexIterator ir=lex.get().length > data.meta.maxlen ? scan(lex) : (FTIndexIterator)data.iter(lex);
              ir.pos(++ctx.ftPos);
              if (ii == null) {
                ii=ir;
              }
 else {
                ii=FTIndexIterator.intersect(ii,ir,++d);
                d=0;
              }
            }
          }
 while (lex.hasNext());
          if (ftiter == null) {
            len=t;
            ftiter=ii;
          }
 else           if (mode == FTMode.ALL || mode == FTMode.ALL_WORDS) {
            if (ii.size() == 0)             return null;
            len+=t;
            ftiter=FTIndexIterator.intersect(ftiter,ii,0);
          }
 else {
            if (ii.size() == 0)             continue;
            len=Math.max(t,len);
            ftiter=FTIndexIterator.union(ftiter,ii);
          }
        }
      }
      return ftiter == null || !ftiter.more() ? null : new FTNode(ftiter.matches(),data,ftiter.pre(),len,ftiter.size(),-1);
    }
  }
;
}
