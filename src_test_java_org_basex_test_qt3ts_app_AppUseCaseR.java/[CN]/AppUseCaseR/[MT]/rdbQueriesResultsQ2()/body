{
  final XQuery query=new XQuery("\n" + "        <result> { \n" + "            for $i in $items//item_tuple \n"+ "            let $b := $bids//bid_tuple[itemno = $i/itemno] \n"+ "            where contains(exactly-one($i/description), \"Bicycle\") \n"+ "            order by $i/itemno \n"+ "            return <item_tuple> { $i/itemno } { $i/description } <high_bid>{ max($b/bid) }</high_bid> </item_tuple> } \n"+ "        </result>\n"+ "      ",ctx);
  try {
    query.bind("$users",node(file("docs/users.xml")));
    query.bind("$items",node(file("docs/items.xml")));
    query.bind("$bids",node(file("docs/bids.xml")));
    result=new QT3Result(query.value());
  }
 catch (  final Throwable trw) {
    result=new QT3Result(trw);
  }
 finally {
    query.close();
  }
  test(assertSerialization("<result><item_tuple><itemno>1001</itemno><description>Red Bicycle</description><high_bid>55</high_bid></item_tuple><item_tuple><itemno>1003</itemno><description>Old Bicycle</description><high_bid>20</high_bid></item_tuple><item_tuple><itemno>1007</itemno><description>Racing Bicycle</description><high_bid>225</high_bid></item_tuple><item_tuple><itemno>1008</itemno><description>Broken Bicycle</description><high_bid/></item_tuple></result>",false));
}
