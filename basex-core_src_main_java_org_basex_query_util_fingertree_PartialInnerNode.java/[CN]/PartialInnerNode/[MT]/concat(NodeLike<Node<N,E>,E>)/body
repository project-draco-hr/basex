{
  if (other instanceof PartialInnerNode) {
    final PartialInnerNode<N,E> single=(PartialInnerNode<N,E>)other;
    final NodeLike<N,E>[] merged=sub.concat(single.sub);
    final NodeLike<N,E> a=merged[0], b=merged[1];
    @SuppressWarnings("unchecked") final NodeLike<Node<N,E>,E>[] out=(NodeLike<Node<N,E>,E>[])merged;
    if (b == null) {
      out[0]=new PartialInnerNode<>(a);
    }
 else {
      @SuppressWarnings("unchecked") final Node<N,E>[] ch=new Node[]{(Node<N,E>)a,(Node<N,E>)b};
      out[0]=new InnerNode<>(ch);
      out[1]=null;
    }
    return out;
  }
  final InnerNode<N,E> inner=(InnerNode<N,E>)other;
  final NodeLike<N,E>[] merged=sub.concat(inner.getSub(0));
  final Node<N,E> a=(Node<N,E>)merged[0], b=(Node<N,E>)merged[1];
  @SuppressWarnings("unchecked") final NodeLike<Node<N,E>,E>[] out=(NodeLike<Node<N,E>,E>[])merged;
  if (b == null) {
    out[0]=inner.replaceFirst(a);
    return out;
  }
  inner.replaceFirst(out,a,b);
  return out;
}
