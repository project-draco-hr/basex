{
  final String db=args[0];
  final String path=args[1] != null ? args[1] : "";
  if (!MetaData.validName(db,false))   return error(NAME_INVALID_X,db);
  final Table table=new Table();
  table.description=RESOURCES;
  table.header.add(INPUT_PATH);
  table.header.add(TYPE);
  table.header.add(MimeTypes.CONTENT_TYPE);
  table.header.add(SIZE);
  try {
    final Data data=Open.open(db,context);
    final Resources res=data.resources;
    final IntList il=res.docs(path);
    for (int i=0, ds=il.size(); i < ds; i++) {
      final int pre=il.get(i);
      final TokenList tl=new TokenList(3);
      final byte[] file=data.text(pre,true);
      tl.add(file);
      tl.add(DataText.M_XML);
      tl.add(MimeTypes.APP_XML);
      tl.add(data.size(pre,Data.DOC));
      table.contents.add(tl);
    }
    for (    final byte[] file : res.binaries(path)) {
      final String f=string(file);
      final TokenList tl=new TokenList(3);
      tl.add(file);
      tl.add(DataText.M_RAW);
      tl.add(MimeTypes.get(f));
      tl.add(data.meta.binary(f).length());
      table.contents.add(tl);
    }
    Close.close(data,context);
  }
 catch (  final IOException ex) {
    Util.debug(ex);
    final String msg=ex.getMessage();
    return msg.isEmpty() ? error(DB_NOT_OPENED_X,db) : error(msg);
  }
  out.println(table.sort().finish());
  return true;
}
