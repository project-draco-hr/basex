{
  List<NodeUpdate> primnew=new ArrayList<NodeUpdate>();
  final DeleteNode del=(DeleteNode)find(DELETENODE);
  if (del != null && del.rec) {
    primnew.add(del);
    updates=null;
    return primnew;
  }
  final ReplaceNode replace=(ReplaceNode)find(REPLACENODE);
  if (replace != null) {
    for (    final NodeUpdate p : updates) {
      if (p.type == REPLACENODE || p.type == INSERTBEFORE || p.type == INSERTAFTER)       primnew.add(p);
    }
    updates=null;
    return primnew;
  }
  final ReplaceValue rec=(ReplaceValue)find(REPLACEVALUE);
  if (rec != null && rec.rec) {
    for (    final NodeUpdate p : updates) {
      if (p.type != INSERTINTOFIRST && p.type != INSERTINTO && p.type != INSERTINTOLAST || p.type == INSERTINTO && p instanceof ReplaceContent)       primnew.add(p);
    }
    updates=null;
    return primnew;
  }
  primnew=updates;
  updates=null;
  return primnew;
}
