{
  String redirect=null, forward=null;
  RestXqRespBuilder resp=null;
  try {
    final StaticFunc uf=function.function;
    final Expr[] args=new Expr[uf.args.length];
    function.bind(http,args);
    final StaticFuncCall sfc=new BaseFuncCall(uf.name,args,uf.sc,uf.info).init(uf);
    final MainModule mod=new MainModule(sfc,new VarScope(),null);
    qc.mainModule(mod);
    qc.context(http,null);
    qc.context.register(qc);
    qc.compile();
    final Iter iter=qc.iter();
    Item item=iter.next();
    if (item != null && item.type.isNode()) {
      final ANode node=(ANode)item;
      if (REST_REDIRECT.eq(node)) {
        final ANode ch=node.children().next();
        if (ch == null || ch.type != NodeType.TXT)         function.error(NO_VALUE,node.name());
        redirect=string(ch.string()).trim();
        return;
      }
      if (REST_FORWARD.eq(node)) {
        final ANode ch=node.children().next();
        if (ch == null || ch.type != NodeType.TXT)         function.error(NO_VALUE,node.name());
        forward=string(ch.string()).trim();
        return;
      }
      if (REST_RESPONSE.eq(node)) {
        resp=new RestXqRespBuilder();
        resp.build(node,function,iter,http);
        return;
      }
    }
    if (function.methods.size() == 1 && function.methods.contains(HTTPMethod.HEAD))     function.error(HEAD_METHOD);
    final SerializerProp sp=function.output;
    http.initResponse(sp);
    final Serializer ser=Serializer.get(http.res.getOutputStream(),sp);
    for (; item != null; item=iter.next())     ser.serialize(item);
    ser.close();
  }
  finally {
    qc.close();
    qc.context.unregister(qc);
    if (redirect != null) {
      http.res.sendRedirect(redirect);
    }
 else     if (forward != null) {
      http.req.getRequestDispatcher(forward).forward(http.req,http.res);
    }
 else     if (resp != null) {
      if (resp.status != 0)       http.status(resp.status,resp.message,resp.error);
      http.res.getOutputStream().write(resp.cache.toArray());
    }
  }
}
