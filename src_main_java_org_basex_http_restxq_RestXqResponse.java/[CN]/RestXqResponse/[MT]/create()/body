{
  final UserFunc uf=function.function;
  final BaseFuncCall bfc=new BaseFuncCall(null,uf.name,uf.args);
  bfc.init(uf);
  function.bind(http);
  if (!qc.dbOptions.isEmpty()) {
    for (    final Entry<String,String> e : qc.dbOptions.entrySet()) {
      qc.context.prop.set(e.getKey(),e.getValue());
    }
  }
  try {
    qc.context.register(qc);
    Value result=qc.value(bfc.compile(qc));
    final Value update=qc.update();
    if (update != null)     result=update;
    final int rs=(int)result.size();
    final Item item=rs > 0 ? result.itemAt(0) : null;
    final SeqType st=SeqType.get(REST_RESPONSE.type,Occ.ONE,REST_RESPONSE);
    final ANode response=item != null && st.instance(item) ? (ANode)item : null;
    if (function.methods.size() == 1 && function.methods.contains(HTTPMethod.HEAD)) {
      if (rs != 1 || response == null)       function.error(HEAD_METHOD);
    }
    SerializerProp sp=response != null ? process(response) : null;
    if (sp == null)     sp=function.output;
    http.initResponse(sp);
    final Serializer ser=Serializer.get(http.res.getOutputStream(),sp);
    for (int v=response != null ? 1 : 0; v < rs; v++) {
      ser.serialize(result.itemAt(v));
    }
    ser.close();
  }
  finally {
    qc.close();
    qc.context.unregister(qc);
  }
}
