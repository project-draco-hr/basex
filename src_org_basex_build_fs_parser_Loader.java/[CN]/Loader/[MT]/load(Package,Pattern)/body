{
  final ArrayList<Class<?>> loadedClasses=new ArrayList<Class<?>>();
  try {
    Matcher matcher;
    final String pkgName=pkg.getName();
    final URL pkgUrl=getURL(pkgName);
    if (pkgUrl == null)     return new Class<?>[0];
    final File packageDir=new File(pkgUrl.getFile());
    if (packageDir.exists()) {
      for (      final File f : packageDir.listFiles()) {
        String fileName=f.getName();
        if (!fileName.endsWith(".class"))         continue;
        fileName=fileName.substring(0,fileName.length() - 6);
        matcher=fileNamePat.matcher(fileName);
        if (matcher.matches()) {
          final String clazz=pkgName + "." + fileName;
          loadedClasses.add(Class.forName(clazz));
        }
      }
    }
 else {
      final JarURLConnection con=(JarURLConnection)pkgUrl.openConnection();
      final JarFile jfile=con.getJarFile();
      final String starts=con.getEntryName();
      final Enumeration<JarEntry> e=jfile.entries();
      while (e.hasMoreElements()) {
        final JarEntry entry=e.nextElement();
        final String name=entry.getName();
        if (name.startsWith(starts) && name.lastIndexOf('/') <= starts.length() && name.endsWith(".class")) {
          String classname=name.substring(0,name.length() - 6);
          final int i=classname.lastIndexOf('/') + 1;
          final String shortName=classname.substring(i);
          matcher=fileNamePat.matcher(shortName);
          if (matcher.matches()) {
            if (classname.startsWith("/"))             classname=classname.substring(1);
            classname=classname.replace('/','.');
            loadedClasses.add(Class.forName(classname));
          }
        }
      }
    }
  }
 catch (  final IOException ex) {
    throw ex;
  }
catch (  final Throwable t) {
    BaseX.errln("Failed to load class (%)",t.getMessage());
  }
  return loadedClasses.toArray(new Class<?>[loadedClasses.size()]);
}
