{
  Matcher matcher;
  final ArrayList<Class<?>> foundClasses=new ArrayList<Class<?>>();
  final ArrayList<File> subClasses=new ArrayList<File>();
  final ArrayList<File> subSubClasses=new ArrayList<File>();
  try {
    if (!directory.isDirectory())     throw new IllegalArgumentException("Is not a directory.");
    for (    final File f : directory.listFiles()) {
      String fileName=f.getName();
      fileName=fileName.substring(0,fileName.length() - 6);
      matcher=fileNamePattern.matcher(fileName);
      if (matcher.matches()) {
        if (fileName.contains("$")) {
          if (fileName.indexOf('$') != fileName.lastIndexOf('$')) {
            subSubClasses.add(f);
            continue;
          }
          subClasses.add(f);
          continue;
        }
        final Class<?> c=load(f);
        foundClasses.add(c);
      }
    }
    for (    final File f : subClasses)     load(f);
    for (    final File f : subSubClasses)     load(f);
  }
 catch (  final IOException e) {
    throw e;
  }
catch (  final Throwable t) {
    BaseX.errln("Failed to load class (%)",t.getMessage());
  }
  final int counter=initializeClasses(foundClasses);
  return foundClasses.subList(0,counter).toArray(new Class<?>[counter]);
}
