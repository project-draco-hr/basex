{
  final int count=++counter;
  delete();
  final boolean ok=super.exec();
  if (!ok || !(result instanceof Nodes))   return false;
  final Data data=context.data();
  final Nodes nodes=(Nodes)result;
  if (count != counter)   return false;
  final int len=Integer.toString(MAXLINKS).length();
  int c=0;
  for (int n=0; n < nodes.size && n < MAXLINKS; n++) {
    if (count != counter)     return false;
    final int pre=nodes.pre[n];
    if (!FSUtils.isFile(data,pre) && !FSUtils.isDir(data,pre))     continue;
    String nr=Integer.toString(n + 1);
    while (nr.length() < len)     nr="0" + nr;
    final byte[] name=FSUtils.getName(data,pre);
    final String src="[" + nr + "] "+ Token.string(name);
    final String tar=Token.string(FSUtils.getPath(data,pre));
    link(src,tar);
    c++;
  }
  if (c == MAXLINKS) {
    link(" " + c + " of "+ nodes.size+ " Results shown","dummy");
  }
 else   if (c == 0) {
    link("(0 Results)","dummy");
  }
  if (!Prop.allInfo)   error("");
  return ok;
}
