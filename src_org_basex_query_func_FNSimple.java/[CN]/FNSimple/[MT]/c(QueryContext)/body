{
  final boolean i=expr.length == 1 && expr[0].i();
  final boolean e=expr.length == 1 && expr[0].e();
switch (func) {
case FALSE:
case TRUE:
    return atomic(ctx);
case EMPTY:
case EXISTS:
case BOOL:
  return i ? atomic(ctx) : this;
case NOT:
if (i) return atomic(ctx);
if (expr[0] instanceof Fun) {
final Fun fs=(Fun)expr[0];
if (fs.func == FunDef.EMPTY) {
  expr=fs.expr;
  func=FunDef.EXISTS;
}
 else if (fs.func == FunDef.EXISTS) {
  expr=fs.expr;
  func=FunDef.EMPTY;
}
}
return this;
case ZEROONE:
return e || i || expr[0].returned(ctx).single ? expr[0] : this;
case EXONE:
case ONEMORE:
return i || expr[0].returned(ctx).single ? expr[0] : this;
case UNORDER:
return expr[0];
default :
return this;
}
}
