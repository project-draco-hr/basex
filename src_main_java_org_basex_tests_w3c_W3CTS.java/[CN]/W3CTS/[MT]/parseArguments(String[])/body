{
  final Args arg=new Args(args,this," [options] [pat]" + NL + " [pat] perform tests starting with a pattern"+ NL+ " -c     print compilation steps"+ NL+ " -C     run tests depending on current time"+ NL+ " -g     <test-group> test group to test"+ NL+ " -h     show this help"+ NL+ " -m     minimum conformance"+ NL+ " -p     change path"+ NL+ " -r     create report"+ NL+ " -t[ms] list slowest queries"+ NL+ " -v     verbose output",Util.info(CONSOLE,Util.name(this)));
  while (arg.more()) {
    if (arg.dash()) {
      final char c=arg.next();
      if (c == 'r') {
        reporting=true;
        currTime=true;
      }
 else       if (c == 'C') {
        currTime=true;
      }
 else       if (c == 'c') {
        compile=true;
      }
 else       if (c == 'm') {
        minimum=true;
      }
 else       if (c == 'g') {
        group=arg.string();
      }
 else       if (c == 'p') {
        path=arg.string() + '/';
      }
 else       if (c == 't') {
        timer=arg.number();
      }
 else       if (c == 'v') {
        verbose=true;
      }
 else {
        arg.usage();
      }
    }
 else {
      single=arg.string();
      maxout=Integer.MAX_VALUE;
    }
  }
}
