{
  color=isEnabled() ? high ? GUIConstants.GREEN : link ? GUIConstants.color4 : syntax.getColor(text) : Color.gray;
  high=false;
  final int ch=text.curr();
  if (ch == TokenBuilder.MARK)   high=true;
  final int cp=text.pos();
  final int cc=text.getCaret();
  if (y > 0 && y < h) {
    if (text.selectStart()) {
      int xx=x;
      while (!text.inSelect() && text.more())       xx+=charW(g,text.next());
      int cw=0;
      while (text.inSelect() && text.more())       cw+=charW(g,text.next());
      g.setColor(GUIConstants.color(3));
      g.fillRect(xx,y - fontH * 4 / 5,cw,fontH);
      text.pos(cp);
    }
    int xx=x;
    while (text.more() && text.searchStart()) {
      while (!text.inSearch() && text.more())       xx+=charW(g,text.next());
      int cw=0;
      while (text.inSearch() && text.more())       cw+=charW(g,text.next());
      g.setColor(GUIConstants.color2A);
      g.fillRect(xx,y - fontH * 4 / 5,cw,fontH);
      xx+=cw;
    }
    text.pos(cp);
    if (text.erroneous())     drawError(g);
    if (ch == '\u00a0') {
      final int s=fontH / 12;
      g.setColor(GUIConstants.GRAY);
      g.fillRect(x + (wordW >> 1),y - fontH * 3 / 10,s,s);
    }
 else     if (ch == '\t') {
      final int yy=y - fontH * 3 / 10;
      final int s=1 + fontH / 12;
      final int xe=x + charW(g,'\t') - s;
      final int as=s * 2 - 1;
      g.setColor(GUIConstants.GRAY);
      g.drawLine(x + s,yy,xe,yy);
      g.drawLine(xe - as,yy - as,xe,yy);
      g.drawLine(xe - as,yy + as,xe,yy);
    }
 else     if (ch >= 0) {
      g.setColor(color);
      String n=text.nextString();
      int ww=w - x;
      if (x + wordW > ww) {
        int c=0;
        for (final int nl=n.length(); c < nl && ww > 0; c++) {
          ww-=charW(g,n.charAt(c));
        }
        n=n.substring(0,c);
      }
      if (ch != ' ')       g.drawString(n,x,y);
    }
 else     if (ch <= TokenBuilder.ULINE) {
      g.setFont(font);
    }
    if (link)     g.drawLine(x,y + 1,x + wordW,y + 1);
    if (cursor && text.edited()) {
      xx=x;
      while (text.more()) {
        if (cc == text.pos()) {
          drawCursor(g,xx);
          break;
        }
        xx+=charW(g,text.next());
      }
      text.pos(cp);
    }
  }
  if (ch == '(' || ch == '[' || ch == '{') {
    pars.add(x);
    pars.add(y);
    pars.add(cp);
    pars.add(ch);
  }
 else   if ((ch == ')' || ch == ']' || ch == '}') && !pars.isEmpty()) {
    final int open=ch == ')' ? '(' : ch == ']' ? '[' : '{';
    if (pars.peek() == open) {
      pars.pop();
      final int cr=pars.pop();
      final int yy=pars.pop();
      final int xx=pars.pop();
      if (cc == cp || cc == cr) {
        g.setColor(GUIConstants.color3);
        g.drawRect(xx,yy - fontH * 4 / 5,charW(g,open),fontH);
        g.drawRect(x,y - fontH * 4 / 5,charW(g,ch),fontH);
      }
    }
  }
  next();
}
