{
  if (cn == 0) {
    if (next.list[cn].length > 3) {
      final int p=getPointer(cn);
      if (Token.diff(tokens.list[next.list[next.list[cn][p]][0]][0],v[0]) != 0) {
        int[] e;
        e=new int[2 + offset.length];
        e[0]=tokens.size;
        tokens.add(v);
        e[1]=s;
        System.arraycopy(offset,0,e,2,offset.length);
        next.add(e);
        insertNodeInNextArray(cn,next.size - 1,p + 1);
        return next.size - 1;
      }
 else {
        return insertNodeSorted(next.list[cn][p],v,s,offset);
      }
    }
  }
  final byte[] is=next.list[cn][0] == -1 ? null : calculateIntersection(tokens.list[next.list[cn][0]],v);
  byte[] r1=next.list[cn][0] == -1 ? null : tokens.list[next.list[cn][0]];
  byte[] r2=v;
  if (is != null) {
    r1=getBytes(r1,is.length,r1.length);
    r2=getBytes(v,is.length,v.length);
  }
  if (is != null) {
    if (r1 == null) {
      if (r2 != null) {
        final int p=getPointer(cn);
        if (p == 0 || Token.diff(tokens.list[next.list[next.list[cn][p]][0]][0],r2[0]) != 0) {
          int[] e;
          e=new int[2 + offset.length];
          e[0]=tokens.size;
          tokens.add(r2);
          e[1]=s;
          System.arraycopy(offset,0,e,2,offset.length);
          next.add(e);
          insertNodeInNextArray(cn,next.size - 1,p + 1);
          return next.size - 1;
        }
 else {
          return insertNodeSorted(next.list[cn][p],r2,s,offset);
        }
      }
    }
 else {
      if (r2 == null) {
        final int[] oe=new int[3 + offset.length];
        tokens.list[next.list[cn][0]]=is;
        oe[0]=next.list[cn][0];
        System.arraycopy(offset,0,oe,3,offset.length);
        oe[2]=s;
        next.list[cn][0]=tokens.size;
        tokens.add(r1);
        next.add(next.list[cn]);
        oe[1]=next.size - 1;
        next.list[cn]=oe;
        return next.size - 1;
      }
 else {
        tokens.list[next.list[cn][0]]=is;
        final int[] one=next.list[cn];
        int[] ne=new int[5];
        ne[0]=one[0];
        if (Token.diff(r2[0],r1[0]) < 0) {
          ne[1]=next.size;
          ne[2]=next.size + 1;
        }
 else {
          ne[1]=next.size + 1;
          ne[2]=next.size;
        }
        ne[3]=0;
        ne[4]=0;
        next.list[cn]=ne;
        ne=new int[2 + offset.length];
        ne[0]=tokens.size;
        tokens.add(r2);
        ne[1]=s;
        System.arraycopy(offset,0,ne,2,offset.length);
        next.add(ne);
        ne=new int[one.length];
        System.arraycopy(one,0,ne,0,ne.length);
        ne[0]=tokens.size;
        tokens.add(r1);
        next.add(ne);
        return next.size - 1;
      }
    }
  }
 else {
    final int[] ne=new int[2 + offset.length];
    ne[0]=tokens.size;
    tokens.add(v);
    System.arraycopy(offset,0,ne,2,offset.length);
    ne[1]=s;
    next.add(ne);
    final int p=next.list[cn].length - 2;
    insertNodeInNextArray(cn,next.size - 1,p);
    return next.size - 1;
  }
  return -1;
}
