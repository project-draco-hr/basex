{
  final int n=l + r;
  if (n == 1)   return new Single<>(nodes[(m + r + 7) & 7]);
  final int a=sub == null ? n / 2 : l, b=n - a;
  @SuppressWarnings("unchecked") final Node<N,E>[] left=new Node[a], right=new Node[b];
  final int lOff=m - l + 8, rOff=lOff + a;
  for (int i=0; i < a; i++)   left[i]=nodes[(lOff + i) & 7];
  for (int i=0; i < b; i++)   right[i]=nodes[(rOff + i) & 7];
  return sub == null ? Deep.get(left,right) : Deep.get(left,sub.freeze(),right);
}
