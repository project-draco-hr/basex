{
  if (inLeft < 4) {
    nodes[(midPos - inLeft - 1 + CAP) & MASK]=node;
    inLeft++;
  }
 else   if (middle == null && inRight < 4) {
    midPos=(midPos - 1 + CAP) & MASK;
    nodes[(midPos - inLeft + CAP) & MASK]=node;
    inRight++;
  }
 else {
    final int l3=(midPos - 1 + CAP) & MASK, l2=(l3 - 1 + CAP) & MASK, l1=(l2 - 1 + CAP) & MASK, l0=(l1 - 1 + CAP) & MASK;
    final Node<Node<N,E>,E> next=new InnerNode3<>(nodes[l1],nodes[l2],nodes[l3]);
    nodes[l3]=nodes[l0];
    nodes[l2]=node;
    nodes[l1]=null;
    nodes[l0]=null;
    inLeft=2;
    if (middle == null)     middle=new BufferNode<>(next);
 else     midBuffer().prepend(next);
  }
}
