{
  final EnumSet<HTTPMethod> mth=EnumSet.noneOf(HTTPMethod.class);
  boolean found=false;
  for (int a=0, as=function.ann.size(); a < as; a++) {
    final QNm name=function.ann.names[a];
    final Value value=function.ann.values[a];
    final byte[] local=name.local();
    final byte[] uri=name.uri();
    boolean rexq=startsWith(uri,QueryText.REXQURI);
    if (rexq) {
      if (eq(PATH,local)) {
        path=new RestXqPath(toString(value,SINGLE_STRING,PATH),this);
      }
 else       if (eq(GET,local)) {
        mth.add(HTTPMethod.GET);
      }
 else       if (eq(POST,local)) {
        mth.add(HTTPMethod.POST);
      }
 else       if (eq(PUT,local)) {
        mth.add(HTTPMethod.PUT);
      }
 else       if (eq(DELETE,local)) {
        mth.add(HTTPMethod.DELETE);
      }
 else       if (eq(CONSUMES,local)) {
        consumes.add(toString(value,SINGLE_STRING,CONSUMES));
      }
 else       if (eq(PRODUCES,local)) {
        produces.add(toString(value,SINGLE_STRING,PRODUCES));
      }
 else {
        error(NOT_SUPPORTED,name);
      }
    }
 else     if (eq(uri,QueryText.OUTPUTURI)) {
      final String key=string(local);
      final String val=toString(value,OUTPUT_STRING,key);
      if (output.get(key) == null)       error(UNKNOWN_SER,key);
      output.set(key,val);
    }
    found|=rexq;
  }
  if (!mth.isEmpty())   methods=mth;
  if (found) {
    if (path == null)     error(PATH_UNDEFINED,PATH);
    for (    final Var v : function.args) {
      if (!v.declared)       error(VAR_UNDEFINED,v.name.string());
    }
  }
  return found;
}
