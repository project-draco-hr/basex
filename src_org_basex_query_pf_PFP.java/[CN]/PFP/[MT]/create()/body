{
  try {
    final Performance p=new Performance();
    final Process pr=new ProcessBuilder(Prop.pfpath,PFARGS).start();
    final OutputStream out=pr.getOutputStream();
    out.write(query);
    out.close();
    if (Prop.allInfo)     BaseX.outln(DBGSEND,p.getTimer());
    final Thread t1=new Thread(){
      @Override public void run(){
        xml=getStream(pr.getInputStream());
      }
    }
;
    final Thread t2=new Thread(){
      @Override public void run(){
        err=getStream(pr.getErrorStream());
      }
    }
;
    t1.start();
    t2.start();
    t1.join();
    t2.join();
    if (Prop.allInfo)     BaseX.outln(DBGINPUT,p.getTimer());
    if (err.length != 0 && xml.length == 0) {
      final String error=Token.string(err);
      throw new QueryException(error.contains(PF404) ? PFPATH : PFPARSE + error);
    }
    final CachedInput in=new CachedInput(xml);
    final XMLParser parser=new XMLParser(in);
    final MemData d=(MemData)new MemBuilder().build(parser,PLANXML);
    if (Prop.allInfo)     BaseX.outln(DBGTABLE,p.getTimer());
    return new PFC(d,this);
  }
 catch (  final Exception ex) {
    final QueryException qe=new QueryException(ex.toString());
    qe.initCause(ex);
    throw qe;
  }
}
