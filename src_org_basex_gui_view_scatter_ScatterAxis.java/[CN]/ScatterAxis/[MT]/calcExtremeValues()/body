{
  final Performance p=new Performance();
  min=Integer.MAX_VALUE;
  max=Integer.MIN_VALUE;
  for (int i=0; i < vals.length; i++) {
    if (vals[i].length < 1)     continue;
    double d=Token.toDouble(vals[i]);
    if (d < min)     min=d;
    if (d > max)     max=d;
  }
  final double range=max - min;
  final int lmin=(int)(min - (range / 2));
  final int lmax=(int)(max + (range / 2));
  int tmin=(int)Math.floor(min);
  int tmax=(int)Math.ceil(max);
  final double rangePow=Math.floor(Math.log10(range) + .5d);
  calculatedCaptionStep=(int)(Math.pow(10,rangePow - 1));
  final double tmpStepL=(int)(Math.pow(10,rangePow));
  boolean sFound=false;
  min=tmin;
  while (tmin > lmin) {
    if (tmin % tmpStepL == 0) {
      min=tmin;
      break;
    }
    if (!sFound && tmin % calculatedCaptionStep == 0) {
      min=tmin;
      sFound=true;
    }
    tmin--;
  }
  max=tmax;
  while (tmax < lmax) {
    final int tmpRange=(int)(tmax - min);
    if (tmax % tmpStepL == 0) {
      max=tmax;
      break;
    }
    if (!sFound && tmax % calculatedCaptionStep == 0 && (tmpRange / calculatedCaptionStep) % 2 == 0) {
      max=tmax;
      sFound=true;
    }
    tmax++;
  }
  System.out.println(p.getTimer());
}
