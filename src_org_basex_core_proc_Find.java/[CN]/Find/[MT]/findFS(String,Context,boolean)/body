{
  final String query=term.replaceAll("\\*|\\?|\\&|\""," ") + ' ';
  String qu=query;
  final TokenBuilder xquery=new TokenBuilder();
  final boolean r=root || context.root();
  if (r)   xquery.add("/");
  xquery.add("descendant-or-self::");
  String name="*";
  do {
    boolean exact=true;
    String pred="";
    char op=qu.charAt(0);
    if (op == '>') {
      pred=DataText.S_SIZE;
    }
 else     if (op == '<') {
      pred=DataText.S_SIZE;
    }
 else     if (op == '.') {
      pred=DataText.S_SUFFIX;
      op='=';
    }
 else {
      pred=DataText.S_NAME;
      exact=op == '=';
    }
    int off=exact ? 1 : 0;
    while (off < qu.length() && qu.charAt(off) == ' ')     off++;
    qu=qu.substring(off);
    if (qu.length() == 0)     continue;
    final int i=qu.indexOf(' ');
    String t=qu.substring(0,i);
    if (pred == DataText.S_SIZE) {
      t=Long.toString(calcNum(token(t)));
      if (name.length() != 0)       name="file";
    }
 else {
      final int d=t.lastIndexOf(".");
      if (d != -1) {
        xquery.add("[@" + DataText.S_SUFFIX + " = \""+ t.substring(d + 1)+ "\"]");
      }
      t="\"" + t + "\"";
    }
    xquery.add(name + "[@" + pred+ (exact ? op : " ftcontains ")+ t+ "]");
    qu=qu.substring(i + 1);
    name="";
  }
 while (qu.indexOf(' ') > -1);
  boolean f=true;
  for (  final String t : split(query)) {
    if (Character.isLetterOrDigit(t.charAt(0))) {
      if (f)       xquery.add(" | " + (r ? "/" : "") + "descendant-or-self::file");
      xquery.add("[descendant::text() ftcontains \"" + t + "\"]");
      f=false;
    }
  }
  return xquery.toString();
}
