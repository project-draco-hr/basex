{
  final String query=term.replaceAll("\\*|\\?|\\&|\""," ") + ' ';
  String qu=query;
  final Nodes current=context.current();
  final TokenBuilder xpath=new TokenBuilder();
  final boolean r=root || current.size == 1 && current.pre[0] < 2;
  if (r)   xpath.add("/");
  xpath.add("descendant-or-self::*");
  do {
    boolean size=false;
    boolean date=false;
    String pred="";
    char operator=qu.charAt(0);
    boolean exact=true;
    if (operator == '>') {
      pred="@size";
      size=true;
    }
 else     if (operator == '<') {
      pred="@size";
      size=true;
    }
 else     if (operator == '}') {
      operator='>';
      pred="@mtime";
      date=true;
    }
 else     if (operator == '{') {
      operator='<';
      pred="@mtime";
      date=true;
    }
 else     if (operator == '.') {
      pred="@suffix";
      operator='=';
    }
 else     if (operator == '~') {
      pred="@name";
    }
 else     if (operator == '=') {
      pred="@name";
    }
 else {
      int i=qu.indexOf("=",1);
      final int s=qu.indexOf(" ",1);
      if (i == -1)       i=qu.indexOf("<",1);
      if (i == -1)       i=qu.indexOf(">",1);
      if (i != -1 && (s == -1 || s > i)) {
        pred="self::file][descendant-or-self::node()/" + qu.substring(0,i);
        qu=qu.substring(i);
        operator=qu.charAt(0);
        size=operator != '=';
      }
 else {
        pred="@name";
        exact=false;
      }
    }
    int off=exact ? 1 : 0;
    while (off < qu.length() && qu.charAt(off) == ' ')     off++;
    qu=qu.substring(off);
    if (qu.length() == 0)     return r ? "/" : ".";
    final int i=qu.indexOf(' ');
    String t=qu.substring(0,i);
    if (size) {
      t=Long.toString(calcNum(Token.token(t)));
    }
 else     if (date) {
      final String[] dat=t.split("\\.");
      final int y=dat.length > 0 ? Integer.parseInt(dat[0]) : 1970;
      final int m=dat.length > 1 ? Integer.parseInt(dat[1]) - 1 : 0;
      final int d=dat.length > 2 ? Integer.parseInt(dat[2]) : 1;
      final long time=new GregorianCalendar(y,m,d).getTime().getTime();
      t=Long.toString(time / 60000);
    }
 else {
      int d=t.lastIndexOf(".");
      if (d != -1)       xpath.add("[@suffix = \"" + t.substring(d + 1) + "\"]");
      t="\"" + t + "\"";
    }
    xpath.add('[');
    if (exact) {
      xpath.add(pred + operator + t);
    }
 else {
      xpath.add(ContainsLC.NAME + "(" + pred+ ", "+ t+ ")");
    }
    xpath.add(']');
    qu=qu.substring(i + 1);
  }
 while (qu.indexOf(' ') > -1);
  final Data data=context.data();
  if (data.meta.ftxindex) {
    xpath.add(" | ");
    if (!r)     xpath.add(".");
    xpath.add("//file");
    for (    final String t : split(query)) {
      xpath.add("[");
      final String pred=".//text()";
      if (data.meta.ftxindex) {
        xpath.add(pred + " ftcontains \"" + t+ "\"");
      }
      xpath.add("]");
    }
  }
  return xpath.toString();
}
