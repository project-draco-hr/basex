{
  final String query=term.replaceAll("\\*|\\?|\\&|\""," ") + ' ';
  String qu=query;
  final TokenBuilder xquery=new TokenBuilder();
  final boolean r=root || context.root();
  if (r)   xquery.add("/");
  xquery.add("descendant-or-self::*");
  do {
    boolean size=false;
    boolean exact=true;
    String pred="";
    char op=qu.charAt(0);
    if (op == '>') {
      pred="@" + DataText.S_SIZE;
      size=true;
    }
 else     if (op == '<') {
      pred="@" + DataText.S_SIZE;
      size=true;
    }
 else     if (op == '.') {
      pred="@" + DataText.S_SUFFIX;
      op='=';
    }
 else     if (op == '=') {
      pred="@" + DataText.S_NAME;
    }
 else {
      pred="@" + DataText.S_NAME;
      exact=false;
    }
    int off=exact ? 1 : 0;
    while (off < qu.length() && qu.charAt(off) == ' ')     off++;
    qu=qu.substring(off);
    if (qu.length() == 0)     continue;
    final int i=qu.indexOf(' ');
    String t=qu.substring(0,i);
    if (size) {
      t=Long.toString(calcNum(Token.token(t)));
    }
 else {
      final int d=t.lastIndexOf(".");
      if (d != -1) {
        xquery.add("[@" + DataText.S_SUFFIX + " = \""+ t.substring(d + 1)+ "\"]");
      }
      t="\"" + t + "\"";
    }
    xquery.add('[' + pred + (exact ? op : " ftcontains ")+ t+ ']');
    qu=qu.substring(i + 1);
  }
 while (qu.indexOf(' ') > -1);
  xquery.add(" | ");
  if (!r)   xquery.add(".");
  xquery.add("//file");
  for (  final String t : split(query)) {
    if (Character.isLetterOrDigit(t.charAt(0)))     xquery.add("[descendant::text() ftcontains \"" + t + "\"]");
  }
  return xquery.toString();
}
