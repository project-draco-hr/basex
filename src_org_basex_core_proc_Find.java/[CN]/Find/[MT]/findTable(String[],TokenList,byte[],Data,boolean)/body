{
  final TokenBuilder tb=new TokenBuilder();
  final boolean fs=data.deepfs;
  for (int i=0; i < filter.length; i++) {
    if (filter[i].length() < 3)     continue;
    final String[] spl=split(filter[i]);
    for (    final String s : spl) {
      byte[] term=Token.token(s);
      if (Token.contains(term,'"'))       term=Token.replace(term,'\"',' ');
      term=Token.trim(term);
      if (term.length == 0)       continue;
      tb.add("[");
      if (fs && i == 1) {
        tb.add(ContainsLC.NAME);
        tb.add("(@name, \"");
        tb.add(term);
        tb.add("\")");
      }
 else {
        final boolean att=fs && i < 4;
        if (fs)         tb.add(att ? "@" : "*//");
        tb.add(cols.list[i]);
        String quote="\"";
        if (term[0] == '<' || term[0] == '>') {
          tb.add(term[0]);
          quote="";
          term=Token.token(calcNum(Token.substring(term,1)));
        }
 else         if (att) {
          tb.add(" = ");
        }
 else {
          if (data.meta.ftxindex) {
            tb.add(" ftcontains ");
          }
 else           if (spl.length > 1 || !data.meta.txtindex && !att) {
            tb.add(" contains ");
          }
 else {
            tb.add(" = ");
          }
        }
        tb.add(quote);
        tb.add(term);
        tb.add(quote);
      }
      tb.add("]");
    }
  }
  String xpath=tb.toString();
  if (xpath.length() != 0)   xpath=(root ? "/" : "") + "descendant-or-self::" + Token.string(tag)+ xpath;
  return xpath;
}
