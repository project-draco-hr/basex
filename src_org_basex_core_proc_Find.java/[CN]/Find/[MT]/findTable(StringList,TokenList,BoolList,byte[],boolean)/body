{
  final TokenBuilder tb=new TokenBuilder();
  for (int i=0; i < filter.size; i++) {
    final String[] spl=split(filter.list[i]);
    for (    final String s : spl) {
      byte[] term=Token.token(s);
      if (Token.contains(term,'"'))       term=Token.replace(term,'\"',' ');
      term=Token.trim(term);
      if (term.length == 0)       continue;
      tb.add("[");
      final boolean elm=elem.list[i];
      tb.add(elm ? ".//" : "@");
      tb.add(cols.list[i]);
      if (term[0] == '<' || term[0] == '>') {
        tb.add(term[0]);
        tb.add(calcNum(Token.substring(term,1)));
      }
 else {
        tb.add(" ftcontains \"");
        tb.add(term);
        tb.add("\"");
      }
      tb.add("]");
    }
  }
  return tb.size == 0 ? "." : (root ? "/" : "") + "descendant-or-self::" + Token.string(tag)+ tb;
}
