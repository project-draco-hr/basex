{
  return new Eval(){
    /** 
 * Groups to iterate over. 
 */
    private Group[] groups;
    /** 
 * Current position. 
 */
    private int pos;
    @Override public boolean next(    final QueryContext ctx) throws QueryException {
      if (groups == null)       init(ctx);
      if (pos == groups.length)       return false;
      final Group curr=groups[pos];
      groups[pos++]=null;
      int p=0;
      for (      final Spec spec : by) {
        if (!spec.occluded) {
          final Item key=curr.key[p++];
          ctx.set(spec.var,key == null ? Empty.SEQ : key,info);
        }
      }
      for (int i=0; i < post.length; i++)       ctx.set(post[i],curr.ngv[i].value(),info);
      return true;
    }
    /** 
 * Initializes the groups.
 * @param ctx query context
 * @throws QueryException query exception
 */
    private void init(    final QueryContext ctx) throws QueryException {
      final ArrayList<Group> grps=new ArrayList<Group>();
      final IntMap<Group> hashMap=new IntMap<Group>();
      while (sub.next(ctx)) {
        final Item[] key=new Item[nonOcc];
        int p=0, hash=1;
        for (int i=0; i < by.length; i++) {
          final Item ki=by[i].item(ctx,info), atom=ki == null ? null : StandardFunc.atom(ki,info);
          if (!by[i].occluded) {
            key[p++]=atom;
            hash=31 * hash + (atom == null ? 0 : atom.hash(info));
          }
          ctx.set(by[i].var,atom == null ? Empty.SEQ : atom,info);
        }
        final Group fst=hashMap.get(hash);
        Group grp=null;
        for (Group g=fst; g != null; g=g.next) {
          if (eq(key,g.key)) {
            grp=g;
            break;
          }
        }
        if (grp == null) {
          final ValueBuilder[] ngs=new ValueBuilder[pre.length];
          for (int i=0; i < ngs.length; i++)           ngs[i]=new ValueBuilder();
          grp=new Group(key,ngs);
          grps.add(grp);
          if (fst == null) {
            hashMap.add(hash,grp);
          }
 else {
            final Group nxt=fst.next;
            fst.next=grp;
            grp.next=nxt;
          }
        }
        for (int j=0; j < pre.length; j++)         grp.ngv[j].add(pre[j].value(ctx));
      }
      groups=grps.toArray(new Group[grps.size()]);
    }
  }
;
}
