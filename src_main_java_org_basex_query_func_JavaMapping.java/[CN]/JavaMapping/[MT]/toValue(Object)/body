{
  if (res == null)   return Empty.SEQ;
  if (res instanceof Value)   return (Value)res;
  if (res instanceof Iter)   return ((Iter)res).value();
  final Type type=type(res);
  if (type != null)   return type.cast(res,null);
  if (res instanceof byte[])   return BytSeq.get((byte[])res);
  if (res instanceof long[])   return IntSeq.get((long[])res,AtomType.ITR);
  if (res instanceof char[])   return Str.get(new String((char[])res));
  if (res instanceof boolean[])   return BlnSeq.get((boolean[])res);
  if (res instanceof double[])   return DblSeq.get((double[])res);
  if (res instanceof float[])   return FltSeq.get((float[])res);
  if (!res.getClass().isArray())   return new Jav(res);
  final int s=Array.getLength(res);
  if (s == 0)   return Empty.SEQ;
  if (res instanceof String[]) {
    final String[] r=(String[])res;
    final byte[][] b=new byte[r.length][];
    for (int v=0; v < s; v++)     b[v]=Token.token(r[v]);
    return StrSeq.get(b);
  }
  if (res instanceof char[][]) {
    final char[][] r=(char[][])res;
    final byte[][] b=new byte[r.length][];
    for (int v=0; v < s; v++)     b[v]=Token.token(new String(r[v]));
    return StrSeq.get(b);
  }
  if (res instanceof short[]) {
    final short[] r=(short[])res;
    final long[] b=new long[r.length];
    for (int v=0; v < s; v++)     b[v]=r[v];
    return IntSeq.get(b,AtomType.SHR);
  }
  if (res instanceof int[]) {
    final int[] r=(int[])res;
    final long[] b=new long[r.length];
    for (int v=0; v < s; v++)     b[v]=r[v];
    return IntSeq.get(b,AtomType.INT);
  }
  final Object[] obj=(Object[])res;
  final ValueBuilder vb=new ValueBuilder(obj.length);
  for (  final Object o : obj)   vb.add(toValue(o));
  return vb.value();
}
