{
  if (res == null)   return Empty.SEQ;
  if (res instanceof Value)   return (Value)res;
  if (res instanceof Iter)   return ((Iter)res).value();
  Type type=type(res);
  if (type != null)   return type.cast(res,null);
  if (res instanceof char[])   return Str.get(new String((char[])res));
  if (!res.getClass().isArray())   return new Jav(res);
  final int s=Array.getLength(res);
  if (s == 0)   return Empty.SEQ;
  if (res instanceof byte[]) {
    final byte[] values=(byte[])res;
    return s > 1 ? new ByteSeq(values) : new Int(values[0],AtomType.BYT);
  }
  final Item[] items=new Item[s];
  if (res instanceof boolean[]) {
    type=AtomType.BLN;
    final boolean[] values=(boolean[])res;
    for (int v=0; v < s; v++)     items[v]=Bln.get(values[v]);
  }
 else   if (res instanceof short[]) {
    type=AtomType.SHR;
    final short[] values=(short[])res;
    for (int v=0; v < s; v++)     items[v]=new Int(values[v],type);
  }
 else   if (res instanceof int[]) {
    type=AtomType.INT;
    final int[] values=(int[])res;
    for (int v=0; v < s; v++)     items[v]=new Int(values[v],type);
  }
 else   if (res instanceof long[]) {
    type=AtomType.ITR;
    final long[] values=(long[])res;
    for (int v=0; v < s; v++)     items[v]=Int.get(values[v]);
  }
 else   if (res instanceof float[]) {
    type=AtomType.FLT;
    final float[] values=(float[])res;
    for (int v=0; v < s; v++)     items[v]=Flt.get(values[v]);
  }
 else   if (res instanceof double[]) {
    type=AtomType.DBL;
    final double[] values=(double[])res;
    for (int v=0; v < s; v++)     items[v]=Dbl.get(values[v]);
  }
 else {
    final ValueBuilder vb=new ValueBuilder();
    for (    final Object o : (Object[])res) {
      vb.add(o instanceof Value ? (Value)o : new Jav(o));
    }
    return vb.value();
  }
  return Seq.get(items,s,type);
}
