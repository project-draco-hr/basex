{
  if (!ctx.context.user.perm(User.ADMIN))   return null;
  final byte[] uri=name.uri();
  final byte[] ln=name.local();
  final boolean java=startsWith(uri,JAVAPREF);
  final QNm nm=new QNm(ln,java ? substring(uri,JAVAPREF.length) : uri);
  final TokenBuilder m=new TokenBuilder();
  boolean dash=false;
  for (int p=0; p < ln.length; p+=cl(ln,p)) {
    final int ch=cp(ln,p);
    if (dash) {
      m.add(Character.toUpperCase(ch));
      dash=false;
    }
 else {
      dash=ch == '-';
      if (!dash)       m.add(ch);
    }
  }
  final String mth=m.toString();
  String path=string(nm.uri());
  final String p=ModuleLoader.uri2path(path);
  if (p != null)   path=p;
  path=path.replace("/",".").substring(1);
  final Object jm=ctx.modules.findImport(path);
  if (jm != null) {
    for (    final Method meth : jm.getClass().getMethods()) {
      if (meth.getName().equals(mth))       return new JavaModuleFunc(ii,jm,meth,args);
    }
    throw WHICHJAVA.thrw(ii,path + ':' + mth);
  }
  try {
    return new JavaFunc(ii,ctx.modules.findClass(path),mth,args);
  }
 catch (  final ClassNotFoundException ex) {
    if (java)     throw WHICHJAVA.thrw(ii,uri);
  }
catch (  final Throwable th) {
    Util.debug(th);
    throw INITJAVA.thrw(ii,th);
  }
  return null;
}
