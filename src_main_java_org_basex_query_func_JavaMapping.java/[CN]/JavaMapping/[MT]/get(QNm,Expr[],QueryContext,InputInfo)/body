{
  final byte[] uri=qname.uri();
  final byte[] ln=qname.local();
  final boolean java=startsWith(uri,JAVAPREF);
  final QNm nm=new QNm(ln,java ? substring(uri,JAVAPREF.length) : uri);
  final TokenBuilder tb=new TokenBuilder();
  boolean dash=false;
  for (int p=0; p < ln.length; p+=cl(ln,p)) {
    final int ch=cp(ln,p);
    if (dash) {
      tb.add(Character.toUpperCase(ch));
      dash=false;
    }
 else {
      dash=ch == '-';
      if (!dash)       tb.add(ch);
    }
  }
  final String name=tb.toString();
  String path=string(nm.uri());
  final String p=ModuleLoader.uri2path(path);
  if (p != null)   path=p;
  path=ModuleLoader.capitalize(path).replace("/",".").substring(1);
  final Object jm=ctx.modules.findImport(path);
  if (jm != null) {
    Method meth=null;
    for (    final Method m : jm.getClass().getMethods()) {
      if (m.getName().equals(name) && m.getParameterTypes().length == args.length) {
        if (meth != null)         JAVAAMB.thrw(ii,path + ':' + name);
        meth=m;
      }
    }
    if (meth != null) {
      Perm perm=Perm.ADMIN;
      final QueryModule.Requires req=meth.getAnnotation(QueryModule.Requires.class);
      if (req != null)       perm=Perm.get(req.value().name());
      if (!ctx.context.user.has(perm))       return null;
      return new JavaModuleFunc(ii,jm,meth,args);
    }
    WHICHJAVA.thrw(ii,path + ':' + name);
  }
  if (!ctx.context.user.has(Perm.ADMIN))   return null;
  try {
    return new JavaFunc(ii,ctx.modules.findClass(path),name,args);
  }
 catch (  final ClassNotFoundException ex) {
    if (java)     throw WHICHJAVA.thrw(ii,uri);
  }
catch (  final Throwable th) {
    Util.debug(th);
    throw INITJAVA.thrw(ii,th);
  }
  return null;
}
