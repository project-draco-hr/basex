{
  final String f=text ? DATATXT : DATAATV;
  final Values[] v=new Values[cf];
  final DataOutput outl=new DataOutput(data.meta.file(f + 'l'));
  int size=0;
  final DataOutput outr=new DataOutput(data.meta.file(f + 'r'));
  final byte[][] t=new byte[cf][];
  final byte[][] pres=new byte[cf][];
  for (int i=0; i < cf; i++) {
    v[i]=new Values(data,text,f + i);
    pres[i]=v[i].nextPres();
    t[i]=pres[i].length > 0 ? data.text(Num.read(pres[i],4),text) : Token.EMPTY;
  }
  outl.writeInt(size);
  int min;
  IntList merge;
  while (check(pres)) {
    size++;
    outr.write5(outl.size());
    min=0;
    merge=new IntList();
    for (int i=0; i < cf; i++) {
      if (min == i || t[i].length == 0)       continue;
      final int d=Token.diff(t[min],t[i]);
      if (d > 0 || t[min].length == 0) {
        min=i;
        merge=new IntList();
      }
 else       if (d == 0 && t[i].length > 0) {
        if (merge.size() == 0)         merge.add(min);
        merge.add(i);
      }
    }
    if (merge.size() == 0) {
      writeWithNum(outl,pres[min]);
      pres[min]=v[min].nextPres();
      t[min]=pres[min].length > 0 ? data.text(Num.read(pres[min],4),text) : Token.EMPTY;
    }
 else {
      final TokenBuilder p=new TokenBuilder();
      p.add(new byte[4]);
      int npre=0;
      int opre=0;
      for (int j=0; j < merge.size(); j++) {
        final int m=merge.get(j);
        if (j == 0) {
          int l=4;
          while (l < pres[m].length) {
            final int diff=Num.read(pres[m],l);
            opre+=diff;
            l+=Num.len(diff);
          }
          p.add(Token.substring(pres[m],4));
        }
 else {
          npre=Num.read(pres[m],4);
          p.add(Num.num(npre - opre));
          int l=4 + Num.len(npre);
          p.add(Token.substring(pres[m],l));
          opre=npre;
          while (l < pres[m].length) {
            final int diff=Num.read(pres[m],l);
            opre+=diff;
            l+=Num.len(diff);
          }
        }
        pres[m]=v[m].nextPres();
        t[m]=pres[m].length > 0 ? data.text(Num.read(pres[m],4),text) : Token.EMPTY;
      }
      final byte[] tmp=p.finish();
      Num.size(tmp,tmp.length);
      writeWithNum(outl,tmp);
    }
  }
  outr.close();
  outl.close();
  for (  final Values vv : v)   vv.close();
  return size;
}
