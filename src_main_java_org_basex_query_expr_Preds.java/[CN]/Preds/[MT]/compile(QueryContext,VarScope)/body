{
  for (int p=0; p < preds.length; ++p) {
    Expr pr=preds[p].compile(ctx,scp).compEbv(ctx);
    pr=Pos.get(OpV.EQ,pr,pr,info);
    if (pr instanceof CmpG || pr instanceof CmpV) {
      final Cmp cmp=(Cmp)pr;
      if (cmp.expr[0].isFunction(Function.POSITION) && cmp.expr[1].isFunction(Function.LAST)) {
        if (cmp instanceof CmpG && ((CmpG)cmp).op == OpG.EQ || cmp instanceof CmpV && ((CmpV)cmp).op == OpV.EQ) {
          ctx.compInfo(OPTWRITE,pr);
          pr=cmp.expr[1];
        }
      }
    }
    if (pr.isValue()) {
      if (!pr.ebv(ctx,info).bool(info)) {
        ctx.compInfo(OPTREMOVE,this,pr);
        return Empty.SEQ;
      }
      ctx.compInfo(OPTREMOVE,this,pr);
      preds=Array.delete(preds,p--);
    }
 else     if (pr instanceof And && !pr.uses(Use.POS)) {
      ctx.compInfo(OPTPRED,pr);
      final Expr[] and=((And)pr).expr;
      final int m=and.length - 1;
      final ExprList tmp=new ExprList(preds.length + m);
      for (      final Expr e : Arrays.asList(preds).subList(0,p))       tmp.add(e);
      for (      final Expr a : and) {
        tmp.add(Function.BOOLEAN.get(info,a).compEbv(ctx));
      }
      for (      final Expr e : Arrays.asList(preds).subList(p + 1,preds.length))       tmp.add(e);
      preds=tmp.finish();
    }
 else {
      preds[p]=pr;
    }
  }
  return this;
}
