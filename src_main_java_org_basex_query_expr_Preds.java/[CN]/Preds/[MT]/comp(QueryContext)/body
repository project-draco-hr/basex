{
  for (  final Expr p : preds)   checkUp(p,ctx);
  for (int p=0; p < preds.length; ++p) {
    Expr pr=preds[p].comp(ctx).compEbv(ctx);
    pr=Pos.get(CmpV.Op.EQ,pr,pr,input);
    if (pr instanceof CmpG || pr instanceof CmpV) {
      final Cmp cmp=(Cmp)pr;
      if (cmp.expr[0].isFunction(Function.POSITION) && cmp.expr[1].isFunction(Function.LAST)) {
        if (cmp instanceof CmpG && ((CmpG)cmp).op == CmpG.Op.EQ || cmp instanceof CmpV && ((CmpV)cmp).op == CmpV.Op.EQ) {
          ctx.compInfo(OPTWRITE,pr);
          pr=cmp.expr[1];
        }
      }
    }
    if (pr.isValue()) {
      if (!pr.ebv(ctx,input).bool(input)) {
        ctx.compInfo(OPTREMOVE,description(),pr);
        return Empty.SEQ;
      }
      ctx.compInfo(OPTREMOVE,description(),pr);
      preds=Array.delete(preds,p--);
    }
 else     if (pr instanceof And && !pr.uses(Use.POS)) {
      ctx.compInfo(OPTPRED,pr.description());
      final Expr[] and=((And)pr).expr;
      final int m=and.length - 1;
      final ObjList<Expr> tmp=new ObjList<Expr>(preds.length + m);
      for (int i=0; i < p; i++)       tmp.add(preds[i]);
      for (      final Expr a : and) {
        tmp.add(Function.BOOLEAN.get(input,a).compEbv(ctx));
      }
      for (int i=p + 1; i < preds.length; i++)       tmp.add(preds[i]);
      preds=tmp.toArray(new Expr[tmp.size()]);
    }
 else {
      preds[p]=pr;
    }
  }
  return this;
}
