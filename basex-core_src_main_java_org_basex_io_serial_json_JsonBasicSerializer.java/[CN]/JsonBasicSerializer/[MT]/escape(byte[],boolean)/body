{
  if (escape) {
    if (contains(value,'\\')) {
      final TokenParser tp=new TokenParser(value);
      while (tp.more()) {
        int c=tp.next();
        if (c == '\\') {
          if (!tp.more())           throw JSON_ESCAPE_X.getIO(value);
          c=tp.next();
          if (indexOf(ESCAPES,c) == -1)           throw JSON_ESCAPE_X.getIO(value);
          if (c == 'u') {
            for (int i=0; i < 4; i++) {
              if (!tp.more())               throw JSON_ESCAPE_X.getIO(value);
              c=tp.next();
              if (c < '0' || c > '9' && c < 'A' || c > 'F' && c < 'a' || c > 'f')               throw JSON_ESCAPE_X.getIO(value);
            }
          }
        }
      }
    }
  }
  final TokenBuilder tb=new TokenBuilder();
  boolean bs=false;
  final int vl=value.length;
  for (int v=0; v < vl; v+=cl(value,v)) {
    final int cp=cp(value,v);
    if (cp >= 0 && cp < 32 || cp >= 127 && cp < 160) {
      tb.add('\\');
      if (cp == '\b')       tb.add('b');
 else       if (cp == '\f')       tb.add('f');
 else       if (cp == '\n')       tb.add('n');
 else       if (cp == '\r')       tb.add('r');
 else       if (cp == '\t')       tb.add('t');
 else       tb.add('u').add('0').add('0').add(HEX[cp >> 4]).add(HEX[cp & 0xF]);
    }
 else {
      if (cp == '"' && !bs || !escape && cp == '\\') {
        bs=true;
        tb.add('\\');
      }
      tb.add(cp);
    }
    bs=!bs && cp == '\\';
  }
  return tb.finish();
}
