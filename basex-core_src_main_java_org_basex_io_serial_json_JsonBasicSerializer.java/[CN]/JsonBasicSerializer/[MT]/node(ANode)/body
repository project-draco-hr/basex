{
  if (level > 0)   indent();
  final BasicNodeIter iter=node.children();
  if (node.type == NodeType.DOC || node.type == NodeType.DEL) {
    final ANode child=iter.next();
    if (child == null)     throw error("Document has no child.");
    if (iter.next() != null)     throw error("Document has more than one child.");
    node(child);
  }
 else   if (node.type == NodeType.ELM) {
    final QNm name=node.qname();
    final byte[] type=name.local();
    if (!eq(name.uri(),QueryText.FN_URI))     throw error("Element '%' has invalid namespace: '%'.",type,name.uri());
    final byte[] key=node.attribute(KEY);
    if (printKey) {
      if (key == null)       throw error("Element '%' has no key.",type);
      out.print('"');
      out.print(escape(key,node.attribute(ESCAPED_KEY)));
      out.print("\":");
    }
 else {
      if (key != null)       throw error("Element '%' must have no key.",type);
    }
    if (eq(type,NULL)) {
      out.print(NULL);
      if (iter.next() != null)       throw error("Element '%' must have no children.",type);
    }
 else     if (eq(type,BOOLEAN)) {
      final byte[] value=value(iter,type);
      if (value == null)       throw error("Element '%' has no value.",type);
      if (!eq(value,TRUE,FALSE))       throw error("Element '%' has invalid value: '%'.",type,value);
      out.print(value);
    }
 else     if (eq(type,STRING)) {
      final byte[] value=value(iter,type);
      out.print('"');
      if (value != null)       out.print(escape(value,node.attribute(ESCAPED)));
      out.print('"');
    }
 else     if (eq(type,NUMBER)) {
      final byte[] value=value(iter,type);
      if (value == null)       throw error("Element '%' has no value.",type);
      final Double d=toDouble(value);
      if (d.isNaN() || d.isInfinite())       throw error("Element '%' has invalid value: '%'.",type,value);
      out.print(value);
    }
 else     if (eq(type,ARRAY)) {
      out.print('[');
      children(iter,false);
      out.print(']');
    }
 else     if (eq(type,MAP)) {
      out.print('{');
      children(iter,true);
      out.print('}');
    }
 else {
      throw error("Invalid element: '%'",name);
    }
  }
 else {
    throw error("Node must be an element.");
  }
}
