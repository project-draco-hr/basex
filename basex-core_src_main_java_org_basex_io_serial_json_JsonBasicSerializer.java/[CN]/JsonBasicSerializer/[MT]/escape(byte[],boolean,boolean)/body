{
  final TokenBuilder raw=new TokenBuilder();
  if (escape && contains(value,'\\')) {
    final TokenParser tp=new TokenParser(value);
    while (tp.more()) {
      int cp=tp.next();
      if (cp == '\\') {
        if (!tp.more())         throw JSON_ESCAPE_X.getIO(value);
switch (tp.next()) {
case 'u':
          cp=0;
        for (int i=0; i < 4; i++) {
          if (!tp.more())           throw JSON_ESCAPE_X.getIO(value);
          final int c=tp.next();
          if (c < 0x30 || c > 0x39 && c < 0x41 || c > 0x46 && c < 0x61 || c > 0x66)           throw JSON_ESCAPE_X.getIO(value);
          cp=(cp << 4) + c - (c >= 0x61 ? 0x57 : c >= 0x41 ? 0x37 : 0x30);
        }
      raw.add(cp);
    break;
case '"':
case '\\':
case '/':
  raw.add(cp);
break;
case 'b':
raw.add('\b');
break;
case 'f':
raw.add('\f');
break;
case 'n':
raw.add('\n');
break;
case 'r':
raw.add('\r');
break;
case 't':
raw.add('\t');
break;
default :
throw JSON_ESCAPE_X.getIO(value);
}
}
 else {
raw.add(cp);
}
}
}
 else {
raw.add(value);
}
if (key && !printedKeys.add(raw.finish())) throw error("Duplicate key: %.",value);
final TokenBuilder tb=new TokenBuilder();
boolean bs=false;
final int vl=value.length;
for (int v=0; v < vl; v+=cl(value,v)) {
final int cp=cp(value,v);
if (cp >= 0 && cp < 32 || cp >= 127 && cp < 160) {
tb.add('\\');
if (cp == '\b') tb.add('b');
 else if (cp == '\f') tb.add('f');
 else if (cp == '\n') tb.add('n');
 else if (cp == '\r') tb.add('r');
 else if (cp == '\t') tb.add('t');
 else tb.add('u').add('0').add('0').add(HEX[cp >> 4]).add(HEX[cp & 0xF]);
}
 else {
if (cp == '"' && !bs || !escape && cp == '\\') {
bs=true;
tb.add('\\');
}
tb.add(cp);
}
bs=!bs && cp == '\\';
}
return tb.finish();
}
