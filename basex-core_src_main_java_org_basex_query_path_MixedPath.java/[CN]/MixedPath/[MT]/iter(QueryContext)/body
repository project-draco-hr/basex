{
  final Value v=root != null ? qc.value(root) : checkCtx(qc);
  Iter res=v.iter();
  final Value cv=qc.value;
  final long cs=qc.size;
  final long cp=qc.pos;
  try {
    final int sl=steps.length;
    for (int s=0; s < sl; s++) {
      final Expr step=steps[s];
      final ValueBuilder vb=new ValueBuilder();
      final boolean path=!(step instanceof Bang);
      qc.size=res.size();
      qc.pos=1;
      int nodes=0;
      for (Item it; (it=res.next()) != null; ) {
        if (path && !it.type.isNode())         throw PATHNODE.get(info,it.type);
        qc.value=it;
        final Iter ir=qc.iter(step);
        for (Item i; (i=ir.next()) != null; ) {
          if (i.type.isNode())           nodes++;
          vb.add(i);
        }
        qc.pos++;
      }
      final long vs=vb.size();
      if (nodes < vs) {
        if (path && nodes > 0)         throw EVALNODESVALS.get(info);
        if (s + 1 < sl && !(steps[s + 1] instanceof Bang))         throw PATHNODE.get(info,vb.get(0).type);
      }
      if (path && nodes == vs) {
        final NodeSeqBuilder nc=new NodeSeqBuilder().check();
        for (Item it; (it=vb.next()) != null; )         nc.add((ANode)it);
        res=nc.value().cache();
      }
 else {
        res=vb;
      }
    }
    return res;
  }
  finally {
    qc.value=cv;
    qc.size=cs;
    qc.pos=cp;
  }
}
