{
  XQPreparedExpression xqpe;
  xqpe=xqc.prepareExpression("declare variable $v external; $v");
  xqpe.close();
  try {
    xqpe.bindFloat(new QName("v"),1f,null);
    fail("A-XQDC-1.1: bindFloat() throws an XQException when the dynamic context is in closed state.");
  }
 catch (  XQException e) {
  }
  xqpe=xqc.prepareExpression("declare variable $v external; $v");
  try {
    xqpe.bindFloat(null,1f,null);
    fail("A-XQDC-1.2: null argument is invalid and throws an XQException.");
  }
 catch (  XQException e) {
  }
  xqpe.close();
  boolean bindFailed=false;
  xqpe=xqc.prepareExpression("declare variable $v external; $v");
  try {
    xqpe.bindFloat(new QName("v"),1f,xqc.createCommentType());
  }
 catch (  XQException e) {
    bindFailed=true;
  }
  if (!bindFailed) {
    XQSequence xqs=xqpe.executeQuery();
    xqs.next();
    if (xqs.getItemType().getItemKind() != XQItemType.XQITEMKIND_COMMENT)     fail("A-XQDC-1.3: The conversion is subject to the following constraints. Either it fails with an XQException, either it is successful in which case it must result in an instance of XDT.");
  }
  xqpe.close();
  xqpe=xqc.prepareExpression("declare variable $v external; $v");
  try {
    xqpe.bindFloat(new QName("foo"),1f,null);
    fail("A-XQDC-1.5: The bound variable must be declared external in the prepared expression.");
  }
 catch (  XQException e) {
  }
  xqpe.close();
  xqpe=xqc.prepareExpression("declare variable $v as xs:string external; $v");
  try {
    xqpe.bindFloat(new QName("v"),1f,null);
    xqpe.executeQuery().getSequenceAsString(null);
    fail("A-XQDC-1.6: The dynamic type of the bound value is not compatible with the static type of the variable and must fail.");
  }
 catch (  XQException e) {
  }
  xqpe.close();
  xqpe=xqc.prepareExpression("declare variable $v external; $v");
  try {
    xqpe.bindFloat(new QName("v"),1f,xqc.createAtomicType(XQItemType.XQBASETYPE_FLOAT));
  }
 catch (  XQException e) {
    fail("A-XQDC-1.7: bindFloat() failed with message: " + e.getMessage());
  }
  XQSequence xqs=xqpe.executeQuery();
  xqs.next();
  assertEquals("A-XQDC-1.7: Successful bindXXX.",XQItemType.XQITEMKIND_ATOMIC,xqs.getItemType().getItemKind());
  assertEquals("A-XQDC-1.7: Successful bindXXX.",XQItemType.XQBASETYPE_FLOAT,xqs.getItemType().getBaseType());
  assertTrue("A-XQDC-1.7: Successful bindXXX.",1f == xqs.getFloat());
  xqpe.close();
}
