{
  final int p=(int)pos, n=values.length;
  final Value[] vals=new Value[n + 1];
  System.arraycopy(values,0,vals,0,p);
  vals[p]=val;
  System.arraycopy(values,p,vals,p + 1,n - p);
  if (n < Array.MAX_LEAF) {
    siblings[1]=new LeafNode(vals);
    return false;
  }
  final LeafNode left=(LeafNode)siblings[0];
  if (left != null && left.values.length < Array.MAX_LEAF) {
    final Value[] lvals=left.values;
    final int l=lvals.length, diff=Array.MAX_LEAF - l, move=(diff + 1) / 2;
    final Value[] newLeft=new Value[l + move], newRight=new Value[n + 1 - move];
    System.arraycopy(lvals,0,newLeft,0,l);
    System.arraycopy(vals,0,newLeft,l,move);
    System.arraycopy(vals,move,newRight,0,newRight.length);
    siblings[0]=new LeafNode(newLeft);
    siblings[1]=new LeafNode(newRight);
    return false;
  }
  final LeafNode right=(LeafNode)siblings[2];
  if (right != null && right.values.length < Array.MAX_LEAF) {
    final Value[] rvals=right.values;
    final int r=rvals.length, diff=Array.MAX_LEAF - r, move=(diff + 1) / 2, l=n + 1 - move;
    final Value[] newLeft=new Value[l], newRight=new Value[r + move];
    System.arraycopy(vals,0,newLeft,0,l);
    System.arraycopy(vals,l,newRight,0,move);
    System.arraycopy(rvals,0,newRight,move,r);
    siblings[1]=new LeafNode(newLeft);
    siblings[2]=new LeafNode(newRight);
    return false;
  }
  final int l=vals.length / 2, r=vals.length - l;
  final Value[] newLeft=new Value[l], newRight=new Value[r];
  System.arraycopy(vals,0,newLeft,0,l);
  System.arraycopy(vals,l,newRight,0,r);
  siblings[3]=siblings[2];
  siblings[1]=new LeafNode(newLeft);
  siblings[2]=new LeafNode(newRight);
  return true;
}
