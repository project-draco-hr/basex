{
  this.expected=expected;
  final int hl=hay.length;
  final byte[][] hs=new byte[hl][];
  for (int h=0; h < hay.length; h++)   hs[h]=token(hay[h]);
  haystack=new FTIterator(){
    /** 
 * Index of current element. 
 */
    private int cnt;
    @Override public boolean hasNext(){
      return cnt < hl;
    }
    @Override public byte[] nextToken(){
      if (hasNext())       return hs[cnt++];
      throw new NoSuchElementException();
    }
    @Override public FTSpan next(){
      return null;
    }
    @Override public FTIterator init(    final byte[] text){
      return this;
    }
  }
;
  needles=new FTTokens();
  for (  final String[] s : needle) {
    final TokenList tl=new TokenList(s.length);
    for (    final String t : s)     tl.add(t);
    needles.add(tl);
  }
}
