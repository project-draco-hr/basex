{
  final TokenList newKeys=new TokenList();
  int index=0;
  final int sz=size();
  for (  final byte[] key : values) {
    index=get(key,index,sz);
    if (index >= 0) {
      final IntList ids=values.ids(key), pos=values.pos(key);
      final long off=idxr.read5(index * 5L);
      final int oldSize=idxl.readNum(off), newSize=oldSize + ids.size();
      final IntList newIds=new IntList(newSize);
      final IntList newPos=pos != null ? new IntList(newSize) : null;
      for (int o=0, c=0; o < oldSize; ++o) {
        c+=idxl.readNum();
        newIds.add(c);
        if (newPos != null)         newPos.add(idxl.readNum());
      }
      newIds.add(ids.finish());
      if (newPos != null)       newPos.add(pos.finish());
      free.add((int)(idxl.cursor() - off),off);
      writeIds(key,newIds,newPos,index++);
    }
 else {
      index=-(index + 1);
      newKeys.add(key);
    }
  }
  final int ns=newKeys.size();
  for (int j=ns - 1, oldIndex=sz - 1, newIndex=sz + j; j >= 0; --j) {
    final byte[] key=newKeys.get(j);
    final int idx=-(1 + get(key,0,oldIndex + 1));
    if (idx < 0)     throw Util.notExpected("Key should not exist: '%'",key);
    while (oldIndex >= idx) {
      final long off=idxr.read5(oldIndex * 5L);
      writeIndex(newIndex--,off,ctext.put(oldIndex--,null));
    }
    writeIds(key,values.ids(key),values.pos(key),newIndex--);
  }
  size(sz + ns);
}
