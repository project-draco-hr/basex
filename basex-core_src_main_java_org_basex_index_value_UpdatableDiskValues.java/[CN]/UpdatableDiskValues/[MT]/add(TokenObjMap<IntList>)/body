{
  final TokenList newKeys=new TokenList();
  int index=0;
  final int sz=size();
  for (  final byte[] key : new TokenList(map).sort(true)) {
    index=get(key,index,sz);
    if (index >= 0) {
      final int[] ids=map.get(key).finish();
      final long off=idxr.read5(index * 5L);
      final int oldSize=idxl.readNum(off);
      final IntList il=new IntList(oldSize + ids.length);
      for (int o=0, c=0; o < oldSize; ++o) {
        c+=idxl.readNum();
        il.add(c);
      }
      free.add((int)(idxl.cursor() - off),off);
      writeIds(key,il.add(ids),index++);
    }
 else {
      index=-(index + 1);
      newKeys.add(key);
    }
  }
  final int ns=newKeys.size();
  for (int j=ns - 1, oldIndex=sz - 1, newIndex=sz + j; j >= 0; --j) {
    final byte[] key=newKeys.get(j);
    final int idx=-(1 + get(key,0,oldIndex + 1));
    if (idx < 0)     throw Util.notExpected("Key should not exist: '%'",key);
    while (oldIndex >= idx) {
      final long off=idxr.read5(oldIndex * 5L);
      writeIdOffset(newIndex--,off,ctext.put(oldIndex--,null));
    }
    writeIds(key,map.get(key),newIndex--);
  }
  size(sz + ns);
}
