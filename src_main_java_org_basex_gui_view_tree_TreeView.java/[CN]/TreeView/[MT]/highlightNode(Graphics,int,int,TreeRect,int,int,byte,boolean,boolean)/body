{
  if (l == -1)   return;
  final int y=getYperLevel(l);
  final int h=nodeHeight;
  final boolean br=cache.isBigRectangle(rn,l);
  final boolean root=gui.context.current.nodes[rn] == pre;
  final int height=cache.getHeight(rn);
  final Data d=gui.context.data;
  final int k=d.kind(pre);
  final int size=d.size(pre,k);
  int brx=-1;
  drawRectangle(g,rn,l,r,pre,t);
  if (br) {
    final int index=cache.getPreIndex(rn,l,pre);
    if (t == DRAW_HIGHLIGHT)     fix=index;
    final double ratio=index / (double)(cache.getLevelSize(rn,l) - 1);
    brx=(int)(r.w * ratio);
    g.setColor(Color.BLACK);
    g.drawLine(brx,y,brx,y + nodeHeight);
  }
  if (cx > -1 && MIN_NODE_DIST_CONN <= levelDistance) {
    g.setColor(COLORS[7]);
    g.drawLine(cx,getYperLevel(l + 1) - 1,brx == -1 ? (2 * r.x + r.w) / 2 : brx,y + nodeHeight + 1);
  }
  if (showPar && !root) {
    final int par=d.parent(pre,k);
    final int lv=l - 1;
    final TreeRect parRect=cache.searchRect(rn,lv,par);
    highlightNode(g,rn,par,parRect,lv,brx == -1 ? (2 * r.x + r.w) / 2 : brx,DRAW_PARENT,true,false);
  }
  if (showDesc && size > 1 && l + 1 < height) {
    final int lv=l + 1;
    final TreeBorder[] sbo=cache.generateSubtreeBorders(d,pre);
    if (sbo.length < 2)     return;
    final int parc=brx == -1 ? (2 * r.x + r.w) / 2 : brx;
    if (cache.isBigRectangle(rn,lv)) {
      drawBigRectDescendants(g,rn,lv,sbo,parc);
    }
 else {
      final TreeBorder bo=sbo[1];
      final TreeBorder bos=cache.getTreeBorder(rn,lv);
      for (int j=0; j < bo.size; j++) {
        int pi=cache.getPrePerIndex(bo,j);
        final TreeRect sr=cache.getTreeRectPerIndex(rn,lv,j + bo.start - bos.start);
        if (SHOW_DESCENDANTS_CONN && levelDistance >= MIN_NODE_DIST_CONN) {
          drawDescConn(g,lv,sr,parc);
        }
        highlightNode(g,rn,pi,sr,lv,-1,DRAW_DESCENDANT,false,true);
      }
    }
  }
  if (!(showPar && showDesc) || root)   return;
  final String s=Token.string(cache.getText(gui.context,rn,pre));
  final int w=BaseXLayout.width(g,s);
  g.setColor(COLORS[l + 5]);
  g.fillRect(r.x,y - fontHeight,w + 2,fontHeight);
  g.setColor(Color.WHITE);
  g.drawString(s,r.x + 1,(int)(y - h / (float)fontHeight) - 2);
}
