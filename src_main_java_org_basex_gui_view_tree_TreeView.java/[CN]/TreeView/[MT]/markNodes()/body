{
  markedImage=createImage();
  final Graphics mg=markedImage.getGraphics();
  smooth(mg);
  mg.setFont(font);
  final int[] mark=gui.context.marked.list;
  if (mark.length == 0)   return;
  int rn=0;
  while (rn < roots.length) {
    final LinkedList<Integer> marklink=new LinkedList<Integer>();
    for (int i=0; i < mark.length; ++i)     marklink.add(i,mark[i]);
    for (int lv=0; lv < sub.getSubtreeHeight(rn); ++lv) {
      final int y=getYperLevel(lv);
      final ListIterator<Integer> li=marklink.listIterator();
      if (tr.isBigRectangle(sub,rn,lv)) {
        while (li.hasNext()) {
          final int pre=li.next();
          final TreeRect rect=tr.searchRect(sub,rn,lv,pre);
          final int ix=sub.getPreIndex(rn,lv,pre);
          if (ix > -1) {
            li.remove();
            final int x=(int)(rect.w * ix / (double)sub.getLevelSize(rn,lv));
            mg.setColor(colormark1);
            mg.fillRect(rect.x + x,y,2,nodeHeight + 1);
          }
        }
      }
 else {
        while (li.hasNext()) {
          final int pre=li.next();
          final TreeRect rect=tr.searchRect(sub,rn,lv,pre);
          if (rect != null) {
            li.remove();
            drawRectangle(mg,rn,lv,rect,pre,DRAW_MARK);
          }
        }
      }
    }
    ++rn;
  }
}
