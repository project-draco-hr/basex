{
  markedImage=createImage();
  final Graphics mg=markedImage.getGraphics();
  smooth(mg);
  final int size=gui.context.marked.size();
  if (size == 0)   return;
  final int[] marked=Arrays.copyOf(gui.context.marked.nodes,size);
  int rn=0;
  while (rn < numRoots) {
    for (int i=0; i < cache.getHeight(rn); i++) {
      final int y=getYperLevel(i);
      if (cache.isBigRectangle(rn,i)) {
        for (int j=0; j < size; j++) {
          final int pre=marked[j];
          final int ix=cache.getPreIndex(rn,i,pre);
          if (ix > -1) {
            final int x=(int)(getWidth() * ix / (double)cache.getLevelSize(rn,i));
            mg.setColor(Color.RED);
            mg.drawRect(x,y,2,nodeHeight);
          }
        }
      }
 else {
        for (int j=0; j < size; j++) {
          final int pre=marked[j];
          final TreeRect rect=cache.searchRect(rn,i,pre);
          if (rect != null) {
            drawRectangle(mg,rn,i,rect,pre,DRAW_MARK);
          }
        }
      }
    }
    rn++;
  }
}
