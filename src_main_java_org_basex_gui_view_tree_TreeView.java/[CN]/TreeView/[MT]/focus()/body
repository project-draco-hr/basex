{
  if (refreshedFocus) {
    final int pre=gui.context.focused;
    for (int i=0; i < cache.getHeight(frn); i++) {
      if (cache.isBigRectangle(frn,i)) {
        final int index=cache.getPreIndex(frn,i,pre);
        if (index > -1) {
          focusedRect=cache.getTreeRectsPerLevel(frn,i)[0];
          focusedRectLevel=i;
          refreshedFocus=false;
          return true;
        }
      }
 else {
        final TreeRect rect=cache.searchRect(0,i,pre);
        if (rect != null) {
          focusedRect=rect;
          focusedRectLevel=i;
          refreshedFocus=false;
          return true;
        }
      }
    }
  }
 else {
    final int rn=frn=getTreePerX(mousePosX);
    final int lv=getLevelPerY(mousePosY);
    if (lv < 0 || cache.getHeight(rn) == -1 || lv >= cache.getHeight(rn))     return false;
    final TreeRect[] rL=cache.getTreeRectsPerLevel(rn,lv);
    for (int i=0; i < rL.length; i++) {
      final TreeRect r=rL[i];
      if (r.contains(mousePosX)) {
        focusedRect=r;
        focusedRectLevel=lv;
        int pre=cache.getPrePerIndex(rn,lv,i);
        if (cache.isBigRectangle(rn,lv)) {
          final double ratio=mousePosX / (double)r.w;
          final int index=(int)(cache.getLevelSize(0,lv) * ratio);
          pre=cache.getPrePerIndex(0,lv,index);
        }
        gui.notify.focus(pre,this);
        refreshedFocus=false;
        return true;
      }
    }
  }
  refreshedFocus=false;
  return false;
}
