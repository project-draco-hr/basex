{
  if (refreshedFocus) {
    final int pre=gui.context.focused;
    for (int i=0; i < sub.getSubtreeHeight(frn); i++) {
      if (tr.isBigRectangle(sub,frn,i)) {
        final int index=sub.getPreIndex(frn,i,pre);
        if (index > -1) {
          frect=tr.getTreeRectsPerLevel(frn,i)[0];
          flv=i;
          refreshedFocus=false;
          return true;
        }
      }
 else {
        final TreeRect rect=tr.searchRect(sub,frn,i,pre);
        if (rect != null) {
          frect=rect;
          flv=i;
          refreshedFocus=false;
          return true;
        }
      }
    }
  }
 else {
    final int rn=frn=getTreePerX(mousePosX);
    final int lv=getLevelPerY(mousePosY);
    final int h=sub.getSubtreeHeight(rn);
    if (lv < 0 || h < 0 || lv >= h)     return false;
    final TreeRect[] rL=tr.getTreeRectsPerLevel(rn,lv);
    for (int i=0; i < rL.length; i++) {
      final TreeRect r=rL[i];
      if (r.contains(mousePosX)) {
        frect=r;
        flv=lv;
        int pre=-1;
        if (tr.isBigRectangle(sub,rn,lv)) {
          pre=tr.getPrePerXPos(sub,rn,lv,mousePosX);
        }
 else {
          pre=sub.getPrePerIndex(rn,lv,i);
        }
        fpre=pre;
        gui.notify.focus(pre,this);
        refreshedFocus=false;
        return true;
      }
    }
  }
  refreshedFocus=false;
  return false;
}
