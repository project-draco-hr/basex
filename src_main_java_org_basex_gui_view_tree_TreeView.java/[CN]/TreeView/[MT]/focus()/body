{
  if (refreshedFocus) {
    if (rbr)     return false;
    final int pre=gui.context.focused;
    for (int r=0; r < roots.length; ++r) {
      for (int i=0; i < sub.getSubtreeHeight(r); ++i) {
        if (tr.isBigRectangle(sub,r,i)) {
          final int index=sub.getPreIndex(r,i,pre);
          if (index > -1) {
            frn=r;
            frect=tr.getTreeRectsPerLevel(r,i)[0];
            flv=i;
            refreshedFocus=false;
            return true;
          }
        }
 else {
          final TreeRect rect=tr.searchRect(sub,r,i,pre);
          if (rect != null) {
            frn=r;
            frect=rect;
            flv=i;
            refreshedFocus=false;
            return true;
          }
        }
      }
    }
  }
 else {
    final int lv=getLevelPerY(mousePosY);
    if (rbr) {
    }
 else {
      final int rn=frn=getTreePerX(mousePosX);
      final int h=sub.getSubtreeHeight(rn);
      if (lv < 0 || h < 0 || lv >= h)       return false;
      final TreeRect[] rL=tr.getTreeRectsPerLevel(rn,lv);
      for (int i=0; i < rL.length; ++i) {
        final TreeRect r=rL[i];
        if (r.contains(mousePosX)) {
          frect=r;
          flv=lv;
          int pre=-1;
          if (tr.isBigRectangle(sub,rn,lv)) {
            pre=tr.getPrePerXPos(sub,rn,lv,mousePosX);
          }
 else {
            pre=sub.getPrePerIndex(rn,lv,i);
          }
          fpre=pre;
          gui.notify.focus(pre,this);
          refreshedFocus=false;
          return true;
        }
      }
    }
  }
  refreshedFocus=false;
  return false;
}
