{
  final Data d=gui.context.current.data;
  if (!cache.isBigRectangle(rn,l) && t != DRAW_CONN)   drawRectangle(g,rn,l,r,pre,t);
  final int lv=l + 1;
  final TreeBorder[] sbo=cache.generateSubtreeBorders(d,pre);
  if (cache.getHeight(rn) <= lv || sbo.length < 2)   return;
  final int parc=px == -1 ? (2 * r.x + r.w) / 2 : px;
  if (cache.isBigRectangle(rn,lv)) {
    drawBigRectDescendants(g,rn,lv,sbo,parc,t);
  }
 else {
    final TreeBorder bo=sbo[1];
    final TreeBorder bos=cache.getTreeBorder(rn,lv);
    for (int j=0; j < bo.size; j++) {
      final int pi=cache.getPrePerIndex(bo,j);
      if (gui.context.current.nodes[0] > 0)       System.out.println("rn:" + rn + " lv:"+ lv+ " bo-size:"+ bo.size+ " bo-start:"+ (bo.start)+ " bos:"+ bos.start);
      final int start=bo.start >= bos.start ? bo.start - bos.start : bo.start;
      final TreeRect sr=cache.getTreeRectPerIndex(rn,lv,j + start);
      if (SHOW_DESCENDANTS_CONN && levelDistance >= MIN_NODE_DIST_CONN) {
        drawDescendantsConn(g,lv,sr,parc,t);
      }
      highlightDescendants(g,rn,pi,sr,lv,-1,t == DRAW_CONN ? DRAW_CONN : DRAW_DESCENDANTS);
    }
  }
}
