{
  deepFile=df;
  bfc=df.getBufferedFileChannel();
  if (!readLine())   return;
  if (df.extractMeta()) {
    mBoundary="";
    do {
      String type="";
      final Matcher m=KEYPAT.matcher(mCurrLine);
      if (m.matches()) {
        type=m.group(1).toUpperCase().replace('-','_');
        mCurrLine=m.group(2).trim();
      }
      boolean readNext=true;
      try {
        readNext=EML_Meta.valueOf(type).parse(this);
      }
 catch (      final IllegalArgumentException ex) {
        getBoundary();
        getCharset();
      }
      if (readNext && !readLine())       return;
    }
 while (!mCurrLine.isEmpty());
    if (deepFile.isMetaSet(MetaElem.SENDER_EMAIL) || deepFile.isMetaSet(MetaElem.SENDER_NAME)) {
      deepFile.setFileType(FileType.MESSAGE);
      deepFile.setFileFormat(MimeType.EML);
      deepFile.addMeta(MetaElem.ENCODING,mBodyCharset);
    }
 else     deepFile.debug("EMLParser: Invalid mail file (no sender found).");
    if (df.extractText())     parseContent();
  }
 else   if (df.extractText()) {
    do {
      String type="";
      final Matcher m=KEYPAT.matcher(mCurrLine);
      if (m.matches()) {
        type=m.group(1);
        mCurrLine=m.group(2).trim();
        if (type.equalsIgnoreCase("content-type"))         getContentType();
 else         if (type.equalsIgnoreCase("content-transfer-encoding")) {
          getEncoding();
        }
      }
 else {
        getBoundary();
        getCharset();
      }
      if (!readLine())       return;
    }
 while (!mCurrLine.isEmpty());
    parseContent();
  }
}
