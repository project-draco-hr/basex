{
  return new BXCode<List<BXResource>>(this){
    @Override public List<BXResource> get() throws IOException {
      final List<BXResource> ch=new ArrayList<BXResource>();
      final HashSet<String> paths=new HashSet<String>();
      final Query q=s.query("for $a in " + _DB_LIST_DETAILS.args("$d","$p") + "return ($a/@raw/data(),"+ "$a/@content-type/data(),"+ "$a/@modified-date/data(),"+ "$a/@size/data(),"+ SUBSTRING_AFTER.args("$a/text()","$p")+ ")");
      q.bind("d",db);
      q.bind("p",path);
      while (q.more()) {
        final boolean raw=Boolean.parseBoolean(q.next());
        final String ctype=q.next();
        final long mod=Long.parseLong(q.next());
        final Long size=raw ? Long.valueOf(q.next()) : null;
        final String p=stripLeadingSlash(q.next());
        final int ix=p.indexOf(SEP);
        if (ix < 0) {
          if (!p.equals(DUMMY))           ch.add(new BXFile(db,path + SEP + p,mod,raw,ctype,size,session));
        }
 else {
          final String dir=path + SEP + p.substring(0,ix);
          if (paths.add(dir))           ch.add(new BXFolder(db,dir,mod,session));
        }
      }
      q.close();
      return ch;
    }
  }
.evalNoEx();
}
