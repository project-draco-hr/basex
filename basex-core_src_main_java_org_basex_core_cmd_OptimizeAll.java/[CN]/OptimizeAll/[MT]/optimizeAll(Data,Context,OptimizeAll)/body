{
  if (data.inMemory())   throw new BaseXException(NO_MAINMEM);
  final DiskData old=(DiskData)data;
  final MetaData m=old.meta;
  if (cmd != null)   cmd.size=m.size;
  if (ctx.dbs.pins(m.name) > 1)   throw new BaseXException(DB_PINNED_X,m.name);
  final String tname=ctx.globalopts.random(m.name);
  ctx.options.set(MainOptions.CHOP,m.chop);
  ctx.options.set(MainOptions.UPDINDEX,m.updindex);
  ctx.options.set(MainOptions.MAXCATS,m.maxcats);
  ctx.options.set(MainOptions.MAXLEN,m.maxlen);
  ctx.options.set(MainOptions.STEMMING,m.stemming);
  ctx.options.set(MainOptions.CASESENS,m.casesens);
  ctx.options.set(MainOptions.DIACRITICS,m.diacritics);
  ctx.options.set(MainOptions.LANGUAGE,m.language.toString());
  ctx.options.set(MainOptions.STOPWORDS,m.stopwords);
  try (final DiskBuilder builder=new DiskBuilder(tname,new DBParser(old,cmd),ctx)){
    final DiskData d=builder.build();
    try {
      if (m.createtext)       create(IndexType.TEXT,d,cmd);
      if (m.createattr)       create(IndexType.ATTRIBUTE,d,cmd);
      if (m.createftxt)       create(IndexType.FULLTEXT,d,cmd);
      d.meta.createtext=m.createtext;
      d.meta.createattr=m.createattr;
      d.meta.createftxt=m.createftxt;
      d.meta.filesize=m.filesize;
      d.meta.users=m.users;
      d.meta.dirty=true;
      final IOFile bin=data.meta.binaries();
      if (bin.exists())       bin.rename(d.meta.binaries());
      final IOFile upd=old.updateFile();
      if (upd.exists())       upd.copyTo(d.updateFile());
    }
  finally {
      d.close();
    }
  }
   Close.close(data,ctx);
  if (!DropDB.drop(m.name,ctx))   throw new BaseXException(DB_NOT_DROPPED_X,m.name);
  if (!AlterDB.alter(tname,m.name,ctx))   throw new BaseXException(DB_NOT_RENAMED_X,tname);
}
