{
  if (data.inMemory())   throw new BaseXException(NO_MAINMEM);
  final DiskData odata=(DiskData)data;
  final MetaData ometa=odata.meta;
  final String name=ometa.name;
  if (ctx.dbs.pins(ometa.name) > 1)   throw new BaseXException(DB_PINNED_X,name);
  final StaticOptions sopts=ctx.soptions;
  final MainOptions options=ctx.options;
  options.set(MainOptions.CHOP,ometa.chop);
  options.set(MainOptions.UPDINDEX,ometa.updindex);
  options.set(MainOptions.MAXCATS,ometa.maxcats);
  options.set(MainOptions.MAXLEN,ometa.maxlen);
  options.set(MainOptions.STEMMING,ometa.stemming);
  options.set(MainOptions.CASESENS,ometa.casesens);
  options.set(MainOptions.DIACRITICS,ometa.diacritics);
  options.set(MainOptions.LANGUAGE,ometa.language.toString());
  options.set(MainOptions.STOPWORDS,ometa.stopwords);
  if (cmd != null)   cmd.size=ometa.size;
  final String tname=sopts.random(name);
  final DBParser parser=new DBParser(odata,options,cmd);
  try (final DiskBuilder builder=new DiskBuilder(tname,parser,ctx)){
    final DiskData dt=builder.build();
    try {
      if (ometa.createtext)       create(IndexType.TEXT,dt,options,cmd);
      if (ometa.createattr)       create(IndexType.ATTRIBUTE,dt,options,cmd);
      if (ometa.createftxt)       create(IndexType.FULLTEXT,dt,options,cmd);
      dt.meta.createtext=ometa.createtext;
      dt.meta.createattr=ometa.createattr;
      dt.meta.createftxt=ometa.createftxt;
      dt.meta.filesize=ometa.filesize;
      dt.meta.users=ometa.users;
      dt.meta.dirty=true;
      final IOFile bin=data.meta.binaries();
      if (bin.exists())       bin.rename(dt.meta.binaries());
      final IOFile upd=odata.meta.updateFile();
      if (upd.exists())       upd.copyTo(dt.meta.updateFile());
    }
  finally {
      dt.close();
    }
  }
   Close.close(data,ctx);
  if (!DropDB.drop(name,sopts))   throw new BaseXException(DB_NOT_DROPPED_X,name);
  if (!AlterDB.alter(tname,name,sopts))   throw new BaseXException(DB_NOT_RENAMED_X,tname);
}
