{
  final String type=conn.getContentType();
  final ValueBuilder payloads=new ValueBuilder();
  final boolean s=status != null && Bln.parse(status,info);
  final FElem body;
  InputStream is=conn.getErrorStream();
  final byte[] cType;
  if (is == null) {
    cType=ctype == null ? token(extractContentType(type)) : ctype;
    is=conn.getInputStream();
  }
 else {
    cType=token(MimeTypes.TEXT_PLAIN);
  }
  if (startsWith(cType,MULTIPART)) {
    final byte[] boundary=extractBoundary(type);
    body=new FElem(Q_MULTIPART).add(MEDIA_TYPE,cType).add(BOUNDARY,boundary);
    final ANodeList list=extractParts(is,s,payloads,concat(token("--"),boundary));
    for (    final ANode node : list)     body.add(node);
  }
 else {
    body=createBody(cType);
    if (!s) {
      final byte[] payload=extractPayload(is,cType,extractCharset(type));
      payloads.add(interpretPayload(payload,cType));
    }
  }
  final FElem responseEl=new FElem(Q_RESPONSE).declareNS();
  responseEl.add(STATUS,token(conn.getResponseCode()));
  responseEl.add(MESSAGE,token(conn.getResponseMessage()));
  for (  final String headerName : conn.getHeaderFields().keySet()) {
    if (headerName != null) {
      final FElem hdr=new FElem(Q_HEADER);
      hdr.add(NAME,token(headerName));
      hdr.add(VALUE,token(conn.getHeaderField(headerName)));
      responseEl.add(hdr);
    }
  }
  responseEl.add(body);
  final ValueBuilder result=new ValueBuilder();
  result.add(responseEl);
  result.add(payloads.value());
  return result;
}
