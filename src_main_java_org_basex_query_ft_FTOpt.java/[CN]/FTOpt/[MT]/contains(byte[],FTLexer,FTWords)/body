{
  final FTLexer quLexer=new FTLexer(q,prop,this);
  if (quLexer.getFTOpt().is(FZ) && ls == null)   ls=new Levenshtein();
  query.reset();
  final Iterator<Span> it=quLexer.iterator();
  final ArrayList<Span> qSpanList=new ArrayList<Span>();
  while (it.hasNext()) {
    final Span s=it.next();
    query.add(s.txt);
    qSpanList.add(s);
  }
  final Span[] qTokenSpans=qSpanList.toArray(new Span[qSpanList.size()]);
  final FTOpt to=tk.getFTOpt();
  to.set(ST,is(ST));
  to.set(DC,is(DC));
  to.set(CS,is(CS));
  to.ln=ln;
  to.th=th;
  to.sd=sd;
  final Iterator<Span> inputIter=new FTLexer(tk.getText(),prop,to).iterator();
  final Levenshtein lvs=ls;
  final int lvserr=lserr;
  final Comparator<Span> cmp=new Comparator<Span>(){
    /** 
 * Query term extension with thesaurus terms. 
 */
    private byte[][] queryExtension;
    @Override public int compare(    final Span o1,    final Span o2){
      final byte[] inputTkn=o1.txt;
      final byte[] queryTkn=o2.txt;
      if (sw != null && sw.id(queryTkn) != 0)       return 0;
      try {
        if (quLexer.getFTOpt().is(FZ) ? lvs.similar(inputTkn,queryTkn,lvserr) : quLexer.getFTOpt().is(WC) ? wc(words.input,inputTkn,queryTkn,0,0) : eq(inputTkn,queryTkn))         return 0;
 else         if (th != null) {
          if (queryExtension == null)           queryExtension=th.find(words.input,quLexer.getText());
          for (          final byte[] txt : queryExtension) {
            final FTLexer thWordLexer=new FTLexer(txt,quLexer);
            if (thWordLexer.hasNext() && eq(thWordLexer.next().txt,inputTkn))             return 0;
          }
        }
      }
 catch (      final QueryException e) {
        throw new RuntimeException(e);
      }
      return 1;
    }
  }
;
  int c=0;
  final BitapSearch<Span> search=new BitapSearch<Span>(inputIter,qTokenSpans,cmp);
  try {
    while (search.hasNext()) {
      final int pos=search.next();
      ++c;
      if (words.add(pos,pos + qTokenSpans.length - 1))       break;
    }
  }
 catch (  final RuntimeException e) {
    throw (QueryException)e.getCause();
  }
  words.all.sTokenNum++;
  words.first=false;
  return c;
}
