{
  final IntSet updatedNodes=new IntSet();
  int shifts=0;
  for (  final StructuralUpdate update : struct)   shifts+=update.accumulatedShifts;
  if (shifts == 0)   return;
  for (  final StructuralUpdate update : struct) {
    int pre=update.preOfAffectedNode + update.accumulatedShifts;
    while (pre < data.meta.size && !updatedNodes.contains(pre)) {
      final int kind=data.kind(pre);
      data.dist(pre,kind,calculateNewDistance(pre,kind));
      updatedNodes.add(pre);
      pre+=data.size(pre,kind);
    }
  }
}
