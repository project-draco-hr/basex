{
  final List<Delete> deletes=new LinkedList<>();
  int smallestVisited=Integer.MAX_VALUE;
  for (int i=struct.size() - 1; i >= 0; i--) {
    final StructuralUpdate u=struct.get(i);
    final DataClip insseq=u.getInsertionData();
    final int newLocation=u.location + u.accumulatedShifts - u.shifts;
    final int beforeNewLocation=newLocation - 1;
    if (insseq != null) {
      final int followingNode=newLocation + insseq.size();
      final int beforeFollowingNode=followingNode - 1;
      if (beforeFollowingNode < smallestVisited) {
        final Delete del=mergeTextNodes(beforeFollowingNode);
        if (del != null)         deletes.add(0,del);
        smallestVisited=beforeFollowingNode;
      }
    }
    if (beforeNewLocation < smallestVisited) {
      final Delete del=mergeTextNodes(beforeNewLocation);
      if (del != null)       deletes.add(0,del);
      smallestVisited=beforeNewLocation;
    }
  }
  final AtomicUpdateCache atomicDeletes=new AtomicUpdateCache(data);
  for (  final Delete delete : deletes)   atomicDeletes.considerAtomic(delete,true);
  deletes.clear();
  atomicDeletes.applyUpdates();
  atomicDeletes.adjustDistances();
  atomicDeletes.clear();
}
