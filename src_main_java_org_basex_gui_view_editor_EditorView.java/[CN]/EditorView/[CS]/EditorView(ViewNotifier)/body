{
  super(EDITORVIEW,man);
  border(6,6,6,6).layout(new BorderLayout(0,2)).setFocusable(false);
  header=new BaseXLabel(EDITOR,true,false);
  final BaseXButton srch=new BaseXButton(gui,"search",H_REPLACE);
  final BaseXButton openB=BaseXButton.command(GUICommands.C_EDITOPEN,gui);
  final BaseXButton saveB=new BaseXButton(gui,"save",H_SAVE);
  hist=new BaseXButton(gui,"hist",H_RECENTLY_OPEN);
  final BaseXBack buttons=new BaseXBack(Fill.NONE);
  buttons.layout(new TableLayout(1,4,1,0));
  buttons.add(srch);
  buttons.add(openB);
  buttons.add(saveB);
  buttons.add(hist);
  final BaseXBack b=new BaseXBack(Fill.NONE).layout(new BorderLayout(8,0));
  b.add(header,BorderLayout.CENTER);
  b.add(buttons,BorderLayout.EAST);
  add(b,BorderLayout.NORTH);
  final BaseXBack center=new BaseXBack(Fill.NONE).layout(new BorderLayout(0,2));
  tabs=new BaseXTabs(gui);
  tabs.setFocusable(false);
  search=new SearchPanel(gui,this,srch,true);
  addCreateTab();
  final EditorArea edit=addTab();
  center.add(tabs,BorderLayout.CENTER);
  center.add(search,BorderLayout.SOUTH);
  add(center,BorderLayout.CENTER);
  search.setVisible(false);
  info=new BaseXLabel().setText(OK,Msg.SUCCESS);
  pos=new BaseXLabel(" ");
  pos.setText(edit.pos());
  stop=new BaseXButton(gui,"stop",H_STOP_PROCESS);
  stop.addKeyListener(this);
  stop.setEnabled(false);
  go=new BaseXButton(gui,"go",H_EXECUTE_QUERY);
  go.addKeyListener(this);
  filter=BaseXButton.command(GUICommands.C_FILTER,gui);
  filter.addKeyListener(this);
  filter.setEnabled(false);
  final BaseXBack status=new BaseXBack(Fill.NONE).layout(new BorderLayout(4,0));
  status.add(info,BorderLayout.CENTER);
  status.add(pos,BorderLayout.EAST);
  final BaseXBack query=new BaseXBack(Fill.NONE).layout(new TableLayout(1,3,1,0));
  query.add(stop);
  query.add(go);
  query.add(filter);
  final BaseXBack south=new BaseXBack(Fill.NONE).border(4,0,0,0);
  south.layout(new BorderLayout(8,0));
  south.add(status,BorderLayout.CENTER);
  south.add(query,BorderLayout.EAST);
  add(south,BorderLayout.SOUTH);
  refreshLayout();
  saveB.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      final JPopupMenu pop=new JPopupMenu();
      final StringBuilder mnem=new StringBuilder();
      final JMenuItem sa=GUIMenu.newItem(GUICommands.C_EDITSAVE,gui,mnem);
      final JMenuItem sas=GUIMenu.newItem(GUICommands.C_EDITSAVEAS,gui,mnem);
      GUICommands.C_EDITSAVE.refresh(gui,sa);
      GUICommands.C_EDITSAVEAS.refresh(gui,sas);
      pop.add(sa);
      pop.add(sas);
      pop.show(saveB,0,saveB.getHeight());
    }
  }
);
  hist.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      final JPopupMenu pm=new JPopupMenu();
      final ActionListener al=new ActionListener(){
        @Override public void actionPerformed(        final ActionEvent ac){
          open(new IOFile(ac.getActionCommand()));
        }
      }
;
      final String[] files=gui.gprop.strings(GUIProp.EDITOR);
      for (      final String en : files)       pm.add(new JMenuItem(en)).addActionListener(al);
      pm.show(hist,0,hist.getHeight());
    }
  }
);
  refreshHistory(null);
  info.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    final MouseEvent e){
      EditorArea ea=getEditor();
      if (errFile != null) {
        ea=find(IO.get(errFile),false);
        if (ea == null)         ea=open(new IOFile(errFile));
        tabs.setSelectedComponent(ea);
      }
      if (errPos == -1)       return;
      ea.jumpError(errPos);
      pos.setText(ea.pos());
    }
  }
);
  stop.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      stop.setEnabled(false);
      go.setEnabled(false);
      gui.stop();
    }
  }
);
  go.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      getEditor().release(Action.EXECUTE);
    }
  }
);
  tabs.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    final ChangeEvent e){
      final EditorArea ea=getEditor();
      if (ea == null)       return;
      search.search();
      gui.refreshControls();
      pos.setText(ea.pos());
      ea.release(Action.PARSE);
    }
  }
);
  BaseXLayout.addDrop(this,new DropHandler(){
    @Override public void drop(    final Object file){
      if (file instanceof File)       open(new IOFile((File)file));
    }
  }
);
}
