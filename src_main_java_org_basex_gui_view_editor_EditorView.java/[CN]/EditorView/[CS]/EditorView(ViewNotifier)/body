{
  super(EDITORVIEW,man);
  border(6,6,6,6).layout(new BorderLayout());
  label=new BaseXLabel(EDITOR,true,false);
  label.setForeground(GUIConstants.GRAY);
  final BaseXButton srch=new BaseXButton(gui,"search",BaseXLayout.addShortcut(H_REPLACE,BaseXKeys.FIND.toString()));
  final BaseXButton openB=BaseXButton.command(GUICommands.C_EDITOPEN,gui);
  final BaseXButton saveB=new BaseXButton(gui,"save",H_SAVE);
  hist=new BaseXButton(gui,"hist",H_RECENTLY_OPEN);
  final BaseXBack buttons=new BaseXBack(Fill.NONE);
  buttons.layout(new TableLayout(1,4,1,0));
  buttons.add(openB);
  buttons.add(saveB);
  buttons.add(hist);
  buttons.add(srch);
  final BaseXBack b=new BaseXBack(Fill.NONE).layout(new BorderLayout());
  b.add(buttons,BorderLayout.WEST);
  b.add(label,BorderLayout.EAST);
  add(b,BorderLayout.NORTH);
  tabs=new BaseXTabs(gui);
  tabs.setFocusable(Prop.MAC);
  final SearchEditor se=new SearchEditor(gui,tabs,null).button(srch);
  search=se.panel();
  addCreateTab();
  add(se,BorderLayout.CENTER);
  search.editor(addTab(),false);
  info=new BaseXLabel().setText(OK,Msg.SUCCESS);
  pos=new BaseXLabel(" ");
  posCode.invokeLater();
  stop=new BaseXButton(gui,"stop",H_STOP_PROCESS);
  stop.addKeyListener(this);
  stop.setEnabled(false);
  go=new BaseXButton(gui,"go",BaseXLayout.addShortcut(H_REPLACE,BaseXKeys.EXEC.toString()));
  go.addKeyListener(this);
  filter=BaseXButton.command(GUICommands.C_FILTER,gui);
  filter.addKeyListener(this);
  filter.setEnabled(false);
  final BaseXBack status=new BaseXBack(Fill.NONE).layout(new BorderLayout(4,0));
  status.add(info,BorderLayout.CENTER);
  status.add(pos,BorderLayout.EAST);
  final BaseXBack query=new BaseXBack(Fill.NONE).layout(new TableLayout(1,3,1,0));
  query.add(stop);
  query.add(go);
  query.add(filter);
  final BaseXBack south=new BaseXBack(Fill.NONE).border(4,0,0,0);
  south.layout(new BorderLayout(8,0));
  south.add(status,BorderLayout.CENTER);
  south.add(query,BorderLayout.EAST);
  add(south,BorderLayout.SOUTH);
  refreshLayout();
  saveB.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      final JPopupMenu pop=new JPopupMenu();
      final StringBuilder mnem=new StringBuilder();
      final JMenuItem sa=GUIMenu.newItem(GUICommands.C_EDITSAVE,gui,mnem);
      final JMenuItem sas=GUIMenu.newItem(GUICommands.C_EDITSAVEAS,gui,mnem);
      GUICommands.C_EDITSAVE.refresh(gui,sa);
      GUICommands.C_EDITSAVEAS.refresh(gui,sas);
      pop.add(sa);
      pop.add(sas);
      pop.show(saveB,0,saveB.getHeight());
    }
  }
);
  hist.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      final JPopupMenu pm=new JPopupMenu();
      ActionListener al=new ActionListener(){
        @Override public void actionPerformed(        final ActionEvent ac){
          final String s=ac.getActionCommand().replaceAll("(.*) \\[(.*)\\]","$2/$1");
          open(new IOFile(s),true);
        }
      }
;
      final StringList opened=new StringList();
      for (      final EditorArea ea : editors())       opened.add(ea.file.path());
      final StringList files=new StringList(HISTORY);
      final StringList all=new StringList(gui.gprop.strings(GUIProp.EDITOR));
      final int fl=Math.min(all.size(),e == null ? HISTORY : HISTCOMP);
      for (int f=0; f < fl; f++)       files.add(all.get(f));
      Font f=null;
      for (      final String en : files.sort(Prop.CASE)) {
        final JMenuItem it=new JMenuItem(en.replaceAll("(.*)[/\\\\](.*)","$2 [$1]"));
        if (opened.contains(en)) {
          if (f == null)           f=it.getFont().deriveFont(Font.BOLD);
          it.setFont(f);
        }
        pm.add(it).addActionListener(al);
      }
      al=new ActionListener(){
        @Override public void actionPerformed(        final ActionEvent ac){
          hist.getActionListeners()[0].actionPerformed(null);
        }
      }
;
      if (e != null && pm.getComponentCount() == HISTCOMP) {
        pm.add(new JMenuItem("...")).addActionListener(al);
      }
      pm.show(hist,0,hist.getHeight());
    }
  }
);
  refreshHistory(null);
  info.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    final MouseEvent e){
      jumpToError();
    }
  }
);
  stop.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      stop.setEnabled(false);
      go.setEnabled(false);
      gui.stop();
    }
  }
);
  go.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      getEditor().release(Action.EXECUTE);
    }
  }
);
  tabs.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    final ChangeEvent e){
      final EditorArea ea=getEditor();
      if (ea == null)       return;
      search.editor(ea,true);
      gui.refreshControls();
      posCode.invokeLater();
    }
  }
);
  BaseXLayout.addDrop(this,new DropHandler(){
    @Override public void drop(    final Object file){
      if (file instanceof File)       open(new IOFile((File)file),true);
    }
  }
);
}
