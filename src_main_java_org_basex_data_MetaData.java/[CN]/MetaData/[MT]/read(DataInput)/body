{
  String storage="", istorage="";
  while (true) {
    final String k=string(in.readBytes());
    if (k.isEmpty())     break;
    if (k.equals(DBPERM)) {
      users=new Users(in);
      continue;
    }
    final String v=string(in.readBytes());
    if (k.equals(DBSTR))     storage=v;
 else     if (k.equals(IDBSTR))     istorage=v;
 else     if (k.equals(DBSIZE))     size=toInt(v);
 else     if (k.equals(DBFNAME))     file=IO.get(v);
 else     if (k.equals(DBFSIZE))     filesize=toLong(v);
 else     if (k.equals(DBNDOCS))     ndocs=toInt(v);
 else     if (k.equals(DBFTDC))     diacritics=toBool(v);
 else     if (k.equals(DBENC))     encoding=v;
 else     if (k.equals(DBHGHT))     height=toInt(v);
 else     if (k.equals(DBCHOP))     chop=toBool(v);
 else     if (k.equals(DBENTITY))     entity=toBool(v);
 else     if (k.equals(DBPTHIDX))     pthindex=toBool(v);
 else     if (k.equals(DBTXTIDX))     txtindex=toBool(v);
 else     if (k.equals(DBATVIDX))     atvindex=toBool(v);
 else     if (k.equals(DBFTXIDX))     ftxindex=toBool(v);
 else     if (k.equals(DBWCIDX))     wildcards=toBool(v);
 else     if (k.equals(DBFTST))     stemming=toBool(v);
 else     if (k.equals(DBFTCS))     casesens=toBool(v);
 else     if (k.equals(DBFTDC))     diacritics=toBool(v);
 else     if (k.equals(DBFTLN))     language=v;
 else     if (k.equals(DBSCMAX))     ftscmax=toInt(v);
 else     if (k.equals(DBSCMIN))     ftscmin=toInt(v);
 else     if (k.equals(DBSCTYPE))     scoring=toInt(v);
 else     if (k.equals(DBTIME))     time=toLong(v);
 else     if (k.equals(DBUTD))     uptodate=toBool(v);
 else     if (k.equals(DBLID))     lastid=toInt(v);
 else     if (k.equals(DBMNT))     mount=v;
 else     if (k.equals(DBDEEPFS))     deepfs=toBool(v);
  }
  if (!storage.equals(STORAGE))   throw new BuildException(DBUPDATE,storage);
  if (!istorage.equals(ISTORAGE)) {
    oldindex=true;
    update();
  }
}
