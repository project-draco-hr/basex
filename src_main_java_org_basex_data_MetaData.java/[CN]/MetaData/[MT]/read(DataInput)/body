{
  String storage="", istorage="";
  while (true) {
    final String k=string(in.readToken());
    if (k.isEmpty())     break;
    if (k.equals(DBPERM)) {
      users.read(in);
    }
 else {
      final String v=string(in.readToken());
      if (k.equals(DBSTR))       storage=v;
 else       if (k.equals(IDBSTR))       istorage=v;
 else       if (k.equals(DBFNAME))       original=v;
 else       if (k.equals(DBENC))       encoding=v;
 else       if (k.equals(DBSIZE))       size=toInt(v);
 else       if (k.equals(DBNDOCS))       ndocs=toInt(v);
 else       if (k.equals(DBSCMAX))       maxscore=toInt(v);
 else       if (k.equals(DBSCMIN))       minscore=toInt(v);
 else       if (k.equals(DBSCTYPE))       scoring=toInt(v);
 else       if (k.equals(DBMAXLEN))       maxlen=toInt(v);
 else       if (k.equals(DBMAXCATS))       maxcats=toInt(v);
 else       if (k.equals(DBLASTID))       lastid=toInt(v);
 else       if (k.equals(DBTIME))       time=toLong(v);
 else       if (k.equals(DBFSIZE))       filesize=toLong(v);
 else       if (k.equals(DBFTDC))       diacritics=toBool(v);
 else       if (k.equals(DBCHOP))       chop=toBool(v);
 else       if (k.equals(DBUPDIDX))       updindex=toBool(v);
 else       if (k.equals(DBTXTIDX))       textindex=toBool(v);
 else       if (k.equals(DBATVIDX))       attrindex=toBool(v);
 else       if (k.equals(DBFTXIDX))       ftxtindex=toBool(v);
 else       if (k.equals(DBCRTTXT))       createtext=toBool(v);
 else       if (k.equals(DBCRTATV))       createattr=toBool(v);
 else       if (k.equals(DBCRTFTX))       createftxt=toBool(v);
 else       if (k.equals(DBWCIDX))       wildcards=toBool(v);
 else       if (k.equals(DBFTST))       stemming=toBool(v);
 else       if (k.equals(DBFTCS))       casesens=toBool(v);
 else       if (k.equals(DBFTDC))       diacritics=toBool(v);
 else       if (k.equals(DBFTLN))       language=Language.get(v);
 else       if (k.equals(DBUPTODATE))       uptodate=toBool(v);
 else       if (k.equals(DBPTHIDX) && !toBool(v))       uptodate=false;
    }
  }
  if (!storage.equals(STORAGE) && new Version(storage).compareTo(new Version(STORAGE)) > 0)   throw new BuildException(H_DB_FORMAT,storage);
  oldindex=!istorage.equals(ISTORAGE) && new Version(istorage).compareTo(new Version(ISTORAGE)) > 0;
  corrupt=dbfile(DATAUPD).exists();
}
