{
  final int calls=ctx.tailCalls, max=ctx.maxCalls;
  if (!tail) {
    XQFunction func=fun;
    Value[] args=arg;
    final int fp=ctx.stack.enterFrame(func.stackFrameSize());
    try {
      while (true) {
        final Value ret=itm ? func.invItem(ctx,ii,args) : func.invValue(ctx,ii,args);
        func=ctx.pollTailCall();
        if (func == null)         return ret;
        ctx.stack.reuseFrame(func.stackFrameSize());
        args=ctx.pollTailArgs();
      }
    }
  finally {
      ctx.stack.exitFrame(fp);
    }
  }
 else   if (max >= 0 && ctx.tailCalls >= max) {
    ctx.registerTailCall(fun,arg);
    return itm ? null : Empty.SEQ;
  }
 else {
    ctx.tailCalls++;
    final int fp=ctx.stack.enterFrame(fun.stackFrameSize());
    try {
      return itm ? fun.invItem(ctx,ii,arg) : fun.invValue(ctx,ii,arg);
    }
  finally {
      ctx.tailCalls=calls;
      ctx.stack.exitFrame(fp);
    }
  }
}
