{
  @SuppressWarnings("unchecked") final NodeLike<Item,Item>[] out=new NodeLike[2];
  if (other instanceof LeafNode) {
    final Item[] ls=elems, rs=((LeafNode)other).values;
    final int l=ls.length, r=rs.length, n=l + r;
    if (n <= TreeSeq.MAX_LEAF) {
      final Item[] vals=new Item[n];
      System.arraycopy(ls,0,vals,0,l);
      System.arraycopy(rs,0,vals,l,r);
      out[0]=new LeafNode(vals);
    }
 else {
      final int ll=n / 2, rl=n - ll, move=r - rl;
      final Item[] newLeft=new Item[ll], newRight=new Item[rl];
      System.arraycopy(ls,0,newLeft,0,l);
      System.arraycopy(rs,0,newLeft,l,move);
      System.arraycopy(rs,move,newRight,0,rl);
      out[0]=new LeafNode(newLeft);
      out[1]=new LeafNode(newRight);
    }
  }
 else {
    final Item[] elems2=((PartialLeafNode)other).elems;
    final int l=elems.length, r=elems2.length, n=l + r;
    final Item[] vals=new Item[n];
    System.arraycopy(elems,0,vals,0,l);
    System.arraycopy(elems2,0,vals,l,r);
    out[0]=n < TreeSeq.MIN_LEAF ? new PartialLeafNode(vals) : new LeafNode(vals);
  }
  return out;
}
