{
  final int n=inLeft + inRight;
  if (n == 0)   return Empty.SEQ;
  final int start=(mid - inLeft + CAP) % CAP;
  if (n == 1)   return vals[start];
  if (n <= TreeSeq.MAX_SMALL) {
    return new SmallSeq(items(start,n),ret);
  }
  final int ll=tree.isEmpty() ? n / 2 : inLeft;
  return new BigSeq(items(start,ll),tree.freeze(),items(start + ll,n - ll),ret);
}
