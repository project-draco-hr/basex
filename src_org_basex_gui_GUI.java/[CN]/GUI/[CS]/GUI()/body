{
  setTitle(Text.TITLE);
  setIconImage(image(IMGICON));
  final Dimension scr=Toolkit.getDefaultToolkit().getScreenSize();
  final int w=GUIProp.guisize[0];
  final int h=GUIProp.guisize[1];
  int x=Math.max(0,GUIProp.guiloc[0]);
  int y=Math.max(0,GUIProp.guiloc[1]);
  if (x > scr.width - w)   x=Math.max(0,scr.width - w);
  if (y > scr.height - h)   y=Math.max(0,scr.height - h);
  setBounds(x,y,w,h);
  if (GUIProp.maxstate)   setExtendedState(MAXIMIZED_BOTH);
  top=new BaseXBack();
  top.setLayout(new BorderLayout());
  control=new BaseXBack();
  control.setLayout(new BorderLayout());
  control.setBorder(0,0,0,1);
  menu=new GUIMenu();
  if (GUIProp.showmenu)   setJMenuBar(menu);
  final Font fnt=new Font(GUIProp.font,1,15);
  buttons=new BaseXBack();
  buttons.setLayout(new BorderLayout());
  toolbar=new GUIToolBar();
  buttons.add(toolbar,BorderLayout.WEST);
  BaseXBack b=new BaseXBack();
  hits=new BaseXLabel(" ");
  hits.setFont(fnt);
  BaseXLayout.setWidth(hits,150);
  hits.setHorizontalAlignment(SwingConstants.RIGHT);
  b.add(hits);
  b.add(Box.createHorizontalStrut(4));
  buttons.add(b,BorderLayout.EAST);
  if (GUIProp.showbuttons)   control.add(buttons,BorderLayout.CENTER);
  nav=new BaseXBack();
  nav.setLayout(new BorderLayout(6,0));
  nav.setBorder(2,2,0,4);
  mode=new BaseXCombo(new String[]{BUTTONSEARCH,BUTTONXPATH,BUTTONCMD},HELPMODE,false);
  mode.setSelectedIndex(2);
  mode.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final int t=GUIProp.searchmode;
      final int s=mode.getSelectedIndex();
      if (s == t || !mode.isEnabled())       return;
      input.setText("");
      input.help(s == 0 ? context.data().deepfs ? HELPSEARCHFS : HELPSEARCHXML : s == 1 ? HELPXPATH : HELPCMD);
      exec.setEnabled(s == 2 || !GUIProp.execrt);
      GUIProp.searchmode=s;
    }
  }
);
  mode.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    final KeyEvent e){
      checkKeys(e);
    }
  }
);
  nav.add(mode,BorderLayout.WEST);
  b=new BaseXBack();
  b.setLayout(new BorderLayout());
  hist=new BaseXButton(icon("hist"),HELPHIST);
  hist.trim();
  hist.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final JPopupMenu popup=new JPopupMenu("History");
      final ActionListener al=new ActionListener(){
        public void actionPerformed(        final ActionEvent ac){
          input.setText(ac.getActionCommand());
          input.requestFocusInWindow();
          popup.setVisible(false);
        }
      }
;
      final int i=!context.db() ? 2 : GUIProp.searchmode;
      final String[] hs=i == 0 ? GUIProp.search : i == 1 ? GUIProp.xpath : GUIProp.commands;
      for (      final String en : hs) {
        final JMenuItem jmi=new JMenuItem(en);
        jmi.addActionListener(al);
        popup.add(jmi);
      }
      popup.show(hist,0,hist.getHeight());
    }
  }
);
  input=new BaseXTextField(null);
  final Font f=input.getFont();
  input.setFont(f.deriveFont((float)f.getSize() + 2));
  input.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    final KeyEvent e){
      checkKeys(e);
      if (e.getKeyCode() != KeyEvent.VK_ENTER)       return;
      final String txt=input.getText();
      final StringList sl=new StringList();
      sl.add(txt);
      final int i=!context.db() ? 2 : GUIProp.searchmode;
      final String[] hs=i == 0 ? GUIProp.search : i == 1 ? GUIProp.xpath : GUIProp.commands;
      for (int p=0; p < hs.length && sl.size < 10; p++) {
        if (!hs[p].equals(txt))         sl.add(hs[p]);
      }
      if (i == 0)       GUIProp.search=sl.finish();
 else       if (i == 1)       GUIProp.xpath=sl.finish();
 else       GUIProp.commands=sl.finish();
      execute();
    }
    @Override public void keyReleased(    final KeyEvent e){
      if (e.getKeyChar() == 0xFFFF || e.isControlDown())       return;
      if (GUIProp.searchmode == 2 || !context.db())       refreshPop(e.getKeyCode());
      if (GUIProp.execrt && GUIProp.searchmode != 2 && context.db() && !input.getText().startsWith("!"))       execute();
    }
  }
);
  b.add(hist,BorderLayout.WEST);
  b.add(input,BorderLayout.CENTER);
  nav.add(b,BorderLayout.CENTER);
  b=new BaseXBack();
  b.setLayout(new BorderLayout());
  exec=new BaseXButton(icon("go"),HELPEXEC);
  exec.trim();
  exec.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      execute();
    }
  }
);
  exec.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    final KeyEvent e){
      checkKeys(e);
    }
  }
);
  filter=new BaseXButton(icon("filter"),HELPFILTER);
  filter.trim();
  filter.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      GUICommands.FILTER.execute();
    }
  }
);
  filter.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    final KeyEvent e){
      checkKeys(e);
    }
  }
);
  b.add(filter);
  b.add(exec,BorderLayout.CENTER);
  b.add(filter,BorderLayout.EAST);
  nav.add(b,BorderLayout.EAST);
  if (GUIProp.showinput)   control.add(nav,BorderLayout.SOUTH);
  top.add(control,BorderLayout.NORTH);
  query=new QueryView(null);
  text=new TextView(FILL.DOWN,TEXTTIT,HELPTEXT);
  help=new TextView(FILL.DOWN,HELPTIT,null);
  info=new InfoView(HELPINFO);
  final ViewPanel textpanel=new ViewPanel(text,TEXTVIEW);
  final ViewPanel helppanel=new ViewPanel(help,HELPVIEW);
  final ViewPanel[][] panels={{textpanel,helppanel},{new ViewPanel(new TreeView(HELPTREE),TREEVIEW),new ViewPanel(new RealView(),REALVIEW),new ViewPanel(new XPathView(),XPATHVIEW),new ViewPanel(new TableView(HELPTABLE),TABLEVIEW),new ViewPanel(new MapView(HELPMAP),MAPVIEW),new ViewPanel(query,QUERYVIEW),new ViewPanel(info,INFOVIEW),helppanel,textpanel}};
  views=new ViewContainer(panels);
  views.setViews(false);
  top.add(views,BorderLayout.CENTER);
  setContentBorder();
  status=new GUIStatus();
  if (GUIProp.showstatus)   top.add(status,BorderLayout.SOUTH);
  setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    final WindowEvent e){
      quit();
    }
  }
);
  add(top);
  setVisible(true);
  views.updateViews();
  refreshControls();
  Prop.xqerrcode=false;
  Prop.allInfo=GUIProp.showinfo;
  Prop.info=GUIProp.showinfo;
  Prop.chop=true;
  input.requestFocusInWindow();
  new Thread(){
    @Override public void run(){
      views.run();
    }
  }
.start();
}
