{
  if (View.working)   return;
  final int thread=++threadID;
  new Thread(){
    @Override public void run(){
      if (threadID != thread)       return;
      while (proc != null) {
        proc.stop();
        Performance.sleep(50);
        if (threadID != thread)         return;
      }
      cursor(CURSORWAIT);
      try {
        final CommandParser cp=new CommandParser(command);
        while (cp.more()) {
          if (obsolete(thread))           return;
          final Command cmd=cp.next();
          final Commands cc=cmd.name;
          if (cc == Commands.EXIT || cc == Commands.QUIT) {
            quit();
            return;
          }
          proc=cmd.proc(context);
          if (cc.updating())           View.working=true;
          final Performance perf=new Performance();
          final Nodes current=context.current();
          final Data data=context.data();
          final Proc p=proc;
          final boolean ok=p.execute();
          if (!ok && p.info().length() == 0) {
            proc=null;
            return;
          }
          if (cc.updating())           View.working=false;
          if (obsolete(thread))           return;
          final Result result=p.result();
          final Nodes nodes=result instanceof Nodes ? (Nodes)result : null;
          final CachedOutput out=new CachedOutput(TextView.MAX);
          if (cc.printing() || !ok) {
            if (!GUIProp.showstarttext && data == null || !GUIProp.showtext && data != null && nodes == null) {
              GUICommands.SHOWTEXT.execute();
            }
            if (text.isValid() && nodes == null) {
              p.output(out);
              out.addInfo();
            }
          }
          final String time=perf.getTimer();
          final String inf=p.info();
          if (obsolete(thread))           return;
          final boolean feedback=cc.printing() && data != null && GUIProp.showquery && cc == Commands.XQUERY && query.info(inf,ok);
          final Data ndata=context.data();
          if (ndata != data) {
            View.notifyInit();
          }
 else           if (cc.updating()) {
            View.notifyUpdate();
          }
 else           if (result != null) {
            if (context.current() != current || GUIProp.filterrt) {
              if (nodes != null) {
                if (GUIProp.filterrt) {
                  View.ftPos=nodes.ftpos;
                  View.ftPoi=nodes.ftpoin;
                }
                View.notifyContext((Nodes)result,GUIProp.filterrt);
              }
            }
 else             if (context.marked() != null) {
              Nodes marked=context.marked();
              if (nodes != null) {
                marked=nodes;
              }
 else               if (marked.size != 0) {
                marked=new Nodes(data);
              }
              if (marked != context.marked()) {
                View.ftPos=marked.ftpos;
                View.ftPoi=marked.ftpoin;
                View.notifyMark(marked);
              }
            }
          }
          if (obsolete(thread))           return;
          if (ok && cc.printing() && nodes == null) {
            text.setText(out.buffer(),out.size(),false);
          }
          setHits(result == null ? 0 : result.size());
          if (GUIProp.showinfo)           info.setInfo(result != null ? Token.token(inf) : Token.EMPTY);
          if (ok) {
            status.setText(BaseX.info(PROCTIME,time));
          }
 else {
            if (feedback)             status.setText(STATUSOK);
 else             status.setError(inf);
            break;
          }
        }
      }
 catch (      final IllegalArgumentException ex) {
        JOptionPane.showMessageDialog(GUI.this,ex.getMessage(),DIALOGINFO,JOptionPane.INFORMATION_MESSAGE);
        status.setText(STATUSOK);
      }
catch (      final Exception ex) {
        ex.printStackTrace();
        String msg=ex.toString();
        if (msg.length() == 0)         msg=ex.getMessage();
        JOptionPane.showMessageDialog(GUI.this,BaseX.info(PROCERR,command,msg),DIALOGINFO,JOptionPane.ERROR_MESSAGE);
      }
      cursor(CURSORARROW,true);
      proc=null;
    }
  }
.start();
}
