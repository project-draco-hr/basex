{
  final int thread=++threadID;
  while (proc != null) {
    proc.stop();
    Performance.sleep(50);
    if (threadID != thread)     return true;
  }
  cursor(CURSORWAIT);
  try {
    if (pr.updating())     updating=true;
    final Performance perf=new Performance();
    final Nodes current=context.current();
    final Data data=context.data();
    proc=pr;
    final boolean ok=pr.execute(context);
    if (!ok && pr.info().length() == 0) {
      proc=null;
      return false;
    }
    if (pr.updating())     updating=false;
    final Result result=pr.result();
    final Nodes nodes=result instanceof Nodes ? (Nodes)result : null;
    final String inf=pr.info();
    if (ok && pr.printing()) {
      if (!text.isValid() && nodes == null)       GUICommands.SHOWTEXT.execute(this);
      final CachedOutput out=new CachedOutput(TextView.MAX);
      pr.output(out);
      out.addInfo();
      text.setText(out);
    }
    final boolean feedback=main || data != null && GUIProp.showquery && query.info(pr instanceof XQuery ? inf : null,ok);
    if (!ok) {
      status.setText(feedback ? STATUSOK : inf);
      cursor(CURSORARROW,true);
      proc=null;
      return false;
    }
    final Data ndata=context.data();
    final String time=perf.getTimer();
    Nodes marked=context.marked();
    if (ndata != data) {
      notify.init();
    }
 else     if (pr.updating()) {
      notify.update();
    }
 else     if (result != null) {
      if (context.current() != current || GUIProp.filterrt) {
        if (nodes != null) {
          notify.context((Nodes)result,GUIProp.filterrt,null);
        }
      }
 else       if (marked != null) {
        if (nodes != null) {
          marked=nodes;
        }
 else         if (marked.size() != 0) {
          marked=new Nodes(data);
        }
        if (!marked.same(context.marked())) {
          notify.mark(marked,null);
        }
        if (thread != threadID) {
          proc=null;
          return true;
        }
      }
    }
    setHits(result == null ? 0 : result.size());
    if (GUIProp.showinfo)     info.setInfo(result != null ? Token.token(inf) : Token.EMPTY);
    status.setText(BaseX.info(PROCTIME,time));
  }
 catch (  final Exception ex) {
    ex.printStackTrace();
    String msg=ex.toString();
    if (msg.length() == 0)     msg=ex.getMessage();
    Dialog.error(this,BaseX.info(PROCERR,pr,msg));
  }
  cursor(CURSORARROW,true);
  proc=null;
  return true;
}
