{
  final String str=args[0];
  final int s=str.indexOf('/');
  final String db=s == -1 ? str : str.substring(0,s);
  final String path=s == -1 ? "" : str.substring(s + 1);
  if (!validDB(db,false))   return error(NAMEINVALID,db);
  final Table table=new Table();
  table.description=INFONRES;
  table.header.add(INFOPATH);
  table.header.add(INFOTYPE);
  table.header.add(INFODBSIZE);
  try {
    final Data data=Open.open(db,context);
    final IntList il=data.docs(path);
    for (int i=0, is=il.size(); i < is; i++) {
      final int pre=il.get(i);
      final TokenList tl=new TokenList(3);
      tl.add(data.text(pre,true));
      tl.add(DataText.M_XML);
      tl.add(data.size(pre,Data.DOC));
      table.contents.add(tl);
    }
    for (    final byte[] file : data.files(path)) {
      final TokenList tl=new TokenList(3);
      tl.add(file);
      tl.add(DataText.M_RAW);
      tl.add(data.meta.binary(string(file)).length());
      table.contents.add(tl);
    }
    Close.close(data,context);
  }
 catch (  final IOException ex) {
    Util.debug(ex);
    final String msg=ex.getMessage();
    return msg.isEmpty() ? error(DBOPENERR,db) : error(msg);
  }
  table.sort();
  out.println(table.finish());
  return true;
}
