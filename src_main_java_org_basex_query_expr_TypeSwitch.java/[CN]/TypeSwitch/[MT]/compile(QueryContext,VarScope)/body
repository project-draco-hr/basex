{
  ts=ts.compile(ctx,scp);
  if (ts.isValue()) {
    final Value val=ts.value(ctx);
    for (    final TypeCase tc : cases) {
      if (tc.matches(val))       return optPre(tc.compile(ctx,scp,(Value)ts).expr,ctx);
    }
  }
  for (  final TypeCase tc : cases)   tc.compile(ctx,scp);
  final TypeCase tc=cases[0];
  boolean eq=tc.var == null;
  for (int c=1; eq && c < cases.length; ++c) {
    eq=tc.expr.sameAs(cases[c].expr);
  }
  if (eq)   return optPre(tc.expr,ctx);
  type=cases[0].type();
  for (int c=1; c < cases.length; ++c) {
    type=type.union(cases[c].type());
  }
  return this;
}
