{
  name=XQuery.string('@' + NNAME,env,ctx);
  sources=list(ctx,env,SOURCE);
  resources=list(ctx,env,RESOURCE);
  params=list(ctx,env,PARAM);
  namespaces=list(ctx,env,NAMESPACE);
  ArrayList<HashMap<String,String>> al=list(ctx,env,SCHEMA);
  schemas=al.isEmpty() ? null : al.get(0);
  al=list(ctx,env,COLLATION);
  collations=al.isEmpty() ? null : al.get(0);
  final String uri=string(STATIC_BASE_URI,ctx,env);
  baseURI="#UNDEFINED".equals(uri) ? "" : uri;
  collURI=XQuery.string("*:collection/@uri",env,ctx);
  XQuery xq=new XQuery("*:collection/*:source/@role = '.'",ctx).context(env);
  collContext=xq.next().getBoolean();
  xq.close();
  collSources=new StringList();
  xq=new XQuery("*:collection/*:source/@file",ctx).context(env);
  for (  final XdmItem iatt : xq)   collSources.add(iatt.getString());
  xq.close();
  decFormats=new HashMap<QName,HashMap<String,String>>();
  xq=new XQuery("*:decimal-format",ctx).context(env);
  for (  final XdmItem it : xq) {
    final XdmItem xq2=new XQuery("for $n in @name " + "let $b := substring-before($n, ':') " + "return QName(if($b) then namespace-uri-for-prefix($b, .) else '', $n)",ctx).context(it).next();
    final HashMap<String,String> hm=new HashMap<String,String>();
    final QNm qnm=xq2 != null ? (QNm)xq2.internal() : new QNm(Token.EMPTY);
    decFormats.put(qnm.toJava(),hm);
    for (    final XdmItem it2 : new XQuery("@*[name() != 'name']",ctx).context(it)) {
      hm.put(it2.getName().getLocalPart(),it2.getString());
    }
  }
  xq.close();
}
