{
  BaseXLayout.setWidth(this,DWIDTH);
  BaseXLayout.addInteraction(this,win);
  if (txt != null) {
    setText(txt);
    selectAll();
  }
  addFocusListener(new FocusAdapter(){
    @Override public void focusGained(    final FocusEvent e){
      if (area != null)       selectAll();
    }
  }
);
  addMouseListener(new MouseAdapter(){
    @Override public void mouseEntered(    final MouseEvent e){
      BaseXLayout.focus(e.getComponent(),help);
    }
  }
);
  addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    final KeyEvent e){
      if (UNDO.is(e) || REDO.is(e)) {
        final String t=getText();
        setText(last);
        last=t;
      }
      if (area == null)       return;
      final String text=getText();
      final boolean enter=ENTER.is(e);
      if (ESCAPE.is(e) || enter && text.isEmpty()) {
        area.requestFocusInWindow();
      }
 else       if (enter || FINDNEXT.is(e) || FINDPREV.is(e)|| FINDNEXT2.is(e)|| FINDPREV2.is(e)) {
        area.find(text,FINDPREV.is(e) || FINDPREV2.is(e) || e.isShiftDown());
      }
    }
    @Override public void keyReleased(    final KeyEvent e){
      if (area == null)       return;
      final String text=getText();
      final char ch=e.getKeyChar();
      if (!control(e) && Character.isDefined(ch) && !ENTER.is(e))       area.find(text,false);
      repaint();
    }
  }
);
  setDragEnabled(true);
  BaseXLayout.addDrop(this,new DropHandler(){
    @Override public void drop(    final Object object){
      replaceSelection(object.toString());
    }
  }
);
}
