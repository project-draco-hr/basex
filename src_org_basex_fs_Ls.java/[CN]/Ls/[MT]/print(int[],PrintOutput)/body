{
  int n=result.length;
  final TokenList names=new TokenList(n);
  final TokenList sizes=new TokenList(n);
  final TokenList times=new TokenList(n);
  final BoolList dirs=new BoolList(n);
  final IntList nodes=new IntList(n);
  int maxN=1, maxS=1;
  int c=0;
  for (  final int pre : result) {
    byte[] tok=fs.name(pre);
    names.add(fs.name(pre));
    maxN=Math.max(maxN,tok.length);
    tok=fs.size(pre);
    sizes.add(tok);
    maxS=Math.max(maxS,tok.length);
    times.add(fs.time(pre));
    dirs.add(fs.isDir(pre));
    nodes.add(c++);
  }
  final TokenList sort=fSize ? sizes : fTime ? times : names;
  final boolean num=fSize || fTime;
  nodes.sort(Array.finish(sort.finish(),n),num,!(num ^ fReverse));
  int col=0;
  int mcl=80 / maxN;
  maxN+=2;
  maxS+=2;
  final IntList dpre=new IntList();
  for (int i=0; i < nodes.size; i++) {
    c=nodes.get(i);
    final boolean dir=dirs.list[c];
    if (dir)     dpre.add(result[c]);
    final byte[] name=names.list[c];
    if (!fListDot && startsWith(name,'.'))     continue;
    if (fLong) {
      final byte[] size=sizes.list[c];
      final long time=Token.toLong(times.list[c]);
      out.print(dir ? 'd' : 'f');
      out.print(maxS,fHuman ? token(format(toLong(size))) : size);
      out.print(18,token(date.format(new Date(time * 60000))));
      out.print("  ");
      out.println(name);
    }
 else {
      out.print(name,maxN);
      col=(col + 1) % mcl;
      if (col == 0)       out.print(NL);
    }
  }
  if (col != 0)   out.print(NL);
  return dpre.finish();
}
