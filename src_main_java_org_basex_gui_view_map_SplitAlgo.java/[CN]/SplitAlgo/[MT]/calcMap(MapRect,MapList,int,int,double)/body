{
  if (ne - ns == 0) {
    final MapRects rects=new MapRects();
    rects.add(new MapRect(r,ml.get(ns)));
    return rects;
  }
  final MapRects rects=new MapRects();
  int ni=ns - 1;
  double w=0;
  for (; ni < ne; ) {
    w+=ml.weight[++ni];
    if (w >= sw / 2 || ni == ne - 1)     break;
  }
  int xx=r.x;
  int yy=r.y;
  int ww=!(r.w > r.h) ? r.w : (int)(r.w * 1 / sw * w);
  int hh=r.w > r.h ? r.h : (int)(r.h * 1 / sw * w);
  if (ww > 0 && hh > 0 && w > 0)   rects.add(calcMap(new MapRect(xx,yy,ww,hh,0,r.level),ml,ns,ni,w));
  if (r.w > r.h) {
    xx+=ww;
    ww=r.w - ww;
  }
 else {
    yy+=hh;
    hh=r.h - hh;
  }
  if (ww > 0 && hh > 0 && sw - w > 0 && ni + 1 <= ne)   rects.add(calcMap(new MapRect(xx,yy,ww,hh,0,r.level),ml,ni + 1,ne,sw - w));
  return rects;
}
