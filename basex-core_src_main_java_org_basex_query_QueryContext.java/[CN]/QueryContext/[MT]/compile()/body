{
  final StringList o=tempOpts;
  for (int s=0; s < o.size(); s+=2) {
    try {
      context.options.assign(o.get(s).toUpperCase(Locale.ENGLISH),o.get(s + 1));
    }
 catch (    final BaseXException ex) {
      BASX_VALUE.thrw(null,o.get(s),o.get(s + 1));
    }
  }
  maxCalls=context.options.get(MainOptions.TAILCALLS);
  vars.bindExternal(this,bindings);
  if (ctxItem != null) {
    try {
      ctxItem.compile(this);
      value=ctxItem.value(this);
    }
 catch (    final QueryException ex) {
      if (ex.err() != NOCTX)       throw ex;
      CIRCCTX.thrw(ctxItem.info);
    }
  }
 else   if (nodes != null) {
    if (nodes.ftpos != null)     ftPosData=new FTPosData();
    resource.compile(nodes);
  }
  if (value != null && root.sc.initType != null) {
    value=root.sc.initType.funcConvert(this,root.sc,null,value);
  }
  analyze();
  if (inf) {
    info.add(NL).add(QUERY).add(COL).add(NL).add(QueryProcessor.removeComments(query,Integer.MAX_VALUE)).add(NL);
    if (compInfo)     info.add(NL + OPTIMIZED_QUERY + COL+ NL+ funcs+ root+ NL);
  }
}
