{
  if (compiled)   return;
  final CompileContext cc=new CompileContext(this);
  try {
    final StringList opts=tempOpts;
    final int os=opts.size();
    for (int o=0; o < os; o+=2) {
      final String key=opts.get(o), val=opts.get(o + 1);
      try {
        context.options.assign(key.toUpperCase(Locale.ENGLISH),val);
      }
 catch (      final BaseXException ex) {
        throw BASX_VALUE_X_X.get(null,key,val);
      }
    }
    maxCalls=context.options.get(MainOptions.TAILCALLS);
    vars.bindExternal(this,bindings);
    if (ctxItem != null) {
      try {
        ctxItem.comp(cc);
        value=ctxItem.cache(this).value();
      }
 catch (      final QueryException ex) {
        throw ex.error() == NOCTX_X ? CIRCCTX.get(ctxItem.info) : ex;
      }
    }
 else {
      final DBNodes nodes=context.current();
      if (nodes != null) {
        if (!context.perm(Perm.READ,nodes.data().meta.name))         throw BASX_PERM_X.get(null,Perm.READ);
        value=resources.compile(nodes);
      }
    }
    if (value != null && root.sc.contextType != null) {
      value=root.sc.contextType.promote(value,null,true,this,root.sc,null);
    }
    try {
      if (root != null)       QueryCompiler.compile(cc,root);
 else       funcs.compile(cc);
    }
 catch (    final StackOverflowError ex) {
      Util.debug(ex);
      throw BASX_STACKOVERFLOW.get(null,ex);
    }
    info.runtime=true;
  }
  finally {
    compiled=true;
  }
}
