{
  final StaticContext sc=root != null ? root.sc : new StaticContext(context);
  Object vl=val;
  if (vl instanceof String) {
    final String string=(String)vl;
    final StringList strings=new StringList(1);
    if (string.indexOf('\1') == -1) {
      strings.add(string);
    }
 else {
      strings.add(string.split("\1"));
      vl=strings.toArray();
    }
    if (string.indexOf('\2') != -1) {
      final ValueBuilder vb=new ValueBuilder();
      for (      final String str : strings) {
        final int i=str.indexOf('\2');
        final String s=i == -1 ? str : str.substring(0,i);
        final String t=i == -1 ? type : str.substring(i + 1);
        vb.add(cast(s,t));
      }
      return vb.value();
    }
  }
  if (type == null || type.isEmpty()) {
    return vl instanceof Value ? (Value)vl : JavaMapping.toValue(vl,this,sc);
  }
  if (type.equalsIgnoreCase(MainParser.JSON.name())) {
    try {
      final JsonParserOptions jp=new JsonParserOptions();
      jp.set(JsonOptions.FORMAT,JsonFormat.MAP);
      final JsonConverter conv=JsonConverter.get(jp);
      return conv.convert(token(vl.toString()),null);
    }
 catch (    final QueryIOException ex) {
      throw ex.getCause();
    }
  }
  if (type.equals(QueryText.EMPTY_SEQUENCE + "()"))   return Empty.SEQ;
  final QNm nm=new QNm(token(type.replaceAll("\\(.*?\\)$","")),sc);
  if (!nm.hasURI() && nm.hasPrefix())   throw NOURI_X.get(null,nm.string());
  Type tp;
  if (type.endsWith(")")) {
    if (nm.eq(AtomType.ITEM.name))     tp=AtomType.ITEM;
 else     tp=NodeType.find(nm);
    if (tp == null)     tp=FuncType.find(nm);
  }
 else {
    tp=ListType.find(nm);
    if (tp == null)     tp=AtomType.find(nm,false);
  }
  if (tp == null)   throw WHICHTYPE_X.get(null,type);
  if (vl instanceof Value) {
    if (vl instanceof Item)     return tp.cast((Item)vl,this,sc,null);
    final Value v=(Value)vl;
    final ValueBuilder seq=new ValueBuilder();
    for (    final Item i : v)     seq.add(tp.cast(i,this,sc,null));
    return seq.value();
  }
  if (vl instanceof String[]) {
    final String[] strings=(String[])vl;
    final ValueBuilder seq=new ValueBuilder();
    for (    final String s : strings)     seq.add(tp.cast(s,this,sc,null));
    return seq.value();
  }
  return tp.cast(vl,this,sc,null);
}
