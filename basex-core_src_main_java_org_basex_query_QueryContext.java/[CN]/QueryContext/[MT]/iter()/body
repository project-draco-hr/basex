{
  try {
    if (!updating)     return root.iter(this);
    ValueBuilder cache=root.cache(this);
    final long cs=cache.size();
    final StringList dbs=updates.databases();
    final HashSet<Data> datas=updates.prepare();
    for (int c=0; c < cs; c++) {
      final Item it=cache.get(c);
      if (!(it instanceof DBNode))       continue;
      final Data data=it.data();
      if (datas.contains(data) || !data.inMemory() && dbs.contains(data.meta.name)) {
        cache.set(((DBNode)it).dbCopy(context.options),c);
      }
    }
    updates.apply();
    if (updates.size() != 0 && context.data() != null)     context.invalidate();
    if (output.size() != 0) {
      if (cache.size() == 0)       cache=output;
 else       cache.add(output.value());
    }
    return cache;
  }
 catch (  final StackOverflowError ex) {
    Util.debug(ex);
    throw BASX_STACKOVERFLOW.get(null);
  }
}
