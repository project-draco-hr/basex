{
  super.comp(ctx);
  for (int e=0; e != expr.length; e++) {
    if (expr[e] instanceof LocPath) {
      ((LocPath)expr[e]).addPosPred(ctx);
    }
 else     if (expr[e] instanceof Item) {
      if (!((Item)expr[e]).bool()) {
        ctx.compInfo(OPTAND1);
        return Bln.FALSE;
      }
      ctx.compInfo(OPTAND2);
      final Expr[] tmp=new Expr[expr.length - 1];
      System.arraycopy(expr,0,tmp,0,e);
      System.arraycopy(expr,e + 1,tmp,e,expr.length - e-- - 1);
      expr=tmp;
    }
 else     if (expr[e] instanceof Or) {
      final ExprInfoList eil=new ExprInfoList();
      final Or o=(Or)expr[e];
      for (int j=0; j < o.expr.length; j++)       eil.add(o.expr[j],true);
      if (eil.size > 0 && eil.size < o.expr.length) {
        Expr[] ex=eil.finishE();
        if (ex.length == 1)         expr[e]=ex[0];
 else         o.expr=eil.finishE();
        ctx.compInfo(OPTSUMPREDS);
      }
    }
  }
  if (expr.length == 0)   return Bln.TRUE;
  if (expr.length == 1)   return expr[0];
  Pos pos=new Pos(Integer.MIN_VALUE,Integer.MAX_VALUE);
  for (  final Expr e : expr) {
    if (!(e instanceof Pos)) {
      pos=null;
      break;
    }
    pos.min=Math.max(pos.min,((Pos)e).min);
    pos.max=Math.min(pos.max,((Pos)e).max);
  }
  if (pos != null)   return pos;
  if (expr.length == 2 && expr[0] instanceof Cmp && expr[1] instanceof Cmp) {
    final Cmp r1=(Cmp)expr[0];
    final Cmp r2=(Cmp)expr[1];
    if (!r1.standard() || !r2.standard())     return this;
    final LocPath p1=(LocPath)r1.expr[0];
    final LocPath p2=(LocPath)r2.expr[0];
    if (r1.type == Comp.GE && r2.type == Comp.LE && p1.sameAs(p2)) {
      ctx.compInfo(OPTRANGE);
      return new Range(p1,(Item)r1.expr[1],(Item)r2.expr[1]);
    }
  }
  return allOf(ctx);
}
