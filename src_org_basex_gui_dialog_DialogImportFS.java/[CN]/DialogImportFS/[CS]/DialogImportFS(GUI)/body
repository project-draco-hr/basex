{
  super(main,IMPORTFSTITLE);
  db=List.list(main.context);
  final BaseXBack p1=new BaseXBack();
  p1.setLayout(new TableLayout(3,1));
  p1.setBorder(8,8,8,8);
  p1.add(new BaseXLabel(IMPORTFSTEXT,false,true));
  BaseXBack p=new BaseXBack();
  p.setLayout(new TableLayout(7,2,6,0));
  final Prop prop=gui.context.prop;
  final GUIProp gprop=gui.prop;
  path=new BaseXTextField(gprop.get(GUIProp.FSIMPORTPATH),HELPFSPATH,this);
  path.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    final KeyEvent e){
      action(null);
    }
  }
);
  BaseXLayout.setWidth(path,240);
  p.add(path);
  button=new BaseXButton(BUTTONBROWSE,HELPBROWSE,this);
  button.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final IO file=new BaseXFileChooser(DIALOGFC,path.getText(),main).select(BaseXFileChooser.Mode.DOPEN);
      if (file != null) {
        path.setText(file.path());
        dbname.setText(file.dbname());
      }
    }
  }
);
  p.add(button);
  p.add(new BaseXLabel(CREATENAME,false,true));
  p.add(new BaseXLabel(""));
  dbname=new BaseXTextField(gprop.get(GUIProp.FSDBNAME),HELPFSNAME,this);
  dbname.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    final KeyEvent e){
      action(null);
    }
  }
);
  BaseXLayout.setWidth(dbname,240);
  p.add(dbname);
  all=new BaseXCheckBox(IMPORTALL,HELPFSALL,gprop.is(GUIProp.FSALL),this);
  all.setToolTipText(IMPORTALLINFO);
  all.setBorder(new EmptyBorder(4,4,0,0));
  all.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      action(null);
    }
  }
);
  p.add(all);
  backing=new BaseXTextField(gprop.get(GUIProp.FSBACKING),HELPFSBACKING,this);
  backing.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    final KeyEvent e){
      action(null);
    }
  }
);
  BaseXLayout.setWidth(backing,240);
  mountpoint=new BaseXTextField(gprop.get(GUIProp.FSMOUNT),HELPFSMOUNT,this);
  mountpoint.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    final KeyEvent e){
      action(null);
    }
  }
);
  BaseXLayout.setWidth(mountpoint,240);
  if (prop.is(Prop.FUSE)) {
    p.add(new BaseXLabel("Backing store:",false,true));
    p.add(new BaseXLabel(""));
    p.add(backing);
    p.add(new BaseXLabel(""));
    p.add(new BaseXLabel("DeepFS mount point:",false,true));
    p.add(new BaseXLabel(""));
    p.add(mountpoint);
    p.add(new BaseXLabel(""));
  }
  p1.add(p);
  info=new BaseXLabel(" ");
  info.setBorder(20,0,10,0);
  p1.add(info);
  final BaseXBack p2=new BaseXBack();
  p2.setLayout(new TableLayout(4,1));
  p2.setBorder(8,8,8,8);
  BaseXLabel label=new BaseXLabel(IMPORTFSTEXT1,false,true);
  p2.add(label);
  meta=new BaseXCheckBox(IMPORTMETA,HELPMETA,prop.is(Prop.FSMETA),12,this);
  p2.add(meta);
  label=new BaseXLabel(IMPORTFSTEXT2,false,true);
  p2.add(label);
  p=new BaseXBack();
  p.setLayout(new BorderLayout());
  cont=new BaseXCheckBox(IMPORTCONT,HELPCONT,prop.is(Prop.FSCONT),this);
  cont.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      action(null);
    }
  }
);
  p.add(cont,BorderLayout.WEST);
  maxsize=new BaseXCombo(IMPORTFSMAX,HELPFSMAX,this);
  maxsize.setToolTipText(IMPORTFSMAXINFO);
  final int m=prop.num(Prop.FSTEXTMAX);
  int i=-1;
  while (++i < IMPORTFSMAXSIZE.length - 1) {
    if (IMPORTFSMAXSIZE[i] == m)     break;
  }
  maxsize.setSelectedIndex(i);
  p.add(maxsize,BorderLayout.EAST);
  BaseXLayout.setWidth(p,p2.getPreferredSize().width);
  p2.add(p);
  final BaseXTabs tabs=new BaseXTabs(this);
  tabs.addTab(GENERALINFO,p1);
  tabs.addTab(METAINFO,p2);
  set(tabs,BorderLayout.CENTER);
  buttons=okCancel(this);
  set(buttons,BorderLayout.SOUTH);
  action(null);
  finish(null);
}
