{
  final Data data=GUI.context.data();
  if (data == null || data.size == 0) {
    super.paintComponent(g);
    return;
  }
  if (mainRects == null) {
    refreshInit();
    return;
  }
  painting=true;
  final boolean in=zoomStep > 0 && zoomIn;
  final Image img1=in ? zoomMap : mainMap;
  final Image img2=in ? mainMap : zoomMap;
  if (zoomStep > 0) {
    drawImage(g,img1,-zoomStep);
    drawImage(g,img2,zoomStep);
  }
 else {
    drawImage(g,mainMap,zoomStep);
  }
  if (focusedRect == null || mainRects.size() == 1 && focusedRect == mainRects.get(0)) {
    painting=false;
    return;
  }
  if (GUIProp.maplayout == 0) {
    g.setColor(COLORS[32]);
    int pre=mainRects.size();
    int par=ViewData.parent(data,focusedRect.p);
    while (--pre >= 0) {
      final MapRect rect=mainRects.get(pre);
      if (rect.p == par) {
        final int x=rect.x;
        final int y=rect.y;
        final int w=rect.w;
        final int h=rect.h;
        g.drawRect(x,y,w,h);
        g.drawRect(x - 1,y - 1,w + 2,h + 2);
        par=ViewData.parent(data,par);
      }
    }
  }
  if (selBox != null) {
    g.setColor(colormark3);
    g.drawRect(selBox.x,selBox.y,selBox.w,selBox.h);
    g.drawRect(selBox.x - 1,selBox.y - 1,selBox.w + 2,selBox.h + 2);
  }
 else {
    final int x=focusedRect.x;
    final int y=focusedRect.y;
    final int w=focusedRect.w;
    final int h=focusedRect.h;
    g.setColor(color6);
    g.drawRect(x,y,w,h);
    g.drawRect(x + 1,y + 1,w - 2,h - 2);
    if (data.kind(focusedRect.p) == Data.ELEM) {
      g.setFont(font);
      String tt=Token.string(ViewData.tag(data,focusedRect.p));
      if (tt.length() > 32)       tt=tt.substring(0,30) + DOTS;
      BaseXLayout.drawTooltip(g,tt,x,y,getWidth(),focusedRect.l + 5);
    }
    if (GUIProp.mapinteraction == 1) {
      int myx, myy;
      if (mouseX - GUIProp.lenswidth < 0)       myx=0;
 else       if (mouseX + GUIProp.lenswidth > getWidth())       myx=getWidth() - (GUIProp.lenswidth << 1);
 else       myx=mouseX - GUIProp.lenswidth;
      if (mouseY - GUIProp.lensheight < 0)       myy=0;
 else       if (mouseY + GUIProp.lensheight > getHeight())       myy=getHeight() - (GUIProp.lensheight << 1);
 else       myy=mouseY - GUIProp.lensheight;
      MapRect rectToZoom=new MapRect(myx + GUIProp.lenswidth - GUIProp.lensareawidth,myy + GUIProp.lensheight - GUIProp.lensareaheight,GUIProp.lensareawidth << 1,GUIProp.lensareaheight << 1);
      g.setColor(Color.red);
      g.drawRect(rectToZoom.x,rectToZoom.y,rectToZoom.w,rectToZoom.h);
      int np=0;
      final IntList il=new IntList();
      for (int r=0, rl=mainRects.size(); r < rl; r++) {
        final MapRect rect=mainRects.get(r);
        if (mainRects.get(r).p < np)         continue;
        if (rectToZoom.contains(rect)) {
          il.add(rect.p);
          np=rect.p + data.size(rect.p,data.kind(rect.p));
        }
      }
      g.setColor(Color.black);
      g.drawRect(myx,myy,GUIProp.lenswidth << 1,GUIProp.lensheight << 1);
    }
  }
  painting=false;
}
