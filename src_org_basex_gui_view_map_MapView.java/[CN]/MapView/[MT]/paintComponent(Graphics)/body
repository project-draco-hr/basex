{
  final Data data=gui.context.data();
  if (data == null || data.meta.size == 0) {
    super.paintComponent(g);
    return;
  }
  if (mainRects == null) {
    refreshInit();
    return;
  }
  gui.painting=true;
  final boolean in=zoomStep > 0 && zoomIn;
  final Image img1=in ? zoomMap : mainMap;
  final Image img2=in ? mainMap : zoomMap;
  if (zoomStep > 0) {
    drawImage(g,img1,-zoomStep);
    drawImage(g,img2,zoomStep);
  }
 else {
    drawImage(g,mainMap,zoomStep);
  }
  if (focusedRect == null || mainRects.size() == 1 && focusedRect == mainRects.get(0)) {
    gui.painting=false;
    return;
  }
  if (GUIProp.maplayout == 0) {
    g.setColor(COLORS[32]);
    int pre=mainRects.size();
    int par=ViewData.parent(data,focusedRect.pre);
    while (--pre >= 0) {
      final ViewRect rect=mainRects.get(pre);
      if (rect.pre == par) {
        final int x=rect.x;
        final int y=rect.y;
        final int w=rect.w;
        final int h=rect.h;
        g.drawRect(x,y,w,h);
        g.drawRect(x - 1,y - 1,w + 2,h + 2);
        par=ViewData.parent(data,par);
      }
    }
  }
  if (selBox != null) {
    g.setColor(colormark3);
    g.drawRect(selBox.x,selBox.y,selBox.w,selBox.h);
    g.drawRect(selBox.x - 1,selBox.y - 1,selBox.w + 2,selBox.h + 2);
  }
 else {
    final int x=focusedRect.x;
    final int y=focusedRect.y;
    int w=focusedRect.w;
    int h=focusedRect.h;
    g.setColor(color6);
    g.drawRect(x,y,w,h);
    g.drawRect(x + 1,y + 1,w - 2,h - 2);
    if (data.kind(focusedRect.pre) == Data.ELEM) {
      g.setFont(font);
      String tt=Token.string(ViewData.tag(data,focusedRect.pre));
      if (tt.length() > 32)       tt=tt.substring(0,30) + DOTS;
      BaseXLayout.drawTooltip(g,tt,x,y,getWidth(),focusedRect.level + 5);
    }
    if (focusedRect.thumb) {
      final byte[] text=ViewData.content(gui.context.data(),focusedRect.pre,false);
      final FTTokenizer ftt=new FTTokenizer(text);
      final int[][] d=ftt.getInfo();
switch (focusedRect.thumbal) {
case 0:
        MapRenderer.drawThumbnailsToken(g,focusedRect,d,false,mouseX,mouseY);
      MapRenderer.drawToolTip(getGraphics(),mouseX,mouseY);
  }
}
if (GUIProp.mapinteraction == 1) {
  int myx, myy;
  if (mouseX - GUIProp.lenswidth < 0)   myx=0;
 else   if (mouseX + GUIProp.lenswidth > getWidth())   myx=getWidth() - (GUIProp.lenswidth << 1);
 else   myx=mouseX - GUIProp.lenswidth;
  if (mouseY - GUIProp.lensheight < 0)   myy=0;
 else   if (mouseY + GUIProp.lensheight > getHeight())   myy=getHeight() - (GUIProp.lensheight << 1);
 else   myy=mouseY - GUIProp.lensheight;
  ViewRect rectToZoom=new ViewRect(myx + GUIProp.lenswidth - GUIProp.lensareawidth,myy + GUIProp.lensheight - GUIProp.lensareaheight,GUIProp.lensareawidth << 1,GUIProp.lensareaheight << 1);
  g.setColor(Color.red);
  g.drawRect(rectToZoom.x,rectToZoom.y,rectToZoom.w,rectToZoom.h);
  int np=0;
  final IntList il=new IntList();
  for (int r=0, rl=mainRects.size(); r < rl; r++) {
    final ViewRect rect=mainRects.get(r);
    if (mainRects.get(r).pre < np)     continue;
    if (rectToZoom.contains(rect)) {
      il.add(rect.pre);
      np=rect.pre + data.size(rect.pre,data.kind(rect.pre));
    }
  }
  g.setColor(Color.black);
  g.drawRect(myx,myy,GUIProp.lenswidth << 1,GUIProp.lensheight << 1);
  w=GUIProp.lenswidth << 1;
  h=GUIProp.lensheight << 1;
  final ViewRect rect=new ViewRect(0,0,w,h,0,0);
  ArrayList<ViewRect> lensRects=new ArrayList<ViewRect>();
  final Nodes nodes=new Nodes(gui.focused,data);
  BufferedImage bi=new BufferedImage(w,h,BufferedImage.TYPE_INT_BGR);
  calc(rect,lensRects,nodes,bi);
  final int ac=AlphaComposite.SRC_OVER;
  ((Graphics2D)g).setComposite(AlphaComposite.getInstance(ac,1.0f));
  drawMap(bi,lensRects);
  g.drawImage(bi,myx,myy,this);
}
}
gui.painting=false;
}
