{
  final Data data=gui.context.data();
  if (data == null || data.meta.size == 0) {
    super.paintComponent(g);
    return;
  }
  if (mainRects == null) {
    refreshInit();
    return;
  }
  gui.painting=true;
  final boolean in=zoomStep > 0 && zoomIn;
  final Image img1=in ? zoomMap : mainMap;
  final Image img2=in ? mainMap : zoomMap;
  if (zoomStep > 0) {
    tinyh=0;
    tinyw=0;
    drawImage(g,img1,-zoomStep);
    drawImage(g,img2,zoomStep);
  }
 else {
    drawImage(g,mainMap,zoomStep);
  }
  if (focused != null && focused.pre >= data.meta.size)   focused=null;
  if (focused == null || mainRects.size == 1 && focused == mainRects.get(0)) {
    gui.painting=false;
    if (focused == null || !focused.thumb)     return;
  }
  if (GUIProp.mapoffsets == 0) {
    g.setColor(COLORS[32]);
    int pre=mainRects.size;
    int par=ViewData.parent(data,focused.pre);
    while (--pre >= 0) {
      final MapRect rect=mainRects.get(pre);
      if (rect.pre == par) {
        final int x=rect.x;
        final int y=rect.y;
        final int w=rect.w;
        final int h=rect.h;
        g.drawRect(x,y,w,h);
        g.drawRect(x - 1,y - 1,w + 2,h + 2);
        par=ViewData.parent(data,par);
      }
    }
  }
  if (selBox != null) {
    g.setColor(colormark3);
    g.drawRect(selBox.x,selBox.y,selBox.w,selBox.h);
    g.drawRect(selBox.x - 1,selBox.y - 1,selBox.w + 2,selBox.h + 2);
  }
 else {
    final int x=focused.x;
    final int y=focused.y;
    final int w=focused.w;
    final int h=focused.h;
    g.setColor(color6);
    g.drawRect(x,y,w,h);
    g.drawRect(x + 1,y + 1,w - 2,h - 2);
    BaseXLayout.antiAlias(g);
    g.setFont(font);
    if (data.kind(focused.pre) == Data.ELEM) {
      String tt=Token.string(ViewData.tag(data,focused.pre));
      if (tt.length() > 32)       tt=tt.substring(0,30) + DOTS;
      BaseXLayout.drawTooltip(g,tt,x,y,getWidth(),focused.level + 5);
    }
    if (focused != null && focused.thumb) {
      final int pre=focused.pre;
      final byte[] text=ViewData.content(data,pre,false);
      final Tokenizer ftt=new Tokenizer(text);
      final int[][] d=ftt.getInfo();
      focused.x+=3;
      focused.w-=3;
      boolean sen=false;
      boolean spc=false;
switch (focused.thumbal) {
case 0:
        sen=true;
      spc=true;
    break;
case 1:
  sen=true;
break;
case 2:
break;
}
MapRenderer.calculateThumbnailsToolTip(focused,d,sen,mouseX,mouseY,getWidth(),g,spc);
MapRenderer.drawToolTip(g,mouseX,mouseY,getX(),getY(),getHeight(),getWidth());
focused.x-=3;
focused.w+=3;
}
}
final int ac=AlphaComposite.SRC_OVER;
((Graphics2D)g).setComposite(AlphaComposite.getInstance(ac,GUIProp.zoomboxalpha / 100.0f));
if (GUIProp.mapinteraction == 1 && tinyMap != null) {
g.drawImage(tinyMap,tinyx,tinyy,tinyw,tinyh,this);
g.setColor(Color.black);
g.drawRect(tinyx,tinyy,tinyw,tinyh);
}
 else if (GUIProp.mapinteraction == 2) {
int dxstart=mouseX - GUIProp.fishw / 2;
int dxend=mouseX + GUIProp.fishw / 2;
if (dxstart < 0) {
dxstart=0;
dxend=GUIProp.fishw;
}
 else if (dxend > getWidth()) {
dxend=getWidth();
dxstart=getWidth() - GUIProp.fishw;
}
int dystart=mouseY - GUIProp.fishh / 2;
int dyend=mouseY + GUIProp.fishh / 2;
if (dystart < 0) {
dystart=0;
dyend=GUIProp.fishh;
}
 else if (dyend > getHeight()) {
dyend=getHeight();
dystart=getHeight() - GUIProp.fishh;
}
int sxstart=fkt * mouseX - GUIProp.fishw / 2;
int sxend=fkt * mouseX + GUIProp.fishw / 2;
if (sxstart < 0) {
sxstart=0;
sxend=GUIProp.fishw;
}
 else if (sxend > hugeMap.getWidth()) {
sxend=hugeMap.getWidth();
sxstart=hugeMap.getWidth() - GUIProp.fishw;
}
int systart=fkt * mouseY - GUIProp.fishh / 2;
int syend=fkt * mouseY + GUIProp.fishh / 2;
if (systart < 0) {
systart=0;
syend=GUIProp.fishh;
}
 else if (syend > hugeMap.getHeight()) {
syend=hugeMap.getHeight();
systart=hugeMap.getHeight() - GUIProp.fishh;
}
g.drawImage(hugeMap,dxstart,dystart,dxend,dyend,sxstart,systart,sxend,syend,this);
g.setColor(Color.black);
g.drawRect(dxstart,dystart,GUIProp.fishw,GUIProp.fishh);
}
gui.painting=false;
}
