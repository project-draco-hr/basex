{
  final Data data=gui.context.data();
  if (data == null || data.meta.size == 0) {
    super.paintComponent(g);
    return;
  }
  if (mainRects == null) {
    refreshInit();
    return;
  }
  gui.painting=true;
  final boolean in=zoomStep > 0 && zoomIn;
  final Image img1=in ? zoomMap : mainMap;
  final Image img2=in ? mainMap : zoomMap;
  if (zoomStep > 0) {
    drawImage(g,img1,-zoomStep);
    drawImage(g,img2,zoomStep);
  }
 else {
    drawImage(g,mainMap,zoomStep);
  }
  if (focused == null || mainRects.size() == 1 && focused == mainRects.get(0)) {
    gui.painting=false;
    return;
  }
  if (GUIProp.mapoffsets == 0) {
    g.setColor(COLORS[32]);
    int pre=mainRects.size();
    int par=ViewData.parent(data,focused.pre);
    while (--pre >= 0) {
      final MapRect rect=mainRects.get(pre);
      if (rect.pre == par) {
        final int x=rect.x;
        final int y=rect.y;
        final int w=rect.w;
        final int h=rect.h;
        g.drawRect(x,y,w,h);
        g.drawRect(x - 1,y - 1,w + 2,h + 2);
        par=ViewData.parent(data,par);
      }
    }
  }
  if (selBox != null) {
    g.setColor(colormark3);
    g.drawRect(selBox.x,selBox.y,selBox.w,selBox.h);
    g.drawRect(selBox.x - 1,selBox.y - 1,selBox.w + 2,selBox.h + 2);
  }
 else {
    final int x=focused.x;
    final int y=focused.y;
    int w=focused.w;
    int h=focused.h;
    g.setColor(color6);
    g.drawRect(x,y,w,h);
    g.drawRect(x + 1,y + 1,w - 2,h - 2);
    if (data.kind(focused.pre) == Data.ELEM) {
      g.setFont(font);
      String tt=Token.string(ViewData.tag(data,focused.pre));
      if (tt.length() > 32)       tt=tt.substring(0,30) + DOTS;
      BaseXLayout.drawTooltip(g,tt,x,y,getWidth(),focused.level + 5);
    }
    if (focused.thumb) {
      final byte[] text=ViewData.content(data,focused.pre,false);
      final FTTokenizer ftt=new FTTokenizer(text);
      final int[][] d=ftt.getInfo();
      focused.x+=3;
      focused.w-=3;
      g.setColor(Color.black);
      boolean sen=false;
      boolean spc=false;
      double sw=focused.thumbf;
switch (focused.thumbal) {
case 0:
        sen=true;
      spc=true;
    break;
case 1:
  sen=true;
break;
case 2:
break;
default :
sw=Math.max(1.5,focused.thumbf);
}
MapRenderer.calcThumbnailsToolTip(focused,d,sen,sw,mouseX,mouseY,getWidth(),g,spc);
MapRenderer.drawToolTip(g,mouseX,mouseY,getX(),getY(),getHeight(),getWidth(),focused.acol);
focused.x-=3;
focused.w+=3;
}
if (GUIProp.mapinteraction == 1) {
int myx, myy;
if (mouseX - GUIProp.lenswidth < 0) myx=0;
 else if (mouseX + GUIProp.lenswidth > getWidth()) myx=getWidth() - (GUIProp.lenswidth << 1);
 else myx=mouseX - GUIProp.lenswidth;
if (mouseY - GUIProp.lensheight < 0) myy=0;
 else if (mouseY + GUIProp.lensheight > getHeight()) myy=getHeight() - (GUIProp.lensheight << 1);
 else myy=mouseY - GUIProp.lensheight;
final MapRect rectToZoom=new MapRect(myx + GUIProp.lenswidth - GUIProp.lensareawidth,myy + GUIProp.lensheight - GUIProp.lensareaheight,GUIProp.lensareawidth << 1,GUIProp.lensareaheight << 1);
g.setColor(Color.red);
g.drawRect(rectToZoom.x,rectToZoom.y,rectToZoom.w,rectToZoom.h);
int np=0;
final IntList il=new IntList();
for (int r=0, rl=mainRects.size(); r < rl; r++) {
final MapRect rect=mainRects.get(r);
if (mainRects.get(r).pre < np) continue;
if (rectToZoom.contains(rect)) {
il.add(rect.pre);
np=rect.pre + data.size(rect.pre,data.kind(rect.pre));
}
}
g.setColor(Color.black);
g.drawRect(myx,myy,GUIProp.lenswidth << 1,GUIProp.lensheight << 1);
w=GUIProp.lenswidth << 1;
h=GUIProp.lensheight << 1;
final MapRect rect=new MapRect(0,0,w,h,0,0);
final ArrayList<MapRect> lensRects=new ArrayList<MapRect>();
final Nodes nodes=new Nodes(gui.focused,data);
final BufferedImage bi=new BufferedImage(w,h,BufferedImage.TYPE_INT_BGR);
calc(rect,lensRects,nodes,bi);
final int ac=AlphaComposite.SRC_OVER;
((Graphics2D)g).setComposite(AlphaComposite.getInstance(ac,1.0f));
drawMap(bi,lensRects);
g.drawImage(bi,myx,myy,this);
}
}
gui.painting=false;
}
