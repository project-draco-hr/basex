{
  final ValueBuilder ma=new ValueBuilder();
  final ValueBuilder oa=new ValueBuilder();
  String t=null;
  boolean ot=true;
  boolean n=false;
  for (  String c : checks) {
    final boolean o=c.endsWith("?");
    c=c.replace("?","");
    if (!c.isEmpty() && !Character.isLetter(c.charAt(0))) {
      t=c.substring(1);
      ot=o;
      n=c.charAt(0) == '<';
    }
 else {
      (o ? oa : ma).add(Str.get(c));
    }
  }
  final TokenBuilder tb=new TokenBuilder();
  tb.add("declare variable $A external;");
  tb.add("declare variable $O external;");
  tb.add(".");
  tb.add("[every $e in $A satisfies @*/name() = $e]");
  tb.add("[every $e in @* satisfies $e/name() = ($A,$O)]");
  tb.add("[every $e in @* satisfies data($e)]");
  if (t == null) {
    tb.add("[not(node())]");
  }
 else   if (!ot) {
    tb.add("[node()]");
    if (!n)     tb.add("[not(*)]");
  }
  final QueryProcessor qp=new QueryProcessor(tb.toString(),ctx).context(root);
  qp.bind("A",ma.value()).bind("O",oa.value());
  if (!qp.execute().toString().isEmpty())   return true;
  final TokenBuilder syntax=new TokenBuilder();
  final byte[] nm=((ANode)root).qname().string();
  syntax.reset().add('<').add(nm);
  for (  final Item i : ma) {
    final byte[] a=i.string(null);
    syntax.add(' ').add(a).add("=\"...\"");
  }
  for (  final Item i : oa) {
    final byte[] a=i.string(null);
    syntax.add(" (").add(a).add("=\"...\")");
  }
  if (t != null) {
    syntax.add('>');
    if (ot)     syntax.add('(');
    syntax.add('[').add(t).add(']');
    if (ot)     syntax.add(')');
    syntax.add("</").add(nm).add('>');
  }
 else {
    syntax.add("/>");
  }
  throw error(Text.SYNTAX_X,syntax);
}
