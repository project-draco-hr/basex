{
  byte[] b=c;
  if (b.length == 0)   b=DEFC;
  b=CANONICALIZATIONS.get(lc(b));
  if (b == null)   throw CX_CANINV.get(info,c);
  final String canonicalization=string(b);
  b=d;
  if (b.length == 0)   b=DEFD;
  b=DIGESTS.get(lc(b));
  if (b == null)   throw CX_DIGINV.get(info,d);
  final String digest=string(b);
  b=sig;
  if (b.length == 0)   b=DEFS;
  final byte[] tsig=b;
  b=SIGNATURES.get(lc(b));
  if (b == null)   throw CX_SIGINV.get(info,sig);
  final String signature=string(b);
  final String keytype=string(tsig).substring(0,3);
  b=t;
  if (b.length == 0)   b=DEFT;
  if (!TYPES.contains(lc(b)))   throw CX_SIGTYPINV.get(info,t);
  final byte[] type=b;
  final Item signedNode;
  try {
    final XMLSignatureFactory fac=XMLSignatureFactory.getInstance("DOM");
    final PrivateKey pk;
    final KeyInfo ki;
    if (ce != null) {
      final Document ceDOM=toDOMNode(ce);
      if (!"digital-certificate".equals(ceDOM.getDocumentElement().getNodeName()))       throw CX_INVNM.get(info,ceDOM);
      final NodeList ceChildren=ceDOM.getDocumentElement().getChildNodes();
      final int s=ceChildren.getLength();
      int ci=0;
      String ksURI=null, pkPW=null, kAlias=null, ksPW=null, ksTY=null;
      while (ci < s) {
        final Node cn=ceChildren.item(ci++);
        final String name=cn.getNodeName();
        if ("keystore-type".equals(name))         ksTY=cn.getTextContent();
 else         if ("keystore-password".equals(name))         ksPW=cn.getTextContent();
 else         if ("key-alias".equals(name))         kAlias=cn.getTextContent();
 else         if ("private-key-password".equals(name))         pkPW=cn.getTextContent();
 else         if ("keystore-uri".equals(name))         ksURI=cn.getTextContent();
      }
      final KeyStore ks;
      try {
        ks=KeyStore.getInstance(ksTY);
      }
 catch (      final KeyStoreException ex) {
        throw CX_KSNULL_X.get(info,ex);
      }
      ks.load(new FileInputStream(ksURI),ksPW.toCharArray());
      pk=(PrivateKey)ks.getKey(kAlias,pkPW.toCharArray());
      final X509Certificate x509ce=(X509Certificate)ks.getCertificate(kAlias);
      if (x509ce == null)       throw CX_ALINV_X.get(info,kAlias);
      final PublicKey puk=x509ce.getPublicKey();
      final KeyInfoFactory kifactory=fac.getKeyInfoFactory();
      final KeyValue keyValue=kifactory.newKeyValue(puk);
      final Vector<XMLStructure> kiCont=new Vector<>();
      kiCont.add(keyValue);
      final List<Object> x509Content=new ArrayList<>();
      final X509IssuerSerial issuer=kifactory.newX509IssuerSerial(x509ce.getIssuerX500Principal().getName(),x509ce.getSerialNumber());
      x509Content.add(x509ce.getSubjectX500Principal().getName());
      x509Content.add(issuer);
      x509Content.add(x509ce);
      final X509Data x509Data=kifactory.newX509Data(x509Content);
      kiCont.add(x509Data);
      ki=kifactory.newKeyInfo(kiCont);
    }
 else {
      final KeyPairGenerator gen=KeyPairGenerator.getInstance(keytype);
      gen.initialize(512);
      final KeyPair kp=gen.generateKeyPair();
      final KeyInfoFactory kif=fac.getKeyInfoFactory();
      final KeyValue kv=kif.newKeyValue(kp.getPublic());
      ki=kif.newKeyInfo(Collections.singletonList(kv));
      pk=kp.getPrivate();
    }
    final Document inputNode=toDOMNode(node);
    final List<Transform> tfList;
    if (expr.length > 0) {
      final XPathFactory xpf=XPathFactory.newInstance();
      final XPathExpression xExpr=xpf.newXPath().compile(string(expr));
      final NodeList xRes=(NodeList)xExpr.evaluate(inputNode,XPathConstants.NODESET);
      if (xRes.getLength() < 1)       throw CX_XPINV.get(info,expr);
      tfList=new ArrayList<>(2);
      tfList.add(fac.newTransform(Transform.XPATH,new XPathFilterParameterSpec(string(expr))));
      tfList.add(fac.newTransform(Transform.ENVELOPED,(TransformParameterSpec)null));
    }
 else {
      tfList=Collections.singletonList(fac.newTransform(Transform.ENVELOPED,(TransformParameterSpec)null));
    }
    final Reference ref=fac.newReference("",fac.newDigestMethod(digest,null),tfList,null,null);
    final SignedInfo si=fac.newSignedInfo(fac.newCanonicalizationMethod(canonicalization,(C14NMethodParameterSpec)null),fac.newSignatureMethod(signature,null),Collections.singletonList(ref));
    final DOMSignContext signContext;
    final XMLSignature xmlSig;
    if (eq(type,DEFT)) {
      signContext=new DOMSignContext(pk,inputNode.getDocumentElement());
      xmlSig=fac.newXMLSignature(si,ki);
    }
 else {
      final DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
      dbf.setNamespaceAware(true);
      final XMLStructure cont=new DOMStructure(inputNode.getDocumentElement());
      final XMLObject obj=fac.newXMLObject(Collections.singletonList(cont),"",null,null);
      xmlSig=fac.newXMLSignature(si,ki,Collections.singletonList(obj),null,null);
      signContext=new DOMSignContext(pk,inputNode);
    }
    if (ns.length > 0)     signContext.setDefaultNamespacePrefix(string(ns));
    xmlSig.sign(signContext);
    signedNode=NodeType.DOC.cast(inputNode,qc,null,ii);
  }
 catch (  final XPathExpressionException e) {
    throw CX_XPINV.get(info,e);
  }
catch (  final SAXException|IOException|ParserConfigurationException e) {
    throw CX_IOEXC.get(info,e);
  }
catch (  final KeyStoreException e) {
    throw CX_KSEXC.get(info,e);
  }
catch (  final MarshalException|XMLSignatureException e) {
    throw CX_SIGEXC.get(info,e);
  }
catch (  final NoSuchAlgorithmException|CertificateException e) {
    throw CX_ALGEXC.get(info,e);
  }
catch (  final UnrecoverableKeyException|KeyException e) {
    throw CX_NOKEY.get(info,e);
  }
catch (  final InvalidAlgorithmParameterException e) {
    throw CX_ALGEXC.get(info,e);
  }
  return signedNode;
}
