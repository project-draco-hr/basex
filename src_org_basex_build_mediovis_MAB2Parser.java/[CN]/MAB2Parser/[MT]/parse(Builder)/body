{
  final String dir=file.getDir();
  index(mediatypes,dir + "/mediatypes.dat");
  index(subjects,dir + "/subjects.dat");
  index(languages,dir + "/lang.dat");
  index(mvids,dir + "/mvids.dat");
  index(posters,dir + "/posters.dat");
  index(genres,dir + "/genres.dat");
  for (int i=1; i < mvids.size; i++) {
    final int id=Token.toInt(mvids.value(i));
    if (maxid < id)     maxid=id;
  }
  input=new RandomAccess(file.path());
  if (input.read() != '#' || input.read() != '#' || input.read() != '#') {
    throw new BuildException("Invalid MAB2 input (doesn't start with ###)");
  }
  b.encoding("ISO-8859-1");
  builder=b;
  builder.startDoc(token(file.name()));
  builder.startElem(LIBRARY,null);
  final Performance p=new Performance();
  final Map<MAB2Entry> ids=new Map<MAB2Entry>();
  int i=0;
  byte[] id;
  while ((id=id(input)) != null) {
    final long pos=off;
    final byte[] par=par(input);
    final boolean child=par != null;
    final byte[] key=child ? par : id;
    MAB2Entry entry=ids.get(key);
    if (entry == null) {
      entry=new MAB2Entry(key);
      ids.add(key,entry);
    }
    if (child)     entry.add(pos);
 else     entry.pos(pos);
    if (Prop.debug) {
      if (++i % 50000 == 0)       BaseX.err(" " + i + "\n");
 else       if (i % 5000 == 0)       BaseX.err("!");
 else       if (i % 1000 == 0)       BaseX.err(".");
    }
  }
  if (Prop.debug) {
    BaseX.err("\nParse Offsets (%): %/%\n",ids.size,p.getTimer(),Performance.getMem());
  }
  final int is=ids.size;
  for (i=1; i < is; i++) {
    final MAB2Entry entry=ids.value(i);
    final long pos=entry.pos;
    byte[] l=pos != 0 ? addEntry(input,pos,entry.size,null) : null;
    for (int j=0; j < entry.size; j++) {
      addEntry(input,entry.children[j],0,l);
    }
    if (entry.size != 0 && pos != 0 && !Prop.mab2flat)     builder.endElem(MEDIUM);
    if (Prop.debug) {
      if (i % 50000 == 0)       BaseX.err(" " + i + "\n");
 else       if (i % 5000 == 0)       BaseX.err("!");
 else       if (i % 1000 == 0)       BaseX.err(".");
    }
  }
  if (Prop.debug) {
    BaseX.err("\nCreate Titles: %/%\n",p.getTimer(),Performance.getMem());
  }
  builder.endElem(LIBRARY);
  builder.endDoc();
  input.close();
  final PrintOutput out=new PrintOutput(dir + "/mvids.dat");
  for (i=1; i < mvids.size; i++) {
    out.print(mvids.key(i));
    out.print('\t');
    out.println(mvids.value(i));
  }
  out.close();
}
