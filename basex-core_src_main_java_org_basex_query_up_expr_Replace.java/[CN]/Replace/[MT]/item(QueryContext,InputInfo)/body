{
  final Constr c=new Constr(ii,sc).add(qc,exprs[1]);
  if (c.errAtt != null)   throw UPNOATTRPER_X.get(info,c.errAtt);
  if (c.duplAtt != null)   throw UPATTDUPL_X.get(info,c.duplAtt);
  final Iter t=qc.iter(exprs[0]);
  final Item i=t.next();
  if (i == null)   throw UPSEQEMP_X.get(info,Util.className(this));
  final Type tp=i.type;
  if (!(i instanceof ANode) || tp == NodeType.DOC)   throw UPTRGNODE_X.get(info,i);
  final Item i2=t.next();
  if (i2 != null)   throw UPTRGSINGLE_X.get(info,ValueBuilder.concat(i,i2));
  final ANode targ=(ANode)i;
  final Updates updates=qc.updates();
  final DBNode dbn=updates.determineDataRef(targ,qc);
  final ANodeList aList=c.atts;
  ANodeList list=c.children;
  if (value) {
    final byte[] txt=list.size() < 1 ? aList.size() < 1 ? EMPTY : aList.get(0).string() : list.get(0).string();
    if (tp == NodeType.COM)     FComm.parse(txt,info);
    if (tp == NodeType.PI)     FPI.parse(txt,info);
    updates.add(new ReplaceValue(dbn.pre(),dbn.data(),info,txt),qc);
  }
 else {
    final ANode par=targ.parent();
    if (par == null)     throw UPNOPAR_X.get(info,targ);
    if (tp == NodeType.ATT) {
      if (!list.isEmpty())       throw UPWRATTR_X.get(info,list.get(0));
      list=checkNS(aList,par);
    }
 else {
      if (!aList.isEmpty())       throw UPWRELM_X_X.get(info,targ,aList.get(0));
    }
    updates.add(new ReplaceNode(dbn.pre(),dbn.data(),info,list),qc);
  }
  return null;
}
