{
  final Item it=(exprs.length == 0 ? checkCtx(qc) : exprs[0]).item(qc,info);
  final ANode node=it == null ? null : checkNode(it);
switch (func) {
case NODE_NAME:
    QNm qname=node != null ? node.qname() : null;
  return qname != null && qname.string().length != 0 ? qname : null;
case DOCUMENT_URI:
if (node == null || node.type != NodeType.DOC) return null;
final byte[] uri=node.baseURI();
return uri.length == 0 ? null : Uri.uri(uri,false);
case NILLED:
return node == null || node.type != NodeType.ELM ? null : Bln.FALSE;
case BASE_URI:
if (node == null) return null;
if (node.type != NodeType.ELM && node.type != NodeType.DOC && node.parent() == null) return null;
Uri base=Uri.EMPTY;
ANode n=node;
do {
if (n == null) return sc.baseURI().resolve(base,info);
final Uri bu=Uri.uri(n.baseURI(),false);
if (!bu.isValid()) throw FUNCAST.get(ii,bu.type,bu);
base=bu.resolve(base,info);
if (n.type == NodeType.DOC && n instanceof DBNode) break;
n=n.parent();
}
 while (!base.isAbsolute());
return base;
case NAME:
qname=node != null ? node.qname() : null;
return qname != null ? Str.get(qname.string()) : Str.ZERO;
case LOCAL_NAME:
qname=node != null ? node.qname() : null;
return qname != null ? Str.get(qname.local()) : Str.ZERO;
case NAMESPACE_URI:
qname=node != null ? node.qname() : null;
return qname != null ? Uri.uri(qname.uri(),false) : Uri.EMPTY;
case ROOT:
n=node;
while (n != null) {
final ANode p=n.parent();
if (p == null) break;
n=p;
}
return n;
case GENERATE_ID:
return node == null ? Str.ZERO : Str.get(new TokenBuilder(QueryText.ID).addInt(node.id).finish());
case HAS_CHILDREN:
return Bln.get(node != null && node.hasChildren());
case PATH:
return node != null ? path(node) : null;
default :
return super.item(qc,ii);
}
}
