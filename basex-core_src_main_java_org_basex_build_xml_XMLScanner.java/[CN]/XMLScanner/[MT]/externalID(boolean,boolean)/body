{
  byte[] cont=null;
  final boolean pub=consume(PUBLIC);
  if (pub || consume(SYSTEM)) {
    checkS();
    if (pub) {
      pubidLit();
      if (f)       checkS();
    }
    final int qu=consume();
    if (qu == '\'' || qu == '"') {
      int ch;
      final TokenBuilder tok=new TokenBuilder();
      while ((ch=nextChar()) != qu)       tok.add(ch);
      if (!f)       return null;
      final String name=string(tok.finish());
      if (!dtd && r)       return cont;
      final XMLInput tin=input;
      if (dtd) {
        try {
          cont=input.io().merge(name).read();
        }
 catch (        final IOException ex) {
          throw error(Util.message(ex));
        }
      }
 else {
        cont=new byte[0];
      }
      input=new XMLInput(new IOContent(cont,name));
      if (consume(XDECL)) {
        check(XML);
        s();
        if (version())         checkS();
        s();
        if (encoding() == null)         throw error(TEXTENC);
        ch=nextChar();
        if (s(ch))         ch=nextChar();
        if (ch != '?')         throw error(WRONGCHAR,'?',ch);
        ch=nextChar();
        if (ch != '>')         throw error(WRONGCHAR,'>',ch);
        cont=Arrays.copyOfRange(cont,input.pos(),cont.length);
      }
      s();
      if (r) {
        extSubsetDecl();
        if (!consume((char)0))         throw error(INVEND);
      }
      input=tin;
    }
 else {
      if (f)       throw error(SCANQUOTE,(char)qu);
      prev(1);
    }
  }
  return cont;
}
