{
  if (in == null) {
    final IO io=IO.get(args[1]);
    if (!io.exists())     return error(RES_NOT_FOUND_X,io);
    in=io.inputSource();
  }
  final String path=MetaData.normPath(args[0]);
  if (path == null || path.isEmpty())   return error(NO_DIR_ALLOWED_X,args[0]);
  final Data data=context.data();
  final IntList pre=data.resources.docs(path,true);
  if (!startUpdate())   return false;
  try {
    final boolean ok;
    final IOFile file=data.meta.binary(path);
    if (file != null && file.exists()) {
      final Store store=new Store(path);
      store.setInput(in);
      store.lock=false;
      ok=store.run(context) || error(store.info());
    }
 else {
      final Add add=new Add(path);
      add.setInput(in);
      add.lock=false;
      ok=add.run(context) || error(add.info());
      if (ok) {
        final AtomicUpdateCache atomics=new AtomicUpdateCache(data);
        final int ps=pre.size();
        for (int p=0; p < ps; p++)         atomics.addDelete(pre.get(p));
        atomics.execute(false);
      }
    }
    return ok && info(RES_REPLACED_X_X,1,perf);
  }
  finally {
    finishUpdate();
  }
}
