{
  if (ne - ns <= 1) {
    r.pre=l.list[ns];
    putRect(r,level);
  }
 else {
    l.initChildren(data);
    int nn=0;
    for (int i=0; i <= ne; i++) {
      nn+=l.nrchildren[i];
    }
    long parsize=data.fs != null ? addSizes(l,ns,ne) : 0;
    l.initWeights(parsize,nn,data);
    if (level == 0) {
      rectangles.addAll(new SplitAlgo().calcMap(r,l,l.weights,ns,ne,level));
    }
 else {
      ArrayList<MapRect> rects=algo.calcMap(r,l,l.weights,ns,ne,level);
      for (      MapRect rect : rects) {
        putRect(rect,rect.level);
      }
    }
  }
}
