{
  query("let $q := " + _JOBS_SCHEDULE.args(SLOW_QUERY,"()"," map{'cache':true()}") + " return ("+ _HOF_UNTIL.args(" function($r) { " + _JOBS_FINISHED.args("$q") + " },"+ "function($c) { prof:sleep(1) }, ()")+ ","+ _JOBS_RESULT.args("$q")+ ')',"1");
  String id=query(_JOBS_SCHEDULE.args(SLOW_QUERY));
  while (true) {
    try {
      eval(_JOBS_RESULT.args(id));
      fail("Result was cached.");
    }
 catch (    final QueryException ex) {
      if (ex.error() == JOBS_UNKNOWN_X)       break;
      assertSame(JOBS_RUNNING_X,ex.error());
    }
    Performance.sleep(1);
  }
  id=query(_JOBS_SCHEDULE.args(SLOW_QUERY,"()"," map{'cache':true()}"));
  while (true) {
    try {
      assertEquals("1",eval(_JOBS_RESULT.args(id)));
      break;
    }
 catch (    final QueryException ex) {
      assertSame(JOBS_RUNNING_X,ex.error());
    }
    Performance.sleep(1);
  }
  id=query(_JOBS_SCHEDULE.args("\"db:open('db')\"","()"," map{'cache':true()}"));
  while (query(_JOBS_FINISHED.args(id)).equals("false"))   Performance.sleep(1);
  error(_JOBS_RESULT.args(id),BXDB_OPEN_X);
}
