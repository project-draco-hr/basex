{
  if (nr == 0)   return;
  dirty=true;
  cursor(pre);
  int from=pre - fpre;
  final int last=pre + nr;
  if (last - 1 < npre) {
    final Buffer bf=bm.current();
    copy(bf.data,from + nr,bf.data,from,npre - last);
    updatePre(nr);
    if (npre == fpre) {
      usedPages.clear(pages[page]);
      Array.move(fpres,page + 1,-1,used - page - 1);
      Array.move(pages,page + 1,-1,used - page - 1);
      --used;
      readPage(page);
    }
    return;
  }
  int unused=0;
  while (npre < last) {
    if (from == 0) {
      ++unused;
      usedPages.clear(pages[page]);
    }
    setPage(page + 1);
    from=0;
  }
  readBlock(pages[page]);
  final Buffer bf=bm.current();
  if (npre == last) {
    usedPages.clear((int)bf.pos);
    ++unused;
    if (page < used - 1)     readPage(page + 1);
 else     ++page;
  }
 else {
    copy(bf.data,last - fpre,bf.data,0,npre - last);
  }
  if (unused > 0) {
    Array.move(fpres,page,-unused,used - page);
    Array.move(pages,page,-unused,used - page);
    used-=unused;
    page-=unused;
  }
  fpres[page]=pre;
  fpre=pre;
  updatePre(nr);
}
