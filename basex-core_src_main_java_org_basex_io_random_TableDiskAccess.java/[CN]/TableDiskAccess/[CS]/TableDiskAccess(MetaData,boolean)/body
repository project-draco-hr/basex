{
  super(md);
  final DataInput in=new DataInput(meta.dbfile(DATATBL + 'i'));
  final int b=in.readNum();
  blocks=b;
  final int u=in.readNum();
  final boolean regular=u == 0 || u == Integer.MAX_VALUE;
  if (regular) {
    used=u == 0 ? 0 : b;
    fpres=new int[b];
    pages=new int[b];
    for (int i=0; i < b; i++) {
      fpres[i]=i * IO.BLOCKSIZE >>> IO.NODEPOWER;
      pages[i]=i;
    }
  }
 else {
    used=u;
    fpres=in.readNums();
    pages=in.readNums();
  }
  if (regular) {
    freePages=new BitArray(blocks,true);
  }
 else {
    final int psize=in.readNum();
    if (psize == 0) {
      freePages=new BitArray(blocks);
      for (      final int p : pages)       freePages.set(p);
    }
 else {
      freePages=new BitArray(in.readLongs(psize),blocks);
    }
  }
  in.close();
  file=new RandomAccessFile(meta.dbfile(DATATBL).file(),"rw");
  if (lock)   exclusiveLock();
 else   sharedLock();
  if (fl == null)   throw new BaseXException(Text.DB_PINNED_X,md.name);
}
