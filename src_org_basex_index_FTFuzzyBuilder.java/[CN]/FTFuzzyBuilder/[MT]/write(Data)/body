{
  final String db=data.meta.dbname;
  final DataOutput outx=new DataOutput(db,DATAFTX + 'x');
  final DataOutput outy=new DataOutput(db,DATAFTX + 'y');
  final DataOutput outz=new DataOutput(db,DATAFTX + 'z');
  outx.write(isize);
  long dr=0;
  int c=0, tr=0;
  byte j=1;
  for (; j < tree.length && c < isize - 1; j++) {
    final FTHash tre=tree[j];
    if (tre == null)     continue;
    outx.write(j);
    outx.writeInt(tr);
    tre.init();
    while (tre.more()) {
      final int p=tre.next();
      final byte[] key=tre.key();
      for (int x=0; x != j; x++)       outy.write(key[x]);
      outy.write5(dr);
      final int ds=tre.ns[p];
      outy.writeInt(ds);
      byte[] vpre=tre.pre[p];
      byte[] vpos=tre.pos[p];
      int lpre=4;
      int lpos=4;
      int spre=Num.size(vpre);
      int spos=Num.size(vpos);
      if (data.meta.ftittr) {
        while (lpre < Num.size(vpre) && lpos < Num.size(vpos)) {
          int z=0;
          while (z < Num.len(vpre,lpre)) {
            outz.write(vpre[lpre + z++]);
          }
          lpre+=z;
          z=0;
          while (z < Num.len(vpos,lpos)) {
            outz.write(vpos[lpos + z++]);
          }
          lpos+=z;
        }
      }
 else {
        for (int z=4; z < spre; z++)         outz.write(vpre[z]);
        for (int z=4; z < spos; z++)         outz.write(vpos[z]);
      }
      dr=outz.size();
      tr=(int)outy.size();
    }
    c++;
  }
  tree=null;
  outx.write(--j);
  outx.writeInt(tr - j - 9);
  outx.close();
  outy.close();
  outz.close();
}
