{
  writeIndex(csize++);
  if (!merge)   return;
  final DataOutput outx=new DataOutput(data.meta.file(DATAFTX + 'x'));
  final DataOutput outy=new DataOutput(data.meta.file(DATAFTX + 'y'));
  final DataOutput outz=new DataOutput(data.meta.file(DATAFTX + 'z'));
  final byte[][] tok=new byte[csize][];
  final int[][] pres=new int[csize][];
  final int[][] pos=new int[csize][];
  final IntList ind=new IntList();
  final FTFuzzy[] v=new FTFuzzy[csize];
  for (int b=0; b < csize; b++) {
    v[b]=new FTFuzzy(data,b);
    tok[b]=v[b].nextTok();
    pres[b]=v[b].nextPreValues();
    pos[b]=v[b].nextPosValues();
  }
  int min;
  final IntList mer=new IntList();
  while (check(tok)) {
    min=0;
    mer.reset();
    mer.add(min);
    for (int i=0; i < csize; i++) {
      if (min == i || tok[i].length == 0)       continue;
      final int l=tok[i].length - tok[min].length;
      final int d=diff(tok[min],tok[i]);
      if (l < 0 || l == 0 && d > 0 || tok[min].length == 0) {
        min=i;
        mer.reset();
        mer.add(min);
      }
 else       if (d == 0 && tok[i].length > 0) {
        mer.add(i);
      }
    }
    if (ind.size() == 0 || ind.get(ind.size() - 2) < tok[min].length) {
      ind.add(tok[min].length);
      ind.add((int)outy.size());
    }
    outy.write(tok[min]);
    outy.write5(outz.size());
    int s=0;
    final TokenBuilder tbp=new TokenBuilder();
    final TokenBuilder tbo=new TokenBuilder();
    tbp.add(new byte[4]);
    tbo.add(new byte[4]);
    for (int j=0; j < mer.size(); j++) {
      final int m=mer.get(j);
      for (      final int p : pres[m])       tbp.add(Num.num(p));
      for (      final int p : pos[m])       tbo.add(Num.num(p));
      s+=v[m].nextFTDataSize();
      tok[m]=nextToken(v,m);
      pres[m]=tok[m].length > 0 ? v[m].nextPreValues() : new int[]{};
      pos[m]=tok[m].length > 0 ? v[m].nextPosValues() : new int[]{};
    }
    outy.writeInt(s);
    final byte[] p=tbp.finish();
    Num.size(p,p.length);
    final byte[] o=tbo.finish();
    Num.size(o,o.length);
    writeFTData(outz,p,o);
  }
  writeInd(outx,ind,ind.get(ind.size() - 2) + 1,(int)outy.size());
  outx.close();
  outy.close();
  outz.close();
  DropDB.delete(data.meta.name,DATAFTX + "\\d+." + IO.BASEXSUFFIX,data.meta.prop);
}
