{
  final String db=data.meta.name;
  final Prop pr=data.meta.prop;
  final DataOutput outx=new DataOutput(pr.dbfile(db,DATAFTX + 'x'));
  final DataOutput outy=new DataOutput(pr.dbfile(db,DATAFTX + 'y'));
  final DataOutput outz=new DataOutput(pr.dbfile(db,DATAFTX + 'z'));
  outx.write(isize);
  long dr=0;
  int tr=0;
  byte j=1;
  for (int c=0; j < tree.length && c < isize - 1; j++) {
    final FTHash tre=tree[j];
    if (tre == null)     continue;
    outx.write(j);
    outx.writeInt(tr);
    tre.init();
    while (tre.more()) {
      final int p=tre.next();
      int fc=0;
      final byte[] key=tre.key();
      for (int x=0; x != j; x++)       outy.write(key[x]);
      outy.write5(dr);
      final int ds=tre.ns[p];
      outy.writeInt(ds);
      final byte[] vpre=tre.pre[p];
      final byte[] vpos=tre.pos[p];
      int lpre=4;
      int lpos=4;
      final int pres=Num.size(vpre);
      final int poss=Num.size(vpos);
      int cn=scm == 1 ? 1 : 0;
      int lastpre=-1;
      int pre=-1;
      while (lpre < pres && lpos < poss) {
        if (scm > 0) {
          if (lastpre < pre)           fc++;
          pre=Num.read(vpre,lpre);
          while (cn < nodes.size() && nodes.get(cn) < pre)           cn++;
          if (scm == 1 && (cn < nodes.size() && nodes.get(cn - 1) < pre && nodes.get(cn) > pre || cn == nodes.size() && nodes.get(cn - 1) < pre) && pre != lastpre || scm == 2 && pre == nodes.get(cn)) {
            final int score=ScoringTokenizer.score(nodes.size(),nmbdocwt[c],maxfreq[cn - scm == 1 ? 1 : 0],freq.get(fc));
            outz.write(Num.num(-score));
            if (scm == 2) {
              fc++;
              cn++;
            }
          }
          lastpre=pre;
        }
        for (int z=0, l=Num.len(vpre,lpre); z < l; z++)         outz.write(vpre[lpre++]);
        for (int z=0, l=Num.len(vpos,lpos); z < l; z++)         outz.write(vpos[lpos++]);
      }
      dr=outz.size();
      tr=(int)outy.size();
    }
    c++;
  }
  tree=null;
  outx.write(j);
  outx.writeInt(tr);
  outx.close();
  outy.close();
  outz.close();
}
