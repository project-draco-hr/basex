{
  ctx.mprop.set(MainProp.DBPATH,sandbox().path() + "/data");
  parseArguments(args);
  init();
  final Performance perf=new Performance();
  ctx.prop.set(Prop.CHOP,false);
  ctx.prop.set(Prop.INTPARSE,false);
  ctx.prop.set(Prop.SERIALIZER,"omit-xml-declaration=no,indent=no");
  final XQuery qdoc=new XQuery("doc('" + file(false,CATALOG) + "')",ctx);
  final XdmValue doc=qdoc.value();
  final String version=asString("*:catalog/@version",doc);
  Util.outln(NL + "QT3 Test Suite " + version);
  Util.outln("Test directory: " + new File(".").getCanonicalPath());
  Util.out("Parsing queries");
  final XQuery qenv=new XQuery("*:catalog/*:environment",ctx).context(doc);
  for (  final XdmItem ienv : qenv)   genvs.add(new QT3Env(ctx,ienv));
  qenv.close();
  final XQuery qset=new XQuery("for $f in //*:test-set/@file return string($f)",ctx).context(doc);
  for (  final XdmItem it : qset)   testSet(it.getString());
  qset.close();
  qdoc.close();
  final StringBuilder result=new StringBuilder();
  result.append(" Rate    : ").append(pc(correct,tested)).append(NL);
  result.append(" Total   : ").append(total).append(NL);
  result.append(" Tested  : ").append(tested).append(NL);
  result.append(" Wrong   : ").append(tested - correct).append(NL);
  result.append(" Ignored : ").append(ignored).append(NL);
  Util.outln(NL + "Writing log file '" + testid+ ".log'...");
  final PrintOutput po=new PrintOutput(testid + ".log");
  po.println("QT3TS RESULTS __________________________" + NL);
  po.println(result.toString());
  po.println("WRONG __________________________________" + NL);
  po.print(wrong.finish());
  if (all || !single.isEmpty()) {
    po.println("CORRECT ________________________________" + NL);
    po.print(right.finish());
  }
  if (ignoring) {
    po.println("IGNORED ________________________________" + NL);
    po.print(ignore.finish());
  }
  po.close();
  if (report != null) {
    final String file="ReportingResults/results_" + Prop.NAME + "_"+ Prop.VERSION+ IO.XMLSUFFIX;
    new IOFile(file).write(report.create(ctx).toArray());
    Util.outln("Creating report '" + file + "'...");
  }
  Util.out(NL + result);
  Util.outln(" Time    : " + perf);
  if (slow != null && !slow.isEmpty()) {
    Util.outln(NL + "Slow queries:");
    for (    final Map.Entry<Long,String> l : slow.entrySet()) {
      Util.outln("- " + -(l.getKey() / 1000000) + " ms: "+ l.getValue());
    }
  }
  ctx.close();
  sandbox().delete();
}
