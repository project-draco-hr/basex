{
  parseArguments(args);
  final Performance perf=new Performance();
  new Set(Prop.CHOP,false).execute(ctx);
  new Set(Prop.INTPARSE,false).execute(ctx);
  final XQuery qdoc=new XQuery("doc(' " + path + "/"+ CATALOG+ "')",ctx);
  final XQValue doc=qdoc.value();
  final String version=asString("*:catalog/@version",doc);
  Util.outln(NL + "QT3 Test Suite " + version);
  Util.out("Parsing queries");
  final XQuery qenv=new XQuery("*:catalog/*:environment",ctx).context(doc);
  for (  final XQItem ienv : qenv)   genvs.add(new QT3Env(ctx,ienv));
  qenv.close();
  final XQuery qset=new XQuery("for $f in //*:test-set/@file return string($f)",ctx).context(doc);
  for (  final XQItem it : qset)   testSet(it.getString());
  qset.close();
  qdoc.close();
  final StringBuilder result=new StringBuilder();
  result.append(" Rate    : ").append(pc(correct,tested)).append(NL);
  result.append(" Correct : ").append(correct).append(NL);
  result.append(" Tested  : ").append(tested).append(NL);
  result.append(" Total   : ").append(total).append(NL);
  result.append(" Ignored : ").append(ignored).append(NL);
  Util.outln(NL + "Writing log file..." + NL);
  final PrintOutput po=new PrintOutput(path + "qt3ts.log");
  po.println("QT3TS RESULTS __________________________" + NL);
  po.println(result.toString());
  po.println("WRONG __________________________________" + NL);
  po.print(wrong.finish());
  if (all || !single.isEmpty()) {
    po.println("CORRECT ________________________________" + NL);
    po.print(right.finish());
  }
  if (ignoring) {
    po.println("IGNORED ________________________________" + NL);
    po.print(ignore.finish());
  }
  po.close();
  Util.out(result);
  Util.outln(" Time    : " + perf);
}
