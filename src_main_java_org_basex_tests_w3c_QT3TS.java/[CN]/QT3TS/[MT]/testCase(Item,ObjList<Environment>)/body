{
  final String name=string("@name",test);
  if (!name.startsWith(single))   return;
  final String quvalue=string("data(*:test)",test);
  final Query quexp=new Query("*:result/*[1]",test);
  final ANode expected=(ANode)quexp.next();
  final Performance perf=new Performance();
  Query qusrc=null;
  final String env=string("*:environment/@ref",test);
  for (  final Environment e : envs) {
    if (!e.name.equals(env))     continue;
    final StringList src=e.sources;
    for (int i=0, is=src.size(); i < is; i+=3) {
      final String role=src.get(i);
      if (role.isEmpty())       continue;
      if (role.equals(".")) {
        qusrc=new Query("doc('" + src.get(i + 1) + "')");
      }
    }
    break;
  }
  Query qpvalue=null;
  final Result result=new Result();
  try {
    final Value src=qusrc != null ? qusrc.value() : null;
    qpvalue=new Query(quvalue,src);
    result.value=qpvalue.value();
  }
 catch (  final QueryException ex) {
    result.exception=ex;
  }
catch (  final Throwable ex) {
    result.error=ex;
  }
  final long time=perf.getTime() / 1000000;
  if (verbose)   Util.outln(name + ": " + time+ " ms");
  final String msg=test(result,expected);
  final TokenBuilder tmp=new TokenBuilder();
  tmp.add(name).add(NL);
  tmp.add("Query : ").add(norm(quvalue)).add(NL);
  tmp.add("Result: " + norm(result.toString())).add(NL);
  if (msg == null) {
    tmp.add(NL);
    right.add(tmp.finish());
    correct++;
  }
 else {
    tmp.add("Expect: " + norm(msg)).add(NL).add(NL);
    ;
    wrong.add(tmp.finish());
  }
  if (++total % 500 == 0)   Util.out(".");
  if (qpvalue != null)   qpvalue.close();
  if (qusrc != null)   qusrc.close();
  quexp.close();
}
