{
  if (total++ % 500 == 0)   Util.out(".");
  if (!supported(test)) {
    if (ignoring)     ignore.add(asString("@name",test)).add(NL);
    ignored++;
    return;
  }
  final String name=asString("@name",test);
  if (!name.startsWith(single)) {
    if (ignoring)     ignore.add(name).add(NL);
    ignored++;
    return;
  }
  tested++;
  final XQuery qexp=new XQuery("*:result/*[1]",ctx).context(test);
  final XdmValue expected=qexp.value();
  final XQuery q=new XQuery("*:dependency[@type='spec']" + "[matches(@value,'(XQ10)([^+]|$)')]",ctx);
  if (q.context(test).next() != null)   ctx.prop.set(Prop.XQUERY3,false);
  q.close();
  QT3Env e=null;
  final XQuery qenv=new XQuery("*:environment[*]",ctx).context(test);
  final XdmValue ienv=qenv.next();
  if (ienv != null)   e=new QT3Env(ctx,ienv);
  qenv.close();
  boolean base=true;
  if (e == null) {
    final String env=asString("*:environment/@ref",test);
    if (!env.isEmpty()) {
      e=envs(envs,env);
      if (e == null) {
        e=envs(genvs,env);
        base=false;
      }
      if (e == null)       Util.errln("%: environment '%' not found.",name,env);
    }
  }
  final Performance perf=new Performance();
  final String qfile=asString("*:test/@file",test);
  String string;
  if (qfile.isEmpty()) {
    string=asString("*:test",test);
  }
 else {
    string=string(new IOFile(baseDir,qfile).read());
  }
  if (verbose)   Util.outln(name);
  final XQuery query=new XQuery(string,ctx);
  if (base)   query.baseURI(baseURI);
  final String qm="for $m in *:module return ($m/@uri, $m/@file)";
  final XQuery qmod=new XQuery(qm,ctx).context(test);
  while (true) {
    final XdmItem uri=qmod.next();
    if (uri == null)     break;
    final XdmItem file=qmod.next();
    if (file == null)     break;
    query.addModule(uri.getString(),baseDir + file.getString());
  }
  final QT3Result result=new QT3Result();
  try {
    if (e != null) {
      for (      final HashMap<String,String> ns : e.namespaces) {
        query.namespace(ns.get(PREFIX),ns.get(URI));
      }
      for (      final HashMap<String,String> par : e.params) {
        query.bind(par.get(NNAME),new XQuery(par.get(SELECT),ctx).value());
      }
      for (      final HashMap<String,String> src : e.sources) {
        final String file=file(base,src.get(FILE));
        query.addDocument(src.get(URI),file);
        final String role=src.get(ROLE);
        if (role == null)         continue;
        final Object call=Function.DOC.get(Str.get(file));
        if (role.equals("."))         query.context(call);
 else         query.bind(role,call);
      }
      for (      final HashMap<String,String> src : e.resources) {
        query.addResource(src.get(URI),file(base,src.get(FILE)),src.get(ENCODING));
      }
      query.addCollection(e.collURI,e.collSources.toArray());
      if (e.collContext) {
        query.context(Function.COLLECTION.get(Str.get(e.collURI)));
      }
      if (e.baseURI != null)       query.baseURI(e.baseURI);
      for (      final Map.Entry<QName,HashMap<String,String>> df : e.decFormats.entrySet()) {
        query.decimalFormat(df.getKey(),df.getValue());
      }
    }
    result.value=query.value();
    result.sprop=query.serializer();
  }
 catch (  final XQueryException ex) {
    result.err=ex;
    result.value=null;
  }
catch (  final Throwable ex) {
    result.error=ex;
    Util.errln("Query: " + name);
    ex.printStackTrace();
  }
  if (slow != null) {
    final long l=perf.time();
    if (l > 100000000)     slow.put(-l,name);
  }
  ctx.prop.set(Prop.XQUERY3,true);
  final String exp=test(result,expected);
  final TokenBuilder tmp=new TokenBuilder();
  tmp.add(name).add(NL);
  tmp.add(noComments(string)).add(NL);
  boolean err=result.value == null;
  String res;
  try {
    if (result.error != null) {
      res=result.error.toString();
    }
 else     if (result.err != null) {
      res=result.err.getCode() + ": " + result.err.getLocalizedMessage();
    }
 else {
      result.sprop.set(SerializerProp.S_OMIT_XML_DECLARATION,"yes");
      res=serialize(result.value,result.sprop);
    }
  }
 catch (  final XQueryException ex) {
    res=ex.getCode() + ": " + ex.getLocalizedMessage();
    err=true;
  }
catch (  final Throwable ex) {
    res="Unexpected: " + ex.toString();
    err=true;
  }
  tmp.add(err ? "Error : " : "Result: ").add(noComments(res)).add(NL);
  if (exp == null) {
    tmp.add(NL);
    right.add(tmp.finish());
    correct++;
  }
 else {
    tmp.add("Expect: " + noComments(exp)).add(NL).add(NL);
    wrong.add(tmp.finish());
  }
  if (report != null)   report.addTest(name,exp == null);
  query.close();
  qexp.close();
}
