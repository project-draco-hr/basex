{
  final String file=asString("@file",expect);
  final boolean norm=asBoolean("@normalize-space=('true','1')",expect);
  final boolean pref=asBoolean("@ignore-prefixes=('true','1')",expect);
  String exp=expect.getString();
  try {
    if (!file.isEmpty())     exp=string(new IOFile(baseDir,file).read());
    exp=normNL(exp);
    if (norm)     exp=string(norm(token(exp)));
    final String res=normNL(asString("serialize(., map{ 'indent':='no' })",value));
    if (exp.equals(res))     return null;
    final String r=normNL(asString("serialize(., map{ 'indent':='no', 'omit-xml-declaration':='no' })",value));
    if (exp.equals(r))     return null;
    String flags="'" + Mode.ALLNODES + "'";
    if (!pref)     flags+=",'" + Mode.NAMESPACES + "'";
    final String query=Function.DEEP_EQUAL_OPT.args("<X>" + exp + "</X>","<X>" + res + "</X>","(" + flags + ")");
    return asBoolean(query,expect) ? null : exp;
  }
 catch (  final IOException ex) {
    return Util.info("% (found: %)",exp,ex);
  }
}
