{
  final int[] cw=fontWidths(g.getFont());
  final int fh=(int)(1.2 * fs);
  final int ws=BaseXLayout.width(g,cw,' ');
  final Color textc=g.getColor();
  int xx=r.x;
  int yy=r.y + fh;
  final int ww=r.w;
  final Tokenizer ftt=new Tokenizer(s,null);
  int count=0;
  int pp=0;
  int ll=0;
  int ls=0;
  while (ftt.more()) {
    if (ls < ftt.sent) {
      ls++;
      if (xx + ll + BaseXLayout.width(g,cw,ftt.pm) > ww) {
        xx=r.x;
        yy+=fh;
        ll=0;
      }
      if (draw) {
        g.drawString(String.valueOf((char)ftt.pm),xx + ll - Math.max(xx,ws),yy);
      }
    }
    byte[] tok=ftt.orig();
    int wl=0;
    for (int n=0; n < tok.length; n+=cl(tok[n]))     wl+=BaseXLayout.width(g,cw,cp(tok,n));
    if (ll + wl >= ww) {
      xx=r.x;
      if (ll != 0)       yy+=fh;
      ll=0;
      if (draw && wl >= ww) {
        int twl=2 * BaseXLayout.width(g,cw,'.');
        if (twl >= ww)         return Integer.MAX_VALUE;
        int n=0;
        for (; n < tok.length; n+=cl(tok[n])) {
          final int l=BaseXLayout.width(g,cw,cp(tok,n));
          if (twl + l >= ww)           break;
          twl+=l;
        }
        tok=Arrays.copyOf(tok,n + 2);
        tok[n]='.';
        tok[n + 1]='.';
      }
    }
    if (draw) {
      g.setColor(r.pos != null && pp < r.pos.size() && count == r.pos.pos[pp] ? getFTColor(r.pos.poi[pp++]) : textc);
      g.drawString(string(tok),xx + ll,yy);
      count++;
    }
    ll+=wl + ws;
  }
  return yy - r.y;
}
