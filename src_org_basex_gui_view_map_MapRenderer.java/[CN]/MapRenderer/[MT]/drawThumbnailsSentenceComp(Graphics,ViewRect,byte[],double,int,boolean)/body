{
  final int xx=r.x;
  final int ww=r.w;
  int yy=r.y + 3;
  int wl=0;
  int ll=0;
  final FTTokenizer ftt=new FTTokenizer(s);
  final Color textc=GUIConstants.COLORS[7];
  g.setColor(textc);
  int count=-1;
  int pp=0;
  int cs=0;
  int tl;
  IntList col;
  IntList tokl;
  int cc;
  boolean m=ftt.more();
  while (m) {
    col=new IntList();
    tokl=new IntList();
    tokl.add(0);
    cc=0;
    while (cs == ftt.sent && (r.pos == null || (pp < r.pos.length && count < r.pos[pp]) || pp == r.pos.length)) {
      tl=(int)((ftt.p - ftt.s) * f);
      wl+=tl;
      count++;
      if (draw && r.pos != null && pp < r.pos.length && count == r.pos[pp]) {
        col.add(r.poi[pp++]);
        tokl.add(tl);
        tokl.list[0]+=tl;
      }
      m=ftt.more();
      if (!m)       break;
    }
    cs++;
    int l=0;
    int[] sizes=getThumbnailLength(tokl,wl);
    while (l < wl) {
      int tw=sizes[cc];
      while (ll + tw > ww) {
        if (draw) {
          if (col.size > 0)           g.setColor(thumbnailcolor[col.list[cc]]);
          g.fillRect(xx + ll,yy,ww - ll,fh);
        }
        l+=ww - ll;
        tw-=ww - ll;
        ll=0;
        yy+=fh + 1;
        if (yy + 3 >= r.y + r.h)         return yy - r.y;
      }
      if (draw) {
        if (col.size > 0)         g.setColor(thumbnailcolor[col.list[cc]]);
        g.fillRect(xx + ll,yy,tw,fh);
        g.setColor(textc);
      }
      ll+=tw;
      l+=tw;
      if (col.size > 0)       cc++;
    }
    wl=0;
  }
  return yy - r.y;
}
