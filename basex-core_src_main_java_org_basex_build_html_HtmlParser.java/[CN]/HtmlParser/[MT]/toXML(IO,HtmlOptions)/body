{
  if (READER == null)   return io;
  try {
    final TextInput ti=new TextInput(io);
    String enc=ti.encoding();
    final byte[] content=ti.content();
    final byte[] encoding=token("charset=");
    int cs=indexOf(content,encoding);
    if (cs > 0) {
      cs+=encoding.length;
      int ce=cs;
      final int cl=content.length;
      while (++ce < cl && content[ce] > 0x28)       ;
      enc=string(substring(content,cs,ce));
    }
    final InputSource is=new InputSource(new ArrayInput(content));
    is.setEncoding(Strings.supported(enc) ? Strings.normEncoding(enc) : Strings.UTF8);
    final StringWriter sw=new StringWriter();
    final XMLReader reader=(XMLReader)Reflect.get(READER);
    final Object writer=Reflect.get(WRITER,sw);
    if (opts.get(HtmlOptions.HTML)) {
      reader.setFeature("http://xml.org/sax/features/namespaces",false);
      opt(writer,HtmlOptions.METHOD.name(),"html");
      opt(writer,HtmlOptions.OMIT_XML_DECLARATION.name(),"yes");
    }
    if (opts.get(HtmlOptions.NONS))     reader.setFeature("http://xml.org/sax/features/namespaces",false);
    if (opts.get(HtmlOptions.OMIT_XML_DECLARATION))     opt(writer,HtmlOptions.OMIT_XML_DECLARATION.name(),"yes");
    if (opts.get(HtmlOptions.NOBOGONS))     reader.setFeature(FEATURES + "ignore-bogons",true);
    if (opts.get(HtmlOptions.NODEFAULTS))     reader.setFeature(FEATURES + "default-attributes",false);
    if (opts.get(HtmlOptions.NOCOLONS))     reader.setFeature(FEATURES + "translate-colons",true);
    if (opts.get(HtmlOptions.NORESTART))     reader.setFeature(FEATURES + "restart-elements",false);
    if (opts.get(HtmlOptions.IGNORABLE))     reader.setFeature(FEATURES + "ignorable-whitespace",true);
    if (opts.get(HtmlOptions.EMPTYBOGONS))     reader.setFeature(FEATURES + "bogons-empty",true);
    if (opts.get(HtmlOptions.ANY))     reader.setFeature(FEATURES + "bogons-empty",false);
    if (opts.get(HtmlOptions.NOROOTBOGONS))     reader.setFeature(FEATURES + "root-bogons",false);
    if (opts.get(HtmlOptions.NOCDATA))     reader.setFeature(FEATURES + "cdata-elements",false);
    if (opts.get(HtmlOptions.LEXICAL))     reader.setProperty("http://xml.org/sax/properties/lexical-handler",writer);
    if (opts.contains(HtmlOptions.METHOD))     opt(writer,HtmlOptions.METHOD.name(),opts.get(HtmlOptions.METHOD));
    if (opts.contains(HtmlOptions.DOCTYPE_SYSTEM))     opt(writer,HtmlOptions.DOCTYPE_SYSTEM.name(),opts.get(HtmlOptions.DOCTYPE_SYSTEM));
    if (opts.contains(HtmlOptions.DOCTYPE_PUBLIC))     opt(writer,HtmlOptions.DOCTYPE_PUBLIC.name(),opts.get(HtmlOptions.DOCTYPE_PUBLIC));
    if (opts.contains(HtmlOptions.ENCODING))     is.setEncoding(opts.get(HtmlOptions.ENCODING));
    reader.setContentHandler((ContentHandler)writer);
    reader.parse(is);
    return new IOContent(token(sw.toString()),io.name());
  }
 catch (  final SAXException ex) {
    Util.errln(ex);
    return io;
  }
}
