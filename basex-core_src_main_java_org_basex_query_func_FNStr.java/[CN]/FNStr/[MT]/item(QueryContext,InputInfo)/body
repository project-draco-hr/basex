{
  final Expr e=exprs[0];
switch (func) {
case CODEPOINTS_TO_STRING:
    return cp2str(qc.iter(e));
case COMPARE:
  Collation coll=checkColl(exprs.length == 3 ? exprs[2] : null,qc,sc);
Item it1=e.item(qc,info);
Item it2=exprs[1].item(qc,info);
if (it1 == null || it2 == null) return null;
return Int.get(Math.max(-1,Math.min(1,coll == null ? diff(checkEStr(it1),checkEStr(it2)) : coll.compare(checkStr(it1),checkStr(it2)))));
case CODEPOINT_EQUAL:
it1=e.item(qc,info);
it2=exprs[1].item(qc,info);
if (it1 == null || it2 == null) return null;
return Bln.get(eq(checkEStr(it1),checkEStr(it2)));
case STRING_JOIN:
return strjoin(qc);
case SUBSTRING:
return substr(qc);
case NORMALIZE_UNICODE:
return normuni(qc);
case UPPER_CASE:
return Str.get(uc(checkEStr(e,qc)));
case LOWER_CASE:
return Str.get(lc(checkEStr(e,qc)));
case TRANSLATE:
return trans(qc);
case ENCODE_FOR_URI:
return Str.get(uri(checkEStr(e,qc),false));
case IRI_TO_URI:
return Str.get(uri(checkEStr(e,qc),true));
case ESCAPE_HTML_URI:
return Str.get(escape(checkEStr(e,qc)));
case CONCAT:
return concat(qc);
case CONTAINS:
coll=checkColl(exprs.length == 3 ? exprs[2] : null,qc,sc);
byte[] ss=checkEStr(e,qc);
byte[] sb=checkEStr(exprs[1],qc);
return Bln.get(coll == null ? contains(ss,sb) : coll.contains(ss,sb,info));
case STARTS_WITH:
coll=checkColl(exprs.length == 3 ? exprs[2] : null,qc,sc);
ss=checkEStr(e,qc);
sb=checkEStr(exprs[1],qc);
return Bln.get(coll == null ? startsWith(ss,sb) : coll.startsWith(ss,sb,info));
case ENDS_WITH:
coll=checkColl(exprs.length == 3 ? exprs[2] : null,qc,sc);
ss=checkEStr(e,qc);
sb=checkEStr(exprs[1],qc);
return Bln.get(coll == null ? endsWith(ss,sb) : coll.endsWith(ss,sb,info));
case SUBSTRING_AFTER:
coll=checkColl(exprs.length == 3 ? exprs[2] : null,qc,sc);
ss=checkEStr(e,qc);
sb=checkEStr(exprs[1],qc);
if (coll == null) {
final int p=indexOf(ss,sb);
return p == -1 ? Str.ZERO : Str.get(substring(ss,p + sb.length));
}
return Str.get(coll.after(ss,sb,info));
case SUBSTRING_BEFORE:
coll=checkColl(exprs.length == 3 ? exprs[2] : null,qc,sc);
ss=checkEStr(e,qc);
sb=checkEStr(exprs[1],qc);
if (coll == null) {
final int p=indexOf(ss,sb);
return p == -1 ? Str.ZERO : Str.get(substring(ss,0,p));
}
return Str.get(coll.before(ss,sb,info));
default :
return super.item(qc,ii);
}
}
