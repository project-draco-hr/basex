{
  final byte[] st=syntax.commentOpen(), en=syntax.commentEnd();
  final byte[] ste=concat(st,SPACE), ene=concat(SPACE,en);
  final int sl=st.length, el=en.length, sle=ste.length, ele=ene.length;
  if (!selected()) {
    start=pos;
    end=pos;
    while (start > 0 && text[start - 1] != '\n')     --start;
    while (end < size() && text[end] != '\n')     ++end;
  }
 else   if (start > end) {
    final int s=start;
    start=end;
    end=s;
  }
  while (start < end && ws(text[start]))   ++start;
  while (end > start && ws(text[end - 1]))   --end;
  final int min=start;
  int max=end;
  if (selected() && text[max - 1] == '\n')   max--;
  final TokenBuilder tb=new TokenBuilder();
  final int mx=Math.max(min + sl,max - el), off;
  final int mxe=Math.max(min + sle,max - ele);
  if (indexOf(text,ste,min) == min && indexOf(text,ene,mxe) == mxe) {
    tb.add(text,min + sle,max - ele);
    off=-sle - ele;
  }
 else   if (indexOf(text,st,min) == min && indexOf(text,en,mx) == mx) {
    tb.add(text,min + sl,max - el);
    off=-sl - el;
  }
 else {
    tb.add(ste).add(text,min,max).add(ene);
    off=sle + ele;
  }
  final boolean added=insert(tb.finish(),min,max);
  select(min,max + off);
  return added;
}
