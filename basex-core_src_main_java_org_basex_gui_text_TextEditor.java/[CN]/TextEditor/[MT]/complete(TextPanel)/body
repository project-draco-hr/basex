{
  if (selected())   return;
  int p=pos;
  while (p > 0 && !ws(text[p - 1]))   --p;
  final String prefix=string(substring(text,p,pos));
  if (p == pos)   return;
  final LinkedHashMap<String,String> tmp=new LinkedHashMap<>();
  for (  final Map.Entry<String,String> entry : REPLACE.entrySet()) {
    final String key=entry.getKey();
    if (key.startsWith(prefix))     tmp.put(key,entry.getValue());
  }
  if (tmp.size() == 1) {
    complete(tmp.values().iterator().next(),p);
  }
 else   if (!tmp.isEmpty()) {
    final int startPos=p;
    final JPopupMenu pm=new JPopupMenu();
    final ActionListener al=new ActionListener(){
      @Override public void actionPerformed(      final ActionEvent ae){
        complete(ae.getActionCommand().replaceAll("^.*?\\] ",""),startPos);
      }
    }
;
    JMenuItem mi=new JMenuItem(Text.INPUT + Text.COLS + prefix);
    mi.setEnabled(false);
    pm.add(mi);
    for (    final Map.Entry<String,String> entry : tmp.entrySet()) {
      mi=new JMenuItem("[" + entry.getKey() + "] "+ entry.getValue());
      pm.add(mi);
      mi.addActionListener(al);
    }
    final int[] cursor=tp.rend.cursor();
    pm.show(tp,cursor[0],cursor[1]);
  }
}
