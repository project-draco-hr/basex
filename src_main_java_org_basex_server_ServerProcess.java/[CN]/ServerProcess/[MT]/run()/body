{
  log.write(this,"LOGIN " + context.user.name,OK);
  String input=null;
  running=true;
  try {
    while (running) {
      try {
        final byte b=in.readByte();
        if (b < 3) {
          query(b);
          continue;
        }
        if (b == 3) {
          create();
          continue;
        }
        input=new ByteList().add(b).add(in.content().toArray()).toString();
      }
 catch (      final IOException ex) {
        exit();
        break;
      }
      final Performance perf=new Performance();
      cmd=null;
      try {
        cmd=new CommandParser(input,context,true).parseSingle();
      }
 catch (      final QueryException ex) {
        final String msg=ex.getMessage();
        log.write(this,input,INFOERROR + msg);
        out.write(0);
        out.writeString(msg);
        send(false);
        continue;
      }
      if (cmd instanceof Exit) {
        exit();
        running=false;
        break;
      }
      cmd.startTimeout(context.prop.num(Prop.TIMEOUT));
      boolean ok=true;
      String info=null;
      try {
        cmd.execute(context,out);
        info=cmd.info();
      }
 catch (      final BaseXException ex) {
        ok=false;
        info=ex.getMessage();
        if (info.equals(PROGERR))         info=SERVERTIMEOUT;
      }
      cmd.stopTimeout();
      out.write(0);
      out.writeString(info);
      send(ok);
      final String c=cmd.toString().replace('\r',' ').replace('\n',' ');
      log.write(this,c,ok ? OK : INFOERROR + info,perf);
    }
    if (!running)     log.write(this,"LOGOUT " + context.user.name,OK);
  }
 catch (  final IOException ex) {
    log.write(this,input,INFOERROR + ex.getMessage());
    Util.stack(ex);
    exit();
  }
}
