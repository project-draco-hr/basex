{
  log.write(this,"LOGIN " + context.user.name,"OK");
  String input=null;
  try {
    while (true) {
      try {
        final byte b=in.readByte();
        if (b < ' ') {
          handle(b);
          continue;
        }
        input=new TokenBuilder().add(b).add(in.content()).toString();
      }
 catch (      final IOException ex) {
        exit();
        break;
      }
      final Performance perf=new Performance();
      cmd=null;
      try {
        cmd=new CommandParser(input,context,true).parseSingle();
      }
 catch (      final QueryException ex) {
        final String msg=ex.extended();
        log.write(this,input,INFOERROR + msg);
        out.write(0);
        out.writeString(msg);
        send(false);
        continue;
      }
      if (cmd instanceof Exit) {
        exit();
        break;
      }
      cmd.startTimeout(context.prop.num(Prop.TIMEOUT));
      final boolean ok=cmd.exec(context,out);
      final String inf=cmd.info();
      out.write(0);
      out.writeString(inf.equals(PROGERR) ? SERVERTIMEOUT : inf);
      send(ok);
      cmd.stopTimeout();
      final String pr=cmd.toString().replace('\r',' ').replace('\n',' ');
      log.write(this,pr,ok ? "OK" : INFOERROR + inf,perf);
    }
    log.write(this,"LOGOUT " + context.user.name,"OK");
  }
 catch (  final IOException ex) {
    log.write(this,input,INFOERROR + ex.getMessage());
    ex.printStackTrace();
    exit();
  }
}
