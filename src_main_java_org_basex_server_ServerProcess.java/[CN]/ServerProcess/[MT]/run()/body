{
  log.write(this,"LOGIN " + context.user.name,"OK");
  String input=null;
  try {
    while (true) {
      try {
        byte b=in.readByte();
        if (b == 0) {
          QueryProcess query=new QueryProcess(id++,out,this);
          queries.add(query);
          query.start(in.readString(),context);
          continue;
        }
 else         if (b == 1) {
          QueryProcess tmp=null;
          int t=Integer.valueOf(in.readString());
          for (          QueryProcess q : queries) {
            if (q.id == t) {
              tmp=q;
              break;
            }
          }
          if (in.readByte() == 1) {
            tmp.close();
          }
 else {
            tmp.more();
          }
          continue;
        }
        input=in.readString(b);
      }
 catch (      final IOException ex) {
        exit();
        break;
      }
      final Performance perf=new Performance();
      proc=null;
      try {
        final Proc[] procs=new CommandParser(input,context,true).parse();
        if (procs.length != 1)         throw new QueryException(SERVERPROC,procs.length);
        proc=procs[0];
      }
 catch (      final QueryException ex) {
        log.write(this,input,perf,INFOERROR + ex.extended());
        out.write(0);
        out.print(ex.extended());
        out.write(0);
        send(false);
        continue;
      }
      if (proc instanceof Exit) {
        exit();
        break;
      }
      startTimer(proc);
      final boolean ok=proc.exec(context,out);
      out.write(0);
      final String inf=proc.info();
      out.print(inf.equals(PROGERR) ? SERVERTIME : inf);
      out.write(0);
      send(ok);
      stopTimer();
      final String pr=proc.toString().replaceAll("\\r|\\n"," ");
      log.write(this,pr,ok ? "OK" : INFOERROR + inf,perf);
    }
    log.write(this,"LOGOUT " + context.user.name,"OK");
  }
 catch (  final IOException ex) {
    log.write(this,input,INFOERROR + ex.getMessage());
    ex.printStackTrace();
    exit();
  }
}
