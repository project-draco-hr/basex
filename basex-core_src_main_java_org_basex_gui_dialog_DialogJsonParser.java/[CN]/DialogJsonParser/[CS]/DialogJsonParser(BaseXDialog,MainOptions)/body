{
  super(d);
  jopts=new JsonParserOptions(opts.get(MainOptions.JSONPARSER));
  encoding=DialogExport.encoding(d,jopts.get(JsonParserOptions.ENCODING));
  final JsonFormat[] formats=JsonFormat.values();
  final int fl=formats.length - 1;
  final StringList frmts=new StringList(fl);
  for (int f=0; f < fl; f++)   frmts.add(formats[f].toString());
  format=new BaseXCombo(d,frmts.finish());
  format.setSelectedItem(jopts.get(JsonOptions.FORMAT));
  liberal=new BaseXCheckBox(LIBERAL_PARSING,JsonParserOptions.LIBERAL,jopts,d);
  escape=new BaseXCheckBox(ESCAPE_CHARS,JsonParserOptions.ESCAPE,jopts,d);
  merge=new BaseXCheckBox(MERGE_TYPES,JsonOptions.MERGE,jopts,d);
  strings=new BaseXCheckBox(INCLUDE_STRINGS,JsonOptions.STRINGS,jopts,d);
  lax=new BaseXCheckBox(LAX_NAME_CONVERSION,JsonOptions.LAX,jopts,d);
  final BaseXBack pp=new BaseXBack(new TableLayout(2,1,0,8));
  BaseXBack p=new BaseXBack(new TableLayout(2,2,8,4));
  p.add(new BaseXLabel(ENCODING + COL,true,true));
  p.add(encoding);
  p.add(new BaseXLabel(FORMAT + COL,true,true));
  p.add(format);
  pp.add(p);
  p=new BaseXBack(new TableLayout(5,1));
  p.add(liberal);
  p.add(escape);
  p.add(merge);
  p.add(strings);
  p.add(lax);
  pp.add(p);
  add(pp,BorderLayout.WEST);
  example=new TextPanel(false,d);
  add(example,BorderLayout.CENTER);
  action(true);
}
