{
  super(d);
  try {
    jopts=new JsonParserOptions(opts.get(MainOptions.JSONPARSER));
  }
 catch (  final IOException ex) {
    jopts=new JsonParserOptions();
  }
  encoding=DialogExport.encoding(d,jopts.get(JsonParserOptions.ENCODING));
  final StringList sl=new StringList();
  final JsonFormat[] formats=JsonFormat.values();
  final int fl=formats.length - 1;
  for (int f=0; f < fl; f++)   sl.add(formats[f].toString());
  format=new BaseXCombo(d,sl.toArray());
  format.setSelectedItem(jopts.get(JsonOptions.FORMAT));
  sl.reset();
  for (  final JsonSpec cs : JsonSpec.values())   sl.add(cs.toString());
  spec=new BaseXCombo(d,sl.toArray());
  spec.setSelectedItem(jopts.get(JsonOptions.SPEC));
  unescape=new BaseXCheckBox(UNESCAPE_CHARS,JsonParserOptions.UNESCAPE,jopts,d);
  merge=new BaseXCheckBox(MERGE_TYPES,JsonParserOptions.MERGE,jopts,d);
  strings=new BaseXCheckBox(INCLUDE_STRINGS,JsonParserOptions.STRINGS,jopts,d);
  lax=new BaseXCheckBox(LAX_NAME_CONVERSION,JsonOptions.LAX,jopts,d);
  BaseXBack pp=new BaseXBack(new TableLayout(2,1,0,8));
  BaseXBack p=new BaseXBack(new TableLayout(3,2,8,4));
  p.add(new BaseXLabel(ENCODING + COL,true,true));
  p.add(encoding);
  p.add(new BaseXLabel(FORMAT + COL,true,true));
  p.add(format);
  p.add(new BaseXLabel(SPECIFICATION + COL,true,true));
  p.add(spec);
  pp.add(p);
  p=new BaseXBack(new TableLayout(4,1));
  p.add(unescape);
  p.add(merge);
  p.add(strings);
  p.add(lax);
  pp.add(p);
  add(pp,BorderLayout.WEST);
  example=new Editor(false,d);
  add(example,BorderLayout.CENTER);
  action(true);
}
