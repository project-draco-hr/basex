{
switch (func) {
case _BIN_HEX:
    return hex(qc);
case _BIN_BIN:
  return bin(qc);
case _BIN_OCTAL:
return octal(qc);
case _BIN_FROM_OCTETS:
return fromOctets(qc);
case _BIN_LENGTH:
return length(qc);
case _BIN_PART:
return part(qc);
case _BIN_JOIN:
return join(qc);
case _BIN_INSERT_BEFORE:
return insertBefore(qc);
case _BIN_PAD_LEFT:
return pad(qc,true);
case _BIN_PAD_RIGHT:
return pad(qc,false);
case _BIN_FIND:
return find(qc);
case _BIN_DECODE_STRING:
return decodeString(qc);
case _BIN_ENCODE_STRING:
return encodeString(qc);
case _BIN_PACK_DOUBLE:
return packDouble(qc);
case _BIN_PACK_FLOAT:
return packFloat(qc);
case _BIN_PACK_INTEGER:
return packInteger(qc);
case _BIN_UNPACK_DOUBLE:
return Dbl.get(unpack(qc,8).getDouble());
case _BIN_UNPACK_FLOAT:
return Flt.get(unpack(qc,4).getFloat());
case _BIN_UNPACK_INTEGER:
return unpackInteger(qc,true);
case _BIN_UNPACK_UNSIGNED_INTEGER:
return unpackInteger(qc,false);
case _BIN_OR:
return bit(Bit.OR,qc);
case _BIN_XOR:
return bit(Bit.XOR,qc);
case _BIN_AND:
return bit(Bit.AND,qc);
case _BIN_NOT:
return not(qc);
case _BIN_SHIFT:
return shift(qc);
default :
return super.item(qc,ii);
}
}
