{
  if (root == -1) {
    root=n(tok,pre,-1,f);
    return root;
  }
  int n=root;
  while (true) {
    final int c=Token.diff(tok,tokens.get(n));
    if (c == 0) {
      if (f)       pres.set(Num.add(pres.get(n),pre),n);
 else {
        final int i=maps.get(Num.num(n));
        if (i < 0) {
          maps.add(Num.num(n),pres.size());
          pres.add(Num.newNum(pre));
        }
 else {
          pres.set(Num.add(pres.get(i),pre),i);
        }
      }
      return n;
    }
    int ch=c < 0 ? l(n) : r(n);
    if (ch != -1) {
      n=ch;
    }
 else {
      ch=n(tok,pre,n,f);
      if (c < 0) {
        l(n,ch);
        a(l(n));
      }
 else {
        r(n,ch);
        a(r(n));
      }
      return ch;
    }
  }
}
