{
  builder=build;
  builder.encoding(Prop.ENCODING);
  builder.meta.backingpath=mybackingpath;
  builder.meta.mountpoint=mountpoint;
  if (Prop.fuse) {
    File bs=new File(mybackingpath);
    if (!bs.mkdirs() && bs.exists())     throw new IOException(BACKINGEXISTS + mybackingpath);
  }
  builder.startDoc(token(io.name()));
  if (singlemode) {
    file(new File(io.path()).getCanonicalFile());
  }
 else {
    atts.reset();
    if (Prop.fuse) {
      atts.add(MOUNTPOINT,token(mountpoint));
      atts.add(SIZE,Token.EMPTY);
      atts.add(BACKINGSTORE,token(mybackingpath));
    }
 else {
      atts.add(MOUNTPOINT,NOTMOUNTED);
      atts.add(SIZE,Token.EMPTY);
      atts.add(BACKINGSTORE,token(fsimportpath));
    }
    builder.startElem(DEEPFS,atts);
    for (    final File f : root ? File.listRoots() : new File[]{new File(fsimportpath).getCanonicalFile()}) {
      importRootLength=f.getAbsolutePath().length();
      sizeStack[0]=0;
      parse(f);
      builder.setAttValue(preStack[0] + SIZEOFFSET,token(sizeStack[0]));
    }
    builder.endElem(DEEPFS);
  }
  builder.endDoc();
}
