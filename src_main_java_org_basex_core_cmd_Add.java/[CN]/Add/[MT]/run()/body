{
  final boolean create=context.user.perm(User.CREATE);
  final String path=args[0];
  String name=MetaData.normPath(path);
  if (name == null || name.endsWith("."))   return error(NAMEINVALID,path);
  IO io=null;
  if (in == null) {
    io=IO.get(args[1]);
    if (!io.exists())     return error(FILEWHICH,create ? io : args[1]);
    if (!name.endsWith("/") && (io.isDir() || io.isArchive()))     name+='/';
  }
  String target="";
  final int s=name.lastIndexOf('/');
  if (s != -1) {
    target=name.substring(0,s);
    name=name.substring(s + 1);
  }
  Parser parser;
  if (io != null) {
    if (!name.isEmpty())     io.name(name);
 else     if (!(io instanceof IOContent))     name=io.name();
    parser=new DirParser(io,target,prop);
  }
 else {
    parser=new SAXWrapper(new SAXSource(in),name,target,context.prop);
  }
  if (name.isEmpty())   return error(NAMEINVALID,name);
  final long fl=parser.src.length();
  boolean large=false;
  final Runtime rt=Runtime.getRuntime();
  if (fl > rt.freeMemory() / 3) {
    Performance.gc(2);
    large=fl > rt.freeMemory() / 3;
  }
  final Data data=context.data();
  final String dbname=large ? context.mprop.random(data.meta.name) : name;
  build=large ? new DiskBuilder(dbname,parser,context) : new MemBuilder(dbname,parser,context.prop);
  Data tmp=null;
  try {
    tmp=build.build();
    if (tmp.meta.size > 1) {
      data.insert(data.meta.size,-1,tmp);
      context.update();
      data.flush();
    }
    return info(parser.info() + PATHADDED,name,perf);
  }
 catch (  final IOException ex) {
    Util.debug(ex);
    return error(Util.message(ex));
  }
 finally {
    try {
      build.close();
    }
 catch (    final IOException e) {
    }
    if (tmp != null)     try {
      tmp.close();
    }
 catch (    final IOException e) {
    }
    if (large)     DropDB.drop(dbname,context.mprop);
  }
}
