{
  super(parent,CREATEADVTITLE);
  final BaseXBack p1=new BaseXBack();
  p1.setLayout(new TableLayout(7,1));
  p1.setBorder(8,8,8,8);
  final BaseXBack p=new BaseXBack();
  p.setLayout(new TableLayout(2,3,6,0));
  p.add(new BaseXLabel(CREATETITLE + ":",false,true));
  p.add(new BaseXLabel(CREATEFILTER + ":",false,true));
  p.add(new BaseXLabel(""));
  path=new BaseXTextField(GUIProp.createpath,null,this);
  path.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    final KeyEvent e){
      action(null);
    }
  }
);
  BaseXLayout.setWidth(path,240);
  p.add(path);
  filter=new BaseXTextField(Prop.createfilter,null,this);
  path.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    final KeyEvent e){
      action(null);
    }
  }
);
  BaseXLayout.setWidth(filter,54);
  p.add(filter);
  final BaseXButton button=new BaseXButton(BUTTONBROWSE,HELPBROWSE,this);
  button.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      choose(parent);
    }
  }
);
  p.add(button);
  p1.add(p);
  final BaseXLabel l=new BaseXLabel(CREATENAME,false,true);
  l.setBorder(0,0,0,0);
  p1.add(l);
  dbname=new BaseXTextField(null,this);
  dbname.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    final KeyEvent e){
      action(null);
    }
  }
);
  BaseXLayout.setWidth(dbname,300);
  p1.add(dbname);
  info=new BaseXLabel(" ");
  info.setBorder(40,0,0,0);
  p1.add(info);
  final BaseXBack p2=new BaseXBack();
  p2.setLayout(new TableLayout(9,1));
  p2.setBorder(8,8,8,8);
  intparse=new BaseXCheckBox(CREATEINTPARSE,Token.token(INTPARSEINFO),Prop.intparse,0,this);
  p2.add(intparse);
  p2.add(new BaseXLabel(INTPARSEINFO,true));
  entities=new BaseXCheckBox(CREATEENTITIES,Token.token(ENTITIESINFO),Prop.entity,0,this);
  p2.add(entities);
  dtd=new BaseXCheckBox(CREATEDTD,Token.token(DTDINFO),Prop.entity,12,this);
  p2.add(dtd);
  chop=new BaseXCheckBox(CREATECHOP,Token.token(CHOPPINGINFO),Prop.chop,0,this);
  p2.add(chop);
  p2.add(new BaseXLabel(CHOPPINGINFO,true));
  final BaseXBack p3=new BaseXBack();
  p3.setLayout(new TableLayout(10,1,0,0));
  p3.setBorder(8,8,8,8);
  txtindex=new BaseXCheckBox(INFOTEXTINDEX,Token.token(TXTINDEXINFO),Prop.textindex,0,this);
  p3.add(txtindex);
  p3.add(new BaseXLabel(TXTINDEXINFO,true));
  atvindex=new BaseXCheckBox(INFOATTRINDEX,Token.token(ATTINDEXINFO),Prop.attrindex,0,this);
  p3.add(atvindex);
  p3.add(new BaseXLabel(ATTINDEXINFO,true));
  final BaseXBack p4=new BaseXBack();
  p4.setLayout(new TableLayout(10,1,0,0));
  p4.setBorder(8,8,8,8);
  ftxindex=new BaseXCheckBox(INFOFTINDEX,Token.token(FTINDEXINFO),Prop.ftindex,0,this);
  p4.add(ftxindex);
  p4.add(new BaseXLabel(FTINDEXINFO,true));
  final String[] cb={CREATEFZ,CREATESTEM,CREATEDC,CREATECS};
  final String[] desc={FZINDEXINFO,FTSTEMINFO,FTDCINFO,FTCSINFO};
  final boolean[] val={Prop.ftfuzzy,Prop.ftstem,Prop.ftdc,Prop.ftcs};
  for (int f=0; f < ft.length; f++) {
    ft[f]=new BaseXCheckBox(cb[f],Token.token(desc[f]),val[f],0,this);
    p4.add(ft[f]);
  }
  final JTabbedPane tabs=new JTabbedPane();
  BaseXLayout.addDefaultKeys(tabs,this);
  tabs.addTab(GENERALINFO,p1);
  tabs.addTab(PARSEINFO,p2);
  tabs.addTab(INDEXINFO,p3);
  tabs.addTab(FTINFO,p4);
  set(tabs,BorderLayout.CENTER);
  buttons=BaseXLayout.okCancel(this);
  set(buttons,BorderLayout.SOUTH);
  action(null);
  finish(parent);
}
