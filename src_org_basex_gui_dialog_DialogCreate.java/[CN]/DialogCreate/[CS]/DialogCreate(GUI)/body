{
  super(main,CREATEADVTITLE);
  db=List.list(main.context);
  final Prop prop=gui.context.prop;
  final GUIProp gprop=gui.prop;
  final BaseXBack p1=new BaseXBack();
  p1.setLayout(new TableLayout(7,1));
  p1.setBorder(8,8,8,8);
  final BaseXBack p=new BaseXBack();
  p.setLayout(new TableLayout(2,3,6,0));
  p.add(new BaseXLabel(CREATETITLE + ":",false,true));
  p.add(new BaseXLabel(CREATEFILT + ":",false,true));
  p.add(new BaseXLabel(""));
  path=new BaseXTextField(gprop.get(GUIProp.CREATEPATH),null,this);
  path.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    final KeyEvent e){
      action(null);
    }
  }
);
  BaseXLayout.setWidth(path,240);
  p.add(path);
  filter=new BaseXTextField(prop.get(Prop.CREATEFILTER),null,this);
  path.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    final KeyEvent e){
      action(null);
    }
  }
);
  BaseXLayout.setWidth(filter,54);
  p.add(filter);
  final BaseXButton button=new BaseXButton(BUTTONBROWSE,HELPBROWSE,this);
  button.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      choose();
    }
  }
);
  p.add(button);
  p1.add(p);
  final BaseXLabel l=new BaseXLabel(CREATENAME,false,true);
  l.setBorder(0,0,0,0);
  p1.add(l);
  dbname=new BaseXTextField(null,this);
  dbname.setText(IO.get(gprop.get(GUIProp.CREATEPATH)).dbname());
  dbname.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    final KeyEvent e){
      action(null);
    }
  }
);
  BaseXLayout.setWidth(dbname,240);
  p1.add(dbname);
  info=new BaseXLabel(" ");
  info.setBorder(40,0,0,0);
  p1.add(info);
  final BaseXBack p2=new BaseXBack();
  p2.setLayout(new TableLayout(9,1));
  p2.setBorder(8,8,8,8);
  intparse=new BaseXCheckBox(CREATEINTPARSE,Token.token(INTPARSEINFO),prop.is(Prop.INTPARSE),0,this);
  p2.add(intparse);
  p2.add(new BaseXLabel(INTPARSEINFO,true,false));
  entities=new BaseXCheckBox(CREATEENTITIES,Token.token(ENTITIESINFO),prop.is(Prop.ENTITY),this);
  p2.add(entities);
  dtd=new BaseXCheckBox(CREATEDTD,Token.token(DTDINFO),prop.is(Prop.DTD),12,this);
  p2.add(dtd);
  chop=new BaseXCheckBox(CREATECHOP,Token.token(CHOPPINGINFO),prop.is(Prop.CHOP),0,this);
  p2.add(chop);
  p2.add(new BaseXLabel(CHOPPINGINFO,true,false));
  final BaseXBack p3=new BaseXBack();
  p3.setLayout(new TableLayout(6,1,0,0));
  p3.setBorder(8,8,8,8);
  pathindex=new BaseXCheckBox(INFOPATHINDEX,Token.token(PATHINDEXINFO),prop.is(Prop.PATHINDEX),0,this);
  p3.add(pathindex);
  p3.add(new BaseXLabel(PATHINDEXINFO,true,false));
  txtindex=new BaseXCheckBox(INFOTEXTINDEX,Token.token(TXTINDEXINFO),prop.is(Prop.TEXTINDEX),0,this);
  p3.add(txtindex);
  p3.add(new BaseXLabel(TXTINDEXINFO,true,false));
  atvindex=new BaseXCheckBox(INFOATTRINDEX,Token.token(ATTINDEXINFO),prop.is(Prop.ATTRINDEX),0,this);
  p3.add(atvindex);
  p3.add(new BaseXLabel(ATTINDEXINFO,true,false));
  final BaseXBack p4=new BaseXBack();
  p4.setLayout(new TableLayout(10,1,0,0));
  p4.setBorder(8,8,8,8);
  ftxindex=new BaseXCheckBox(INFOFTINDEX,Token.token(FTINDEXINFO),prop.is(Prop.FTINDEX),0,this);
  p4.add(ftxindex);
  p4.add(new BaseXLabel(FTINDEXINFO,true,false));
  final String[] cb={CREATEFZ,CREATESTEM,CREATECS,CREATEDC};
  final String[] desc={FZINDEXINFO,FTSTEMINFO,FTCSINFO,FTDCINFO};
  final boolean[] val={prop.is(Prop.FTFUZZY),prop.is(Prop.FTST),prop.is(Prop.FTCS),prop.is(Prop.FTDC)};
  for (int f=0; f < ft.length; f++) {
    ft[f]=new BaseXCheckBox(cb[f],Token.token(desc[f]),val[f],this);
    p4.add(ft[f]);
  }
  final BaseXTabs tabs=new BaseXTabs(this);
  tabs.addTab(GENERALINFO,p1);
  tabs.addTab(PARSEINFO,p2);
  tabs.addTab(INDEXINFO,p3);
  tabs.addTab(FTINFO,p4);
  set(tabs,BorderLayout.CENTER);
  buttons=okCancel(this);
  set(buttons,BorderLayout.SOUTH);
  action(null);
  finish(null);
}
