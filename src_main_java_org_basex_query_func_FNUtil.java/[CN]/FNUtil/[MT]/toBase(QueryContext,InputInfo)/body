{
  final long num=checkItr(expr[0],ctx), base=checkItr(expr[1],ctx);
  if (base < 2 || base > 36)   INVBASE.thrw(ii,base);
  for (int i=1, p=2; i < 6; i++, p<<=1)   if (base == p)   return toBaseFast(num,i);
  final ByteList tb=new ByteList();
  long n=num;
  if (n < 0) {
    final BigInteger[] dr=BigInteger.valueOf(n).add(MAX_ULONG).divideAndRemainder(BigInteger.valueOf(base));
    n=dr[0].longValue();
    tb.add(DIGITS[dr[1].intValue()]);
  }
 else {
    tb.add(DIGITS[(int)(n % base)]);
    n/=base;
  }
  while (n != 0) {
    tb.add(DIGITS[(int)(n % base)]);
    n/=base;
  }
  final byte[] res=tb.toArray();
  Array.reverse(res);
  return Str.get(res);
}
