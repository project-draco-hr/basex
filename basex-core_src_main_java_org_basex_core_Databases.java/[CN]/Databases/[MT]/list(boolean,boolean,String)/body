{
  final Pattern pt;
  if (name != null) {
    final String nm=REGEX.matcher(name).matches() ? IOFile.regex(name) : name.replaceAll("([" + REGEXCHARS + "])","\\\\$1");
    pt=Pattern.compile(nm,Prop.CASE ? 0 : Pattern.CASE_INSENSITIVE);
  }
 else {
    pt=null;
  }
  final IOFile[] children=gopts.dbpath().children();
  final StringList list=new StringList(children.length);
  final HashSet<String> map=new HashSet<String>(children.length);
  for (  final IOFile f : children) {
    final String fn=f.name();
    String add=null;
    if (backup && fn.endsWith(IO.ZIPSUFFIX)) {
      final String nn=ZIPPATTERN.split(fn)[0];
      if (!nn.equals(fn))       add=nn;
    }
 else     if (db && f.isDir() && fn.indexOf('.') == -1) {
      add=fn;
    }
    if (add != null && (pt == null || pt.matcher(add).matches()) && map.add(add)) {
      list.add(add);
    }
  }
  return list.sort(false);
}
