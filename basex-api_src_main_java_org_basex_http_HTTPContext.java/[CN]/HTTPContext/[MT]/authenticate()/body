{
  final byte[] address=token(req.getRemoteAddr());
  try {
    if (username == null || username.isEmpty())     throw new LoginException(NOUSERNAME);
    final User us=context.users.get(username);
    if (us == null)     throw new LoginException();
    if (auth == AuthMethod.BASIC) {
      if (password == null || !us.matches(password))       throw new LoginException();
    }
 else {
      final EnumMap<Request,String> map=HttpClient.digestHeaders(req.getHeader(AUTHORIZATION));
      final String am=map.get(Request.AUTH_METHOD);
      if (!AuthMethod.DIGEST.toString().equals(am))       throw new LoginException(DIGESTAUTH);
      String ha1=us.code(Algorithm.DIGEST,Code.HASH);
      if (Strings.eq(map.get(Request.ALGORITHM),MD5_SESS))       ha1=Strings.md5(ha1 + ':' + map.get(Request.NONCE)+ ':'+ map.get(Request.CNONCE));
      String h2=method + ':' + map.get(Request.URI);
      final String qop=map.get(Request.QOP);
      if (Strings.eq(qop,AUTH_INT))       h2+=':' + Strings.md5(params.body().toString());
      final String ha2=Strings.md5(h2);
      final StringBuilder rsp=new StringBuilder(ha1).append(':').append(map.get(Request.NONCE));
      if (Strings.eq(qop,AUTH,AUTH_INT)) {
        rsp.append(':').append(map.get(Request.NC));
        rsp.append(':').append(map.get(Request.CNONCE));
        rsp.append(':').append(qop);
      }
      rsp.append(':').append(ha2);
      if (!Strings.md5(rsp.toString()).equals(password))       throw new LoginException();
    }
    context.blocker.remove(address);
    return us;
  }
 catch (  final LoginException ex) {
    context.blocker.delay(address);
    throw ex;
  }
}
