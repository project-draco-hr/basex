{
  final byte[] address=token(req.getRemoteAddr());
  try {
    if (user == null || user.isEmpty())     throw new LoginException(INVALIDCREDS);
    final Context ctx=new Context(context(),null);
    final User us=ctx.users.get(user);
    if (us == null)     throw new LoginException();
    ctx.user(us);
    if (auth == AuthMethod.BASIC) {
      if (password == null || !us.matches(password))       throw new LoginException();
    }
 else {
      final HashMap<String,String> map=digestHeaders();
      String ha1=us.code(Algorithm.DIGEST,Code.HASH);
      if (Strings.eq(map.get(ALGORITHM),MD5_SESS))       ha1=Strings.md5(ha1 + ':' + map.get(NONCE)+ ':'+ map.get(CNONCE));
      String h2=method + ':' + map.get(URI);
      final String qop=map.get(QOP);
      if (Strings.eq(qop,AUTH_INT))       h2+=':' + Strings.md5(params.body().toString());
      final String ha2=Strings.md5(h2);
      final StringBuilder sresponse=new StringBuilder(ha1).append(':').append(map.get(NONCE));
      if (Strings.eq(qop,AUTH,AUTH_INT)) {
        sresponse.append(':').append(map.get(NC)).append(':').append(map.get(CNONCE));
        sresponse.append(':').append(qop);
      }
      sresponse.append(':').append(ha2);
      if (!Strings.md5(sresponse.toString()).equals(password))       throw new LoginException();
    }
    context.blocker.remove(address);
    return ctx;
  }
 catch (  final LoginException ex) {
    for (int d=context.blocker.delay(address); d > 0; d--)     Performance.sleep(100);
    throw ex;
  }
}
