{
  this.req=req;
  this.res=res;
  params=new HTTPParams(this);
  method=req.getMethod();
  final StringBuilder uri=new StringBuilder(req.getRequestURL());
  final String qs=req.getQueryString();
  if (qs != null)   uri.append('?').append(qs);
  context.log.write(address(),context.user(),LogType.REQUEST,'[' + method + "] "+ uri,null);
  res.setCharacterEncoding(Strings.UTF8);
  path=decode(normalize(req.getPathInfo()));
  final StaticOptions mprop=context().soptions;
  user=servlet.user != null ? servlet.user : mprop.get(StaticOptions.USER);
  password=servlet.pass != null ? servlet.pass : mprop.get(StaticOptions.PASSWORD);
  auth=servlet.auth != null ? authMethod(servlet.auth) : mprop.get(StaticOptions.AUTHMETHOD);
  final String value=req.getHeader(AUTHORIZATION);
  if (value != null) {
    if (authMethod(value.split(" ",2)[0]) == AuthMethod.BASIC) {
      final String[] cred=org.basex.util.Base64.decode(authDetails()).split(":",2);
      if (cred.length != 2)       throw new LoginException(NOCREDS);
      user=cred[0];
      password=cred[1];
    }
 else {
      final HashMap<String,String> map=digestHeaders();
      user=map.get("username");
      password=map.get("response");
      if (user == null || password == null)       throw new LoginException(NOCREDS);
    }
  }
}
