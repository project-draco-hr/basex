{
  final Prop prop=qc.context.prop;
  final int ns=N_OPT.length;
  onums=new int[ns];
  for (int o=0; o < ns; o++)   onums[o]=prop.num(N_OPT[o]);
  final int[] nnums=onums.clone();
  for (int o=0; o < ns; o++)   if (options.contains(K_N_OPT[o]))   nnums[o]=toInt(options.get(K_N_OPT[o]));
  final int bs=B_OPT.length;
  obools=new boolean[bs];
  for (int o=0; o < bs; o++)   obools[o]=prop.is(B_OPT[o]);
  final boolean[] nbools=obools.clone();
  for (int o=0; o < bs; o++)   if (options.contains(K_B_OPT[o]))   nbools[o]=eq(options.get(K_B_OPT[o]),TRUE);
  final int ss=S_OPT.length;
  ostrs=new String[ss];
  for (int o=0; o < ss; o++)   ostrs[o]=prop.get(S_OPT[o]);
  final String[] nstrs=ostrs.clone();
  for (int o=0; o < ss; o++)   if (options.contains(K_S_OPT[o]))   nstrs[o]=string(options.get(K_S_OPT[o]));
  set(prop,nnums,nbools,nstrs);
}
