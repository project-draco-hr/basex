{
  final int[] ind=new int[header.size()];
  final int sz=header.size();
  for (int s=0; s < sz; ++s) {
    for (    final TokenList e : contents) {
      ind[s]=Math.max(ind[s],e.get(s).length);
    }
    ind[s]=Math.max(ind[s],header.get(s).length);
  }
  final TokenBuilder tb=new TokenBuilder();
  for (int u=0; u < sz; ++u) {
    final byte[] s=header.get(u);
    final int is=ind[u] - s.length + DIST;
    tb.add(s);
    for (int i=0; i < is; ++i)     tb.add(' ');
  }
  tb.add(NL);
  for (int u=0; u < sz; ++u) {
    for (int i=0; i < ind[u] + (u + 1 == sz ? 0 : DIST); ++i)     tb.add('-');
  }
  tb.add(NL);
  for (  final TokenList e : contents) {
    for (int u=0; u < sz; ++u) {
      final byte[] s=e.get(u);
      final int is=ind[u] - s.length;
      if (u < align.size() && align.get(u)) {
        for (int i=0; i < is; ++i)         tb.add(' ');
        tb.add(s);
      }
 else {
        tb.add(s);
        for (int i=0; i < is; ++i)         tb.add(' ');
      }
      for (int i=0; i < DIST; ++i)       tb.add(' ');
    }
    tb.add(NL);
  }
  if (desc != null)   tb.add(NL + contents.size() + ' '+ desc+ DOT);
  return tb.finish();
}
