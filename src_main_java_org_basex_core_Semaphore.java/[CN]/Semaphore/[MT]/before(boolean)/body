{
  if (w) {
    final Lock p=new Lock(true);
synchronized (p) {
synchronized (this) {
        if (state == State.IDLE) {
          state=State.WRITE;
          return;
        }
        waiting.add(p);
      }
      try {
        p.wait();
      }
 catch (      final InterruptedException ex) {
        ex.printStackTrace();
      }
    }
  }
 else {
    Lock l=null;
synchronized (this) {
      if (state == State.IDLE) {
        state=State.READ;
        activeR++;
        return;
      }
 else       if (state == State.READ && waiting.size() == 0) {
        activeR++;
        return;
      }
      if (waiting.size() > 0 && !waiting.getLast().writer) {
        l=waiting.getLast();
        l.waitingReaders++;
      }
 else {
        l=new Lock(false);
        waiting.add(l);
      }
    }
synchronized (l) {
      try {
        l.wait();
      }
 catch (      final InterruptedException ex) {
        ex.printStackTrace();
      }
    }
  }
}
