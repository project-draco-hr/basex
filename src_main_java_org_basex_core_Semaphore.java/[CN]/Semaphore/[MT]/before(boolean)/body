{
  if (w) {
    final Lock l=new Lock(true);
synchronized (l) {
synchronized (this) {
        if (lock == 0) {
          lock=2;
          return;
        }
        waiting.add(l);
      }
      try {
        l.wait();
      }
 catch (      final InterruptedException ex) {
        ex.printStackTrace();
      }
    }
  }
 else {
synchronized (this) {
      if (lock < 2 && waiting.size() == 0) {
        lock=1;
        activeR++;
        return;
      }
    }
    Lock l=null;
    if (waiting.size() > 0 && !waiting.getLast().writer) {
      l=waiting.getLast();
      l.waitingReaders++;
    }
 else {
      l=new Lock(false);
      waiting.add(l);
    }
synchronized (l) {
      try {
        l.wait();
      }
 catch (      final InterruptedException ex) {
        ex.printStackTrace();
      }
    }
  }
}
