{
  if (w) {
    final Lock lx=new Lock(true);
synchronized (lx) {
synchronized (this) {
        if (state == State.IDLE) {
          state=State.WRITE;
          return;
        }
        waiting.add(lx);
      }
      try {
        lx.wait();
        state=State.WRITE;
      }
 catch (      final InterruptedException ex) {
        ex.printStackTrace();
      }
    }
  }
 else {
    Lock ls=null;
synchronized (this) {
      if (state != State.WRITE && waiting.size() == 0) {
        state=State.READ;
        activeR++;
        return;
      }
      if (waiting.size() > 0 && !waiting.getLast().writer) {
        ls=waiting.getLast();
        ls.waitingReaders++;
      }
 else {
        ls=new Lock(false);
        waiting.add(ls);
      }
    }
synchronized (ls) {
      try {
        ls.wait();
        if (activeR == 0) {
          state=State.READ;
          activeR=ls.waitingReaders;
        }
      }
 catch (      final InterruptedException ex) {
        ex.printStackTrace();
      }
    }
  }
}
