{
  if (w) {
    if (state == State.IDLE) {
      state=State.WRITE;
      return;
    }
    final Lock lx=new Lock(true);
synchronized (lx) {
      waiting.add(lx);
      while (!lx.valid) {
        try {
          lx.wait();
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
      state=State.WRITE;
    }
  }
 else {
    if (state != State.WRITE && waiting.size() == 0) {
      state=State.READ;
      activeR++;
      return;
    }
    final Lock ls=new Lock(false);
synchronized (ls) {
      waiting.add(ls);
      while (!ls.valid) {
        try {
          ls.wait();
        }
 catch (        final InterruptedException ex) {
          ex.printStackTrace();
        }
      }
      activeR++;
      state=State.READ;
    }
  }
}
