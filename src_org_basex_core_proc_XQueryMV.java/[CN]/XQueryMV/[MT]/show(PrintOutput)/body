{
  final XMLSerializer xml=new XMLSerializer(out,false,true);
  final Data data=context.data();
  final int bibid=data.attNameID(MAB2.BIB_ID);
  final int maxid=data.attNameID(MAB2.MAX);
  final int medid=data.tagID(MAB2.MEDIUM);
  final Nodes res=(Nodes)result;
  final int size=res.size();
  xml.openElement(MAB2.ROOT);
  xml.attribute(MAB2.HITS,Token.token(maxhits));
  xml.attribute(MAB2.MAX,Token.token(size));
  for (int i=0; i < maxhits; i++) {
    final byte[] mv=ids.key(i + 1);
    final IntList medium=ids.get(mv);
    final int max=(int)attNum(data,maxid,medium.list[0]);
    xml.openElement(MAB2.MEDIUM,MAB2.MV_ID,mv,MAB2.BIB_ID,data.attValue(bibid,medium.list[0]),MAB2.MAX,Token.token(max));
    final int par=medium.list[0];
    int pp=par + data.attSize(par,data.kind(par));
    while (pp != data.meta.size) {
      if (data.tagID(pp) == medid)       break;
      pp=xml.node(data,pp);
    }
    final int maxsubs=Math.min(medium.size,sub + 1);
    for (int s=1; s < maxsubs; s++)     xml.node(data,medium.list[s]);
    final int leftsubs=Math.min(sub,max) - maxsubs + 1;
    int m=1;
    for (int s=0; s < leftsubs; ) {
      if (m < maxsubs && medium.list[m] == pp) {
        m++;
        pp+=data.size(pp,data.kind(pp));
      }
 else {
        pp=xml.node(data,pp);
        s++;
      }
    }
    xml.closeElement();
  }
  if (maxhits != 0)   xml.closeElement();
  xml.close();
}
