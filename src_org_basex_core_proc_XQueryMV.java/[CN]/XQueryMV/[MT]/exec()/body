{
  hits=Token.toInt(args[0]);
  sub=Token.toInt(args[1]);
  final String query=args[2] + "[position() <= " + hits * sub + "]";
  long fini=0;
  QueryProcessor qu=null;
  final int runs=prop.num(Prop.RUNS);
  try {
    for (int i=0; i < runs; i++) {
      qu=new QueryProcessor(query,context);
      progress(qu);
      qu.parse();
      pars+=per.getTime();
      qu.compile();
      comp+=per.getTime();
      result=qu.queryNodes();
      eval+=per.getTime();
      final Nodes ns=(Nodes)result;
      result=new Nodes(ns.nodes,ns.data);
      final Data data=context.data();
      final int medid=data.tagID(MAB2.MEDIUM);
      final int mvid=data.attNameID(MAB2.MV_ID);
      final Nodes res=(Nodes)result;
      final int[] pres=res.nodes;
      final int size=res.size();
      ids=new IDSet();
      for (int n=0; n < size; n++) {
        int pre=data.parent(pres[n],data.kind(pres[n]));
        final boolean s=data.tagID(pre) == medid;
        if (!s)         pre=pres[n];
        final byte[] id=data.attValue(mvid,pre);
        if (s) {
          ids.index(id,pre,pres[n]);
        }
 else {
          ids.index(id,pre);
        }
        if (ids.size() == hits)         break;
      }
      maxhits=ids.size();
      fini+=per.getTime();
    }
    execInfo();
    return info(QUERYFINISH + Performance.getTimer(fini,runs));
  }
 catch (  final Exception ex) {
    BaseX.debug(ex);
    return error(ex.getMessage());
  }
}
