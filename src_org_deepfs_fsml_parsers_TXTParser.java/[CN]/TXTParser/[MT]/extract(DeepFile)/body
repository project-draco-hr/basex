{
  final BufferedFileChannel bfc=deepFile.getBufferedFileChannel();
  if (deepFile.fsmeta) {
    if (!check(bfc))     return;
    deepFile.setFileType(FileType.TEXT);
    final String name=bfc.getFileName();
    final String suf=name.substring(name.lastIndexOf('.') + 1).toLowerCase();
    MimeType mime=SUFFIXES.get(suf);
    if (mime == null)     mime=MimeType.UNKNOWN;
    deepFile.setFileFormat(mime);
  }
  if (deepFile.fscont) {
    if (bfc.getFileName().endsWith(".emlxpart"))     return;
    final int len=(int)Math.min(bfc.size(),deepFile.fstextmax);
    final TokenBuilder content=new TokenBuilder(len);
    final int bufSize=bfc.getBufferSize();
    int remaining=len;
    while (remaining > 0) {
      int bytesToRead=remaining > bufSize ? bufSize : remaining;
      remaining-=bytesToRead;
      final boolean res=bfc.buffer(bytesToRead);
      assert res;
      while (bytesToRead-- > 0) {
        final int b=bfc.get();
        if (b >= 0 && b < ' ' && !ws(b))         return;
        if (b <= 0x7F) {
          content.add((byte)b);
        }
 else {
          final int followingBytes;
          if (b >= 0xC2 && b <= 0xDF) {
            followingBytes=1;
          }
 else           if (b >= 0xE0 && b <= 0xEF) {
            followingBytes=2;
          }
 else           if (b >= 0xF0 && b <= 0xF4) {
            followingBytes=3;
          }
 else {
            return;
          }
          if (bytesToRead < followingBytes) {
            if (remaining + bytesToRead < followingBytes) {
              content.chop();
              deepFile.addText(0,len - remaining - bytesToRead,content);
              return;
            }
            remaining+=bytesToRead;
            bytesToRead=remaining > bufSize ? bufSize : remaining;
            remaining-=bytesToRead;
            bfc.buffer(bytesToRead);
          }
          content.add((byte)b);
          bytesToRead-=followingBytes;
          for (int i=0; i < followingBytes; i++) {
            final int b2=bfc.get();
            if (b2 < 0x80 || b2 > 0xBF)             return;
            content.add((byte)b2);
          }
        }
      }
    }
    content.chop();
    deepFile.addText(0,len,content);
  }
}
