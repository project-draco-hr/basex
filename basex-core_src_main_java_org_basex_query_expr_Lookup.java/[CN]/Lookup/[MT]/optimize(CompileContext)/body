{
  if (exprs.length != 2)   return this;
  final Expr ks=exprs[0], fs=exprs[1];
  if (ks.isValue() && (fs instanceof Map || fs instanceof Array)) {
    return optPre(value(cc.qc),cc);
  }
  final Type tp=fs.seqType().type;
  final boolean map=tp instanceof MapType, array=tp instanceof ArrayType;
  if (!map && !array)   return this;
  final boolean oneInput=fs.size() == 1 || fs.seqType().one();
  SeqType rt=((FuncType)tp).type;
  if (rt != null) {
    if (map && !rt.mayBeZero())     rt=rt.withOcc(rt.one() ? Occ.ZERO_ONE : Occ.ZERO_MORE);
    if (ks == Str.WC || !oneInput)     rt=rt.withOcc(rt.mayBeZero() ? Occ.ZERO_MORE : Occ.ONE_MORE);
    seqType=rt;
  }
  if (ks != Str.WC) {
    if (oneInput) {
      final Expr opt=ks.size() == 1 || ks.seqType().one() ? new DynFuncCall(info,cc.sc(),fs,ks).optimize(cc) : cc.function(Function.FOR_EACH,info,exprs);
      return optPre(opt,cc);
    }
    if (ks.isValue()) {
      final LinkedList<Clause> clauses=new LinkedList<>();
      final Var f=cc.vs().addNew(new QNm("f"),null,false,cc.qc,info);
      clauses.add(new For(f,null,null,fs,false));
      final Var k=cc.vs().addNew(new QNm("k"),null,false,cc.qc,info);
      clauses.add(new For(k,null,null,ks,false));
      final VarRef rf=new VarRef(info,f), rk=new VarRef(info,k);
      final DynFuncCall ret=new DynFuncCall(info,cc.sc(),rf,rk);
      return optPre(new GFLWOR(info,clauses,ret),cc).optimize(cc);
    }
  }
  return this;
}
