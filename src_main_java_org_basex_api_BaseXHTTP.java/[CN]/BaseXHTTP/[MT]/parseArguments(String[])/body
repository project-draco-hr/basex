{
  final Args arg=new Args(args,this,HTTPINFO,Util.info(CONSOLE,HTTP));
  final Context ctx=HTTPSession.context();
  boolean daemon=false, local=false, client=false;
  while (arg.more()) {
    if (arg.dash()) {
switch (arg.next()) {
case 'c':
        System.setProperty(DBMODE,CLIENT);
      client=true;
    break;
case 'd':
  ctx.mprop.set(MainProp.DEBUG,true);
break;
case 'D':
daemon=true;
break;
case 'e':
ctx.mprop.set(MainProp.EVENTPORT,arg.num());
break;
case 'h':
ctx.mprop.set(MainProp.HTTPPORT,arg.num());
break;
case 'l':
System.setProperty(DBMODE,LOCAL);
local=true;
break;
case 'n':
ctx.mprop.set(MainProp.HOST,arg.string());
break;
case 'p':
final int p=arg.num();
ctx.mprop.set(MainProp.PORT,p);
ctx.mprop.set(MainProp.SERVERPORT,p);
break;
case 'R':
rest=false;
break;
case 'P':
System.setProperty(DBPASS,arg.string());
break;
case 's':
service=!daemon;
break;
case 'U':
System.setProperty(DBUSER,arg.string());
break;
case 'W':
webdav=false;
break;
case 'z':
quiet=true;
break;
default :
arg.usage();
}
}
 else {
if (arg.string().equalsIgnoreCase("stop")) {
stopped=true;
}
 else {
arg.usage();
}
}
}
if (local && client) {
Util.errln(INVMODE);
arg.usage();
}
}
