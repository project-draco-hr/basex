{
  if (ne - ns == 1) {
    ArrayList<MapRect> rects=new ArrayList<MapRect>();
    rects.add(new MapRect(r,l.list[ns],0));
    return rects;
  }
 else {
    ArrayList<MapRect> rects=new ArrayList<MapRect>();
    long nn, ln;
    int ni;
    nn=ne - ns;
    ln=nn >> 1;
    ni=(int)(ns + ln);
    boolean v=r.w > r.h;
    int xx=r.x;
    int yy=r.y;
    int ww=!v ? r.w : (int)(r.w * ln / nn);
    int hh=v ? r.h : (int)(r.h * ln / nn);
    if (ww > 0 && hh > 0)     rects.addAll(splitUniformly(new MapRect(xx,yy,ww,hh,0,r.level),l,ns,ni));
    if (v) {
      xx+=ww;
      ww=r.w - ww;
    }
 else {
      yy+=hh;
      hh=r.h - hh;
    }
    if (ww > 0 && hh > 0)     rects.addAll(splitUniformly(new MapRect(xx,yy,ww,hh,0,r.level),l,ni,ne));
    return rects;
  }
}
