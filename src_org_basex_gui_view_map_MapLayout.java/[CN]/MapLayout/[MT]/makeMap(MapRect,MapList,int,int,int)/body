{
  if (ne - ns <= 1) {
    r.pre=l.list[ns];
    putRect(r,level);
  }
 else {
    final long parsize=data.fs != null ? addSizes(l,ns,ne) : 0;
    int nn;
    ArrayList<MapRect> rects;
    if (level == 0) {
      System.out.println(l.toString());
      nn=0;
      for (int i=0; i < l.size; i++) {
        nn+=data.size(l.list[i],data.kind(l.list[i]));
        System.out.print(data.size(l.list[i],data.kind(l.list[i])) + ";");
      }
      l.initWeights(parsize,nn,data);
      final MapAlgo tmp=new SplitAlgo();
      rects=tmp.calcMap(r,l,l.weight,ns,ne,level);
    }
 else {
      nn=l.list[ne] - l.list[ns];
      if (GUIProp.usetextlength) {
        l.initWeights(textLen,nn);
      }
 else       l.initWeights(parsize,nn,data);
      rects=algo.calcMap(r,l,l.weight,ns,ne,level);
    }
    for (    final MapRect rect : rects)     putRect(rect,rect.level);
  }
}
