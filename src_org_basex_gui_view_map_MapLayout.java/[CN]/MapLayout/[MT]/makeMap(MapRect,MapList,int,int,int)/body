{
  if (ne - ns <= 1) {
    r.pre=l.list[ns];
    putRect(r,level);
  }
 else {
    final long parsize=data.fs != null ? addSizes(l,ns,ne) : 0;
    int nn;
    ArrayList<MapRect> rects;
    if (level == 0) {
      nn=l.list[ne - 1] - l.list[ns] + data.size(l.list[ne - 1],data.kind(l.list[ne - 1]));
      l.initWeights(parsize,nn,data);
      final MapAlgo tmp=new SplitAlgo();
      rects=tmp.calcMap(r,l,l.weight,ns,ne,level);
    }
 else {
      nn=l.list[ne] - l.list[ns];
      l.initWeights(parsize,nn,data);
      rects=algo.calcMap(r,l,l.weight,ns,ne,level);
    }
    for (    final MapRect rect : rects)     putRect(rect,rect.level);
  }
}
