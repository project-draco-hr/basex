{
  final Value value=exprs[0].value(qc);
  Collation coll=sc.collation;
  if (exprs.length > 1) {
    final byte[] token=toEmptyToken(exprs[1],qc);
    if (token.length > 0)     coll=Collation.get(token,qc,sc,info,WHICHCOLL_X);
  }
  final long sz=value.size();
  final ValueList vl=new ValueList((int)Math.min(Integer.MAX_VALUE,sz));
  if (exprs.length > 1) {
    final FItem key=checkArity(exprs[2],1,qc);
    for (    final Item it : value)     vl.add(key.invokeValue(qc,info,it));
  }
 else {
    for (    final Item it : value)     vl.add(it.atomValue(info));
  }
  final Integer[] order=sort(vl,this,coll);
  return new ValueIter(){
    int c;
    @Override public Item get(    final long i){
      return value.itemAt(order[(int)i]);
    }
    @Override public Item next(){
      return c < sz ? get(c++) : null;
    }
    @Override public long size(){
      return sz;
    }
    @Override public Value value(){
      final ValueBuilder vb=new ValueBuilder();
      for (int r=0; r < sz; r++)       vb.add(get(r));
      return vb.value();
    }
  }
;
}
