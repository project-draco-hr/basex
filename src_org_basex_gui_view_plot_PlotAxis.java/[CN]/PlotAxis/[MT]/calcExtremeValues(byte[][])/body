{
  min=Integer.MAX_VALUE;
  max=Integer.MIN_VALUE;
  for (int i=0; i < vals.length; i++) {
    if (vals[i].length < 1)     continue;
    double d=toDouble(vals[i]);
    if (d < min)     min=d;
    if (d > max)     max=d;
  }
  double range=Math.abs(max - min);
  if (range == 0)   return;
  if (range < 1) {
    double dec=1.0d / range;
    double pow=(int)(Math.floor(Math.log10(dec) + .5d) + 1) * 2;
    double fac=(int)(Math.pow(10,pow));
    double tmin=min * fac;
    double tmax=max * fac;
    range=Math.abs(tmax - tmin);
    final double d=tmin + range * .55d;
    pow=range < 10 ? 0 : (int)(Math.floor(Math.log10(range) + .5d)) - 1;
    double lstep=(int)(Math.pow(10,pow));
    sigVal=d - d % lstep;
    sigVal/=fac;
    lstep/=fac;
    calculatedCaptionStep=lstep;
    return;
  }
  final int pow=range < 10 ? 0 : (int)(Math.floor(Math.log10(range) + .5d)) - 1;
  double lstep=(int)(Math.pow(10,pow));
  final double d=min + range * .6d;
  sigVal=d - d % lstep;
  calculatedCaptionStep=lstep;
}
