{
  if (rows == 0 && pre == id && id - c == baseid + 1) {
    baseid+=c;
    return;
  }
  int inc=c;
  int oid=id;
  if (rows > 0) {
    final int pre1=pre;
    final int pre2=pre - c - 1;
    int i1=findPre(pre1);
    int i2=-c > 1 ? findPre(pre2) : i1;
    final boolean found1=i1 >= 0;
    final boolean found2=i2 >= 0;
    if (!found1)     i1=-i1 - 1;
    if (!found2)     i2=-i2 - 1;
    if (i1 >= rows) {
      add(i1,pre,-1,-1,incs[i1 - 1] + inc,oid);
      return;
    }
    final int min1=pres[i1];
    final int max1=pres[i1] + nids[i1] - fids[i1];
    final int min2;
    final int max2;
    if (i2 >= rows) {
      min2=max2=pre2 + 1;
    }
 else {
      min2=pres[i2];
      max2=pres[i2] + nids[i2] - fids[i2];
    }
    for (int k=found2 ? i2 + 1 : i2; k < rows; ++k) {
      pres[k]+=c;
      incs[k]+=c;
    }
    if (i1 == i2) {
      if (pre1 <= min1) {
        if (pre2 == max2) {
          if (i2 + 1 < rows && pres[i2 + 1] == pre) {
            remove(i1,i2);
          }
 else {
            incs[i2]+=c;
            pres[i2]=pre;
            fids[i2]=-1;
            nids[i2]=-1;
          }
        }
 else         if (min2 <= pre2 && pre2 < max2) {
          incs[i2]+=c;
          pres[i2]=pre;
          fids[i2]+=pre2 - min2 + 1;
        }
 else         if (pre2 < min2 - 1) {
          add(i1,pre,-1,-1,i1 > 0 ? incs[i1 - 1] + c : c,oid);
        }
      }
 else       if (min1 < pre1) {
        if (min2 < pre2 && pre2 < max2) {
          final int fid=fids[i2] + pre2 - min2 + 1;
          add(i2 + 1,pre2 + c + 1,fid,nids[i2],incs[i1] + c,oids[i2]);
        }
        final int s=max1 - pre1 + 1;
        nids[i1]-=s;
        incs[i1]-=s;
      }
    }
 else     if (i1 < i2) {
      if (pre1 <= min1) {
        if (pre2 == max2) {
          if (i2 + 1 < rows && pres[i2 + 1] == pre) {
            remove(i1,i2);
          }
 else {
            incs[i2]+=c;
            pres[i2]=pre;
            fids[i2]=-1;
            nids[i2]=-1;
            remove(i1,i2 - 1);
          }
        }
 else         if (min2 <= pre2 && pre2 < max2) {
          incs[i2]+=c;
          pres[i2]=pre;
          fids[i2]+=pre2 - min2 + 1;
          remove(i1,i2 - 1);
        }
 else         if (pre2 < min2) {
          if (i2 < rows && pres[i2] == pre) {
            remove(i1,--i2);
          }
 else {
            incs[--i2]+=c;
            pres[i2]=pre;
            fids[i2]=-1;
            nids[i2]=-1;
            remove(i1,i2 - 1);
          }
        }
      }
 else       if (min1 < pre1) {
        if (pre2 == max2) {
          inc+=incs[i2];
          oid=oids[i2];
          remove(i1 + 1,i2);
          nids[i1]-=max1 - pre1 + 1;
          incs[i1]=inc;
          oids[i1]=oid;
        }
 else         if (min2 <= pre2 && pre2 < max2) {
          fids[i2]+=pre2 - min2 + 1;
          incs[i2]+=c;
          pres[i2]=pre;
          remove(i1 + 1,i2 - 1);
          final int s=max1 - pre1 + 1;
          nids[i1]-=s;
          incs[i1]-=s;
        }
 else         if (pre2 < min2) {
          incs[i1]=incs[i2 - 1] + c;
          remove(i1 + 1,i2 - 1);
          final int s=max1 - pre1 + 1;
          nids[i1]-=s;
        }
      }
    }
  }
 else {
    add(0,pre,-1,-1,inc,oid);
  }
}
