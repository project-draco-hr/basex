{
  final byte[] data=new byte[IO.BLOCKSIZE];
  for (ANode node; (node=ai.next()) != null; ) {
    final QNm mode=node.qname();
    final boolean dir=mode.eq(Q_DIR);
    if (!dir && !mode.eq(Q_ENTRY))     ZIP_UNKNOWN.thrw(info,mode);
    String name=attribute(node,NAME,false);
    String src=attribute(node,SRC,false);
    if (src != null)     src=src.replaceAll("\\\\","/");
    if (name == null) {
      if (src == null)       throw ZIP_INVALID.thrw(info,node.qname(),SRC);
      name=src;
    }
    name=name.replaceAll(".*/","");
    if (dir)     name+='/';
    zos.putNextEntry(new ZipEntry(root + name));
    if (dir) {
      create(zos,node.children(),root + name,zf,ctx);
    }
 else {
      if (src != null) {
        if (!new IOFile(src).exists())         ZIP_NOTFOUND.thrw(info,src);
        BufferedInputStream bis=null;
        try {
          bis=new BufferedInputStream(new FileInputStream(src));
          for (int c; (c=bis.read(data)) != -1; )           zos.write(data,0,c);
        }
  finally {
          if (bis != null)           try {
            bis.close();
          }
 catch (          final IOException ignored) {
          }
        }
      }
 else {
        final AxisIter ch=node.children();
        final String m=attribute(node,METHOD,false);
        ANode n=ch.next();
        ZipEntry ze=null;
        if (zf != null && n == null)         ze=zf.getEntry(root + name);
        if (ze != null) {
          final InputStream zis=zf.getInputStream(ze);
          for (int c; (c=zis.read(data)) != -1; )           zos.write(data,0,c);
        }
 else         if (n != null) {
          final boolean hex=M_HEX.equals(m);
          if (hex || M_BASE64.equals(m)) {
            final ByteList bl=new ByteList();
            do             bl.add(n.string());
 while ((n=ch.next()) != null);
            final byte[] bytes=bl.toArray();
            zos.write((hex ? new Hex(bytes) : new B64(bytes)).toJava());
          }
 else {
            try {
              final Serializer ser=Serializer.get(zos,serPar(node));
              do {
                ser.serialize(DataBuilder.stripNS(n,ZIPURI,ctx.context));
              }
 while ((n=ch.next()) != null);
              ser.close();
            }
 catch (            final QueryIOException ex) {
              throw ex.getCause(info);
            }
          }
        }
      }
      zos.closeEntry();
    }
  }
}
