{
  final FElem suite=new FElem(TESTSUITE).add(NAME,file.url());
  final ArrayList<StaticFunc> beforeModule=new ArrayList<>(0);
  final ArrayList<StaticFunc> afterModule=new ArrayList<>(0);
  final ArrayList<StaticFunc> before=new ArrayList<>(0);
  final ArrayList<StaticFunc> after=new ArrayList<>(0);
  final ArrayList<QNm> beforeFilter=new ArrayList<>();
  final ArrayList<QNm> afterFilter=new ArrayList<>();
  final ArrayList<StaticFunc> test=new ArrayList<>(0);
  final Performance perf=new Performance();
  try (final QueryContext qc=new QueryContext(ctx)){
    input=string(file.read());
    qc.parse(input,file.path(),null);
    for (    final StaticFunc sf : qc.funcs.funcs()) {
      final int as=sf.ann.size();
      boolean xq=false;
      for (int a=0; !xq && a < as; a++) {
        xq|=eq(sf.ann.names[a].uri(),QueryText.UNIT_URI);
      }
      if (!xq)       continue;
      if (sf.ann.contains(Ann.Q_PRIVATE))       throw UNIT_PRIVATE_X.get(null,sf.name.local());
      if (sf.args.length > 0)       throw UNIT_ARGS_X.get(null,sf.name.local());
      if (indexOf(sf,BEFORE_MODULE) != -1)       beforeModule.add(sf);
      if (indexOf(sf,AFTER_MODULE) != -1)       afterModule.add(sf);
      int i=indexOf(sf,BEFORE);
      if (i != -1) {
        before.add(sf);
        beforeFilter.add(name(sf,i));
      }
      i=indexOf(sf,AFTER);
      if (i != -1) {
        after.add(sf);
        afterFilter.add(name(sf,i));
      }
      if (indexOf(sf,TEST) != -1)       test.add(sf);
    }
    for (    final StaticFunc sf : beforeModule)     eval(sf);
    for (    final StaticFunc sf : test) {
      final Value values=sf.ann.values[indexOf(sf,TEST)];
      final long vs=values.size();
      byte[] code=null;
      if (vs != 0) {
        if (vs == 2 && eq(EXPECTED,values.itemAt(0).string(null))) {
          code=values.itemAt(1).string(null);
        }
 else {
          throw UNIT_ANN_X_X.get(null,'%',sf.ann.names[0]);
        }
      }
      final FElem testcase=new FElem(TESTCASE).add(NAME,sf.name.local());
      tests++;
      final Performance perf2=new Performance();
      final int skip=indexOf(sf,IGNORE);
      if (skip == -1) {
        try {
          int l=before.size();
          for (int i=0; i < l; i++) {
            final QNm name=beforeFilter.get(i);
            if (name == null || name.eq(sf.name))             eval(before.get(i));
          }
          eval(sf);
          l=after.size();
          for (int i=0; i < l; i++) {
            final QNm name=afterFilter.get(i);
            if (name == null || name.eq(sf.name))             eval(after.get(i));
          }
          if (code != null) {
            failures++;
            testcase.add(new FElem(FAILURE).add(new FElem(EXPECTED).add(code)));
          }
        }
 catch (        final QueryException ex) {
          addError(ex,testcase,code);
        }
      }
 else {
        final Value sv=sf.ann.values[skip];
        testcase.add(SKIPPED,sv.isEmpty() ? EMPTY : sv.itemAt(0).string(null));
        skipped++;
      }
      testcase.add(TIME,time(perf2));
      suite.add(testcase);
    }
    for (    final StaticFunc sf : afterModule)     eval(sf);
  }
 catch (  final QueryException ex) {
    if (current == null) {
      addError(ex,suite,null);
    }
 else {
      final FElem tc=new FElem(TESTINIT).add(NAME,current.name.local()).add(TIME,time(perf));
      suite.add(tc);
      addError(ex,tc,null);
    }
  }
  if (suite.hasChildren()) {
    suite.add(TIME,time(perf));
    suite.add(TESTS,token(tests));
    suite.add(FAILURES,token(failures));
    suite.add(ERRORS,token(errors));
    suite.add(SKIPPED,token(skipped));
    suites.add(suite);
  }
}
