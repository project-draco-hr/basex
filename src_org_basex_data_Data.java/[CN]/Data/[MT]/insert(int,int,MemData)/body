{
  meta.update();
  final TokenBuilder tb=new TokenBuilder();
  final int ms=md.meta.size;
  for (int mpre=0; mpre < ms; mpre++) {
    final int mk=md.kind(mpre);
    final int mpar=md.parent(mpre,mk);
    final int pre=ipre + mpre;
    final int dis=mpar >= 0 ? mpre - mpar : pre - ipar;
switch (mk) {
case DOC:
      tb.add(doc(pre,md.size(mpre,mk),md.text(mpre,true)));
    meta.ndocs++;
  break;
case ELEM:
final boolean ne=md.nsFlag(mpre);
byte[] nm=md.name(mpre,mk);
if (ne) {
final Atts at=md.ns(mpre);
for (int a=0; a < at.size; a++) {
ns.add(pre,ipar,at.key[a],at.val[a]);
}
}
int u=ns.uri(nm,pre);
int n=tags.index(nm,null,false);
tb.add(elem(dis,n,md.attSize(mpre,mk),md.size(mpre,mk),u,ne));
break;
case TEXT:
case COMM:
case PI:
tb.add(text(pre,dis,md.text(mpre,true),mk));
break;
case ATTR:
nm=md.name(mpre,mk);
n=atts.index(nm,null,false);
if (md.nsFlag(mpre)) {
ns.add(ipar,ipar,pref(nm),md.ns.uri(md.uri(mpre,mk)));
table.write2(ipar,1,1 << 15 | name(ipar));
}
u=pref(nm).length != 0 ? ns.uri(nm,pre) : 0;
tb.add(attr(pre,dis,n,md.text(mpre,false),u,false));
break;
}
}
table.insert(ipre,tb.finish());
int p=ipar;
while (p >= 0) {
final int k=kind(p);
size(p,k,size(p,k) + ms);
p=parent(p,k);
}
updateDist(ipre + ms,ms);
if (size(0,DOC) == 1) delete(0);
}
