{
  meta.update();
  final int ss=dt.meta.size;
  for (int s=0; s < ss; s++) {
    final int k=dt.kind(s);
    final int r=dt.parent(s,k);
    final int p=s + pre;
    final int d=r >= 0 ? s - r : p - par;
switch (k) {
case DOC:
      insertDoc(p,dt.size(s,k),dt.text(s,true));
    break;
case ELEM:
  final boolean ne=dt.nsFlag(s);
byte[] nm=dt.name(s,k);
if (ne) {
final Atts at=dt.ns(s);
for (int a=0; a < at.size; a++) ns.add(at.key[a],at.val[a],p);
}
int u=ns.uri(nm);
int n=tags.index(nm,null,false);
insertElem(p,d,n,dt.attSize(s,k),dt.size(s,k),u,ne);
break;
case TEXT:
case COMM:
case PI:
insertText(p,d,dt.text(s,true),k);
break;
case ATTR:
nm=dt.name(s,k);
n=atts.index(nm,null,false);
u=ns.uri(nm);
System.out.println(u + "/" + dt.uri(s,k));
insertAttr(p,d,n,dt.text(s,false),u);
break;
}
}
int p=par;
while (p >= 0) {
final int k=kind(p);
size(p,k,size(p,k) + ss);
p=parent(p,k);
}
updateDist(pre + ss,ss);
if (size(0,DOC) == 1) delete(0);
}
