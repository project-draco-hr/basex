{
  for (int s=0; s < segments.length; s++) {
    final String seg=segments[s];
    final Matcher m=TEMPLATE.matcher(seg);
    if (!m.find())     continue;
    final QNm qnm=new QNm(token(m.group(1)),context);
    bind(qnm,new Atm(http.segment(s)));
  }
  final Prop prop=context.context.prop;
  final String ct=http.req.getContentType();
  IOContent body=null;
  if (requestBody != null) {
    body=cache(http,body);
    try {
      body.name(http.method + IO.XMLSUFFIX);
      bind(requestBody,Parser.item(body,prop,ct));
    }
 catch (    final IOException ex) {
      error(INPUT_CONV,ex);
    }
  }
  Map<String,String[]> params=http.params();
  for (  final RestXqParam rxp : queryParams)   bind(rxp,params.get(rxp.key));
  if (formParams.size() != 0) {
    if (MimeTypes.APP_FORM.equals(ct)) {
      body=cache(http,body);
      params=convert(body.toString());
    }
    for (    final RestXqParam rxp : formParams)     bind(rxp,params.get(rxp.key));
  }
  for (  final RestXqParam rxp : headerParams) {
    final StringList sl=new StringList();
    final Enumeration<?> en=http.req.getHeaders(rxp.key);
    while (en.hasMoreElements()) {
      for (      final String s : en.nextElement().toString().split(", *"))       sl.add(s);
    }
    bind(rxp,sl.toArray());
  }
  final Cookie[] cookies=http.req.getCookies();
  if (cookies != null) {
    for (    final RestXqParam rxp : cookieParams) {
      for (      final Cookie c : cookies) {
        if (!rxp.key.equals(c.getName()))         continue;
        final String v=c.getValue();
        if (v == null)         bind(rxp);
 else         bind(rxp,c.getValue());
      }
    }
  }
}
