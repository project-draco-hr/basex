{
  for (int s=0; s < segments.length; s++) {
    final String seg=segments[s];
    final Matcher m=RestXqFunction.TEMPLATE.matcher(seg);
    if (!m.find())     continue;
    final QNm qnm=new QNm(token(m.group(1)),context);
    bind(qnm,new Atm(http.segment(s)));
  }
  final Prop prop=context.context.prop;
  final String ct=http.req.getContentType();
  final BufferInput bi=new BufferInput(http.in);
  IOContent cache=null;
  if (requestBody != null) {
    cache=new IOContent(bi.content());
    cache.name(http.method + IO.XMLSUFFIX);
    Item item=null;
    try {
      item=Parser.item(cache,prop,ct);
    }
 catch (    final IOException ex) {
      error(INPUT_CONV,ex);
    }
    bind(requestBody,item);
  }
  for (  final RestXqParam rxp : queryParams) {
    final String v=http.req.getParameter(rxp.key);
    bind(rxp.name,v == null ? rxp.item : new Atm(v));
  }
  for (  final RestXqParam rxp : headerParams) {
    final String v=http.req.getHeader(rxp.key);
    bind(rxp.name,v == null ? rxp.item : new Atm(v));
  }
  final Cookie[] cookies=http.req.getCookies();
  if (cookies != null) {
    for (    final RestXqParam rxp : cookieParams) {
      for (      final Cookie c : cookies) {
        if (!rxp.key.equals(c.getName()))         continue;
        final String v=c.getValue();
        bind(rxp.name,v == null ? rxp.item : new Atm(v));
      }
    }
  }
}
