{
  for (int s=0; s < segments.size(); s++) {
    final String seg=segments.get(s);
    final Matcher m=TEMPLATE.matcher(seg);
    if (!m.find())     continue;
    final QNm qnm=new QNm(token(m.group(1)),context);
    bind(qnm,new Atm(http.segment(s)));
  }
  final Prop prop=context.context.prop;
  final String ct=http.contentType();
  IOContent body=null;
  if (requestBody != null) {
    body=cache(http,null);
    try {
      body.name(http.method + IO.XMLSUFFIX);
      bind(requestBody,Parser.item(body,prop,ct));
    }
 catch (    final IOException ex) {
      error(INPUT_CONV,ex);
    }
  }
  if (sessionID != null)   bind(sessionID,Str.get(http.req.getSession().getId()));
  if (request != null)   bind(request,new Jav(http.req));
  if (response != null)   bind(response,new Jav(http.res));
  final Map<String,String[]> params=http.params();
  for (  final RestXqParam rxp : queryParams)   bind(rxp,params.get(rxp.key));
  if (formParams.size() != 0) {
    if (MimeTypes.APP_FORM.equals(ct)) {
      body=cache(http,body);
      addParams(body.toString(),params);
    }
    for (    final RestXqParam rxp : formParams)     bind(rxp,params.get(rxp.key));
  }
  for (  final RestXqParam rxp : headerParams) {
    final StringList sl=new StringList();
    final Enumeration<?> en=http.req.getHeaders(rxp.key);
    while (en.hasMoreElements()) {
      for (      final String s : en.nextElement().toString().split(", *"))       sl.add(s);
    }
    bind(rxp,sl.toArray());
  }
  final Cookie[] ck=http.req.getCookies();
  for (  final RestXqParam rxp : cookieParams) {
    String v=null;
    if (ck != null) {
      for (      final Cookie c : ck) {
        if (rxp.key.equals(c.getName()))         v=c.getValue();
      }
    }
    if (v == null)     bind(rxp);
 else     bind(rxp,v);
  }
}
