{
  for (  final String arg : args) {
    if (arg.equals("-v")) {
      verbose=true;
    }
 else {
      BaseX.outln("\nXML Conformance Tests\n -v verbose output");
      return;
    }
  }
  final Context ctx=new Context();
  Prop.textindex=false;
  Prop.attrindex=false;
  new Check(FILE).execute(ctx,null);
  data=ctx.data();
  int ok=0;
  int wrong=0;
  final Nodes root=new Nodes(0,data);
  BaseX.outln("\nXML Conformance Tests\n");
  BaseX.outln("file = (expected result) -> BaseX result");
  for (  final int t : nodes("//*:TEST",root).nodes) {
    final Nodes srcRoot=new Nodes(t,data);
    final String uri=text("@URI",srcRoot);
    final boolean valid=text("@TYPE",srcRoot).equals("valid");
    Prop.intparse=true;
    Process proc=new CreateDB(PATH + uri);
    final boolean success=proc.execute(ctx);
    final boolean correct=valid == success;
    if (verbose || !correct) {
      BaseX.outln(uri + " = " + (valid ? "correct" : "wrong")+ " -> "+ (success ? "correct" : "wrong")+ (correct ? " (OK)" : " (WRONG)"));
      if (verbose) {
        String inf=proc.info();
        if (inf.length() != 0)         BaseX.outln("[BASEX ] " + inf);
        Prop.intparse=false;
        new Close().execute(ctx);
        proc=new CreateDB(PATH + uri);
        proc.execute(ctx);
        inf=proc.info();
        if (inf.length() != 0)         BaseX.outln("[XERCES] " + inf);
      }
    }
    if (correct)     ok++;
 else     wrong++;
    new Close().execute(ctx);
  }
  BaseX.outln("\nResult of Test \"" + new File(FILE).getName() + "\":");
  BaseX.outln("Successful: " + ok);
  BaseX.outln("Wrong: " + wrong);
}
