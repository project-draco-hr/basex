{
  super(args,ctx);
  final int port=context.mprop.num(MainProp.SERVERPORT);
  final String host=context.mprop.get(MainProp.SERVERHOST);
  final InetAddress hostAddress=host.isEmpty() ? null : InetAddress.getByName(host);
  final int eport=context.mprop.num(MainProp.EVENTPORT);
  if (service) {
    start(port,args);
    Util.outln(SERVERSTART);
    Performance.sleep(1000);
    return;
  }
  if (stopped) {
    stop(port,eport);
    Performance.sleep(1000);
    return;
  }
  try {
    if (commands != null)     execute(commands);
    log=new Log(context,quiet);
    log.write(SERVERSTART);
    socket=new ServerSocket();
    socket.setReuseAddress(true);
    socket.bind(new InetSocketAddress(hostAddress,port));
    esocket=new ServerSocket();
    esocket.setReuseAddress(true);
    esocket.bind(new InetSocketAddress(hostAddress,eport));
    stop=stopFile(port);
    Runtime.getRuntime().addShutdownHook(new Thread(){
      @Override public void run(){
        log.write(SERVERSTOPPED);
        log.close();
        Util.outln(SERVERSTOPPED);
      }
    }
);
    new Thread(this).start();
    while (!running)     Performance.sleep(100);
    Util.outln(CONSOLE + (console ? CONSOLE2 : SERVERSTART),SERVERMODE);
    if (console) {
      console();
      quit();
    }
  }
 catch (  final IOException ex) {
    if (log != null)     log.write(ex.getMessage());
    throw ex;
  }
}
