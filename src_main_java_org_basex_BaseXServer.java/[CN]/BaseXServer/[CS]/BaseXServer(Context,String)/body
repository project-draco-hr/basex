{
  super(args,ctx);
  final MainProp mprop=context.mprop;
  final int port=mprop.num(MainProp.SERVERPORT);
  final int eport=mprop.num(MainProp.EVENTPORT);
  if (port == eport)   throw new BaseXException(PORT_TWICE_X,port);
  final String host=mprop.get(MainProp.SERVERHOST);
  final InetAddress addr=host.isEmpty() ? null : InetAddress.getByName(host);
  if (service) {
    start(port,args);
    Util.outln(SRV_STARTED);
    Performance.sleep(1000);
    return;
  }
  if (stopped) {
    stop(port,eport);
    Util.outln(SRV_STOPPED);
    Performance.sleep(1000);
    return;
  }
  context.log=new Log(context);
  try {
    for (    final String c : commands)     execute(c);
    socket=new ServerSocket();
    socket.setReuseAddress(true);
    socket.bind(new InetSocketAddress(addr,port));
    esocket=new ServerSocket();
    esocket.setReuseAddress(true);
    esocket.bind(new InetSocketAddress(addr,eport));
    stop=stopFile(port);
    context.log.write(SRV_STARTED);
    Runtime.getRuntime().addShutdownHook(new Thread(){
      @Override public void run(){
        context.log.write(SRV_STOPPED);
        Util.outln(SRV_STOPPED);
      }
    }
);
    new Thread(this).start();
    while (!running)     Performance.sleep(10);
    Util.outln(CONSOLE + (console ? TRY_MORE_X : SRV_STARTED),SERVERMODE);
    if (console) {
      console();
      quit();
    }
  }
 catch (  final IOException ex) {
    context.log.error(ex);
    throw ex;
  }
}
