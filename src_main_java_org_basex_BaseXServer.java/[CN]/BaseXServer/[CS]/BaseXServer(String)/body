{
  super(args);
  if (failed)   return;
  final int port=context.mprop.num(MainProp.SERVERPORT);
  if (service) {
    Util.outln(start(port,getClass(),args));
    Performance.sleep(1000);
    return;
  }
  try {
    if (commands != null) {
      final Boolean b=execute(commands);
      if (failed(b == null || b))       return;
    }
    log=new Log(context,quiet);
    log.write(SERVERSTART);
    socket=new ServerSocket();
    socket.setReuseAddress(true);
    SocketAddress endpoint=new InetSocketAddress(port);
    socket.bind(endpoint);
    esocket=new ServerSocket();
    esocket.setReuseAddress(true);
    endpoint=new InetSocketAddress(context.mprop.num(MainProp.EVENTPORT));
    esocket.bind(endpoint);
    stop=stopFile(port);
    Runtime.getRuntime().addShutdownHook(new Thread(){
      @Override public void run(){
        log.write(SERVERSTOPPED);
        log.close();
        Util.outln(SERVERSTOPPED);
      }
    }
);
    new Thread(this).start();
    while (!running)     Performance.sleep(100);
    Util.outln(CONSOLE + (console ? CONSOLE2 : SERVERSTART),SERVERMODE);
    if (console)     quit(console());
  }
 catch (  final Exception ex) {
    if (log != null)     log.write(ex.getMessage());
    Util.errln(Util.server(ex));
    failed=true;
  }
}
