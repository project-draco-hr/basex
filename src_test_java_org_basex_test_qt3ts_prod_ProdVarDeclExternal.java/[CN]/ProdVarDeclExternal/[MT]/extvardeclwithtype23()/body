{
  final XQuery query=new XQuery("(: \n" + "    This query opens a C++ GCC-XML output file, and outputs a report describing the use\n" + "    of globals variables.\n"+ ":)\n"+ "declare variable $inputDocument := (/);\n"+ "\n"+ "(: Determines whether the type by ID @p typeId is a complex type such as QString. :)\n"+ "declare function local:isComplexType($typeID as xs:string) as xs:boolean\n"+ "{\n"+ "    (: We're being a bit crude here and only checks whether it's a class. We\n"+ "       actually should check whether it has non-synthesized,\n"+ "        constructors, I believe. :)\n"+ "    \n"+ "    exists($inputDocument/xml/Class[@id = $typeID])\n"+ "    or\n"+ "    (: We also want const-qualified variables. :)\n"+ "    exists($inputDocument/xml/Class[@id = $inputDocument/xml/CvQualifiedType[@id = $typeID]/@type])\n"+ "};\n"+ "\n"+ "declare function local:isPrimitive($typeId as xs:string) as xs:boolean\n"+ "{\n"+ "    exists($inputDocument/xml/FundamentalType[@id = $typeId])\n"+ "};\n"+ "\n"+ "(: Returns a string for human consumption that describes\n"+ "   the location of @p block. :)\n"+ "declare function local:location($block as element()) as xs:string\n"+ "{\n"+ "    concat($inputDocument/xml/File[@id = $block/@file]/@name, \" at line \", $block/@line)\n"+ "};\n"+ "\n"+ "declare function local:report() as element()+\n"+ "{\n"+ "            let $complexVariables as element(Variable)* := $inputDocument/xml/Variable[local:isComplexType(@type)]\n"+ "            return if(exists($complexVariables)) (: Is the length larger than zero? :)\n"+ "\n"+ "                   then (<p xmlns=\"http://www.w3.org/1999/xhtml/\">The following global, complex variables were found:</p>,\n"+ "                         <ol xmlns=\"http://www.w3.org/1999/xhtml/\">\n"+ "                            {\n"+ "                                (: For each Variable in $complexVariables... :)\n"+ "                                $complexVariables/<li><span class=\"variableName\">{string(@name)}</span> in {local:location(.)}</li>\n"+ "                            }\n"+ "                         </ol>)\n"+ "\n"+ "                   else <p xmlns=\"http://www.w3.org/1999/xhtml/\">No global variables that are of complex types were found.</p>\n"+ "\n"+ "            ,\n"+ "\n"+ "            (: List primitive, mutable types. :)\n"+ "            let $primitiveVariables as element(Variable)+ := $inputDocument/xml/Variable[local:isPrimitive(@type)]\n"+ "            return if(exists($primitiveVariables))\n"+ "\n"+ "                   then (<p xmlns=\"http://www.w3.org/1999/xhtml/\">The following mutable primitives were found:</p>,\n"+ "                         <ol xmlns=\"http://www.w3.org/1999/xhtml/\">\n"+ "                            {\n"+ "                                (: For each Variable in $complexVariables... :)\n"+ "                                $primitiveVariables/<li><span class=\"variableName\">{string(@name)}</span> in {local:location(.)}</li>\n"+ "                            }\n"+ "                         </ol>)\n"+ "\n"+ "                   else <p xmlns=\"http://www.w3.org/1999/xhtml/\">No global variables that are of complex types were found.</p>\n"+ "};\n"+ "\n"+ "<html xmlns=\"http://www.w3.org/1999/xhtml/\" xml:lang=\"en\" lang=\"en\">\n"+ "    <head>\n"+ "        <title>Global variables report for {\"Globals.cpp\"}</title>\n"+ "    </head>\n"+ "    <style type=\"text/css\">\n"+ "        .details\n"+ "        {{\n"+ "            text-align: center;\n"+ "            font-size: 80%;\n"+ "            color: gray\n"+ "        }}\n"+ "        .variableName\n"+ "        {{\n"+ "            font-family: courier\n"+ "        }}\n"+ "    </style>\n"+ "\n"+ "    <body>\n"+ "        {\n"+ "            (: We don't want simple types that are const, but all other types.\n"+ "               One could frown upon const integers and say enums should be used instead, but\n"+ "               let's be gentle. :)\n"+ "\n"+ "            local:report()\n"+ "        }\n"+ "\n"+ "        <p class=\"details\">This report was generated on</p>\n"+ "    </body>\n"+ "\n"+ "</html>\n"+ "",ctx);
  query.context(node(file("prod/AxisStep/CPPGlobals.xml")));
  final QT3Result res=result(query);
  result=res;
  test(assertSerialization("<html xmlns=\"http://www.w3.org/1999/xhtml/\" xml:lang=\"en\" lang=\"en\"><head><title>Global variables report for Globals.cpp</title></head><style type=\"text/css\">\n        .details\n        {\n            text-align: center;\n            font-size: 80%;\n            color: gray\n        }\n        .variableName\n        {\n            font-family: courier\n        }\n    </style><body><p>The following global, complex variables were found:</p><ol><li><span class=\"variableName\">constComplex2</span> in globals.cpp at line 17</li><li><span class=\"variableName\">constComplex1</span> in globals.cpp at line 16</li><li><span class=\"variableName\">mutableComplex2</span> in globals.cpp at line 15</li><li><span class=\"variableName\">mutableComplex1</span> in globals.cpp at line 14</li></ol><p>The following mutable primitives were found:</p><ol><li><span class=\"variableName\">mutablePrimitive2</span> in globals.cpp at line 2</li><li><span class=\"variableName\">mutablePrimitive1</span> in globals.cpp at line 1</li></ol><p class=\"details\">This report was generated on</p></body></html>",false));
}
