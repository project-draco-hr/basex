{
  assertTrue(STR.union(ITR).eq(AAT));
  assertTrue(STR.union(STR).eq(STR));
  assertTrue(STR.union(ATT).eq(ITEM));
  assertTrue(AtomType.NST.seqType().union(STR).eq(STR));
  assertTrue(STR.union(AtomType.NST.seqType()).eq(STR));
  assertTrue(STR.union(AtomType.JAVA.seqType()).eq(ITEM));
  assertTrue(ATT.union(ELM).eq(NOD));
  assertTrue(NOD.union(ELM).eq(NOD));
  assertTrue(ELM.union(NOD).eq(NOD));
  assertTrue(ELM.union(ELM).eq(ELM));
  assertTrue(ELM.union(STR).eq(ITEM));
  final SeqType f=FuncType.get(DEC_ZO,BLN).seqType(), f2=FuncType.get(AtomType.NNI.seqType(),BLN).seqType(), f3=FuncType.get(AtomType.NNI.seqType(),BLN,BLN).seqType(), f4=FuncType.get(AtomType.NNI.seqType(),ITR).seqType(), f5=FuncType.get(ITR,BLN).seqType();
  union(f,ITR,ITEM);
  union(f,FUN_O,FUN_O);
  union(f2,f3,FUN_O);
  union(f2,f4,FUN_O);
  final SeqType m=MapType.get(AtomType.AAT,ITR).seqType(), m2=MapType.get(AtomType.BLN,ITR).seqType(), m4=MapType.get(AtomType.ITR,ITR).seqType();
  union(MAP_O,m,MAP_O);
  union(m,ITR,ITEM);
  union(m,f,f);
  union(m,f2,f5);
  union(m2,m4,FUN_O);
}
