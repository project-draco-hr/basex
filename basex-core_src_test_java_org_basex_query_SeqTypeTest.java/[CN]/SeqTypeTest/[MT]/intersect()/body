{
  final SeqType f=FuncType.get(DEC_ZO,BLN).seqType(), f2=FuncType.get(AtomType.NNI.seqType(),BLN).seqType(), f3=FuncType.get(AtomType.NNI.seqType(),BLN,BLN).seqType(), f4=FuncType.get(AtomType.NNI.seqType(),ITR).seqType(), f5=FuncType.get(ITR,BLN).seqType(), f6=FuncType.get(BLN,BLN).seqType();
  intersect(get(AtomType.ITEM,0),ITEM,null);
  intersect(ATT,ATT,ATT);
  intersect(ATT,NOD,ATT);
  intersect(ATT,ELM,null);
  intersect(NOD,ITR,null);
  intersect(f,ITR,null);
  intersect(f,f,f);
  intersect(f,f2,f2);
  intersect(f,f5,f5);
  intersect(f,f4,FuncType.get(AtomType.NNI.seqType(),AAT).seqType());
  intersect(f2,f3,null);
  intersect(f5,f6,null);
  final SeqType m=MapType.get(AtomType.AAT,ITR).seqType(), m2=MapType.get(AtomType.BLN,ITR).seqType(), m4=MapType.get(AtomType.ITR,ITR).seqType();
  intersect(m,f,m);
  intersect(m,ITEM,m);
  intersect(m,ITR,null);
  intersect(m2,m4,m);
  intersect(m2,MapType.get(AtomType.BLN,BLN).seqType(),null);
  intersect(m,FUN_O,m);
  intersect(m,f,m);
  intersect(m4,f5,m);
  intersect(m,f3,null);
  intersect(m,f6,null);
}
