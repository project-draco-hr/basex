{
  final IntList pr=new TokenParser(fp.primary).toList();
  int rp=-1;
  boolean reg=false;
  for (int p=pr.size() - 1; p >= 0; --p) {
    final int ch=pr.get(p);
    if (ch == '#' || ch >= z && ch <= z + 9)     continue;
    if (rp == -1)     rp=pr.size() - p;
    reg=(pr.size() - p) % rp == 0;
  }
  final int rc=reg ? pr.get(pr.size() - rp) : 0;
  if (!reg)   rp=Integer.MAX_VALUE;
  final IntList cache=new IntList();
  final byte[] n=token(num);
  int b=n.length - 1, p=pr.size() - 1;
  int mn=fp.min;
  int mx=fp.max;
  while ((--mn >= 0 || b >= 0 || p >= 0) && --mx >= 0) {
    final boolean sep=cache.size() % rp == rp - 1;
    if (p >= 0) {
      final int c=pr.get(p--);
      if (b >= 0) {
        if (c == '#' && sep)         cache.add(rc);
        cache.add(c == '#' || c >= z && c <= z + 9 ? n[b--] - '0' + z : c);
      }
 else {
        if (c == '#')         break;
        cache.add(c >= z && c <= z + 9 ? z : c);
      }
    }
 else     if (b >= 0) {
      if (sep)       cache.add(rc);
      cache.add(n[b--] - '0' + z);
    }
 else {
      cache.add(z);
    }
  }
  final TokenBuilder tb=new TokenBuilder();
  for (int c=cache.size() - 1; c >= 0; --c)   tb.add(cache.get(c));
  return tb.add(ordinal(num,fp.ordinal)).finish();
}
