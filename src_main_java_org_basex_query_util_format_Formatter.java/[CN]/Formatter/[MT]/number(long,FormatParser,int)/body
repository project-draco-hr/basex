{
  final IntList pr=new IntList(mp.primary.length);
  for (int p=0; p < mp.primary.length; p+=cl(mp.primary,p)) {
    pr.add(cp(mp.primary,p));
  }
  int rp=-1;
  boolean reg=false;
  for (int p=pr.size() - 1; p >= 0; --p) {
    final int ch=pr.get(p);
    if (ch == '#' || ch >= z && ch <= z + 9)     continue;
    if (rp == -1)     rp=pr.size() - p;
    reg=(pr.size() - p) % rp == 0;
  }
  int rc=reg ? pr.get(pr.size() - rp) : 0;
  if (!reg)   rp=Integer.MAX_VALUE;
  final IntList cache=new IntList();
  final byte[] s=token(n);
  int b=s.length - 1, p=pr.size() - 1;
  while (p >= 0 && b >= 0) {
    final int ch=pr.get(p--);
    if (ch == '#' && (cache.size() % rp) == rp - 1)     cache.add(rc);
    cache.add(ch == '#' || ch >= z && ch <= z + 9 ? s[b--] - '0' + z : ch);
  }
  while (b >= 0) {
    if ((cache.size() % rp) == rp - 1)     cache.add(rc);
    cache.add(s[b--] - '0' + z);
  }
  while (p >= 0) {
    final int ch=pr.get(p--);
    if (ch == '#')     break;
    cache.add(ch >= z && ch <= z + 9 ? z : ch);
  }
  final TokenBuilder tb=new TokenBuilder();
  for (int c=cache.size() - 1; c >= 0; --c)   tb.add(cache.get(c));
  return tb.add(ordinal(n,mp.ordinal)).finish();
}
