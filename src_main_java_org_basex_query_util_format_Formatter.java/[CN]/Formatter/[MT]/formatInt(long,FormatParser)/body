{
  long num=number;
  final boolean sign=num < 0;
  if (sign)   num=-num;
  final TokenBuilder tb=new TokenBuilder();
  final int ch=ch(mp.pres,0);
  final boolean single=mp.pres.length == cl(mp.pres,0);
  if (ch == 'i') {
    if (single)     roman(tb,num);
  }
 else   if (ch == 'w') {
    tb.add(word(num,mp.ordinal));
  }
 else   if (ch == KANJI[1]) {
    japanese(tb,num);
  }
 else   if (ch >= '\u2460' && ch <= '\u249b') {
    tb.add((int)(ch + number - 1));
  }
 else   if (ch == '#') {
    tb.add(number(num,mp,'0'));
  }
 else   if (!single || !sequence(tb,ch,num)) {
    final int z=zeroes(ch);
    if (z != -1)     tb.add(number(num,mp,z));
  }
  byte[] in=tb.finish();
  if (mp.cs == Case.LOWER)   in=lc(in);
  if (mp.cs == Case.UPPER)   in=uc(in);
  return sign ? concat(new byte[]{'-'},in) : in;
}
