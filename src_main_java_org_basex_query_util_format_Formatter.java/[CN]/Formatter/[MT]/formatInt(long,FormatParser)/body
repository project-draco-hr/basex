{
  long n=num;
  final boolean sign=n < 0;
  if (sign)   n=-n;
  final TokenBuilder tb=new TokenBuilder();
  final int ch=ch(mp.pres,0);
  final boolean single=mp.pres.length == cl(mp.pres,0);
  if (ch == 'w') {
    tb.add(word(n,mp.ordinal));
  }
 else   if (ch == KANJI[1]) {
    japanese(tb,n);
  }
 else   if (single && ch == 'i') {
    roman(tb,n);
  }
 else   if (ch >= '\u2460' && ch <= '\u249b') {
    if (num < 1 || num > 20)     tb.addLong(num);
 else     tb.add((int)(ch + num - 1));
  }
 else   if (ch == '#') {
    tb.add(number(n,mp,'0'));
  }
 else {
    final String seq=sequence(ch);
    if (seq != null) {
      alpha(tb,num,seq);
    }
 else {
      final int z=zeroes(ch);
      if (z != -1) {
        tb.add(number(n,mp,z));
      }
 else       if (num == 0) {
        tb.add('0');
      }
 else {
        System.out.println("? " + string(mp.pres));
        alpha(tb,num,sequence(ch));
      }
    }
  }
  byte[] in=tb.finish();
  if (mp.cs == Case.LOWER)   in=lc(in);
  if (mp.cs == Case.UPPER)   in=uc(in);
  return sign ? concat(new byte[]{'-'},in) : in;
}
