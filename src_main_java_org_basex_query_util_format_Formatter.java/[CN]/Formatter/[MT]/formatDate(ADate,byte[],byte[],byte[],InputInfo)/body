{
  if (cal != null || plc != null)   ;
  final TokenBuilder tb=new TokenBuilder();
  final DateParser dp=new DateParser(ii,pic);
  while (dp.more()) {
    final int ch=dp.literal();
    if (ch != -1) {
      tb.add(ch);
    }
 else {
      final byte[] marker=dp.marker();
      if (marker.length == 0)       PICDATE.thrw(ii,pic);
      final int compSpec=ch(marker,0);
      byte[] pres=ONE;
      boolean max=false;
      long num=0;
      final boolean dat=date.type == AtomType.DAT;
      final boolean tim=date.type == AtomType.TIM;
      boolean err=false;
switch (compSpec) {
case 'Y':
        num=Math.abs(date.yea());
      max=true;
    err=tim;
  break;
case 'M':
num=date.mon();
err=tim;
break;
case 'D':
num=date.day();
err=tim;
break;
case 'd':
num=ADate.days(0,(int)date.mon(),(int)date.day() - 1).longValue();
err=tim;
break;
case 'F':
num=date.toJava().toGregorianCalendar().get(Calendar.DAY_OF_WEEK) - 1;
pres=new byte[]{'n'};
err=tim;
break;
case 'W':
num=date.toJava().toGregorianCalendar().get(Calendar.WEEK_OF_YEAR);
err=tim;
break;
case 'w':
num=date.toJava().toGregorianCalendar().get(Calendar.WEEK_OF_MONTH);
err=tim;
break;
case 'H':
num=date.hou();
err=dat;
break;
case 'h':
num=date.hou() % 12;
if (num == 0) num=12;
err=dat;
break;
case 'P':
num=date.hou() / 12;
pres=new byte[]{'n'};
err=dat;
break;
case 'm':
num=date.min();
pres=token("01");
err=dat;
break;
case 's':
num=date.sec().intValue();
pres=token("01");
err=dat;
break;
case 'f':
num=date.sec().remainder(BigDecimal.ONE).movePointRight(3).intValue();
err=dat;
break;
case 'Z':
case 'z':
num=date.zon();
pres=num == Short.MAX_VALUE ? null : token("01:01");
break;
case 'C':
pres=new byte[]{'n'};
break;
case 'E':
num=date.yea();
pres=new byte[]{'n'};
break;
default :
INVCOMPSPEC.thrw(ii,marker);
}
if (err) PICINVCOMP.thrw(ii,marker,date.type);
if (pres == null) continue;
final DateFormat fp=new DateFormat(substring(marker,1),pres,ii);
if (max) {
int mx=0;
for (int s=0; s < fp.primary.length; s+=cl(fp.primary,s)) mx++;
if (mx > 1) fp.max=mx;
}
if (fp.digit == 'n') {
byte[] in=EMPTY;
if (compSpec == 'M') {
in=month((int)num - 1,fp.min,fp.max);
}
 else if (compSpec == 'F') {
in=day((int)num,fp.min,fp.max);
}
 else if (compSpec == 'P') {
in=ampm(num == 0);
}
 else if (compSpec == 'C') {
in=calendar();
}
 else if (compSpec == 'E') {
in=era((int)num);
}
if (fp.cs == Case.LOWER) in=lc(in);
if (fp.cs == Case.UPPER) in=uc(in);
tb.add(in);
}
 else {
tb.add(formatInt(num,fp));
}
}
}
return tb.finish();
}
