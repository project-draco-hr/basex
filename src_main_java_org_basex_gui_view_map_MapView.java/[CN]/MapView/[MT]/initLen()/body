{
  painter.reset();
  final Data data=gui.context.current.data;
  if (textLen != null || gui.prop.num(GUIProp.MAPWEIGHT) == 0)   return;
  final int size=data.meta.size;
  textLen=new int[size];
  final int[] parStack=new int[IO.MAXHEIGHT];
  int l=0;
  for (int pre=0; pre < size; pre++) {
    final int kind=data.kind(pre);
    final int par=data.parent(pre,kind);
    final int ll=l;
    while (l > 0 && parStack[l - 1] > par) {
      textLen[parStack[l - 1]]+=textLen[parStack[l]];
      --l;
    }
    if (l > 0 && ll != l)     textLen[parStack[l - 1]]+=textLen[parStack[l]];
    parStack[l]=pre;
    if (data.fs != null) {
      if (data.fs.isFSnode(pre)) {
        if (data.fs.isFile(pre)) {
          final byte[] attVal=ViewData.attValue(data,data.sizeID,pre);
          if (attVal == null)           continue;
          textLen[pre]=Token.toInt(attVal);
          textLen[parStack[l - 1]]+=textLen[pre];
          pre+=data.size(pre,kind) - 1;
        }
 else {
          parStack[++l]=0;
        }
      }
    }
 else {
      if (kind == Data.DOC || kind == Data.ELEM) {
        parStack[++l]=0;
      }
 else {
        textLen[pre]=data.textLen(pre,kind != Data.ATTR);
      }
    }
  }
  while (--l >= 0)   textLen[parStack[l]]+=textLen[parStack[l + 1]];
}
