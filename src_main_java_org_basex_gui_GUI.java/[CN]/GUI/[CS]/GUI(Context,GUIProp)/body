{
  super(ctx,gprops);
  final Dimension scr=Toolkit.getDefaultToolkit().getScreenSize();
  final int[] ps=gprop.nums(GUIProp.GUILOC);
  final int[] sz=gprop.nums(GUIProp.GUISIZE);
  final int x=Math.max(0,Math.min(scr.width - sz[0],ps[0]));
  final int y=Math.max(0,Math.min(scr.height - sz[1],ps[1]));
  setBounds(x,y,sz[0],sz[1]);
  if (gprop.is(GUIProp.MAXSTATE)) {
    setExtendedState(MAXIMIZED_HORIZ);
    setExtendedState(MAXIMIZED_VERT);
    setExtendedState(MAXIMIZED_BOTH);
  }
  top=new BaseXBack(new BorderLayout());
  control=new BaseXBack(new BorderLayout());
  menu=new GUIMenu(this);
  setJMenuBar(menu);
  buttons=new BaseXBack(new BorderLayout());
  toolbar=new GUIToolBar(TOOLBAR,this);
  buttons.add(toolbar,BorderLayout.WEST);
  hits=new BaseXLabel(" ");
  hits.setFont(hits.getFont().deriveFont(18f));
  BaseXLayout.setWidth(hits,150);
  hits.setHorizontalAlignment(SwingConstants.RIGHT);
  BaseXBack b=new BaseXBack();
  b.add(hits);
  buttons.add(b,BorderLayout.EAST);
  if (gprop.is(GUIProp.SHOWBUTTONS))   control.add(buttons,BorderLayout.CENTER);
  nav=new BaseXBack(new BorderLayout(5,0)).border(2,2,0,2);
  mode=new BaseXCombo(this,BUTTONSEARCH,BUTTONXQUERY,BUTTONCMD);
  mode.setSelectedIndex(2);
  mode.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      final int s=mode.getSelectedIndex();
      if (s == gprop.num(GUIProp.SEARCHMODE) || !mode.isEnabled())       return;
      gprop.set(GUIProp.SEARCHMODE,s);
      input.setText("");
      refreshControls();
    }
  }
);
  nav.add(mode,BorderLayout.WEST);
  input=new GUIInput(this);
  hist=new BaseXButton(this,"hist",HELPHIST);
  hist.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      final JPopupMenu pop=new JPopupMenu();
      final ActionListener al=new ActionListener(){
        @Override public void actionPerformed(        final ActionEvent ac){
          input.setText(ac.getActionCommand());
          input.requestFocusInWindow();
          pop.setVisible(false);
        }
      }
;
      final int i=context.data() == null ? 2 : gprop.num(GUIProp.SEARCHMODE);
      final String[] hs=gprop.strings(i == 0 ? GUIProp.SEARCH : i == 1 ? GUIProp.XQUERY : GUIProp.COMMANDS);
      for (      final String en : hs) {
        final JMenuItem jmi=new JMenuItem(en);
        jmi.addActionListener(al);
        pop.add(jmi);
      }
      pop.show(hist,0,hist.getHeight());
    }
  }
);
  b=new BaseXBack(new BorderLayout(5,0));
  b.add(hist,BorderLayout.WEST);
  b.add(input,BorderLayout.CENTER);
  nav.add(b,BorderLayout.CENTER);
  go=new BaseXButton(this,"go",HELPGO);
  go.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      execute();
    }
  }
);
  filter=BaseXButton.command(GUICommands.FILTER,this);
  b=new BaseXBack(new TableLayout(1,3));
  b.add(go);
  b.add(Box.createHorizontalStrut(1));
  b.add(filter);
  nav.add(b,BorderLayout.EAST);
  if (gprop.is(GUIProp.SHOWINPUT))   control.add(nav,BorderLayout.SOUTH);
  top.add(control,BorderLayout.NORTH);
  notify=new ViewNotifier(this);
  text=new TextView(notify);
  editor=new EditorView(notify);
  info=new InfoView(notify);
  views=new ViewContainer(this,text,editor,info,new FolderView(notify),new PlotView(notify),new TableView(notify),new MapView(notify),new TreeView(notify),new ExploreView(notify));
  top.add(views,BorderLayout.CENTER);
  setContentBorder();
  status=new GUIStatus(this);
  if (gprop.is(GUIProp.SHOWSTATUS))   top.add(status,BorderLayout.SOUTH);
  setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
  add(top);
  setVisible(true);
  views.updateViews();
  refreshControls();
  new Thread(){
    @Override public void run(){
      views.run();
      checkVersion();
    }
  }
.start();
  input.requestFocusInWindow();
}
