{
  final int thread=++threadID;
  while (command != null) {
    command.stop();
    Performance.sleep(50);
    if (threadID != thread)     return true;
  }
  cursor(CURSORWAIT);
  boolean ok=true;
  try {
    final Performance perf=new Performance();
    final Data data=context.data();
    if (gprop.is(GUIProp.FILTERRT) && context.current() != null && !context.root())     context.update();
    final Nodes current=context.current();
    command=c;
    final ArrayOutput ao=new ArrayOutput().max(gprop.num(GUIProp.MAXTEXT));
    final boolean up=c.updating(context);
    updating=up;
    if (edit) {
      editor.start();
    }
 else     if (editor.visible()) {
      editor.reset();
    }
    String inf=null;
    try {
      c.execute(context,ao);
      inf=c.info();
    }
 catch (    final BaseXException ex) {
      ok=false;
      inf=ex.getMessage();
    }
 finally {
      updating=false;
    }
    final String time=perf.getTimer();
    info.setInfo(inf,c,time,ok);
    info.reset();
    final boolean stopped=inf.startsWith(INTERRUPTED);
    if (edit) {
      editor.info(stopped ? INTERRUPTED : inf,ok);
    }
    if (!ok && !stopped) {
      if ((!edit || inf.startsWith(BUGINFO)) && !info.visible()) {
        GUICommands.C_SHOWINFO.execute(this);
      }
    }
 else {
      final Result result=c.result();
      final Nodes nodes=result instanceof Nodes && ((Nodes)result).size() != 0 ? (Nodes)result : null;
      if (nodes == null) {
        if (!text.visible())         GUICommands.C_SHOWTEXT.execute(this);
        text.setText(ao,c);
      }
      final Data ndata=context.data();
      Nodes marked=context.marked;
      if (ndata != data) {
        notify.init();
      }
 else       if (up) {
        notify.update();
      }
 else       if (result != null) {
        final Nodes nd=context.current();
        final boolean flt=gprop.is(GUIProp.FILTERRT);
        if (flt || nd != null && !nd.sameAs(current)) {
          if (nodes != null)           notify.context((Nodes)result,flt,null);
        }
 else         if (marked != null) {
          if (nodes != null) {
            marked=nodes;
          }
 else           if (marked.size() != 0) {
            marked=new Nodes(data);
          }
          notify.mark(marked,null);
          if (thread != threadID) {
            command=null;
            return true;
          }
        }
      }
      setResults(result == null ? 0 : result.size());
      status.setText(Util.info(TIME_NEEDED_X,time));
    }
  }
 catch (  final Exception ex) {
    Util.stack(ex);
    Dialog.error(this,Util.info(EXEC_ERROR,c,!ex.toString().isEmpty() ? ex.toString() : ex.getMessage()));
    updating=false;
  }
  cursor(CURSORARROW,true);
  command=null;
  return ok;
}
