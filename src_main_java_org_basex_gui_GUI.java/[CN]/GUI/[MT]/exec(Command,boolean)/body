{
  final int thread=++threadID;
  while (command != null) {
    command.stop();
    Performance.sleep(50);
    if (threadID != thread)     return true;
  }
  cursor(CURSORWAIT);
  boolean ok=true;
  try {
    final Performance perf=new Performance();
    final Data data=context.data();
    if (gprop.is(GUIProp.FILTERRT) && context.current() != null && !context.root())     context.update();
    final Nodes current=context.current();
    command=cmd;
    final ArrayOutput ao=new ArrayOutput().max(gprop.num(GUIProp.MAXTEXT));
    updating=cmd.updating(context);
    if (edit) {
      editor.start();
    }
 else     if (editor.visible()) {
      editor.reset();
    }
    String inf=null;
    try {
      cmd.execute(context,ao);
      inf=cmd.info();
    }
 catch (    final BaseXException ex) {
      ok=false;
      inf=ex.getMessage();
    }
 finally {
      updating=false;
    }
    final String time=perf.getTime();
    if (info.visible())     info.setInfo(inf,cmd,time,ok);
    info.reset();
    final boolean interrupted=inf.startsWith(INTERRUPTED);
    if (edit) {
      editor.info(interrupted ? INTERRUPTED : ok ? OK : inf,ok || interrupted);
    }
    if (!ok && !interrupted) {
      if ((!edit || inf.startsWith(BUGINFO)) && !info.visible()) {
        GUICommands.C_SHOWINFO.execute(this);
      }
    }
 else {
      final Result result=cmd.result();
      final Nodes nodes=result instanceof Nodes && result.size() != 0 ? (Nodes)result : null;
      final Data ndata=context.data();
      Nodes marked=context.marked;
      if (ndata != data) {
        notify.init();
      }
 else       if (cmd.updated()) {
        notify.update();
      }
 else       if (result != null) {
        final Nodes nd=context.current();
        final boolean flt=gprop.is(GUIProp.FILTERRT);
        if (flt || nd != null && !nd.sameAs(current)) {
          if (nodes != null)           notify.context((Nodes)result,flt,null);
        }
 else         if (marked != null) {
          if (nodes != null) {
            marked=nodes;
          }
 else           if (marked.size() != 0) {
            marked=new Nodes(data);
          }
          notify.mark(marked,null);
        }
      }
      if (thread == threadID && !interrupted) {
        status.setText(Util.info(TIME_NEEDED_X,time));
        if (result != null)         setResults(result.size());
        if (!text.visible() && nodes == null && ao.size() != 0)         GUICommands.C_SHOWTEXT.execute(this);
        text.setText(ao,cmd,result);
      }
    }
  }
 catch (  final Exception ex) {
    Util.stack(ex);
    BaseXDialog.error(this,Util.info(EXEC_ERROR,cmd,!ex.toString().isEmpty() ? ex.toString() : ex.getMessage()));
    updating=false;
  }
  cursor(CURSORARROW,true);
  command=null;
  return ok;
}
