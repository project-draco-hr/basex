{
  final TokenBuilder tmp=new TokenBuilder();
  try {
    boolean first=true;
    for (    final Option<?> opt : options(getClass())) {
      final String name=opt.name();
      if (opt instanceof Comment) {
        if (!first)         tmp.add(NL);
        tmp.add("# " + name).add(NL);
      }
 else       if (opt instanceof NumbersOption) {
        final int[] ints=get((NumbersOption)opt);
        final int is=ints == null ? 0 : ints.length;
        for (int i=0; i < is; ++i)         tmp.add(name + i + " = "+ ints[i]).add(NL);
      }
 else       if (opt instanceof StringsOption) {
        final String[] strings=get((StringsOption)opt);
        final int ss=strings == null ? 0 : strings.length;
        tmp.add(name + " = " + ss).add(NL);
        for (int i=0; i < ss; ++i)         tmp.add(name + (i + 1) + " = "+ strings[i]).add(NL);
      }
 else {
        tmp.add(name + " = " + get(opt)).add(NL);
      }
      first=false;
    }
    tmp.add(NL).add(PROPUSER).add(NL);
    tmp.add(user.toString());
    final byte[] content=tmp.array();
    if (!file.exists() || !eq(content,file.read()))     file.write(content);
  }
 catch (  final Exception ex) {
    Util.errln("% could not be written.",file);
    Util.debug(ex);
  }
}
