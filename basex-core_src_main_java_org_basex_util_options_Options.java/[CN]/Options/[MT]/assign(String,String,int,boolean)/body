{
  final Option<?> option=options.get(name);
  if (option == null) {
    if (error)     throw new BaseXException(error(name));
    return false;
  }
  if (option instanceof BooleanOption) {
    final boolean v;
    if (val == null || val.isEmpty()) {
      final Boolean b=get((BooleanOption)option);
      if (b == null)       throw new BaseXException(Text.OPT_BOOLEAN_X_X,option.name(),"");
      v=!b;
    }
 else {
      v=Strings.yes(val);
      if (!v && !Strings.no(val))       throw new BaseXException(Text.OPT_BOOLEAN_X_X,option.name(),val);
    }
    put(option,v);
  }
 else   if (option instanceof NumberOption) {
    final int v=Strings.toInt(val);
    if (v == MIN_VALUE)     throw new BaseXException(Text.OPT_NUMBER_X_X,option.name(),val);
    put(option,v);
  }
 else   if (option instanceof StringOption) {
    put(option,val);
  }
 else   if (option instanceof EnumOption) {
    final EnumOption<?> eo=(EnumOption<?>)option;
    final Object v=eo.get(val);
    if (v == null)     throw new BaseXException(allowed(option,val,(Object[])eo.values()));
    put(option,v);
  }
 else   if (option instanceof OptionsOption) {
    final Options o=((OptionsOption<?>)option).newInstance();
    o.assign(val);
    put(option,o);
  }
 else   if (option instanceof NumbersOption) {
    final int v=Strings.toInt(val);
    if (v == MIN_VALUE)     throw new BaseXException(Text.OPT_NUMBER_X_X,option.name(),val);
    int[] ii=(int[])get(option);
    if (index == -1) {
      if (ii == null)       ii=new int[0];
      final IntList il=new IntList(ii.length + 1);
      for (      final int i : ii)       il.add(i);
      put(option,il.add(v).finish());
    }
 else {
      if (index < 0 || index >= ii.length)       throw new BaseXException(Text.OPT_OFFSET_X,option.name());
      ii[index]=v;
    }
  }
 else   if (option instanceof StringsOption) {
    String[] ss=(String[])get(option);
    if (index == -1) {
      if (ss == null)       ss=new String[0];
      final StringList sl=new StringList(ss.length + 1);
      for (      final String s : ss)       sl.add(s);
      put(option,sl.add(val).finish());
    }
 else     if (index == 0) {
      final int v=Strings.toInt(val);
      if (v == MIN_VALUE)       throw new BaseXException(Text.OPT_NUMBER_X_X,option.name(),val);
      values.put(name,new String[v]);
    }
 else {
      if (index <= 0 || index > ss.length)       throw new BaseXException(Text.OPT_OFFSET_X,option.name());
      ss[index - 1]=val;
    }
  }
 else {
    throw Util.notExpected("Unsupported option: " + option);
  }
  return true;
}
