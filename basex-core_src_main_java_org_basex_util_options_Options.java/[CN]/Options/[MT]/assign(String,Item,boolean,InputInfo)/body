{
  final Option<?> option=options.get(name);
  if (option == null) {
    if (error)     throw new BaseXException(error(name));
    return false;
  }
  if (option instanceof BooleanOption) {
    final boolean v;
    if (item.type.isStringOrUntyped()) {
      final String string=string(item.string(null));
      v=Strings.yes(string);
      if (!v && !Strings.no(string))       throw new BaseXException(Text.OPT_BOOLEAN_X_X,option.name(),string);
    }
 else     if (item instanceof Bln) {
      v=((Bln)item).bool(null);
    }
 else {
      throw new BaseXException(Text.OPT_BOOLEAN_X_X,option.name(),item);
    }
    put(option,v);
  }
 else   if (option instanceof NumberOption) {
    if (item instanceof ANum) {
      put(option,(int)((ANum)item).itr(null));
    }
 else {
      throw new BaseXException(Text.OPT_NUMBER_X_X,option.name(),item);
    }
  }
 else   if (option instanceof StringOption) {
    if (item.type.isStringOrUntyped()) {
      put(option,string(item.string(null)));
    }
 else {
      throw new BaseXException(Text.OPT_STRING_X_X,option.name(),item);
    }
  }
 else   if (option instanceof EnumOption) {
    if (item.type.isStringOrUntyped()) {
      final EnumOption<?> eo=(EnumOption<?>)option;
      final String string=string(item.string(null));
      final Object v=eo.get(string);
      if (v == null)       throw new BaseXException(allowed(option,string,(Object[])eo.values()));
      put(option,v);
    }
 else {
      throw new BaseXException(Text.OPT_STRING_X_X,option.name(),item);
    }
  }
 else   if (option instanceof OptionsOption) {
    final Options o=((OptionsOption<?>)option).newInstance();
    if (item instanceof Map) {
      o.assign((Map)item,error,info);
    }
 else {
      throw new BaseXException(Text.OPT_MAP_X_X,option.name(),item);
    }
    put(option,o);
  }
 else   if (option instanceof MapOption) {
    if (!(item instanceof Map))     throw new BaseXException(Text.OPT_FUNC_X_X,option.name(),item);
    put(option,item);
  }
 else   if (option instanceof FuncOption) {
    if (!(item instanceof FuncItem))     throw new BaseXException(Text.OPT_FUNC_X_X,option.name(),item);
    put(option,item);
  }
 else {
    throw Util.notExpected("Unsupported option: " + option);
  }
  return true;
}
