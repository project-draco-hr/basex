{
  if (options.isEmpty()) {
    free.put(name,value);
  }
 else {
    final Option option=options.get(name);
    if (option == null)     throw new BaseXException(error(name));
    if (option instanceof BooleanOption) {
      final BooleanOption bo=(BooleanOption)option;
      final boolean v;
      if (value == null || value.isEmpty()) {
        v=!get(bo);
      }
 else {
        v=Util.yes(value);
        if (!v && !Util.no(value))         throw new BaseXException(Text.OPT_BOOLEAN,option.name());
      }
      set(bo,v);
    }
 else     if (option instanceof EnumOption) {
      @SuppressWarnings("unchecked") final EnumOption<V> eo=(EnumOption<V>)option;
      final V v=eo.get(value);
      if (v != null)       set(eo,v);
 else       throw new BaseXException(allowed(option,(Object[])eo.values()));
    }
 else     if (option instanceof NumberOption) {
      final int v=toInt(value);
      if (v == Integer.MIN_VALUE)       throw new BaseXException(Text.OPT_NUMBER,option.name());
      set((NumberOption)option,v);
    }
 else     if (option instanceof StringOption) {
      set((StringOption)option,value);
    }
 else     if (option instanceof NumbersOption) {
      final NumbersOption no=(NumbersOption)option;
      int[] ii=get(no);
      if (ii == null)       ii=new int[0];
      final IntList il=new IntList(ii.length + 1);
      for (      final int i : ii)       il.add(i);
      try {
        il.add(Integer.parseInt(value));
      }
 catch (      final NumberFormatException ex) {
        throw new BaseXException(Text.INVALID_VALUE_X_X,option.name(),value);
      }
      set(no,il.toArray());
    }
 else     if (option instanceof StringsOption) {
      final StringsOption so=(StringsOption)option;
      String[] ss=get(so);
      if (ss == null)       ss=new String[0];
      final StringList sl=new StringList(ss.length + 1);
      for (      final String s : ss)       sl.add(s);
      sl.add(value);
      set(so,sl.toArray());
    }
  }
}
