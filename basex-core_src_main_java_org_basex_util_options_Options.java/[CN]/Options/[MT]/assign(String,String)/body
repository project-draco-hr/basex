{
  if (options.isEmpty()) {
    free.put(name,val);
  }
 else {
    final Option option=options.get(name);
    if (option == null)     throw new BaseXException(error(name));
    if (option instanceof BooleanOption) {
      final boolean v;
      if (val == null || val.isEmpty()) {
        v=!get((BooleanOption)option);
      }
 else {
        v=Util.yes(val);
        if (!v && !Util.no(val))         throw new BaseXException(Text.OPT_BOOLEAN,option.name());
      }
      put(option,v);
    }
 else     if (option instanceof NumberOption) {
      final int v=toInt(val);
      if (v == MIN_VALUE)       throw new BaseXException(Text.OPT_NUMBER,option.name());
      put(option,v);
    }
 else     if (option instanceof StringOption) {
      put(option,val);
    }
 else     if (option instanceof EnumOption) {
      @SuppressWarnings("unchecked") final EnumOption<V> eo=(EnumOption<V>)option;
      final V v=eo.get(val);
      if (v == null)       throw new BaseXException(allowed(option,(Object[])eo.values()));
      put(option,v);
    }
 else     if (option instanceof OptionsOption) {
      @SuppressWarnings("unchecked") final O o=((OptionsOption<O>)option).newInstance();
      o.parse(val);
      put(option,o);
    }
 else     if (option instanceof NumbersOption) {
      int[] ii=(int[])get(option);
      if (ii == null)       ii=new int[0];
      final IntList il=new IntList(ii.length + 1);
      for (      final int i : ii)       il.add(i);
      final int v=toInt(val);
      if (v == MIN_VALUE)       throw new BaseXException(Text.OPT_NUMBER,option.name());
      il.add(v);
      put(option,il.toArray());
    }
 else     if (option instanceof StringsOption) {
      String[] ss=(String[])get(option);
      if (ss == null)       ss=new String[0];
      final StringList sl=new StringList(ss.length + 1);
      for (      final String s : ss)       sl.add(s);
      sl.add(val);
      put(option,sl.toArray());
    }
  }
}
