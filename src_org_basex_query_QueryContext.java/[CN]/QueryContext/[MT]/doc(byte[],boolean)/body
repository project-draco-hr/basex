{
  if (contains(db,'<') || contains(db,'>'))   Err.or(INVDOC,db);
  for (int c=0; c < colls; c++) {
    for (int n=0; n < collect[c].size; n++) {
      if (eq(db,collect[c].item[n].base()))       return (DBNode)collect[c].item[n];
    }
  }
  final String name=string(db);
  for (int d=0; d < docs; d++)   if (doc[d].data.meta.name.equals(name))   return doc[d];
  final IO bxw=IO.get(string(db));
  for (int d=0; d < docs; d++) {
    if (doc[d].data.meta.file.eq(bxw))     return doc[d];
  }
  Data data=null;
  if (Prop.web) {
    try {
      data=Open.open(context,name);
    }
 catch (    final IOException ex) {
      Err.or(INVDOC,name);
    }
  }
 else {
    data=check(name,file == null,coll);
    if (data == null)     data=check(file.merge(bxw).path(),true,coll);
  }
  final DBNode node=new DBNode(data,0);
  addDoc(node);
  return node;
}
