{
  this.n=n;
  this.index=index;
  this.trees=trees;
  this.tTop=tTop;
  this.deepPos=deepPos;
  this.nodes=new InnerNode[8];
  this.poss=new int[8];
  this.nTop=-1;
  long pos=position;
  Node<?,E> curr=root;
  while (curr instanceof InnerNode) {
    final InnerNode<?,E> inner=(InnerNode<?,E>)curr;
    int idx=0;
    Node<?,E> sub=inner.getSub(0);
    for (; ; ) {
      final long sz=sub.size();
      if (pos < sz)       break;
      pos-=sz;
      sub=inner.getSub(++idx);
    }
    if (++nTop == nodes.length) {
      nodes=Arrays.copyOf(nodes,2 * nTop);
      poss=Arrays.copyOf(poss,2 * nTop);
    }
    nodes[nTop]=inner;
    poss[nTop]=idx;
    curr=sub;
  }
  leaf=(Node<E,E>)curr;
  leafPos=(int)(index < n ? pos : pos + 1);
}
