{
  if (index <= 0)   throw new NoSuchElementException();
  if (leaf == null)   init();
  --index;
  if (leafPos > 0)   return leaf.getSub(--leafPos);
  while (nTop >= 0 && poss[nTop] == 0)   nTop--;
  final Node<?,E> start;
  if (nTop >= 0) {
    start=nodes[nTop].getSub(--poss[nTop]);
  }
 else {
    final DeepTree<?,E> curr=trees[tTop];
    if (deepPos > 1) {
      --deepPos;
      start=curr.right[deepPos - 1];
    }
 else     if (deepPos == 1) {
      final FingerTree<?,E> mid=curr.middle;
      if (mid instanceof EmptyTree) {
        final int l=curr.left.length;
        start=curr.left[l - 1];
        deepPos=-1;
      }
 else       if (mid instanceof SingletonTree) {
        start=((SingletonTree<?,E>)mid).elem;
        deepPos=0;
      }
 else {
        final DeepTree<?,E> deep=(DeepTree<?,E>)mid;
        if (++tTop == trees.length) {
          final DeepTree<?,E>[] newTrees=new DeepTree[2 * tTop];
          System.arraycopy(trees,0,newTrees,0,tTop);
          trees=newTrees;
        }
        trees[tTop]=deep;
        final int r=deep.right.length;
        start=deep.right[r - 1];
        deepPos=r;
      }
    }
 else     if (deepPos == 0) {
      start=curr.left[curr.left.length - 1];
      deepPos=-1;
    }
 else {
      final int l=curr.left.length, p=l + deepPos;
      if (p > 0) {
        --deepPos;
        start=curr.left[p - 1];
      }
 else {
        trees[tTop]=null;
        --tTop;
        final Node<?,E>[] left=trees[tTop].left;
        start=left[left.length - 1];
        deepPos=-1;
      }
    }
  }
  Node<?,E> sub=start;
  while (sub instanceof InnerNode) {
    if (++nTop == nodes.length) {
      final InnerNode<?,E>[] newNodes=new InnerNode[2 * nTop];
      System.arraycopy(nodes,0,newNodes,0,nTop);
      nodes=newNodes;
      poss=Arrays.copyOf(poss,2 * nTop);
    }
    nodes[nTop]=(InnerNode<?,E>)sub;
    poss[nTop]=sub.arity() - 1;
    sub=nodes[nTop].getSub(poss[nTop]);
  }
  leaf=(Node<E,E>)sub;
  leafPos=sub.arity() - 1;
  return leaf.getSub(leafPos);
}
