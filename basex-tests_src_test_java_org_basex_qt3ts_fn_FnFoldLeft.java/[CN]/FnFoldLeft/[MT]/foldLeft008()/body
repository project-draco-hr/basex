{
  final XQuery query=new XQuery("\n" + "            let $hours := function ($emp as element(employee)) as xs:integer { sum($emp/hours/xs:integer(.)) },\n" + "                $highest := function ($f as function(item()) as xs:anyAtomicType, $seq as item()*)  {           \n"+ "                    fold-left(\n"+ "                       function($highestSoFar as item()*, $this as item()*) as item()* {\n"+ "                          if (empty($highestSoFar))\n"+ "                          then $this\n"+ "                          else let $thisValue := $f($this),\n"+ "                                   $highestValue := $f($highestSoFar[1])\n"+ "                               return if ($thisValue gt $highestValue)\n"+ "                                      then $this\n"+ "                                      else if ($thisValue eq $highestValue)\n"+ "                                           then ($highestSoFar, $this)\n"+ "                                           else $highestSoFar\n"+ "                       }, (), $seq)\n"+ "            }\n"+ "            \n"+ "            return $highest($hours, /works/employee) \n"+ "        ",ctx);
  try {
    query.context(node(file("docs/works-mod.xml")));
    result=new QT3Result(query.value());
  }
 catch (  final Throwable trw) {
    result=new QT3Result(trw);
  }
 finally {
    query.close();
  }
  test((assertCount(1) && assertType("element(employee)") && assertQuery("$result/@name = \"John Doe 2\"")));
}
