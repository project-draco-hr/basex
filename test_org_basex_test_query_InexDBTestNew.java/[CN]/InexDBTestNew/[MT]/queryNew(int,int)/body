{
  final String que=subfile ? xqm + "for $i score $s in " + queries.get(qu)+ " order by $s descending return (basex:sum-path($i), $s)" : queries.get(qu);
  final Process proc=new XQuery(que);
  if (launcher.execute(proc)) {
    launcher.output(new NullOutput());
  }
  final CachedOutput out=new CachedOutput();
  launcher.info(out);
  SeqIter itr=null;
  final String time=Pattern.compile(".*" + (total ? "Total Time" : "Evaluating") + ": (.*?) ms.*",Pattern.DOTALL).matcher(out.toString()).replaceAll("$1");
  if (subfile) {
    qtimes[qu]+=Double.parseDouble(time);
    final Result val=proc.result();
    if (val instanceof SeqIter) {
      itr=(SeqIter)val;
      for (int i=0; i < itr.size(); i++) {
        if (itr.item[i] instanceof Str) {
          String str=new String(((Str)itr.item[i]).str());
          if (str.startsWith("article")) {
            final int s0=str.indexOf('[');
            final int s1=str.indexOf(']');
            final int c=Integer.parseInt(str.substring(s0 + 1,s1)) + numArt[db];
            final Str tmp=new Str(("article[" + c + str.substring(s1)).getBytes(),false);
            itr.item[i]=tmp;
          }
        }
      }
    }
  }
  log.add("Query " + (qu + 1) + " on "+ databases.get(db)+ ":"+ time+ NL);
  if (info) {
    log.add("- " + Pattern.compile(".*Result: (.*?)\\n.*",Pattern.DOTALL).matcher(out.toString()).replaceAll("$1"));
  }
  return itr;
}
