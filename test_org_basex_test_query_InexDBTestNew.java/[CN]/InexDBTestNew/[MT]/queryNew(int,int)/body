{
  final String que=subfile ? XQM + "for $i score $s in " + queries.get(qu)+ " order by $s descending return (basex:sum-path($i), $s)" : queries.get(qu);
  final Process proc=new XQuery(que);
  if (launcher.execute(proc)) {
    launcher.output(new NullOutput());
  }
  final CachedOutput out=new CachedOutput();
  launcher.info(out);
  SeqIter itr=null;
  final String time=Pattern.compile(".*" + (total ? "Total Time" : "Evaluating") + ": (.*?) ms.*",Pattern.DOTALL).matcher(out.toString()).replaceAll("$1");
  if (subfile) {
    qtimes[qu]+=Double.parseDouble(time);
    if (server) {
    }
    final Result val=proc.result();
    if (val != null && val instanceof SeqIter) {
      itr=(SeqIter)val;
      for (int i=0; i < itr.size(); i++) {
        if (itr.item[i] instanceof Str) {
          String str=string(((Str)itr.item[i]).str());
          if (str.startsWith("article")) {
            final int s0=str.indexOf('[');
            final int s1=str.indexOf(']');
            final int count=Integer.parseInt(str.substring(s0 + 1,s1)) + numArt[db];
            String tmp;
            if (dbpath) {
              tmp=databases.get(db) + ":" + "article["+ (count - numArt[db])+ str.substring(s1);
            }
 else             tmp="article[" + count + str.substring(s1);
            itr.item[i]=Str.get(token(tmp));
          }
        }
      }
    }
  }
  BaseX.outln("Query % on %: %",qu + 1,databases.get(db),time);
  if (info) {
    BaseX.outln("- " + Pattern.compile(".*Result: (.*?)\\n.*",Pattern.DOTALL).matcher(out.toString()).replaceAll("$1"));
  }
  return itr;
}
