{
  final int size=qressizes[db * nqueries + qu];
  final double qtime=qt[db * nqueries + qu];
  qtimes[qu]+=qtime;
  if (size == 0)   return new SeqIter();
  final String que=XQM + "for $i score $s in " + queries.get(qu)+ " order by $s descending "+ "return (basex:sum-path($i), $s, base-uri($i))";
  final Process proc=new XQuery(que);
  final CachedOutput res=new CachedOutput();
  if (session.execute(proc))   session.output(res);
  final SeqIter sq=new SeqIter();
  final StringTokenizer st=new StringTokenizer(res.toString()," ");
  String lp="";
  int z=0;
  while (st.hasMoreTokens() && z < size) {
    final String p=st.nextToken();
    if (!st.hasMoreTokens())     break;
    final String s=st.nextToken();
    if (!st.hasMoreTokens())     break;
    String uri=st.nextToken();
    uri=uri.substring(uri.lastIndexOf('/') + 1);
    final String tmp=uri + ";" + p;
    if (!lp.equals(tmp)) {
      final Str str=Str.get(token(uri + ";" + p));
      str.score(Double.parseDouble(s));
      sq.add(str);
      lp=tmp;
    }
    z++;
  }
  Main.outln("Query % on %: %",qu + 1,databases.get(db),qtime);
  return sq;
}
