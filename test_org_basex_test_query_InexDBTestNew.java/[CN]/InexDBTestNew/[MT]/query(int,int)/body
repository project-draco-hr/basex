{
  final String que=subfile ? xqm + "for $i score $s in " + queries.get(qu)+ " order by $s return (basex:sum-path($i), $s)" : queries.get(qu);
  final Process proc=new XQuery(que);
  if (launcher.execute(proc)) {
    launcher.output(new NullOutput());
  }
  final CachedOutput out=new CachedOutput();
  launcher.info(out);
  final String time=Pattern.compile(".*" + (total ? "Total Time" : "Evaluating") + ": (.*?) ms.*",Pattern.DOTALL).matcher(out.toString()).replaceAll("$1");
  if (subfile) {
    qtimes[qu]+=Double.parseDouble(time);
    final Result val=proc.result();
    if (val instanceof SeqIter) {
      final SeqIter itr=(SeqIter)val;
      if (results[qu] == null)       results[qu]=itr;
 else       results[qu].add(itr);
    }
  }
  BaseX.outln("Query % on %: %",qu + 1,databases.get(db),time);
  if (info) {
    BaseX.outln("- " + Pattern.compile(".*Result: (.*?)\\n.*",Pattern.DOTALL).matcher(out.toString()).replaceAll("$1"));
  }
}
