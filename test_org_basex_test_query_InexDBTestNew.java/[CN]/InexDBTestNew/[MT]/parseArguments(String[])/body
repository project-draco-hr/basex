{
  final Args arg=new Args(args);
  boolean ok=true;
  try {
    while (arg.more() && ok) {
      if (arg.dash()) {
        final char ca=arg.next();
        if (ca == 'x') {
          convertTopics();
          return false;
        }
 else         if (ca == 'd') {
          maxdb=Integer.parseInt(arg.string());
        }
 else         if (ca == 'q') {
          maxqu=Integer.parseInt(arg.string());
        }
 else         if (ca == 'r') {
          runs=Integer.parseInt(arg.string());
        }
 else         if (ca == 's') {
          server=true;
        }
 else         if (ca == 't') {
          total=true;
        }
 else         if (ca == 'c') {
          subfile=true;
        }
 else         if (ca == 'v') {
          info=true;
        }
 else         if (ca == 'p') {
          dbpath=true;
        }
 else         if (ca == 'u') {
          final String[] s=new String[args.length - 1];
          System.arraycopy(args,1,s,0,s.length);
          updateTimes(s);
          return false;
        }
 else {
          ok=false;
        }
      }
 else {
        ok=false;
      }
    }
    launcher=server ? new ClientLauncherNew(ctx) : new Launcher(ctx);
    launcher.execute(new Set(Prop.SERIALIZE,total));
    launcher.execute(new Set(Prop.RUNS,runs));
    launcher.execute(new Set(Prop.INFO,true));
    launcher.execute(new Set(Prop.ALLINFO,info));
  }
 catch (  final Exception ex) {
    if (ex instanceof IOException)     ex.printStackTrace();
    ok=false;
  }
  if (!ok) {
    BaseX.outln("Usage: InexDBTest [options]" + NL + "  -c  create submissionfile"+ NL+ "  -d<no>  maximum no/database"+ NL+ "  -q<no>  maximum no/queries"+ NL+ "  -r<no>  number of runs"+ NL+ "  -s      use server architecture"+ NL+ "  -t      measure total time"+ NL+ "  -v      show process info");
  }
  return ok;
}
