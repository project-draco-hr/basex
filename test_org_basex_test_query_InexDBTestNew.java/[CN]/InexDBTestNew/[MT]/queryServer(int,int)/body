{
  final String que=subfile ? xqm + "for $i score $s in " + queries.get(qu)+ " order by $s descending return (basex:sum-path($i), $s, "+ "base-uri($i))" : queries.get(qu);
  final Process proc=new XQuery(que);
  final CachedOutput res=new CachedOutput();
  if (launcher.execute(proc)) {
    launcher.output(res);
  }
  final CachedOutput out=new CachedOutput();
  launcher.info(out);
  SeqIter sq=new SeqIter();
  if (subfile) {
    StringTokenizer st=new StringTokenizer(res.toString()," ");
    String lp=new String();
    while (st.hasMoreTokens()) {
      final String p=st.nextToken();
      if (!st.hasMoreTokens())       break;
      final String s=st.nextToken();
      if (!st.hasMoreTokens())       break;
      String uri=st.nextToken();
      uri=uri.substring(uri.lastIndexOf('/') + 1);
      final String tmp=uri + ";" + p;
      if (!lp.equals(tmp)) {
        final Str str=new Str((uri + ";" + p).getBytes(),false);
        str.score(Double.parseDouble(s));
        sq.add(str);
        lp=tmp;
      }
      qtimes[qu]+=qt[db * 115 + qu];
    }
  }
  BaseX.outln("Query % on %: %",qu + 1,databases.get(db),qt[db * 115 + qu]);
  if (info) {
    BaseX.outln("- " + Pattern.compile(".*Result: (.*?)\\n.*",Pattern.DOTALL).matcher(out.toString()).replaceAll("$1"));
  }
  return sq;
}
