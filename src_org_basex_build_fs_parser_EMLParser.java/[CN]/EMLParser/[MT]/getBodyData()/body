{
  long pos=bfc.absolutePosition();
  final TokenBuilder tb=new TokenBuilder();
  final boolean bound=mBoundary != null && mBoundary.length() != 0;
  boolean extractText=bound ? readSectionHeader() : true;
  boolean contentElem=false;
  if (bfc.absolutePosition() != pos) {
    fsparser.startContent(pos);
    contentElem=true;
  }
  if (extractText) {
    final long pos2=bfc.absolutePosition();
    boolean first=true;
    boolean emlx=bfc.getFileName().endsWith(".emlx");
    while (readLine()) {
      if (bound && mCurrLine.contains(mBoundary))       break;
      if (emlx && mCurrLine.startsWith("<?xml")) {
        String oldLine=mCurrLine;
        readLine();
        if (mCurrLine.equals(PLIST))         break;
        if (first)         first=false;
 else         tb.add('\n');
        tb.add(oldLine);
      }
      if (first)       first=false;
 else       tb.add('\n');
      tb.add(mCurrLine);
    }
    final byte[] text=tb.finish();
    byte[] data=quotePrint ? decodeQ(text) : text;
    int size=data.length;
    if (size > 0)     fsparser.textContent(pos2,text.length,data,true);
  }
 else {
    while (readLine()) {
      if (bound)       if (mCurrLine.contains(mBoundary))       break;
    }
  }
  quotePrint=false;
  if (contentElem) {
    int readAhead=mCurrLine == null ? 0 : mCurrLine.length();
    fsparser.setContentSize(bfc.absolutePosition() - pos - readAhead- 1);
    fsparser.endContent();
  }
  return mCurrLine != null && bound && !mCurrLine.endsWith("--");
}
