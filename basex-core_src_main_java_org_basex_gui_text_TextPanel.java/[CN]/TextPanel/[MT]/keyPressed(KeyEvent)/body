{
  if (specialKey(e) || modifier(e))   return;
  caret(true);
  final int fh=rend.fontHeight();
  if (SCROLLDOWN.is(e)) {
    scroll.pos(scroll.pos() + fh);
    return;
  }
  if (SCROLLUP.is(e)) {
    scroll.pos(scroll.pos() - fh);
    return;
  }
  final int caret=editor.caret();
  editor.pos(caret);
  if (!PREVLINE.is(e) && !NEXTLINE.is(e))   lastCol=-1;
  final boolean selecting=e.isShiftDown() && !BACKSPACE.is(e) && !PASTE2.is(e)&& !DELLINE.is(e)&& !PREVPAGE_RO.is(e)&& !DELETE.is(e);
  final boolean selected=editor.selected();
  if (selecting && !selected)   editor.startSelect();
  boolean down=true, consumed=true;
  final byte[] txt=editor.text();
  if (MOVEDOWN.is(e)) {
    editor.move(true);
  }
 else   if (MOVEUP.is(e)) {
    editor.move(false);
  }
 else   if (NEXTWORD.is(e)) {
    editor.nextToken(selecting);
  }
 else   if (PREVWORD.is(e)) {
    editor.prevToken(selecting);
    down=false;
  }
 else   if (TEXTSTART.is(e)) {
    if (!selecting)     editor.noSelect();
    editor.pos(0);
    down=false;
  }
 else   if (TEXTEND.is(e)) {
    if (!selecting)     editor.noSelect();
    editor.pos(editor.size());
  }
 else   if (LINESTART.is(e)) {
    editor.home(selecting);
    down=false;
  }
 else   if (LINEEND.is(e)) {
    editor.eol(selecting);
  }
 else   if (PREVPAGE.is(e) || !hist.active() && PREVPAGE_RO.is(e)) {
    up(getHeight() / fh,selecting);
    down=false;
  }
 else   if (NEXTPAGE.is(e) || !hist.active() && NEXTPAGE_RO.is(e)) {
    down(getHeight() / fh,selecting);
  }
 else   if (NEXT.is(e)) {
    editor.next(selecting);
  }
 else   if (PREV.is(e)) {
    editor.prev(selecting);
    down=false;
  }
 else   if (PREVLINE.is(e)) {
    up(1,selecting);
    down=false;
  }
 else   if (NEXTLINE.is(e)) {
    down(1,selecting);
  }
 else {
    consumed=false;
  }
  if (selecting) {
    editor.finishSelect();
  }
 else   if (hist.active()) {
    if (COMPLETE.is(e)) {
      editor.complete();
    }
 else     if (DELLINE.is(e)) {
      editor.deleteLine();
    }
 else     if (DELLINEEND.is(e) || DELNEXTWORD.is(e) || DELETE.is(e)) {
      if (!selected) {
        if (editor.pos() == editor.size())         return;
        editor.startSelect();
        if (DELNEXTWORD.is(e)) {
          editor.nextToken(true);
        }
 else         if (DELLINEEND.is(e)) {
          editor.eol(true);
        }
 else {
          editor.next(true);
        }
        editor.finishSelect();
      }
      editor.delete();
    }
 else     if (DELLINESTART.is(e) || DELPREVWORD.is(e) || BACKSPACE.is(e)) {
      if (!selected) {
        if (editor.pos() == 0)         return;
        if (DELPREVWORD.is(e)) {
          editor.startSelect();
          editor.prevToken(true);
          editor.finishSelect();
        }
 else         if (DELLINESTART.is(e)) {
          editor.startSelect();
          editor.bol(true);
          editor.finishSelect();
        }
 else {
          editor.backspace();
        }
      }
      editor.delete();
      down=false;
    }
 else {
      consumed=false;
    }
  }
  if (consumed)   e.consume();
  editor.setCaret();
  final byte[] tmp=editor.text();
  if (txt != tmp) {
    hist.store(tmp,caret,editor.caret());
    scrollCode.invokeLater(down);
  }
 else   if (caret != editor.caret()) {
    cursorCode.invokeLater(down ? 2 : 0);
  }
}
