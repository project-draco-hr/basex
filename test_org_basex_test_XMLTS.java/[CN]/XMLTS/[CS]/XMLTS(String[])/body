{
  for (  final String arg : args) {
    if (arg.equals("-v")) {
      verbose=true;
    }
 else {
      BaseX.outln("\nXML Conformance Tests\n -v verbose output");
      return;
    }
  }
  Prop.read();
  Prop.textindex=false;
  Prop.attrindex=false;
  Prop.onthefly=true;
  Prop.mainmem=true;
  data=Check.check(FILE);
  final Context ctx=new Context();
  int ok=0;
  int wrong=0;
  final Nodes root=new Nodes(0,data);
  BaseX.outln("\nXML Conformance Tests\n");
  BaseX.outln("file = (expected result) -> BaseX result");
  for (  final int t : nodes("//TEST",root).pre) {
    final Nodes srcRoot=new Nodes(t,data);
    final String uri=text("@URI",srcRoot);
    final boolean valid=text("@TYPE",srcRoot).equals("valid");
    final Proc proc=Proc.get(ctx,Commands.CREATEXML,PATH + uri);
    final boolean success=proc.execute();
    final boolean correct=valid == success;
    BaseX.out(uri + " = " + (valid ? "correct" : "wrong")+ " -> ");
    BaseX.out(success ? "correct" : "wrong");
    BaseX.outln(correct ? " (OK)" : " (WRONG)");
    if (verbose)     BaseX.outln(proc.info() + "\n");
    if (correct)     ok++;
 else     wrong++;
  }
  BaseX.outln("\nResult of Test \"" + new File(FILE).getName() + "\":");
  BaseX.outln("Successful: " + ok);
  BaseX.outln("Wrong: " + wrong);
}
