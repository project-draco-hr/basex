{
  checkCreate(ctx);
  final byte[] path=checkStr(expr[0],ctx);
  final IO base=sc.baseIO();
  if (base == null)   throw STBASEURI.get(info);
  String enc=null;
  try {
    enc=encoding(1,WHICHENC,ctx);
    final String p=string(path);
    if (p.indexOf('#') != -1)     throw FRAGID.get(info,p);
    if (!Uri.uri(p).isValid())     throw INVURL.get(info,p);
    IO io=base.merge(p);
    final String[] rp=ctx.resources.resources.get(io.path());
    if (rp != null && rp.length > 0) {
      io=IO.get(rp[0]);
      if (rp.length > 1)       enc=rp[1];
    }
    if (!io.exists())     throw RESNF.get(info,p);
    final InputStream is=io.inputStream();
    try {
      final TextInput ti=new TextInput(io).encoding(enc).validate(true);
      if (!check)       return Str.get(ti.content());
      while (ti.read() != -1)       ;
      return Bln.TRUE;
    }
  finally {
      is.close();
    }
  }
 catch (  final QueryException ex) {
    if (check && !ex.err().is(ErrType.XPTY))     return Bln.FALSE;
    throw ex;
  }
catch (  final IOException ex) {
    if (check)     return Bln.FALSE;
    if (ex instanceof InputException) {
      final boolean inv=ex instanceof EncodingException || enc != null;
      throw (inv ? INVCHARS : WHICHCHARS).get(info,ex);
    }
    throw RESNF.get(info,path);
  }
}
