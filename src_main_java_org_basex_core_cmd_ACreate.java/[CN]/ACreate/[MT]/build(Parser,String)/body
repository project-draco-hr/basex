{
  if (!MetaData.validName(db,false))   return error(NAME_INVALID_X,db);
  new Close().run(context);
  try {
    if (context.pinned(db))     return error(DB_PINNED_X,db);
    if (prop.is(Prop.MAINMEM)) {
      final Data data=progress(new MemBuilder(db,parser,prop)).build();
      context.openDB(data);
      context.pin(data);
    }
 else {
      Data data=progress(new DiskBuilder(db,parser,context)).build();
      data.close();
      final Open open=new Open(db);
      if (!open.run(context))       return error(open.info());
      data=context.data();
      data.meta.pathindex=data.meta.createpath;
      if (data.meta.createtext)       create(IndexType.TEXT,data,this);
      if (data.meta.createattr)       create(IndexType.ATTRIBUTE,data,this);
      if (data.meta.createftxt)       create(IndexType.FULLTEXT,data,this);
      data.flush();
      context.getDatabases().add(db);
    }
    return info(parser.info() + DB_CREATED_X_X,db,perf);
  }
 catch (  final ProgressException ex) {
    throw ex;
  }
catch (  final IOException ex) {
    Util.debug(ex);
    abort();
    final String msg=ex.getMessage();
    return error(msg != null && !msg.isEmpty() ? msg : Util.info(NOT_PARSED_X,parser.src));
  }
catch (  final Exception ex) {
    Util.debug(ex);
    abort();
    return error(Util.info(NOT_PARSED_X,parser.src));
  }
}
