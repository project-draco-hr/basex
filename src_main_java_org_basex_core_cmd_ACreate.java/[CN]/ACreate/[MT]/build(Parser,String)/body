{
  if (!MetaData.validName(db,false))   return error(NAMEINVALID,db);
  new Close().run(context);
  try {
    if (context.pinned(db))     return error(DBPINNED,db);
    final boolean mem=prop.is(Prop.MAINMEM);
    builder=mem ? new MemBuilder(db,parser,prop) : new DiskBuilder(db,parser,context);
    Data data=progress(builder).build();
    if (mem) {
      context.openDB(data);
      context.pin(data);
    }
 else {
      data.close();
      final Open open=new Open(db);
      if (!open.run(context))       return error(open.info());
      data=context.data();
      if (data.meta.createtext)       create(IndexType.TEXT,data,this);
      if (data.meta.createattr)       create(IndexType.ATTRIBUTE,data,this);
      if (data.meta.createftxt)       create(IndexType.FULLTEXT,data,this);
      data.meta.pathindex=data.meta.createpath;
      data.flush();
    }
    return info(parser.info() + DBCREATED,db,perf);
  }
 catch (  final ProgressException ex) {
    throw ex;
  }
catch (  final IOException ex) {
    Util.debug(ex);
    abort();
    final String msg=ex.getMessage();
    return error(msg != null && msg.length() != 0 ? msg : Util.info(PARSEERR,parser.src));
  }
catch (  final Exception ex) {
    Util.debug(ex);
    abort();
    return error(Util.info(PARSEERR,parser.src));
  }
}
