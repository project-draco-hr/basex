{
  DataAccess t=new DataAccess(data.meta.file(DATAFTX + 't'));
  byte tl=t.read1();
  while (tl > 0) {
    final long pos=t.pos();
    final byte[] tok=t.readBytes(pos,pos + tl);
    final int siz=t.read4();
    final long off=t.read5();
    index.insertSorted(tok,siz,off);
    tl=t.read1();
  }
  t.close();
  final TokenList tokens=index.tokens;
  final IntArrayList next=index.next;
  final DataOutput outN=new DataOutput(data.meta.file(DATAFTX + 'a'));
  final DataOutput outS=new DataOutput(data.meta.file(DATAFTX + 'c'));
  int siz=0;
  if (index.count != 1) {
    outN.write((byte)1);
    outN.write((byte)-1);
    int j=1;
    final int js=next.get(0).length - 2;
    for (; j < js; j++) {
      outN.writeInt(next.get(0)[j]);
      outN.write(tokens.get(next.get(next.get(0)[j])[0])[0]);
    }
    outN.writeInt(next.get(0)[j]);
    outN.write5(-1);
    outS.writeInt(siz);
    siz+=2L + (next.get(0).length - 3) * 5L + 9L;
    final int il=next.size();
    for (int i=1; i < il; i++) {
      final int[] nxt=next.get(i);
      final int lp=nxt[nxt.length - 1] > -1 ? 0 : -1;
      outN.write((byte)tokens.get(nxt[0]).length);
      outN.write(tokens.get(nxt[0]));
      j=1;
      for (; j < nxt.length - 2 + lp; j++) {
        outN.writeInt(nxt[j]);
        outN.write(tokens.get(next.get(nxt[j])[0])[0]);
      }
      outN.writeInt(nxt[j]);
      if (nxt[j] == 0 && nxt[j + 1] == 0) {
        outN.write5(nxt[j + 1]);
      }
 else {
        if (lp == 0) {
          outN.write5(nxt[j + 1]);
        }
 else {
          outN.write5(toLong(nxt,nxt.length - 2));
        }
      }
      outS.writeInt(siz);
      siz+=1L + tokens.get(nxt[0]).length * 1L + (nxt.length - 3 + lp) * 5L + 9L;
    }
  }
  outS.writeInt(siz);
  outN.close();
  outS.close();
  DropDB.delete(data.meta.name,DATAFTX + "\\d+." + IO.BASEXSUFFIX,data.meta.prop);
}
