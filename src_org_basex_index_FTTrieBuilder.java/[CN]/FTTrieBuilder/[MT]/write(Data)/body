{
  final String db=data.meta.name;
  final DataOutput outb=new DataOutput(db,DATAFTX + 'b');
  hash.init();
  while (hash.more()) {
    final int p=hash.next();
    final byte[] tok=hash.key();
    final int ds=hash.ns[p];
    final long cpre=outb.size();
    final byte[] vpre=hash.pre[p];
    final byte[] vpos=hash.pos[p];
    int lpre=4;
    int lpos=4;
    final int pres=Num.size(vpre);
    final int poss=Num.size(vpos);
    while (lpre < pres && lpos < poss) {
      for (int z=0, l=Num.len(vpre,lpre); z < l; z++)       outb.write(vpre[lpre++]);
      for (int z=0, l=Num.len(vpos,lpos); z < l; z++)       outb.write(vpos[lpos++]);
    }
    index.insertSorted(tok,ds,cpre);
  }
  hash=null;
  final TokenList tokens=index.tokens;
  final IntArrayList next=index.next;
  final DataOutput outN=new DataOutput(db,DATAFTX + 'a');
  final DataOutput outS=new DataOutput(db,DATAFTX + 'c');
  int s=0;
  if (index.count != 1) {
    outN.write((byte)1);
    outN.write((byte)-1);
    int j=1, js=next.get(0).length - 2;
    for (; j < js; j++) {
      outN.writeInt(next.get(0)[j]);
      outN.write(tokens.get(next.get(next.get(0)[j])[0])[0]);
    }
    outN.writeInt(next.get(0)[j]);
    outN.write5(-1);
    outS.writeInt(s);
    s+=2L + (next.get(0).length - 3) * 5L + 9L;
    final int il=next.size();
    for (int i=1; i < il; i++) {
      final int[] nxt=next.get(i);
      final int lp=nxt[nxt.length - 1] > -1 ? 0 : -1;
      outN.write((byte)tokens.get(nxt[0]).length);
      outN.write(tokens.get(nxt[0]));
      j=1;
      for (; j < nxt.length - 2 + lp; j++) {
        outN.writeInt(nxt[j]);
        outN.write(tokens.get(next.get(nxt[j])[0])[0]);
      }
      outN.writeInt(nxt[j]);
      if (nxt[j] == 0 && nxt[j + 1] == 0) {
        outN.write5(nxt[j + 1]);
      }
 else {
        if (lp == 0) {
          outN.write5(nxt[j + 1]);
        }
 else {
          outN.write5(toLong(nxt,nxt.length - 2));
        }
      }
      outS.writeInt(s);
      s+=1L + tokens.get(nxt[0]).length * 1L + (nxt.length - 3 + lp) * 5L + 9L;
    }
  }
  outS.writeInt(s);
  outb.close();
  outN.close();
  outS.close();
}
