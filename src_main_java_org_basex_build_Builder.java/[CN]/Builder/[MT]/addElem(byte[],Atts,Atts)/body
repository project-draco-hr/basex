{
  int n=tags.index(nm,null,true);
  path.index(n,Data.ELEM,level);
  final int pre=meta.size;
  tstack.set(level,n);
  pstack.set(level,pre);
  ns.prepare();
  final int nps=nsp.size();
  for (int nx=0; nx < nps; nx++)   ns.add(nsp.name(nx),nsp.string(nx),meta.size);
  final int dis=level != 0 ? pre - pstack.get(level - 1) : 1;
  final int as=att.size();
  int u=ns.uri(nm,true);
  if (u == 0 && indexOf(nm,':') != -1 && !eq(prefix(nm),XML))   throw new BuildException(WHICHNS,parser.detail(),prefix(nm));
  addElem(dis,n,Math.min(IO.MAXATTS,as + 1),u,ns.finish());
  for (int a=0; a < as; ++a) {
    final byte[] av=att.string(a);
    final byte[] an=att.name(a);
    n=atts.index(an,av,true);
    u=ns.uri(an,false);
    if (u == 0 && indexOf(an,':') != -1 && !eq(prefix(an),XML))     throw new BuildException(WHICHNS,parser.detail(),an);
    path.index(n,Data.ATTR,level + 1,av,meta);
    addAttr(n,av,Math.min(IO.MAXATTS,a + 1),u);
  }
  if (level > 1)   tags.stat(tstack.get(level - 1)).setLeaf(false);
  limit(tags.size(),0x8000,LIMITELEMS);
  limit(atts.size(),0x8000,LIMITATTS);
  limit(ns.size(),0x100,LIMITNS);
  if (meta.size < 0)   limit(0,0,LIMITRANGE);
}
