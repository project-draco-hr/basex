{
  final Constr c=new Constr(ctx,expr[1]);
  final NodIter cList=c.children;
  final NodIter aList=c.ats;
  if (c.errAtt)   error(UPNOATTRPER);
  if (c.duplAtt != null)   error(UPATTDUPL,c.duplAtt);
  final Iter t=expr[0].iter(ctx);
  final Item i=t.next();
  if (i == null)   error(UPSEQEMP,Main.name(this));
  if (!(i instanceof Nod) || t.next() != null)   error(before || after ? UPTRGTYP2 : UPTRGTYP);
  final Nod n=(Nod)i;
  final Nod par=n.parent();
  if (before || after) {
    if (n.type == Type.ATT || n.type == Type.DOC)     error(UPTRGTYP2);
    if (par == null)     error(UPPAREMPTY);
  }
 else {
    if (n.type != Type.ELM && n.type != Type.DOC)     error(UPTRGTYP);
  }
  UpdatePrimitive up=null;
  if (aList.size() > 0) {
    final Nod targ=before || after ? par : n;
    if (targ.type != Type.ELM)     error(before || after ? UPATTELM : UPATTELM2);
    up=new InsertAttribute(this,targ,checkNS(aList,targ,ctx));
    ctx.updates.add(up,ctx);
  }
  if (cList.size() > 0) {
    if (before) {
      up=new InsertBefore(this,n,cList);
    }
 else     if (after) {
      up=new InsertAfter(this,n,cList);
    }
 else     if (first) {
      up=new InsertIntoFirst(this,n,cList);
    }
 else {
      up=new InsertInto(this,n,cList,last);
    }
    ctx.updates.add(up,ctx);
  }
  return Seq.EMPTY;
}
