{
  final FuncType ft=(FuncType)type().type;
  final boolean c=ret != null && !expr.type().instanceOf(ret);
  final Expr body;
  if (!scope.closure().isEmpty()) {
    final LinkedList<GFLWOR.Clause> cls=new LinkedList<GFLWOR.Clause>();
    for (    final Entry<Var,Expr> e : scope.closure().entrySet())     cls.add(new Let(e.getKey(),e.getValue().value(ctx),false,ii));
    body=new GFLWOR(ii,cls,expr);
  }
 else {
    body=expr;
  }
  return new FuncItem(sc,ann,null,args,ft,body,c,scope.stackSize());
}
