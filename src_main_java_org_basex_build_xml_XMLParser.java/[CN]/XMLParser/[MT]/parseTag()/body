{
  if (scanner.type == Type.L_BR_CLOSE) {
    scanner.more();
    byte[] tag=consumeToken(Type.ELEMNAME);
    if (stripNS)     tag=local(tag);
    skipSpace();
    if (tags.isEmpty())     throw new BuildException(OPEN,det(),tag);
    final byte[] open=tags.pop();
    if (!eq(open,tag))     throw new BuildException(CLOSINGELEM,det(),tag,open);
    chops.pop();
    builder.closeElem();
    if (tags.isEmpty())     closed=true;
    return consume(Type.R_BR);
  }
  consume(Type.L_BR);
  atts.clear();
  nsp.clear();
  byte[] en=consumeToken(Type.ELEMNAME);
  if (stripNS)   en=local(en);
  skipSpace();
  while (scanner.type != Type.R_BR && scanner.type != Type.CLOSE_R_BR) {
    final byte[] an=consumeToken(Type.ATTNAME);
    skipSpace();
    consume(Type.EQ);
    skipSpace();
    consume(Type.QUOTE);
    byte[] av=EMPTY;
    if (scanner.type == Type.ATTVALUE) {
      av=scanner.token.finish();
      scanner.more();
    }
    consume(Type.QUOTE);
    if (startsWith(an,XMLNSC)) {
      if (!stripNS)       nsp.add(local(an),av);
    }
 else     if (eq(an,XMLNS)) {
      if (!stripNS)       nsp.add(EMPTY,av);
    }
 else {
      atts.add(stripNS ? local(an) : an,av);
    }
    if (scanner.type != Type.R_BR && scanner.type != Type.CLOSE_R_BR) {
      consume(Type.WS);
    }
  }
  if (scanner.type == Type.CLOSE_R_BR) {
    builder.emptyElem(en,atts,nsp);
    if (tags.isEmpty())     closed=true;
    return scanner.more();
  }
  builder.openElem(en,atts,nsp);
  tags.push(en);
  boolean c=chops.peek();
  if (chop) {
    final int a=atts.get(DataText.XML_SPACE);
    if (a != -1) {
      final byte[] s=atts.value(a);
      if (eq(s,DataText.DEFAULT))       c=true;
 else       if (eq(s,DataText.PRESERVE))       c=false;
    }
  }
  chops.push(c);
  return consume(Type.R_BR);
}
