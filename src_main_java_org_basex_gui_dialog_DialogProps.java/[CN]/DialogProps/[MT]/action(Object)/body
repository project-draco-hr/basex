{
  if (cmp != null) {
    for (int i=0; i < LABELS.length; i++) {
      if (cmp != indxs[i])       continue;
      final String label=indxs[i].getText();
      final Command cmd;
      if (label.equals(OPTIMIZE + DOTS)) {
        cmd=new Optimize();
      }
 else       if (label.equals(DROP + DOTS)) {
        cmd=new DropIndex(TYPES[i]);
      }
 else {
        cmd=new CreateIndex(TYPES[i]);
        ft.setOptions();
      }
      DialogProgress.execute(this,"",cmd);
      return;
    }
  }
  resources.action(cmp);
  add.action(cmp);
  final Data data=gui.context.data();
  final boolean[] val={true,true,true,data.meta.textindex,data.meta.attrindex,data.meta.ftxtindex};
  if (cmp == this) {
    final boolean utd=data.meta.uptodate;
    for (int i=0; i < LABELS.length; ++i) {
      final boolean struct=i < 3;
      String lbl=LABELS[i];
      if (struct && !utd)       lbl+=" (" + OUT_OF_DATE + ')';
      labels[i].setText(lbl);
      infos[i].setText(val[i] ? data.info(TYPES[i]) : Token.token(HELP[i]));
      if (indxs[i] != null) {
        indxs[i].setText((struct ? OPTIMIZE : val[i] ? DROP : CREATE) + DOTS);
        if (struct)         indxs[i].setEnabled(!utd);
      }
    }
    final int f=5;
    tabFT.removeAll();
    panels[f].removeAll();
    add(f,tabFT,val[f] ? null : ft);
    panels[f].revalidate();
    panels[f].repaint();
  }
  ft.action();
}
