{
  super.comp(ctx);
  if (swap()) {
    op=op.swap();
    ctx.compInfo(OPTSWAP,this);
  }
  for (int e=0; e != expr.length; ++e)   expr[e]=expr[e].addText(ctx);
  final Expr e1=expr[0];
  final Expr e2=expr[1];
  Expr e=this;
  if (oneEmpty()) {
    e=optPre(Bln.FALSE,ctx);
  }
 else   if (values()) {
    e=preEval(ctx);
  }
 else   if (e1.isFun(Function.COUNT)) {
    e=compCount(op.op);
    if (e != this)     ctx.compInfo(e instanceof Bln ? OPTPRE : OPTWRITE,this);
  }
 else   if (e1.isFun(Function.POSITION)) {
    if (e2 instanceof Range && op.op == CmpV.Op.EQ) {
      final long[] rng=((Range)e2).range(ctx);
      e=rng == null ? this : Pos.get(rng[0],rng[1],input);
    }
 else {
      e=Pos.get(op.op,e2,e,input);
    }
    if (e != this)     ctx.compInfo(OPTWRITE,this);
  }
 else   if (e1.type().eq(SeqType.BLN) && (op == Op.EQ && e2 == Bln.FALSE || op == Op.NE && e2 == Bln.TRUE)) {
    e=Function.NOT.get(input,e1);
  }
 else {
    e=CmpR.get(this);
    if (e != this)     ctx.compInfo(OPTWRITE,this);
  }
  atomic=e1.type().zeroOrOne() && e2.type().zeroOrOne();
  type=SeqType.BLN;
  return e;
}
