{
  final File repoDir=new File(prop.get(Prop.REPOPATH));
  if (repoDir.exists()) {
    final File[] pkgDirs=repoDir.listFiles();
    for (int i=0; i < pkgDirs.length; i++) {
      if (pkgDirs[i].isDirectory()) {
        final File pkgDesc=new File(pkgDirs[i].getPath() + SEP + PKGDESC);
        if (!pkgDesc.exists()) {
        }
 else {
          final IOFile io=new IOFile(pkgDesc);
          final Parser p=Parser.xmlParser(io,prop,"");
          final ANode pkgNode=new DBNode(MemBuilder.build(p,prop,""),0).children().next();
          final Package pkg=PackageParser.parse(pkgNode);
          final Iterator<Component> compIt=pkg.comps.iterator();
          Component comp;
          byte[] compNs;
          while (compIt.hasNext()) {
            comp=compIt.next();
            compNs=comp.namespace;
            if (compNs != null) {
              if (nsDict.get(compNs) != null) {
                nsDict.get(compNs).add(pkg.name);
              }
 else {
                final TokenList vals=new TokenList();
                vals.add(pkg.name);
                nsDict.add(compNs,vals);
              }
            }
          }
          pkgDict.add(pkg.getName(),pkg.abbrev);
        }
      }
    }
  }
}
