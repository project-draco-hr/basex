{
  try {
    final File pkgDesc=new File(pkgDir.getPath() + Prop.DIRSEP + PKGDESC);
    if (pkgDesc.exists()) {
      final IOFile io=new IOFile(pkgDesc);
      final Package pkg=PackageParser.parse(io,ctx,null);
      for (      final Component comp : pkg.comps) {
        if (comp.namespace != null) {
          if (nsDict.get(comp.namespace) != null) {
            nsDict.get(comp.namespace).add(pkg.getName());
          }
 else {
            final TokenList vals=new TokenList();
            vals.add(pkg.getName());
            nsDict.add(comp.namespace,vals);
          }
        }
      }
      pkgDict.add(pkg.getName(),token(pkgDir.getName()));
    }
 else     Util.notexpected("Missing package descriptor for package " + pkgDir.getName());
  }
 catch (  final QueryException ex) {
    Util.debug(ex);
  }
}
