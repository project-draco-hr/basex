{
  final Expr e=expr.length == 1 ? expr[0] : null;
switch (sig) {
case FALSE:
    return Bln.FALSE;
case TRUE:
  return Bln.TRUE;
case EMPTY:
return Bln.get(e.iter(ctx).next() == null);
case EXISTS:
return Bln.get(e.iter(ctx).next() != null);
case BOOLEAN:
return Bln.get(e.ebv(ctx,info).bool(info));
case NOT:
return Bln.get(!e.ebv(ctx,info).bool(info));
case DEEP_EQUAL:
return Bln.get(deep(ctx));
case DEEP_EQUAL_OPT:
return Bln.get(deepOpt(ctx));
case ZERO_OR_ONE:
Iter ir=e.iter(ctx);
Item it=ir.next();
if (it != null && ir.next() != null) EXPECTZ0.thrw(info);
return it;
case EXACTLY_ONE:
ir=e.iter(ctx);
it=ir.next();
if (it == null || ir.next() != null) EXPECTO.thrw(info);
return it;
default :
return super.item(ctx,ii);
}
}
