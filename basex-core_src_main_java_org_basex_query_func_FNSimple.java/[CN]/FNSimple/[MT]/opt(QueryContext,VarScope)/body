{
  if (exprs.length == 0)   return this;
  final Expr e=exprs[0];
switch (func) {
case EMPTY:
case EXISTS:
    return e.size() == -1 || e.has(Flag.NDT) || e.has(Flag.CNS) || e.has(Flag.UPD) ? this : Bln.get(func == Function.EMPTY ^ e.size() != 0);
case BOOLEAN:
  return e.seqType().eq(SeqType.BLN) ? e : this;
case NOT:
if (e.isFunction(Function.EMPTY)) {
  qc.compInfo(QueryText.OPTWRITE,this);
  exprs=((Arr)e).exprs;
  func=Function.EXISTS;
}
 else if (e.isFunction(Function.EXISTS)) {
  qc.compInfo(QueryText.OPTWRITE,this);
  exprs=((Arr)e).exprs;
  func=Function.EMPTY;
}
 else if (e instanceof CmpV || e instanceof CmpG) {
  final Cmp c=((Cmp)e).invert();
  return c == e ? this : c;
}
 else if (e.isFunction(Function.NOT)) {
  return compBln(((Arr)e).exprs[0],info);
}
 else {
  exprs[0]=e.compEbv(qc);
}
return this;
case ZERO_OR_ONE:
seqType=SeqType.get(e.seqType().type,Occ.ZERO_ONE);
return e.seqType().zeroOrOne() ? e : this;
case EXACTLY_ONE:
seqType=SeqType.get(e.seqType().type,Occ.ONE);
return e.seqType().one() ? e : this;
case ONE_OR_MORE:
seqType=SeqType.get(e.seqType().type,Occ.ONE_MORE);
return e.seqType().mayBeZero() ? this : e;
case UNORDERED:
return e;
default :
return this;
}
}
