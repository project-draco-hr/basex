{
switch (func) {
case ONE_OR_MORE:
    final Iter ir=exprs[0].iter(qc);
  final long len=ir.size();
if (len == 0) throw EXPECTOM.get(info);
if (len > 0) return ir;
return new Iter(){
private boolean first=true;
@Override public Item next() throws QueryException {
final Item it=ir.next();
if (first) {
  if (it == null)   throw EXPECTOM.get(info);
  first=false;
}
return it;
}
}
;
case UNORDERED:
return qc.iter(exprs[0]);
default :
return super.iter(qc);
}
}
