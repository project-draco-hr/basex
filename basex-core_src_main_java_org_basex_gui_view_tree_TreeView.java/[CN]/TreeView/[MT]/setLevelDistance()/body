{
  final int h=wheight - BOTTOM_MARGIN;
  int lvs=0;
  for (int i=0; i < roots.length; ++i) {
    final int th=sub.subtreeHeight(i);
    if (th > lvs)     lvs=th;
  }
  int nh=(int)(fontSize * 1.4);
  final int dist=nh <= BEST_NODE_HEIGHT ? MIN_LEVEL_DISTANCE : BEST_LEVEL_DISTANCE;
  while (true) {
    final double ld=(h - lvs * nh) / (lvs - 1d);
    if (ld >= dist || nh < MIN_NODE_HEIGHT) {
      levelDistance=Math.max(MIN_LEVEL_DISTANCE,Math.min(MAX_LEVEL_DISTANCE,(int)ld));
      break;
    }
    nh--;
  }
  nodeHeight=nh;
  topMargin=Math.max(TOP_MARGIN,(h - (levelDistance * (lvs - 1) + lvs * nh)) / 2);
}
