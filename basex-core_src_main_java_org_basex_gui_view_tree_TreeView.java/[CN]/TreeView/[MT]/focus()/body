{
  if (refreshedFocus) {
    fpre=gui.context.focused;
    final int rl=roots.length;
    for (int r=0; r < rl; ++r) {
      for (int i=0; i < sub.subtreeHeight(r); ++i) {
        if (tr.bigRect(sub,r,i)) {
          final int index=sub.preIndex(r,i,fpre);
          if (index > -1) {
            frn=r;
            frect=tr.getTreeRectsPerLevel(r,i)[0];
            flv=i;
            return true;
          }
        }
 else {
          final TreeRect rect=tr.searchRect(sub,r,i,fpre);
          if (rect != null) {
            frn=r;
            frect=rect;
            flv=i;
            return true;
          }
        }
      }
    }
  }
 else {
    final int lv=getLevelPerY(mousePosY);
    if (lv < 0)     return false;
    final int mx=mousePosX;
    final int rn=frn=getTreePerX(mx);
    final int h=sub.subtreeHeight(rn);
    if (h < 0 || lv >= h)     return false;
    final TreeRect[] rL=tr.getTreeRectsPerLevel(rn,lv);
    final int rl=rL.length;
    for (int l=0; l < rl; l++) {
      final TreeRect r=rL[l];
      if (r.contains(mx)) {
        frect=r;
        flv=lv;
        final int pre;
        if (tr.bigRect(sub,rn,lv)) {
          pre=tr.getPrePerXPos(sub,rn,lv,mx);
        }
 else {
          pre=sub.prePerIndex(rn,lv,l);
        }
        fpre=pre;
        gui.notify.focus(pre,this);
        refreshedFocus=false;
        return true;
      }
    }
  }
  refreshedFocus=false;
  return false;
}
