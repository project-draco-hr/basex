{
  final int y=getYperLevel(lv);
  final int h=nodeHeight;
  final boolean br=tr.bigRect(sub,rn,lv);
  boolean txt=!br && fontHeight <= h;
  final boolean fill;
  boolean border=false;
  final int xx=r.x;
  final int ww=r.w;
  final boolean marked=marked(xx,y);
  Color borderColor=null;
  Color fillColor;
  Color textColor=Color.BLACK;
switch (t) {
case RECTANGLE:
    borderColor=getColorPerLevel(lv,false);
  fillColor=getColorPerLevel(lv,true);
border=true;
fill=true;
break;
case HIGHLIGHT:
borderColor=color4;
final int alpha=0xDD000000;
final int rgb=GUIConstants.LGRAY.getRGB();
fillColor=new Color(rgb + alpha,true);
if (h > 4) border=true;
fill=!br && !marked;
break;
case MARK:
borderColor=h > 2 && r.w > 4 ? colormark1A : colormark1;
fillColor=colormark1;
border=true;
fill=true;
break;
case DESCENDANTS:
final int alphaD=0xDD000000;
final int rgbD=color(6).getRGB();
fillColor=new Color(rgbD + alphaD,true);
borderColor=color(8);
textColor=Color.WHITE;
fill=!marked;
border=true;
if (h < 4) {
fillColor=SMALL_SPACE_COLOR;
borderColor=fillColor;
txt=false;
}
break;
case PARENT:
default :
fillColor=color(6);
textColor=Color.WHITE;
fill=!br && !marked;
border=!br;
if (h < 4) {
fillColor=SMALL_SPACE_COLOR;
borderColor=color(8);
txt=false;
}
break;
}
if (border) {
g.setColor(borderColor);
g.drawRect(xx,y,ww,h);
}
if (fill) {
g.setColor(fillColor);
g.fillRect(xx + 1,y + 1,ww - 1,h - 1);
}
if (txt && fill) {
g.setColor(textColor);
drawRectangleText(g,lv,r,pre);
}
}
