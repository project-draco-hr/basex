{
  final int x=selectRect.w < 0 ? selectRect.x + selectRect.w : selectRect.x;
  final int y=selectRect.h < 0 ? selectRect.y + selectRect.h : selectRect.y;
  final int w=Math.abs(selectRect.w);
  final int h=Math.abs(selectRect.h);
  final int t=y + h;
  final int size=sub.maxSubtreeHeight();
  final IntList list=new IntList();
  final int rl=roots.length;
  final int rs=getTreePerX(x);
  final int re=getTreePerX(x + w);
  for (int r=rs < 0 ? 0 : rs; r <= re; ++r) {
    for (int i=0; i < size; ++i) {
      final int yL=getYperLevel(i);
      if (i < sub.subtreeHeight(r) && (yL >= y || yL + nodeHeight >= y) && (yL <= t || yL + nodeHeight <= t)) {
        final TreeRect[] rlv=tr.getTreeRectsPerLevel(r,i);
        final int s=sub.levelSize(r,i);
        if (tr.bigRect(sub,r,i)) {
          if (rl > 1) {
            final TreeBorder tb=sub.treeBorder(r,i);
            final int si=tb.size;
            for (int n=0; n < si; ++n) {
              list.add(sub.prePerIndex(r,i,n));
            }
          }
 else {
            final int mw=rlv[0].w;
            int sPrePos=(int)(s * (x - wstart) / (double)mw);
            int ePrePos=(int)(s * (x - wstart + w) / (double)mw);
            if (sPrePos < 0)             sPrePos=0;
            if (ePrePos >= s)             ePrePos=s - 1;
            do {
              list.add(sub.prePerIndex(r,i,sPrePos));
            }
 while (sPrePos++ < ePrePos);
          }
        }
 else {
          for (int j=0; j < s; ++j) {
            final TreeRect rect=rlv[j];
            if (rect.contains(x,w))             list.add(sub.prePerIndex(r,i,j));
          }
        }
      }
    }
  }
  gui.notify.mark(new DBNodes(gui.context.data(),list.finish()),this);
}
