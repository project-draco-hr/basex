{
  final double ffmax=0.25;
  final double ffmin=0.14;
  final double ffhmax=0.5;
  final double ffhmin=0.28;
  final double flhmax=0.3;
  final double flhmin=0.168;
  double ff=ffmax, ffh=ffhmax, flh=flhmax;
  double fftmin=ffmin, fftmax=ffmax, ffhtmin=ffhmin, ffhtmax=ffhmax, flhtmin=flhmin, flhtmax=flhmax;
  double bff=ffmax, bffh=ffhmax, bflh=flhmax;
  byte lhmi=(byte)Math.max(3,ffh * fs);
  byte fhmi=(byte)Math.max(6,(flh + ffh) * fs);
  int h=r.h;
  r.thumbf=ff * fs;
  r.thumbal=0;
  final FTLexer lex=new FTLexer(s,p);
  final int[][] data=lex.getInfo(s);
  boolean l=false;
  while (r.thumbal < 2) {
    ff=round(fftmax,fftmin);
    r.thumbf=ff * fs;
    ffh=round(ffhtmax,ffhtmin);
    r.thumbfh=(byte)Math.max(1,ffh * fs);
    flh=round(flhtmax,flhtmin);
    r.thumblh=(byte)Math.max(1,(flh + ffh) * fs);
    r.thumbsw=r.thumbf;
switch (r.thumbal) {
case 0:
      h=drawToken(g,r,data,false);
    break;
case 1:
case 2:
  h=drawSentence(g,r,data,false,r.h);
break;
}
if (h >= r.h || le(ffmax,ff) || le(ffhmax,ffh) || le(flhmax,flh)) {
if (l) {
r.thumbf=bff * fs;
r.thumbfh=(byte)Math.max(1,bffh * fs);
r.thumblh=(byte)Math.max(1,(bflh + bffh) * fs);
r.thumbsw=r.thumbf;
switch (r.thumbal) {
case 0:
  drawToken(g,r,data,true);
return;
case 1:
case 2:
drawSentence(g,r,data,true,r.h);
return;
}
}
if (le(ff,ffmin) || le(ffh,ffhmin) || le(flh,flhmin)) {
r.thumbal++;
fhmi=r.thumbfh;
lhmi=r.thumblh;
fftmin=ffmin;
fftmax=ffmax;
ffhtmin=ffhmin;
ffhtmax=ffhmax;
flhtmin=flhmin;
flhtmax=flhmax;
}
 else {
fftmax=ff;
ffhtmax=ffh;
flhtmax=flh;
}
}
 else {
l=true;
bff=ff;
bffh=ffh;
bflh=flh;
fftmin=ff;
ffhtmin=ffh;
flhtmin=flh;
}
}
final double sum=data[3].length + data[4].length;
final double nl=(r.h - 3.0) / lhmi;
final double fnew=(nl * (r.w - 3) - data[4].length) / sum;
r.thumbf=fnew;
r.thumbfh=fhmi;
r.thumblh=lhmi;
r.thumbsw=Math.max(1,fnew);
drawSentence(g,r,data,true,r.h);
}
