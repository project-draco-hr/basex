{
  int[] dirs=new int[]{pre};
  final TokenList toInsert=new TokenList();
  if (target.length == 1) {
    if (fs.isFile(target[0])) {
      error(fs.name(target[0]),20);
      return;
    }
  }
  int d=0;
  while (0 < dirs.length) {
    final IntList allDir=new IntList();
    while (d < dirs.length) {
      final int[] toCopy=fs.children(dirs[d]);
      toInsert.add(null);
      toInsert.add(fs.path(dirs[d],pre,false));
      for (      final int p : toCopy) {
        if (fs.isDir(p)) {
          allDir.add(p);
          toInsert.add(Token.token("d"));
        }
 else {
          toInsert.add(Token.token("f"));
        }
        toInsert.add(fs.name(p));
        toInsert.add(fs.suffix(p));
        toInsert.add(fs.size(p));
      }
      ++d;
    }
    dirs=allDir.finish();
    d=0;
  }
  int copyRoot;
  int parPre;
  int preOfNewFile=4;
  if (target.length == 1) {
    if (!(target[0] == DataFS.ROOTDIR)) {
      preOfNewFile=target[0] + DataFS.NUMATT;
    }
    parPre=target[0];
    fs.insert(true,fs.name(pre),Token.EMPTY,Token.ZERO,fs.currTime(),parPre,preOfNewFile);
    parPre=preOfNewFile;
  }
 else {
    if (!(curPre == DataFS.ROOTDIR)) {
      preOfNewFile=curPre + DataFS.NUMATT;
    }
    parPre=preOfNewFile;
    fs.insert(true,Token.token(targetFile),Token.EMPTY,Token.ZERO,fs.currTime(),curPre,preOfNewFile);
  }
  copyRoot=parPre;
  final byte[] f=Token.token("f");
  while (toInsert.size != 0) {
    if (toInsert.list[0] == null) {
      toInsert.delete(0);
      parPre=fs.goTo(copyRoot,Token.string(toInsert.delete(0)));
      continue;
    }
    final boolean isDir=!Token.eq(toInsert.delete(0),f);
    fs.insert(isDir,toInsert.delete(0),toInsert.delete(0),toInsert.delete(0),fs.currTime(),parPre,parPre + DataFS.NUMATT);
  }
}
