{
  final ParserProp props=new ParserProp(options);
  final boolean header=props.is(ParserProp.HEADER);
  final String val=props.get(ParserProp.SEPARATOR).toLowerCase(Locale.ENGLISH);
  int s=-1;
  for (int i=0; i < SEPARATORS.length && s == -1; i++) {
    if (val.equals(SEPARATORS[i]))     s=CsvParser.SEPMAPPINGS[i];
  }
  if (s == -1) {
    final int i=toInt(token(val));
    if (i > 0)     s=i;
 else     throw new BaseXException(INVALID_VALUE_X_X,ParserProp.SEPARATOR[0],val);
  }
  int separator=s;
  String encoding=props.get(ParserProp.ENCODING);
  final byte[] content=new NewlineInput(io).encoding(encoding).content();
  try {
    final CsvParser conv=new CsvParser(separator,header);
    final ANode node=conv.convert(content);
    final IOContent xml=new IOContent(node.serialize().toArray());
    xml.name(io.name());
    return xml;
  }
 catch (  final QueryException ex) {
    throw new BaseXException(ex);
  }
}
