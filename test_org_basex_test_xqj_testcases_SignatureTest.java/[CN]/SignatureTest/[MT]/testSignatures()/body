{
  StringBuffer sb=new StringBuffer();
  logClass(sb,"ConnectionPoolXQDataSource");
  logClass(sb,"PooledXQConnection");
  logClass(sb,"XQCancelledException");
  logClass(sb,"XQConnection");
  logClass(sb,"XQConnectionEvent");
  logClass(sb,"XQConnectionEventListener");
  logClass(sb,"XQConstants");
  logClass(sb,"XQDataFactory");
  logClass(sb,"XQDataSource");
  logClass(sb,"XQDynamicContext");
  logClass(sb,"XQException");
  logClass(sb,"XQExpression");
  logClass(sb,"XQItem");
  logClass(sb,"XQItemAccessor");
  logClass(sb,"XQItemType");
  logClass(sb,"XQMetaData");
  logClass(sb,"XQPreparedExpression");
  logClass(sb,"XQQueryException");
  logClass(sb,"XQResultItem");
  logClass(sb,"XQResultSequence");
  logClass(sb,"XQSequence");
  logClass(sb,"XQSequenceType");
  logClass(sb,"XQStackTraceElement");
  logClass(sb,"XQStackTraceVariable");
  logClass(sb,"XQStaticContext");
  InputStream signatureStream=getClass().getResourceAsStream(signatureFile__);
  assertNotNull("Signature file '" + signatureFile__ + "' not found in classpath.",signatureStream);
  java.io.InputStreamReader signatureReader=new java.io.InputStreamReader(signatureStream,"UTF-8");
  Reader in=new BufferedReader(signatureReader);
  int ch;
  StringBuffer expected=new StringBuffer();
  while ((ch=in.read()) > -1) {
    expected.append((char)ch);
  }
  in.close();
  assertEquals("ZZZ",expected.toString(),sb.toString());
}
