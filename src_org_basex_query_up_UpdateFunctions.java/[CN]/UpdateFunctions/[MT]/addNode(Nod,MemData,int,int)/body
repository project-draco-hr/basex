{
  final int k=Nod.kind(nd.type);
switch (k) {
case Data.DOC:
    md.addDoc(nd.base(),size(nd,false));
  int p=pre + 1;
NodeIter ir=nd.child();
Nod i;
while ((i=ir.next()) != null) p=addNode(i,md,p,pre);
return p;
case Data.ATTR:
QNm q=nd.qname();
int u=q.uri.str().length != 0 ? Math.abs(md.ns.add(q.uri.str())) : 0;
md.addAtt(md.atts.index(q.str(),null,false),u,nd.str(),pre - par);
return pre + 1;
case Data.PI:
md.addText(trim(concat(nd.nname(),SPACE,nd.str())),pre - par,k);
return pre + 1;
case Data.TEXT:
case Data.COMM:
md.addText(nd.str(),pre - par,k);
return pre + 1;
default :
final int s=md.meta.size;
q=nd.qname();
u=0;
if (par == 0) {
final Atts ns=FElem.ns(nd);
for (int a=0; a < ns.size; a++) md.ns.add(ns.key[a],ns.val[a]);
}
final boolean ne=md.ns.open(s);
u=q.uri.str().length != 0 ? Math.abs(md.ns.add(q.uri.str())) : 0;
md.addElem(md.tags.index(q.str(),null,false),u,pre - par,size(nd,true),size(nd,false),ne);
ir=nd.attr();
p=pre + 1;
while ((i=ir.next()) != null) p=addNode(i,md,p,pre);
ir=nd.child();
while ((i=ir.next()) != null) p=addNode(i,md,p,pre);
return p;
}
}
