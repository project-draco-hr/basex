{
  final int k=Nod.kind(nd.type);
switch (k) {
case Data.DOC:
    md.insertDoc(md.meta.size,size(nd,false),nd.base());
  int p=pre + 1;
NodeIter ir=nd.child();
Nod i;
while ((i=ir.next()) != null) p=addNode(i,md,p,pre);
return p;
case Data.ATTR:
QNm q=nd.qname();
byte[] uri=q.uri.str();
int u=0;
if (uri.length != 0) u=Math.abs(md.ns.addURI(uri));
final int n=md.atts.index(q.str(),null,false);
md.insertAttr(md.meta.size,pre - par,n,nd.str(),u);
return pre + 1;
case Data.PI:
final byte[] v=trim(concat(nd.nname(),SPACE,nd.str()));
md.insertText(md.meta.size,pre - par,v,k);
return pre + 1;
case Data.TEXT:
case Data.COMM:
md.insertText(md.meta.size,pre - par,nd.str(),k);
return pre + 1;
default :
q=nd.qname();
if (par == 0) {
final Atts ns=FElem.ns(nd);
for (int a=0; a < ns.size; a++) md.ns.add(ns.key[a],ns.val[a]);
}
final boolean ne=md.ns.open(md.meta.size);
uri=q.uri.str();
u=uri.length != 0 ? Math.abs(md.ns.addURI(uri)) : 0;
final int tn=md.tags.index(q.str(),null,false);
md.insertElem(md.meta.size,pre - par,tn,size(nd,true),size(nd,false),u,ne);
ir=nd.attr();
p=pre + 1;
while ((i=ir.next()) != null) p=addNode(i,md,p,pre);
ir=nd.child();
while ((i=ir.next()) != null) p=addNode(i,md,p,pre);
return p;
}
}
