{
  final int k=Nod.kind(n.type);
  int pre=preVal;
switch (k) {
case Data.ELEM:
    final FElem e=(FElem)n;
  final int as=fragmentSize(e,true);
final int s=fragmentSize(e,false);
m.addElem(m.tags.index(e.nname(),null,false),0,pre - par,as == -1 ? 1 : as,s == -1 ? 1 : s,false);
pre++;
break;
case Data.ATTR:
final FAttr fat=(FAttr)n;
m.addAtt(m.atts.index(fat.qname().str(),null,false),0,fat.str(),pre - par);
return ++pre;
case Data.TEXT:
case Data.PI:
case Data.COMM:
m.addText(n.str(),pre - par,k);
return ++pre;
}
final NodeIter attIt=n.attr();
FAttr at=(FAttr)attIt.next();
while (at != null) {
m.addAtt(m.atts.index(at.qname().str(),null,false),0,at.str(),pre - preVal);
pre++;
at=(FAttr)attIt.next();
}
final NodeIter chIt=n.child();
Nod fn=chIt.next();
while (fn != null) {
pre=addFragment((FNode)fn,m,pre,preVal);
fn=chIt.next();
}
return pre;
}
