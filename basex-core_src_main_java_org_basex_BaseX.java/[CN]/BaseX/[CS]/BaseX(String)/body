{
  super(args);
  session();
  console=true;
  try {
    final StringBuilder bind=new StringBuilder();
    SerializerOptions sopts=null;
    boolean v=false, qi=false, qp=false;
    final int os=ops.size();
    for (int o=0; o < os; o++) {
      final int c=ops.get(o);
      String val=vals.get(o);
      if (c == 'b') {
        if (bind.length() != 0)         bind.append(',');
        val=bind.append(val.replaceAll(",",",,")).toString();
        execute(new Set(MainOptions.BINDINGS,val),false);
      }
 else       if (c == 'c') {
        final IO io=IO.get(val);
        String base=".";
        if (io.exists() && !io.isDir()) {
          val=io.string();
          base=io.path();
        }
        execute(new Set(MainOptions.QUERYPATH,base),false);
        execute(val);
        execute(new Set(MainOptions.QUERYPATH,""),false);
        console=false;
      }
 else       if (c == 'd') {
        Prop.debug^=true;
      }
 else       if (c == 'D') {
        execute(new Set(MainOptions.DOTPLAN,null),false);
      }
 else       if (c == 'i') {
        execute(new Set(MainOptions.MAINMEM,true),false);
        execute(new Check(val),verbose);
        execute(new Set(MainOptions.MAINMEM,false),false);
      }
 else       if (c == 'I') {
        if (bind.length() != 0)         bind.append(',');
        val=bind.append("=").append(val.replaceAll(",",",,")).toString();
        execute(new Set(MainOptions.BINDINGS,val),false);
      }
 else       if (c == 'o') {
        if (out != System.out)         out.close();
        out=new PrintOutput(val);
        session().setOutputStream(out);
      }
 else       if (c == 'q') {
        execute(new XQuery(val),verbose);
        console=false;
      }
 else       if (c == 'Q') {
        final IO io=IO.get(val);
        String base=".";
        if (io.exists() && !io.isDir()) {
          val=io.string();
          base=io.path();
        }
        execute(new Set(MainOptions.QUERYPATH,base),false);
        execute(new XQuery(val),verbose);
        execute(new Set(MainOptions.QUERYPATH,""),false);
        console=false;
      }
 else       if (c == 'r') {
        execute(new Set(MainOptions.RUNS,Strings.toInt(val)),false);
      }
 else       if (c == 'R') {
        execute(new Set(MainOptions.RUNQUERY,null),false);
      }
 else       if (c == 's') {
        if (sopts == null)         sopts=new SerializerOptions();
        final String[] kv=val.split("=",2);
        sopts.assign(kv[0],kv.length > 1 ? kv[1] : "");
        execute(new Set(MainOptions.SERIALIZER,sopts),false);
      }
 else       if (c == 't') {
        execute(new Test(val),verbose);
        console=false;
      }
 else       if (c == 'u') {
        execute(new Set(MainOptions.WRITEBACK,null),false);
      }
 else       if (c == 'v') {
        v^=true;
      }
 else       if (c == 'V') {
        qi^=true;
        execute(new Set(MainOptions.QUERYINFO,null),false);
      }
 else       if (c == 'w') {
        execute(new Set(MainOptions.CHOP,null),false);
      }
 else       if (c == 'x') {
        execute(new Set(MainOptions.XMLPLAN,null),false);
        qp^=true;
      }
 else       if (c == 'X') {
        execute(new Set(MainOptions.COMPPLAN,null),false);
      }
 else       if (c == 'z') {
        execute(new Set(MainOptions.SERIALIZE,null),false);
      }
      verbose=qi || qp || v;
    }
    if (console)     console();
  }
  finally {
    quit();
  }
}
