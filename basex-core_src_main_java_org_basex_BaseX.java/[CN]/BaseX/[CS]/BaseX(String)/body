{
  super(args);
  session();
  final StringBuilder serial=new StringBuilder();
  final StringBuilder bind=new StringBuilder();
  boolean v=false, qi=false, qp=false;
  console=true;
  try {
    for (int i=0; i < ops.size(); i++) {
      final int c=ops.get(i);
      String val=vals.get(i);
      Option opt=null;
      if (c == 'b') {
        if (bind.length() != 0)         bind.append(',');
        val=bind.append(val.replaceAll(",",",,")).toString();
        opt=MainOptions.BINDINGS;
      }
 else       if (c == 'c') {
        final IO io=IO.get(val);
        String base=".";
        if (io.exists() && !io.isDir()) {
          val=io.string();
          base=io.path();
        }
        execute(new Set(MainOptions.QUERYPATH,base),false);
        execute(val);
        execute(new Set(MainOptions.QUERYPATH,""),false);
        console=false;
      }
 else       if (c == 'd') {
        Prop.debug^=true;
      }
 else       if (c == 'D') {
        opt=MainOptions.DOTPLAN;
      }
 else       if (c == 'i') {
        execute(new Set(MainOptions.MAINMEM,true),false);
        execute(new Check(val),verbose);
        execute(new Set(MainOptions.MAINMEM,false),false);
      }
 else       if (c == 'L') {
        newline^=true;
        if (serial.length() != 0)         serial.append(',');
        val=serial.append(SerializerOptions.S_ITEM_SEPARATOR.name).append("=\\n").toString();
        opt=MainOptions.SERIALIZER;
      }
 else       if (c == 'o') {
        if (out != System.out)         out.close();
        out=new PrintOutput(val);
        session().setOutputStream(out);
      }
 else       if (c == 'q') {
        execute(new XQuery(val),verbose);
        console=false;
      }
 else       if (c == 'Q') {
        final IO io=IO.get(val);
        String base=".";
        if (io.exists() && !io.isDir()) {
          val=io.string();
          base=io.path();
        }
        execute(new Set(MainOptions.QUERYPATH,base),false);
        execute(new XQuery(val),verbose);
        execute(new Set(MainOptions.QUERYPATH,""),false);
        console=false;
      }
 else       if (c == 'r') {
        opt=MainOptions.RUNS;
      }
 else       if (c == 's') {
        if (serial.length() != 0)         serial.append(',');
        val=serial.append(val.replaceAll(",",",,")).toString();
        opt=MainOptions.SERIALIZER;
      }
 else       if (c == 'u') {
        opt=MainOptions.WRITEBACK;
      }
 else       if (c == 'v') {
        v^=true;
      }
 else       if (c == 'V') {
        qi^=true;
        opt=MainOptions.QUERYINFO;
      }
 else       if (c == 'w') {
        opt=MainOptions.CHOP;
      }
 else       if (c == 'W') {
        writeOptions^=true;
      }
 else       if (c == 'x') {
        opt=MainOptions.XMLPLAN;
        qp^=true;
      }
 else       if (c == 'X') {
        opt=MainOptions.COMPPLAN;
      }
 else       if (c == 'z') {
        opt=MainOptions.SERIALIZE;
      }
      if (opt != null)       execute(new Set(opt,val),false);
      verbose=qi || qp || v;
    }
    if (console) {
      verbose=true;
      Util.outln(CONSOLE + TRY_MORE_X,sa() ? LOCALMODE : CLIENTMODE);
      console();
    }
    if (writeOptions)     context.globalopts.write();
  }
  finally {
    quit();
  }
}
