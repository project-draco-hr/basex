{
  super(EDITORVIEW,man);
  layout(new BorderLayout());
  label=new BaseXLabel(EDITOR,true,false);
  label.setForeground(GRAY);
  tabs=new BaseXTabs(gui);
  tabs.setFocusable(Prop.MAC);
  tabs.addDragDrop(false);
  addCreateTab();
  final SearchEditor center=new SearchEditor(gui,tabs,null);
  search=center.bar();
  final AbstractButton openB=BaseXButton.command(GUIMenuCmd.C_EDITOPEN,gui);
  final AbstractButton saveB=BaseXButton.get("c_save",SAVE,false,gui);
  final AbstractButton find=search.button(FIND_REPLACE);
  hist=BaseXButton.get("c_hist",RECENTLY_OPENED,false,gui);
  stop=BaseXButton.get("c_stop",STOP,false,gui);
  stop.addKeyListener(this);
  stop.setEnabled(false);
  go=BaseXButton.get("c_go",BaseXLayout.addShortcut(RUN_QUERY,BaseXKeys.EXEC1.toString()),false,gui);
  go.addKeyListener(this);
  test=BaseXButton.get("c_test",BaseXLayout.addShortcut(RUN_TESTS,BaseXKeys.UNIT.toString()),false,gui);
  test.addKeyListener(this);
  final BaseXBack buttons=new BaseXBack(Fill.NONE);
  buttons.layout(new TableLayout(1,8,1,0)).border(0,0,8,0);
  buttons.add(openB);
  buttons.add(saveB);
  buttons.add(hist);
  buttons.add(find);
  buttons.add(Box.createHorizontalStrut(6));
  buttons.add(stop);
  buttons.add(go);
  buttons.add(test);
  final BaseXBack north=new BaseXBack(Fill.NONE).layout(new BorderLayout());
  north.add(buttons,BorderLayout.WEST);
  north.add(label,BorderLayout.EAST);
  search.editor(addTab(),false);
  info=new BaseXLabel().setText(OK,Msg.SUCCESS);
  pos=new BaseXLabel(" ");
  posCode.invokeLater();
  final BaseXBack south=new BaseXBack(Fill.NONE).border(4,0,0,0);
  south.layout(new BorderLayout(4,0));
  south.add(info,BorderLayout.CENTER);
  south.add(pos,BorderLayout.EAST);
  final BaseXBack main=new BaseXBack().border(5).mode(Fill.NONE);
  main.layout(new BorderLayout());
  main.add(north,BorderLayout.NORTH);
  main.add(center,BorderLayout.CENTER);
  main.add(south,BorderLayout.SOUTH);
  project=new ProjectView(this);
  split=new BaseXSplit(true);
  split.mode(Fill.NONE);
  split.add(project);
  split.add(main);
  split.init(new double[]{0.3,0.7},new double[]{0,1});
  project();
  add(split,BorderLayout.CENTER);
  refreshLayout();
  saveB.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      final JPopupMenu pop=new JPopupMenu();
      final StringBuilder mnem=new StringBuilder();
      final JMenuItem sa=GUIMenu.newItem(GUIMenuCmd.C_EDITSAVE,gui,mnem);
      final JMenuItem sas=GUIMenu.newItem(GUIMenuCmd.C_EDITSAVEAS,gui,mnem);
      sa.setEnabled(GUIMenuCmd.C_EDITSAVE.enabled(gui));
      sas.setEnabled(GUIMenuCmd.C_EDITSAVEAS.enabled(gui));
      pop.add(sa);
      pop.add(sas);
      pop.show(saveB,0,saveB.getHeight());
    }
  }
);
  hist.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      final JPopupMenu pm=new JPopupMenu();
      ActionListener al=new ActionListener(){
        @Override public void actionPerformed(        final ActionEvent ac){
          open(new IOFile(ac.getActionCommand().replaceAll("(.*) \\[(.*)\\]","$2/$1")));
        }
      }
;
      final StringList opened=new StringList();
      for (      final EditorArea ea : editors())       opened.add(ea.file.path());
      final StringList hst=new StringList(HISTORY);
      final StringList all=new StringList(gui.gopts.get(GUIOptions.EDITOR));
      final int fl=Math.min(all.size(),e == null ? HISTORY : HISTCOMP);
      for (int f=0; f < fl; f++)       hst.add(all.get(f));
      Font f=null;
      for (      final String en : hst.sort(Prop.CASE)) {
        final JMenuItem it=new JMenuItem(en.replaceAll("(.*)[/\\\\](.*)","$2 [$1]"));
        if (opened.contains(en)) {
          if (f == null)           f=it.getFont().deriveFont(Font.BOLD);
          it.setFont(f);
        }
        pm.add(it).addActionListener(al);
      }
      al=new ActionListener(){
        @Override public void actionPerformed(        final ActionEvent ac){
          hist.getActionListeners()[0].actionPerformed(null);
        }
      }
;
      if (e != null && pm.getComponentCount() == HISTCOMP) {
        pm.add(new JMenuItem("...")).addActionListener(al);
      }
      pm.show(hist,0,hist.getHeight());
    }
  }
);
  refreshHistory(null);
  info.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    final MouseEvent e){
      jumpToError();
    }
  }
);
  stop.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      stop.setEnabled(false);
      go.setEnabled(false);
      test.setEnabled(false);
      gui.stop();
    }
  }
);
  go.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      run(getEditor(),Action.EXECUTE);
    }
  }
);
  test.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      run(getEditor(),Action.TEST);
    }
  }
);
  tabs.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    final ChangeEvent e){
      final EditorArea ea=getEditor();
      if (ea == null)       return;
      search.editor(ea,true);
      gui.refreshControls();
      posCode.invokeLater();
      refreshMark();
      run(ea,Action.PARSE);
    }
  }
);
  BaseXLayout.addDrop(this,new DropHandler(){
    @Override public void drop(    final Object file){
      if (file instanceof File)       open(new IOFile((File)file));
    }
  }
);
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      for (      final String file : gui.gopts.get(GUIOptions.OPEN)) {
        open(new IOFile(file),false,false);
      }
    }
  }
);
}
