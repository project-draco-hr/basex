{
  final String db=choice.getValue().trim();
  if (db.length() == 0)   return false;
  final File dir=IOConstants.dbpath(db);
  if (!dir.exists())   return false;
  long len=0;
  for (  final File f : dir.listFiles())   len+=f.length();
  final TokenBuilder txt=new TokenBuilder();
  try {
    ok=true;
    final MetaData meta=new MetaData(db);
    final int size=meta.read();
    if (mainmem != null)     BaseXLayout.enable(mainmem,meta.filesize < (1 << 30));
    txt.add(INFODOC + meta.filename + NL);
    txt.add(INFOTIME + new SimpleDateFormat("dd.MM.yyyy hh:mm:ss").format(new Date(meta.time)) + NL);
    txt.add(INFODOCSIZE + (meta.filesize != 0 ? Performance.formatSize(meta.filesize) : "-") + NL);
    txt.add(INFODBSIZE + Performance.formatSize(len) + NL);
    txt.add(INFOENCODING + meta.encoding + NL);
    txt.add(INFONODES + size + NL);
    txt.add(INFOHEIGHT + meta.height + NL+ NL);
    txt.add(INFOINDEXES + NL);
    if (meta.newindex) {
      txt.add(" " + INDUPDATE + NL);
    }
 else {
      txt.add(" " + INFOTXTINDEX + meta.txtindex+ NL);
      txt.add(" " + INFOATVINDEX + meta.atvindex+ NL);
      txt.add(" " + INFOFTINDEX + meta.ftxindex+ NL);
    }
    txt.add(NL + INFOCREATE + NL);
    txt.add(" " + INFOCHOP + meta.chop+ NL);
    txt.add(" " + INFOENTITIES + meta.entity+ NL);
  }
 catch (  final IOException e) {
    txt.add(e.getMessage());
    ok=false;
  }
  doc.setText(db);
  detail.setText(txt.finish());
  BaseXLayout.enableOK(buttons,ok);
  return true;
}
