{
  checkCreate(ctx);
  final byte[] path=checkStr(expr[0],ctx);
  final IO base=ctx.sc.baseIO();
  if (base == null)   throw STBASEURI.thrw(info);
  String enc=null;
  try {
    enc=encoding(1,WHICHENC,ctx);
    final String p=string(path);
    if (p.indexOf('#') != -1)     FRAGID.thrw(info,p);
    if (!Uri.uri(p).isValid())     INVURL.thrw(info,p);
    IO io=base.merge(p);
    final String rp=ctx.resource.resources.get(io.path());
    if (rp != null)     io=IO.get(rp);
    if (!io.exists())     throw RESNF.thrw(info,p);
    final InputStream is=io.inputStream();
    try {
      final TextInput ti=new TextInput(io).valid(true);
      if (enc != null)       ti.encoding(enc);
      if (!check)       return Str.get(ti.content());
      while (ti.read() != -1)       ;
      return Bln.TRUE;
    }
  finally {
      is.close();
    }
  }
 catch (  final QueryException ex) {
    if (check && ex.err().type != ErrType.XPTY)     return Bln.FALSE;
    throw ex;
  }
catch (  final IOException ex) {
    if (check)     return Bln.FALSE;
    if (ex instanceof EncodingException)     INVCHARS.thrw(info,ex);
    if (ex instanceof InputException && enc == null)     WHICHCHARS.thrw(info);
    throw RESNF.thrw(info,path);
  }
}
