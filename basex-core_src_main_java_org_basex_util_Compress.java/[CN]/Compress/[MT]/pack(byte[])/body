{
  final int length=text.length - 1;
  if (length < 4)   return text;
  final byte[] bytes=new byte[length];
  int size=Num.set(bytes,length + 1);
  int lc=0, uc=0, out=0;
  for (  final byte t : text) {
    lc+=t >= 'A' && t <= 'Z' ? -1 : 1;
    uc+=t >= 0 ? 1 : -1;
  }
  if (uc < 0)   return text;
  final byte[] map;
  if (lc >= 0) {
    out=2;
    map=PACK1;
  }
 else {
    map=PACK2;
  }
  int in=0, off=2;
  for (  final byte t : text) {
    final int b=t >= 0 ? map[t] : t, s;
    if (b >= 0x00 && b < 0x08) {
      in=1 | b << 1;
      s=4;
    }
 else     if (b >= 0x08 && b < 0x10) {
      in=2 | b << 2;
      s=5;
    }
 else     if (b >= 0x10 && b < 0x20) {
      in=4 | b << 3;
      s=7;
    }
 else     if (b >= 0x20 && b < 0x40) {
      in=8 | b << 4;
      s=9;
    }
 else {
      in=b << 4;
      s=12;
    }
    for (int i=0; i < s; i++) {
      out|=(in & 1) << off;
      in>>>=1;
      off=(off + 1) & 7;
      if (off == 0) {
        if (size == length)         return text;
        bytes[size++]=(byte)out;
        out=0;
      }
    }
  }
  if (off != 0) {
    if (size == length)     return text;
    bytes[size++]=(byte)out;
  }
  return size < length ? Arrays.copyOf(bytes,size) : bytes;
}
