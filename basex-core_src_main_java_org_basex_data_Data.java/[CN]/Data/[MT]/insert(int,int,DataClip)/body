{
  meta.update();
  if (meta.updindex)   indexBegin();
  resources.insert(tpre,source);
  final int size=source.size();
  final int buf=Math.min(size,IO.BLOCKSIZE >> IO.NODEPOWER);
  buffer(buf);
  final TokenMap nsScope=nspaces.scope(tpar,this);
  final IntList preStack=new IntList();
  final NSNode nsRoot=nspaces.getCurrent();
  final IntList flagPres=new IntList();
  final List<NSNode> nsNodesShift=nspaces.getNSNodes(tpre);
  final Data data=source.data;
  int c=0, sTopPre=source.start;
  for (int spre=sTopPre; spre < source.end; ++spre, ++c) {
    if (c != 0 && c % buf == 0)     insert(tpre + c - buf);
    final int pre=tpre + c;
    final int kind=data.kind(spre);
    final int ssize=data.size(spre,kind);
    final int spar=data.parent(spre,kind);
    final int dist;
    if (spre == sTopPre) {
      dist=pre - tpar;
      sTopPre+=ssize;
    }
 else {
      dist=spre - spar;
    }
    final int nsPre=kind == DOC ? -1 : pre - dist;
    if (c == 0)     nspaces.root(nsPre,this);
    while (!preStack.isEmpty() && preStack.peek() > nsPre)     nspaces.close(preStack.pop());
switch (kind) {
case DOC:
      nspaces.prepare();
    doc(pre,ssize,data.text(spre,true));
  meta.ndocs.incrementAndGet();
preStack.push(pre);
break;
case ELEM:
nspaces.prepare();
boolean ne=false;
if (data.nsFlag(spre)) {
final Atts at=data.ns(spre);
final int as=at.size();
for (int a=0; a < as; a++) {
final byte[] old=nsScope.get(at.name(a));
if (old == null || !eq(old,at.value(a))) {
nspaces.add(at.name(a),at.value(a),pre);
ne=true;
}
}
}
byte[] nm=data.name(spre,kind);
elem(dist,elemNames.index(nm,null,false),data.attSize(spre,kind),ssize,nspaces.uri(nm,true),ne);
preStack.push(pre);
break;
case TEXT:
case COMM:
case PI:
text(pre,dist,data.text(spre,true),kind);
break;
case ATTR:
nm=data.name(spre,kind);
final byte[] attPref=prefix(nm);
if (data.nsFlag(spre) && nsScope.get(attPref) == null) {
nspaces.add(nsPre,preStack.isEmpty() ? -1 : preStack.peek(),attPref,data.nspaces.uri(data.uri(spre,kind)),this);
flagPres.add(nsPre);
}
attr(pre,dist,attrNames.index(nm,null,false),data.text(spre,false),nspaces.uri(nm,false),false);
break;
}
Namespaces.incrementPre(nsNodesShift,1);
}
while (!preStack.isEmpty()) nspaces.close(preStack.pop());
nspaces.setCurrent(nsRoot);
if (bp != 0) insert(tpre + c - 1 - (c - 1) % buf);
buffer(1);
final int fs=flagPres.size();
for (int f=0; f < fs; f++) {
final int fl=flagPres.get(f);
table.write2(fl,1,name(fl) | 1 << 15);
}
int p=tpar;
while (p >= 0) {
final int k=kind(p);
size(p,k,size(p,k) + size);
p=parent(p,k);
}
if (meta.updindex) {
idmap.insert(tpre,id(tpre),size);
indexAdd();
}
if (!cache) updateDist(tpre + size,size);
}
