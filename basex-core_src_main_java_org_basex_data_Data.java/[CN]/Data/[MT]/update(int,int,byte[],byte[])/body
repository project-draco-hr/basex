{
  meta.update();
  if (kind == PI) {
    updateText(pre,trim(concat(name,SPACE,atom(pre))),PI);
  }
 else {
    final byte[] prefix=prefix(name);
    final int oldUriId=nspaces.uriIdForPrefix(prefix,pre,this);
    final boolean nsFlag=oldUriId == 0 && uri.length != 0 && !eq(prefix,XML);
    final int nsPre=kind == ATTR ? parent(pre,kind) : pre;
    final int uriId=nsFlag ? nspaces.add(nsPre,prefix,uri,this) : oldUriId != 0 && eq(nspaces.uri(oldUriId),uri) ? oldUriId : 0;
    final int sz=size(pre,kind);
    if (kind == ATTR) {
      if (meta.updindex) {
        if (meta.attrindex)         attrIndex.delete(new ValueCache(pre,IndexType.ATTRIBUTE,this));
        if (meta.tokenindex)         tokenIndex.delete(new ValueCache(pre,IndexType.TOKEN,this));
      }
      table.write1(pre,11,uriId);
      table.write2(pre,1,attrNames.put(name));
      if (nsFlag)       table.write2(nsPre,1,1 << 15 | nameId(nsPre));
      if (meta.updindex) {
        if (meta.attrindex)         attrIndex.add(new ValueCache(pre,IndexType.ATTRIBUTE,this));
        if (meta.tokenindex)         tokenIndex.add(new ValueCache(pre,IndexType.TOKEN,this));
      }
    }
 else {
      final IntList pres=new IntList();
      if (meta.updindex && meta.textindex) {
        final int last=pre + sz;
        for (int curr=pre + attSize(pre,kind); curr < last; curr+=size(curr,kind(curr))) {
          if (kind(curr) == TEXT)           pres.add(curr);
        }
        textIndex.delete(new ValueCache(pres,IndexType.TEXT,this));
      }
      table.write1(pre,3,uriId);
      final int nameId=elemNames.put(name);
      table.write2(nsPre,1,(nsFlag || nsFlag(nsPre) ? 1 << 15 : 0) | nameId);
      if (!pres.isEmpty())       textIndex.add(new ValueCache(pres,IndexType.TEXT,this));
    }
  }
}
