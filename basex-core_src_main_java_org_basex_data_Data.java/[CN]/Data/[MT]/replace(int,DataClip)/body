{
  meta.update();
  final int sCount=source.size();
  final int tKind=kind(pre);
  final int tSize=size(pre,tKind);
  final int tPar=parent(pre,tKind);
  bufferSize(sCount);
  resources.replace(pre,tSize,source);
  if (meta.updindex) {
    indexDelete(pre,tSize);
    indexBegin();
  }
  final Data sData=source.data;
  int sTopPre=source.start;
  for (int sPre=source.start; sPre < source.end; ++sPre) {
    final int sKind=sData.kind(sPre);
    final int sSize=sData.size(sPre,sKind);
    final int sPar=sData.parent(sPre,sKind);
    final int cPre=pre + sPre - source.start;
    final int cDist;
    if (sPre == sTopPre) {
      cDist=cPre - tPar;
      sTopPre+=sSize;
    }
 else {
      cDist=sPre - sPar;
    }
switch (sKind) {
case DOC:
      doc(cPre,sSize,sData.text(sPre,true));
    ++meta.ndocs;
  break;
case ELEM:
final byte[] en=sData.name(sPre,sKind);
elem(cDist,elemNames.index(en,null,false),sData.attSize(sPre,sKind),sSize,nspaces.uriIdForPrefix(prefix(en),true),false);
break;
case TEXT:
case COMM:
case PI:
text(cPre,cDist,sData.text(sPre,true),sKind);
break;
case ATTR:
final byte[] an=sData.name(sPre,sKind);
attr(cPre,cDist,attrNames.index(an,null,false),sData.text(sPre,false),nspaces.uriIdForPrefix(prefix(an),false));
break;
}
}
if (meta.updindex) {
idmap.delete(pre,id(pre),-tSize);
idmap.insert(pre,meta.lastid - sCount + 1,sCount);
indexAdd();
}
table.replace(pre,buffer(),tSize);
bufferSize(1);
final int diff=sCount - tSize;
if (diff != 0) {
int p=tPar;
while (p >= 0) {
final int k=kind(p);
size(p,k,size(p,k) + diff);
p=parent(p,k);
}
if (!cache) updateDist(pre + sCount,diff);
}
int sPre=source.start;
if (sData.kind(sPre) == ATTR) {
int d=0;
while (sPre < source.end && sData.kind(sPre++) == ATTR) d++;
if (d > 1) attSize(tPar,kind(tPar),d + attSize(tPar,ELEM) - 1);
}
}
