{
  byte[] vsn=sn;
  if (cn != 0) {
    int i=0;
    while (i < vsn.length && i < ne[0] && ne[i + 1] == vsn[i]) {
      i++;
    }
    if (ne[0] == i) {
      if (vsn.length == i) {
        return ne;
      }
 else {
        byte[] tmp=new byte[vsn.length - i];
        System.arraycopy(vsn,i,tmp,0,tmp.length);
        vsn=tmp;
        int pos=getInsertingPosition(ne,vsn[0]);
        if (!found) {
          return null;
        }
 else {
          return getNodeIdFromTrieRecursive(ne[pos],getNodeEntry(ne[pos]),vsn);
        }
      }
    }
 else {
      return null;
    }
  }
 else {
    int pos=getInsertingPosition(ne,vsn[0]);
    if (!found) {
      return null;
    }
 else {
      return getNodeIdFromTrieRecursive(ne[pos],getNodeEntry(ne[pos]),vsn);
    }
  }
}
