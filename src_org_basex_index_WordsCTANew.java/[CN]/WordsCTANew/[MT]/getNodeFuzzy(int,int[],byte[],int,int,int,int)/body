{
  byte[] vsn=sn;
  int[] cne=crne;
  if (crne == null)   cne=getNodeEntry(cn);
  if (cn != 0) {
    int i=0;
    while (i < vsn.length && i < cne[0] && cne[i + 1] == vsn[i]) {
      i++;
    }
    if (cne[0] == i) {
      if (vsn.length == i) {
        if (c >= d + p + r) {
          int[][] ld=null;
          ld=getDataFromDataArray(cne[cne.length - 2],cne[cne.length - 1]);
          if (hasNextNodes(cne)) {
            for (int t=cne[0] + 1; t < cne.length - 2; t++) {
              ld=FTUnion.calculateFTOr(ld,getNodeFuzzy(cne[t],getNodeEntry(cne[t]),new byte[]{(byte)cne[t + 1]},d,p + 1,r,c));
              t++;
            }
          }
          return ld;
        }
 else         return null;
      }
 else {
        int[][] ld=null;
        byte[] b;
        if (c > d + p + r) {
          b=new byte[vsn.length - 1];
          System.arraycopy(vsn,0,b,0,i);
          ld=getNodeFuzzy(cn,cne,b,d + 1,p,r,c);
        }
        final byte[] tmp=new byte[vsn.length - i];
        System.arraycopy(vsn,i,tmp,0,tmp.length);
        vsn=tmp;
        int[] ne=null;
        if (hasNextNodes(cne)) {
          for (int k=cne[0] + 1; k < cne.length - 2; k+=2) {
            if (cne[k + 1] == vsn[0]) {
              ne=getNodeEntry(cne[k]);
              b=new byte[vsn.length];
              System.arraycopy(vsn,0,b,0,vsn.length);
              ld=FTUnion.calculateFTOr(ld,getNodeFuzzy(cne[k],ne,b,d,p,r,c));
            }
            if (c > d + p + r) {
              if (ne == null)               ne=getNodeEntry(cne[k]);
              b=new byte[vsn.length + 1];
              b[0]=(byte)cne[k + 1];
              System.arraycopy(vsn,0,b,1,vsn.length);
              ld=FTUnion.calculateFTOr(ld,getNodeFuzzy(cne[k],ne,b,d,p + 1,r,c));
              if (vsn.length > 0) {
                b=new byte[vsn.length - 1];
                System.arraycopy(vsn,1,b,0,b.length);
                ld=FTUnion.calculateFTOr(ld,getNodeFuzzy(cne[k],ne,b,d + 1,p,r,c));
                b=new byte[vsn.length];
                System.arraycopy(vsn,1,b,1,vsn.length - 1);
                b[0]=(byte)ne[1];
                ld=FTUnion.calculateFTOr(ld,getNodeFuzzy(cne[k],ne,b,d,p,r + 1,c));
              }
            }
          }
        }
        return ld;
      }
    }
 else {
      int[][] ld=null;
      byte[] b;
      if (c > d + p + r) {
        b=new byte[vsn.length + 1];
        System.arraycopy(vsn,0,b,0,i);
        b[i]=(byte)cne[i + 1];
        System.arraycopy(vsn,i,b,i + 1,vsn.length - i);
        ld=getNodeFuzzy(cn,cne,b,d,p + 1,r,c);
        if (vsn.length > 0 && i < vsn.length) {
          b=new byte[vsn.length];
          System.arraycopy(vsn,0,b,0,vsn.length);
          b[i]=(byte)cne[i + 1];
          ld=FTUnion.calculateFTOr(ld,getNodeFuzzy(cn,cne,b,d,p,r + 1,c));
          if (vsn.length > 1) {
            b=new byte[vsn.length - 1];
            System.arraycopy(vsn,0,b,0,i);
            System.arraycopy(vsn,i + 1,b,i,vsn.length - i - 1);
            ld=FTUnion.calculateFTOr(ld,getNodeFuzzy(cn,cne,b,d + 1,p,r,c));
          }
        }
      }
 else {
        return ld;
      }
      return ld;
    }
  }
 else {
    int[] ne=null;
    int[][] ld=null;
    byte[] b;
    if (hasNextNodes(cne)) {
      for (int k=cne[0] + 1; k < cne.length - 2; k+=2) {
        if (cne[k + 1] == vsn[0]) {
          ne=getNodeEntry(cne[k]);
          b=new byte[vsn.length];
          System.arraycopy(vsn,0,b,0,vsn.length);
          ld=FTUnion.calculateFTOr(ld,getNodeFuzzy(cne[k],ne,b,d,p,r,c));
        }
        if (c > d + p + r) {
          if (ne == null)           ne=getNodeEntry(cne[k]);
          b=new byte[vsn.length + 1];
          b[0]=(byte)ne[1];
          System.arraycopy(vsn,0,b,1,vsn.length);
          ld=FTUnion.calculateFTOr(ld,getNodeFuzzy(cne[k],ne,b,d,p + 1,r,c));
          if (vsn.length > 0) {
            b=new byte[vsn.length - 1];
            System.arraycopy(vsn,1,b,0,b.length);
            ld=FTUnion.calculateFTOr(ld,getNodeFuzzy(cne[k],ne,b,d + 1,p,r,c));
            b=new byte[vsn.length];
            System.arraycopy(vsn,1,b,1,vsn.length - 1);
            b[0]=(byte)ne[1];
            ld=FTUnion.calculateFTOr(ld,getNodeFuzzy(cne[k],ne,b,d,p,r + 1,c));
          }
        }
      }
    }
    return ld;
  }
}
