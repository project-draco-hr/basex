{
  final byte[] vsn=sn;
  byte[] aw=null;
  byte[] bw=null;
  final int currentLength=0;
  int resultNode;
  int[][] d=null;
  if (posw > 0) {
    bw=new byte[posw];
    System.arraycopy(vsn,0,bw,0,posw);
    resultNode=getNodeFromTrieRecursiveWildcard(cn,bw);
    if (resultNode == -1)     return null;
  }
 else {
    resultNode=0;
  }
  byte wildcard;
  if (posw + 1 >= vsn.length) {
    wildcard='.';
  }
 else {
    wildcard=vsn[posw + 1];
  }
  if (wildcard == '?') {
    byte[] sc=new byte[vsn.length - 2 - currentLength];
    if (bw != null) {
      System.arraycopy(bw,0,sc,0,bw.length);
    }
    if (bw == null) {
      System.arraycopy(vsn,posw + 2,sc,0,sc.length);
    }
 else {
      System.arraycopy(vsn,posw + 2,sc,bw.length,sc.length - bw.length);
    }
    d=getNodeFromTrieRecursive(0,sc);
    sc=new byte[vsn.length - 1];
    if (bw != null) {
      System.arraycopy(bw,0,sc,0,bw.length);
      sc[bw.length]='.';
      System.arraycopy(vsn,posw + 2,sc,bw.length + 1,sc.length - bw.length - 1);
    }
 else {
      sc[0]='.';
      System.arraycopy(vsn,posw + 2,sc,1,sc.length - 1);
    }
    d=FTUnion.calculateFTOr(d,getNodeFromTrieWithWildCard(0,sc,posw,false));
    return d;
  }
 else   if (wildcard == '*') {
    if (!(posw == 0 && vsn.length == 2)) {
      final byte[] searchChar=new byte[vsn.length - 2 - currentLength];
      if (bw != null) {
        System.arraycopy(bw,0,searchChar,0,bw.length);
      }
      if (bw == null) {
        aw=new byte[searchChar.length];
        System.arraycopy(vsn,posw + 2,searchChar,0,searchChar.length);
        System.arraycopy(vsn,posw + 2,aw,0,searchChar.length);
      }
 else {
        aw=new byte[searchChar.length - bw.length];
        System.arraycopy(vsn,posw + 2,searchChar,bw.length,searchChar.length - bw.length);
        System.arraycopy(vsn,posw + 2,aw,0,searchChar.length - bw.length);
      }
      d=getNodeFromTrieRecursive(0,searchChar);
      if (bw != null && counter[1] != bw.length) {
        return d;
      }
    }
    adata=null;
    astericsWildCardTraversing(resultNode,aw,false,counter[0],0);
    return FTUnion.calculateFTOr(d,adata);
  }
 else   if (wildcard == '+') {
    final byte[] searchChar=new byte[vsn.length - 1 - currentLength];
    if (bw != null) {
      System.arraycopy(bw,0,searchChar,0,bw.length);
    }
    searchChar[posw]='.';
    if (bw == null) {
      if (!(posw == 0 && vsn.length == 2)) {
        aw=new byte[searchChar.length];
        System.arraycopy(vsn,posw + 2,searchChar,1,searchChar.length);
        System.arraycopy(vsn,posw + 2,aw,1,searchChar.length);
      }
    }
 else {
      aw=new byte[searchChar.length - bw.length - 1];
      System.arraycopy(vsn,posw + 2,searchChar,bw.length + 1,searchChar.length - bw.length - 1);
      System.arraycopy(vsn,posw + 2,aw,0,searchChar.length - bw.length - 1);
    }
    d=getNodeFromTrieWithWildCard(0,searchChar,posw,true);
    if (d == null)     return null;
    byte[] newValue;
    if (aw != null) {
      newValue=new byte[bw.length + 3 + aw.length];
      System.arraycopy(aw,0,newValue,bw.length + 3,aw.length);
    }
 else {
      newValue=new byte[3 + (bw == null ? 0 : bw.length)];
    }
    newValue[bw.length + 1]='.';
    newValue[bw.length + 2]='*';
    System.arraycopy(bw,0,newValue,0,bw.length);
    for (    final byte v : valuesFound) {
      if (v != 0) {
        newValue[bw.length]=v;
        d=FTUnion.calculateFTOr(d,getNodeFromTrieWithWildCard(newValue,bw.length + 1));
      }
    }
    return d;
  }
 else {
    final int[] rne=getNodeEntry(resultNode);
    if (rne[0] > counter[0]) {
      vsn[posw]=(byte)rne[counter[0] + 1];
      final int[][] resultData=getNodeFromTrieRecursive(0,vsn);
      if (resultData != null && recCall) {
        valuesFound=new byte[]{(byte)rne[counter[0] + 1]};
      }
      return resultData;
    }
 else     if (rne[0] == counter[0]) {
      if (!hasNextNodes(rne)) {
        return null;
      }
      int[][] tmpNode=null;
      aw=new byte[vsn.length - posw];
      System.arraycopy(vsn,posw + 1,aw,1,aw.length - 1);
      if (!recCall) {
        for (int t=rne[0] + 1; t < rne.length - 1; t+=2) {
          aw[0]=(byte)rne[t + 1];
          tmpNode=FTUnion.calculateFTOr(tmpNode,getNodeFromTrieRecursive(rne[t],aw));
        }
        return tmpNode;
      }
 else {
        valuesFound=new byte[rne.length - 1 - rne[0]- 1];
        for (int t=rne[0] + 1; t < rne.length - 1; t+=2) {
          aw[0]=(byte)rne[t + 1];
          valuesFound[t - rne[0] - 1]=(byte)rne[t + 1];
          tmpNode=FTUnion.calculateFTOr(tmpNode,getNodeFromTrieRecursive(rne[t],aw));
        }
      }
    }
  }
  return null;
}
