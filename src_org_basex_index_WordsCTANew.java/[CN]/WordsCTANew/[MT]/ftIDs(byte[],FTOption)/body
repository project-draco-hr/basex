{
  int posW=-1;
  byte[] bTok=new byte[tok.length];
  System.arraycopy(tok,0,bTok,0,tok.length);
  for (int i=0; i < tok.length; i++) {
    tok[i]=(byte)Token.lc(tok[i]);
    if (tok[i] == '.') {
      posW=i;
    }
  }
  if (ftO.ftWild == FTOption.WILD.WITH && posW > -1) {
    return getNodeFromTrieWithWildCard(tok,posW);
  }
  if (ftO.ftCase == FTOption.CASE.INSENSITIVE) {
    return getNodeFromTrieRecursive(0,tok);
  }
  int[][] ids=getNodeFromTrieRecursive(0,tok);
  if (ids == null) {
    return null;
  }
  if (ftO.ftCase == FTOption.CASE.UPPERCASE) {
    bTok=Token.uc(bTok);
  }
 else   if (ftO.ftCase == FTOption.CASE.LOWERCASE) {
    bTok=Token.lc(bTok);
  }
  byte[] tokenFromDB;
  byte[] textFromDB;
  int[][] rIds=new int[2][ids[0].length];
  int count=0;
  int readId;
  int i=0;
  while (i < ids[0].length) {
    readId=ids[0][i];
    textFromDB=data.text(ids[0][i]);
    tokenFromDB=new byte[tok.length];
    System.arraycopy(textFromDB,ids[1][i],tokenFromDB,0,tok.length);
    while (i < ids[0].length && readId == ids[0][i]) {
      System.arraycopy(textFromDB,ids[1][i],tokenFromDB,0,tok.length);
      readId=ids[0][i];
      if (Token.eq(tokenFromDB,bTok)) {
        rIds[0][count]=ids[0][i];
        rIds[1][count++]=ids[1][i];
        while (i < ids[0].length && readId == ids[0][i])         i++;
        break;
      }
      i++;
    }
  }
  if (count == 0)   return null;
  int[][] tmp=new int[2][count];
  System.arraycopy(rIds[0],0,tmp[0],0,count);
  System.arraycopy(rIds[1],0,tmp[1],0,count);
  return tmp;
}
