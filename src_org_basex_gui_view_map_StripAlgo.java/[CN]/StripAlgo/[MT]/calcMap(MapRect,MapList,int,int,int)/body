{
  final MapRects rects=new MapRects();
  int ni=ns;
  int start=ns;
  double xx=r.x;
  double yy=r.y;
  double ww=r.w;
  double hh=r.h;
  MapRects row=new MapRects();
  int height=0;
  double weight=0;
  double sumweight=1;
  double tmpratio;
  double rowratio=Double.MAX_VALUE;
  while (ni <= ne && xx + ww <= r.x + r.w && yy + hh <= r.y + r.h) {
    weight+=ml.weight[ni];
    height=(int)((weight / sumweight) * hh);
    final MapRects tmp=new MapRects();
    double x=xx;
    for (int i=start; i <= ni; i++) {
      int w=i == ni ? (int)(xx + ww - x) : (int)(ml.weight[i] / weight * ww);
      if (yy + height <= yy + hh)       tmp.add(new MapRect((int)x,(int)yy,w,height,ml.list[i],l));
 else       break;
      x+=w;
    }
    tmpratio=lineRatio(tmp);
    if (tmpratio > rowratio) {
      rects.add(row);
      rowratio=Double.MAX_VALUE;
      hh-=row.get(0).h;
      yy+=row.get(0).h;
      tmp.reset();
      row.reset();
      start=ni;
      sumweight-=weight - ml.weight[ni];
      weight=0;
      if (ne == ni) {
        row.add(new MapRect((int)xx,(int)yy,(int)ww,(int)hh,ml.list[ni],l));
        break;
      }
    }
 else {
      row=tmp;
      rowratio=tmpratio;
      ni++;
    }
  }
  for (  final MapRect rect : row)   rect.h=(int)hh;
  rects.add(row);
  return rects;
}
