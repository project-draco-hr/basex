{
  final String type=cmd.arg(0).toLowerCase();
  byte kind=-1;
  for (byte i=0; i < KINDS.length; i++)   if (type.equals(KINDS[i]))   kind=i;
  if (kind == -1)   throw new IllegalArgumentException();
  final Data data=context.data();
  final int args=cmd.nrArgs();
  Nodes nodes;
  final boolean gui=args == (kind == Data.ATTR || kind == Data.PI ? 3 : 2) && context.marked().size != 0;
  if (gui) {
    nodes=context.marked();
  }
 else   if (args == (kind == Data.PI ? 5 : 4)) {
    nodes=query(cmd.arg(args - 1),null);
  }
 else {
    throw new IllegalArgumentException();
  }
  if (nodes == null)   return false;
  data.meta.noIndex();
  final String spos=kind == Data.PI ? cmd.arg(3) : cmd.arg(2);
  final int pos=gui || kind == Data.ATTR ? 0 : Token.toInt(spos);
  if (pos < 0)   return error(POSINVALID,spos);
  if (kind == 0)   return frag(nodes,pos,cmd.arg(1));
  if (kind == Data.ATTR)   return attribute(nodes,cmd.arg(1),cmd.arg(2));
  if (kind == Data.PI)   return pi(nodes,pos,cmd.arg(1),cmd.arg(2));
  return node(kind,nodes,pos,cmd.arg(1));
}
