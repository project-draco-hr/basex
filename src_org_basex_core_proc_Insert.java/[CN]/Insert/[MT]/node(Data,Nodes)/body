{
  byte[] v=token(args[0]);
  final int kind=type.ordinal();
  final boolean pi=kind == Data.PI;
  if (kind == Data.ELEM || pi) {
    if (!check(v))     return error(NAMEINVALID,v);
    if (pi) {
      final byte[] vv=token(args[1]);
      v=v.length == 0 ? vv : concat(v,SPACE,vv);
    }
  }
  final int pos=Prop.gui ? 0 : toInt(args[pi ? 2 : 1]);
  for (int i=nodes.size - 1; i >= 0; i--) {
    final int k=data.kind(nodes.nodes[i]);
    if (k == Data.TEXT)     return error(COPYTAGS);
    if (k == Data.DOC && (kind == Data.TEXT || kind == Data.ELEM && data.meta.size > 1))     return error(COPYROOT);
  }
  data.meta.update();
  for (int i=nodes.size - 1; i >= 0; i--) {
    final int par=nodes.nodes[i];
    final int pre=pre(par,pos,data);
    final int up=checkText(data,pre,par,kind);
    if (up != -1) {
      data.update(up,concat(data.text(up),v));
    }
 else {
      data.insert(pre,par,v,kind);
    }
  }
  return true;
}
