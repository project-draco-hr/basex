{
  byte[] val=token(args[2]);
  final int kind=getType().ordinal();
  final boolean pi=kind == Data.PI;
  if (kind == Data.ELEM || pi) {
    if (!check(val))     return error(NAMEINVALID,val);
    if (pi) {
      final byte[] vv=token(args[3]);
      val=val.length == 0 ? vv : concat(val,SPACE,vv);
    }
  }
  for (int i=nodes.size() - 1; i >= 0; i--) {
    final int k=data.kind(nodes.nodes[i]);
    if (k == Data.TEXT)     return error(COPYTAGS);
    if (k == Data.DOC && (kind == Data.TEXT || kind == Data.ELEM && data.meta.size > 1))     return error(COPYROOT);
  }
  for (int i=nodes.size() - 1; i >= 0; i--) {
    final int par=nodes.nodes[i];
    final int pre=pre(par,pos,data);
    final int txt=checkText(data,pre,par,kind);
    if (txt != -1) {
      data.update(txt,concat(data.text(txt),val));
    }
 else {
      data.insert(pre,par,val,kind);
    }
  }
  return true;
}
