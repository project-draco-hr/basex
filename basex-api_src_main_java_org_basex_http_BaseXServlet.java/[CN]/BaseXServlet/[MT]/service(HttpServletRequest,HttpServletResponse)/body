{
  final HTTPContext http=new HTTPContext(req,res,this);
  final boolean restxq=this instanceof RestXqServlet;
  try {
    run(http);
    http.log("",SC_OK);
  }
 catch (  final HTTPException ex) {
    http.status(ex.getStatus(),Util.message(ex),restxq);
  }
catch (  final LoginException ex) {
    http.status(SC_UNAUTHORIZED,Util.message(ex),restxq);
  }
catch (  final IOException ex) {
    http.status(SC_BAD_REQUEST,Util.message(ex),restxq);
  }
catch (  final ProcException ex) {
    http.status(SC_BAD_REQUEST,Text.INTERRUPTED,restxq);
  }
catch (  final QueryException ex) {
    http.status(SC_BAD_REQUEST,Util.message(ex),restxq);
  }
catch (  final Exception ex) {
    final String msg=Util.bug(ex);
    Util.errln(msg);
    http.status(SC_INTERNAL_SERVER_ERROR,Util.info(UNEXPECTED,msg),restxq);
  }
 finally {
    if (Prop.debug) {
      Util.outln("_ REQUEST _________________________________" + Prop.NL + req);
      final Enumeration<String> en=req.getHeaderNames();
      while (en.hasMoreElements()) {
        final String key=en.nextElement();
        Util.outln(Text.LI + key + Text.COLS+ req.getHeader(key));
      }
      Util.out("_ RESPONSE ________________________________" + Prop.NL + res);
    }
  }
}
