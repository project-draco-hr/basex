{
  final FTIter[] ir=new FTIter[expr.length];
  for (int i=0; i < expr.length; i++)   ir[i]=expr[i].iter(ctx);
  return new FTIter(){
    /** 
 * Item array. 
 */
    final FTItem[] it=new FTItem[pex.length];
    /** 
 * Cache for one of the nodes. 
 */
    final IntList cp=new IntList(pex);
    /** 
 * Pointer on the positive expression with the lowest pre-values.
 */
    int minp=-1;
    @Override public FTItem next() throws QueryException {
      for (int i=0; i < cp.size; i++) {
        final int p=pex[cp.list[i]];
        it[p]=ir[p].next();
      }
      cp.reset();
      if (minp == -1) {
        minp=0;
        while (minp < it.length && it[minp].empty())         minp++;
        if (minp < it.length)         cp.set(minp,0);
        for (int ip=minp + 1; ip < pex.length; ip++) {
          if (!it[ip].empty()) {
            final FTItem n1=it[pex[ip]];
            final FTItem n2=it[pex[minp]];
            final int d=n1.fte.pre() - n2.fte.pre();
            if (d < 0) {
              minp=ip;
              cp.set(ip,0);
            }
 else             if (d == 0) {
              cp.add(ip);
            }
          }
        }
      }
      minp=-1;
      final FTItem m=it[pex[cp.list[0]]];
      for (int i=1; i < cp.size; i++) {
        m.union(ctx,it[pex[cp.list[i]]],0);
        m.fte.not=false;
      }
      if (m.empty())       m.fte.not=not;
      return m;
    }
  }
;
}
