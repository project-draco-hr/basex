{
  final double ds=checkDbl(expr[1],ctx);
  if (Double.isNaN(ds))   return Empty.ITER;
  final long s=StrictMath.round(ds);
  long l=Long.MAX_VALUE;
  if (expr.length > 2) {
    final double dl=checkDbl(expr[2],ctx);
    if (Double.isNaN(dl))     return Empty.ITER;
    if (dl == Double.POSITIVE_INFINITY) {
      if (ds == Double.NEGATIVE_INFINITY)       return Empty.ITER;
    }
 else     if (s + dl < l) {
      l=StrictMath.round(s + dl);
    }
  }
  final long e=l;
  if (expr[0] instanceof RangeSeq) {
    final RangeSeq rs=(RangeSeq)expr[0];
    final long os=rs.start;
    final long oe=rs.size() == Long.MAX_VALUE ? rs.size() : os + rs.size();
    final long ns=Math.max(os,s + os - 1);
    final long ne=Math.min(oe,e == Long.MAX_VALUE ? e : e + os - 1);
    return RangeSeq.get(ns,ne == Long.MIN_VALUE ? 0 : ne - 1).iter();
  }
  final Iter iter=ctx.iter(expr[0]);
  final long max=iter.size();
  if (max != -1)   return new Iter(){
    final long m=Math.min(e,max + 1);
    long c=Math.max(1,s);
    @Override public Item next() throws QueryException {
      return c < m ? iter.get(c++ - 1) : null;
    }
    @Override public Item get(    final long i) throws QueryException {
      return iter.get(c + i - 1);
    }
    @Override public long size(){
      return Math.max(0,m - c);
    }
    @Override public boolean reset(){
      c=Math.max(1,s);
      return true;
    }
  }
;
  return new Iter(){
    long c;
    @Override public Item next() throws QueryException {
      while (true) {
        final Item i=iter.next();
        if (i == null || ++c >= e)         return null;
        if (c >= s)         return i;
      }
    }
  }
;
}
