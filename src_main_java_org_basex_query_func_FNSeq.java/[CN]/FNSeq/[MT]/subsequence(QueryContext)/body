{
  final long s=Math.round(checkDbl(expr[1],ctx));
  final long e=expr.length > 2 ? s + Math.round(checkDbl(expr[2],ctx)) : Long.MAX_VALUE;
  final Iter iter=ctx.iter(expr[0]);
  final long max=iter.size();
  return max != -1 ? new Iter(){
    long c=Math.max(1,s);
    long m=Math.min(e,max + 1);
    @Override public Item next() throws QueryException {
      return c < m ? iter.get(c++ - 1) : null;
    }
    @Override public Item get(    final long i) throws QueryException {
      return iter.get(c + i - 1);
    }
    @Override public long size(){
      return Math.max(0,m - c);
    }
    @Override public boolean reset(){
      c=Math.max(1,s);
      return true;
    }
  }
 : new Iter(){
    long c;
    @Override public Item next() throws QueryException {
      while (true) {
        final Item i=iter.next();
        if (i == null || ++c >= e)         return null;
        if (c >= s)         return i;
      }
    }
  }
;
}
