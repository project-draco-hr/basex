{
  assertTrue("Increase {@code objects.length}!",objects.length > 1);
  final Thread[] threads=new Thread[FUZZING_THREADS];
  final CountDownLatch allDone=new CountDownLatch(FUZZING_THREADS * FUZZING_REPEATS);
  for (int i=0; i < FUZZING_THREADS; i++) {
    threads[i]=new Thread(){
      private String[] randomSubset(      final String[] set,      final boolean nullAllowed){
        if (nullAllowed && Math.random() * set.length == 0)         return null;
        final int start=(int)(Math.random() * set.length);
        final int end=(int)(Math.random() * (set.length - start)) + start;
        return Arrays.copyOfRange(set,start,end);
      }
      @Override public void run(){
        for (int j=0; j < FUZZING_REPEATS; j++) {
          final CountDownLatch latch=new CountDownLatch(1);
          final String[] read=randomSubset(objects,true);
          final String[] write=randomSubset(objects,true);
          final LockTester th=new LockTester(null,read,write,latch);
          th.start();
          try {
            Thread.sleep(HOLD_TIME);
            if (!latch.await(FUZZING_THREADS * HOLD_TIME + WAIT,TimeUnit.MILLISECONDS))             throw new RuntimeException("Looks like thread is stuck in a deadlock.");
          }
 catch (          final InterruptedException e) {
            throw new RuntimeException(e);
          }
          th.release();
          allDone.countDown();
        }
      }
    }
;
    threads[i].start();
  }
  assertTrue("Looks like thread is stuck in a deadlock.",allDone.await(FUZZING_THREADS * FUZZING_REPEATS * HOLD_TIME,TimeUnit.MILLISECONDS));
}
