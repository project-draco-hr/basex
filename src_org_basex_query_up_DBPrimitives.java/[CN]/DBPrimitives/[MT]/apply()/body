{
  final int l=op.size();
  if (op.size() == 0)   return;
  final Integer[] t=new Integer[l];
  op.keySet().toArray(t);
  final int[] p=new int[l];
  for (int i=0; i < l; i++)   p[i]=t[i];
  Arrays.sort(p);
  for (int i=l - 1; i >= 0; i--) {
    final UpdatePrimitive[] pl=op.get(p[i]);
    for (    final UpdatePrimitive pp : pl)     if (pp != null)     pp.check();
    if (f)     return;
    int add=0;
    for (    final UpdatePrimitive pp : pl) {
      if (pp == null)       continue;
      if (pp.type().ordinal() == Type.INSERTBEFORE.ordinal()) {
        final MemData m=((InsertBeforePrimitive)pp).buildDB();
        add=m.size(0,Data.DOC) - 1;
      }
      pp.apply(add);
    }
  }
}
