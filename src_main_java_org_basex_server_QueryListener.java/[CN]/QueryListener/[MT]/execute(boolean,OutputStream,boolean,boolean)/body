{
  try {
    init();
    try {
      ctx.register(qp);
      final Iter ir=qp.iter();
      final boolean wrap=!options.get(S_WRAP_PREFIX).isEmpty();
      final PrintOutput po=PrintOutput.get(enc ? new EncodingOutput(out) : out);
      if (iter && wrap)       po.write(1);
      final Serializer ser=Serializer.get(po,options);
      int c=0;
      for (Item it; (it=ir.next()) != null; ) {
        if (iter && !wrap) {
          if (full) {
            po.print(it.xdmInfo());
          }
 else {
            po.write(it.type.id());
          }
          ser.reset();
        }
        ser.openResult();
        it.serialize(ser);
        ser.closeResult();
        if (iter && !wrap) {
          po.flush();
          out.write(0);
        }
        c++;
      }
      ser.close();
      if (iter && wrap)       out.write(0);
      final int up=qp.updates();
      final TokenBuilder tb=new TokenBuilder();
      tb.addExt(HITS_X_CC + "% %" + NL,c,c == 1 ? ITEM : ITEMS);
      tb.addExt(UPDATED_CC + "% %" + NL,up,up == 1 ? ITEM : ITEMS);
      tb.addExt(TOTAL_TIME_CC + '%',perf);
      info=tb.toString();
    }
 catch (    final QueryException ex) {
      throw new BaseXException(ex);
    }
catch (    final ProgressException ex) {
      throw new BaseXException(TIMEOUT_EXCEEDED);
    }
 finally {
      ctx.unregister(qp);
    }
  }
  finally {
    qp.close();
  }
}
