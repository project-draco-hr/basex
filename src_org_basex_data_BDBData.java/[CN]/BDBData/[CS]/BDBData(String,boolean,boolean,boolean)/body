{
  DataInput in=null;
  try {
    in=new DataInput(db,DATAINFO);
    meta=new MetaData(db);
    meta.read(in);
    tags=new Names(in);
    atts=new Names(in);
    skel=new Skeleton(this,in);
    ns=new Namespaces(in);
  }
 catch (  IOException e) {
    throw e;
  }
 finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      Exception e) {
      }
    }
  }
  EnvironmentConfig envConfig=new EnvironmentConfig();
  StoreConfig storeConfig=new StoreConfig();
  envConfig.setTransactional(transactional);
  storeConfig.setDeferredWrite(deferredWrite);
  try {
    dbEnv=new Environment(IO.dbpath(db),envConfig);
    store=new EntityStore(dbEnv,"EntityStore",storeConfig);
    nodeByPre=store.getPrimaryIndex(Integer.class,BDBNode.class);
    nodeById=store.getSecondaryIndex(nodeByPre,Integer.class,"mId");
  }
 catch (  DatabaseException e) {
    throw new IOException(e);
  }
  texts=new DataAccess(db,DATATXT);
  values=new DataAccess(db,DATAATV);
  if (index) {
    if (meta.txtindex)     txtindex=new Values(this,db,true);
    if (meta.atvindex)     atvindex=new Values(this,db,false);
    if (meta.ftxindex)     ftxindex=meta.ftfz ? new FTFuzzy(this,db) : new FTTrie(this,db);
  }
  initNames();
}
