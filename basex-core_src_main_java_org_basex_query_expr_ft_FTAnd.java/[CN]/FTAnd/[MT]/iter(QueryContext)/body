{
  final int es=exprs.length;
  final FTIter[] ir=new FTIter[es];
  final FTNode[] it=new FTNode[es];
  for (int e=0; e < es; ++e) {
    ir[e]=exprs[e].iter(qc);
    it[e]=ir[e].next();
  }
  return new FTIter(){
    @Override public FTNode next() throws QueryException {
      final int il=it.length;
      for (int i=0; i < il; ++i) {
        if (it[i] == null) {
          if (negated[i])           continue;
          return null;
        }
        final int d=it[0].pre() - it[i].pre();
        if (negated[i]) {
          if (d >= 0) {
            if (d == 0)             it[0]=ir[0].next();
            it[i]=ir[i].next();
            i=-1;
          }
        }
 else {
          if (d != 0) {
            if (d < 0)             i=0;
            it[i]=ir[i].next();
            i=-1;
          }
        }
      }
      final FTNode item=it[0];
      for (int i=1; i < il; ++i) {
        if (negated[i])         continue;
        and(item,it[i]);
        it[i]=ir[i].next();
      }
      it[0]=ir[0].next();
      return item;
    }
  }
;
}
