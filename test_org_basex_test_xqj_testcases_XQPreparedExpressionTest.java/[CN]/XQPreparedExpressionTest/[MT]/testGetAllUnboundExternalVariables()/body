{
  XQPreparedExpression xqpe;
  QName[] extVars=null;
  xqpe=xqc.prepareExpression("'Hello world!'");
  xqpe.close();
  try {
    xqpe.getAllUnboundExternalVariables();
    junit.framework.Assert.fail("A-XQPE-9.1: closed prepared expression supports getAllUnboundExternalVariables()");
  }
 catch (  XQException e) {
  }
  xqpe=xqc.prepareExpression("declare variable $v external; $v");
  try {
    extVars=xqpe.getAllUnboundExternalVariables();
  }
 catch (  XQException e) {
    junit.framework.Assert.fail("A-XQPE-9.2: getAllUnboundExternalVariables on prepared expression with unbound variables failed with message: " + e.getMessage());
  }
  junit.framework.Assert.assertNotNull("A-XQPE-9.2: getAllUnboundExternalVariables on prepared expression with unbound variables",extVars);
  junit.framework.Assert.assertEquals("A-XQPE-9.2: getAllUnboundExternalVariables on prepared expression with unbound variables",1,extVars.length);
  junit.framework.Assert.assertEquals("A-XQPE-9.2: getAllUnboundExternalVariables on prepared expression with unbound variables","v",extVars[0].getLocalPart());
  junit.framework.Assert.assertEquals("A-XQPE-9.2: getAllUnboundExternalVariables on prepared expression with unbound variables","",extVars[0].getNamespaceURI());
  xqpe.bindString(new QName("v"),"Hello world!",null);
  try {
    extVars=xqpe.getAllUnboundExternalVariables();
  }
 catch (  XQException e) {
    junit.framework.Assert.fail("A-XQPE-9.3: getAllUnboundExternalVariables on prepared expression without unbound variables failed with message: " + e.getMessage());
  }
  junit.framework.Assert.assertNotNull("A-XQPE-9.3: getAllUnboundExternalVariables on prepared expression without unbound variables",extVars);
  junit.framework.Assert.assertEquals("A-XQPE-9.3: getAllUnboundExternalVariables on prepared expression without unbound variables",0,extVars.length);
  xqpe.close();
}
