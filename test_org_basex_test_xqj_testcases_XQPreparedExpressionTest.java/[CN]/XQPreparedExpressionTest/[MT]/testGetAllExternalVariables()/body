{
  XQPreparedExpression xqpe;
  QName[] extVars=null;
  xqpe=xqc.prepareExpression("'Hello world!'");
  xqpe.close();
  try {
    xqpe.getAllExternalVariables();
    junit.framework.Assert.fail("A-XQPE-4.1: closed prepared expression supports getAllExternalVariables()");
  }
 catch (  XQException e) {
  }
  xqpe=xqc.prepareExpression("'Hello world!'");
  try {
    extVars=xqpe.getAllExternalVariables();
  }
 catch (  XQException e) {
    junit.framework.Assert.fail("A-XQPE-4.2: getAllExternalVariables on prepared expression without external variables failed with message: " + e.getMessage());
  }
  junit.framework.Assert.assertNotNull("A-XQPE-4.2: getAllExternalVariables on prepared expression without external variables",extVars);
  junit.framework.Assert.assertEquals("A-XQPE-4.2: getAllExternalVariables on prepared expression without external variables",0,extVars.length);
  xqpe.close();
  xqpe=xqc.prepareExpression("declare variable $v external; $v");
  try {
    extVars=xqpe.getAllExternalVariables();
  }
 catch (  XQException e) {
    junit.framework.Assert.fail("A-XQPE-4.3: getAllExternalVariables on prepared expression with external variables failed with message: " + e.getMessage());
  }
  junit.framework.Assert.assertNotNull("A-XQPE-4.3: getAllExternalVariables on prepared expression with external variables",extVars);
  junit.framework.Assert.assertEquals("A-XQPE-4.3: getAllExternalVariables on prepared expression with external variables",1,extVars.length);
  junit.framework.Assert.assertEquals("A-XQPE-4.3: getAllExternalVariables on prepared expression with external variables","v",extVars[0].getLocalPart());
  junit.framework.Assert.assertEquals("A-XQPE-4.3: getAllExternalVariables on prepared expression with external variables","",extVars[0].getNamespaceURI());
  xqpe.close();
}
