{
  final Atts atts=new Atts();
  for (  final DeepFile d : c) {
    if (subfile) {
      atts.add(OFFSET,token(d.getOffset()));
      atts.add(SIZE,token(d.getSize()));
      startElem(CONTENT_NS,atts);
    }
 else {
      final Atts a=d.getFSAtts();
      startElem(FILE_NS,a == null ? new Atts() : a);
    }
    final TreeMap<MetaElem,ArrayList<byte[]>> meta=d.getMeta();
    if (meta != null) {
      for (      final Entry<MetaElem,ArrayList<byte[]>> e : meta.entrySet())       for (      final byte[] val : e.getValue())       nodeAndText(e.getKey().get(),atts.reset(),val);
    }
    final TextContent[] textContents=d.getTextContents();
    if (textContents != null) {
      for (      final TextContent t : textContents) {
        atts.reset();
        atts.add(OFFSET,token(t.getOffset()));
        atts.add(SIZE,token(t.getSize()));
        startElem(TEXT_CONTENT_NS,atts);
        text(t.getText());
        endElem(TEXT_CONTENT_NS);
      }
    }
    final XMLContent[] xmlContents=d.getXMLContents();
    if (xmlContents != null) {
      for (      final XMLContent x : xmlContents) {
        atts.reset();
        atts.add(OFFSET,token(x.getOffset()));
        atts.add(SIZE,token(x.getSize()));
        startElem(XML_CONTENT_NS,atts);
        xml(token(x.asString()));
        endElem(XML_CONTENT_NS);
      }
    }
    serializeDeepFiles(true,d.getContent());
    endElem(subfile ? CONTENT_NS : FILE_NS);
  }
}
