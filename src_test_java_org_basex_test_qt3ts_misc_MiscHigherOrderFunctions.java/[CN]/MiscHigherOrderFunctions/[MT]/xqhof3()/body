{
  final XQuery query=new XQuery("\n" + "import module namespace func = \"http://snelson.org.uk/functions/functional\";\n" + "\n"+ "declare function local:fib2_aux($result as xs:integer, $next as xs:integer, $n) as xs:integer*\n"+ "{\n"+ "  if($n eq 0) then () else (\n"+ "  $result, local:fib2_aux($next, $next + $result, $n - 1))\n"+ "};\n"+ "\n"+ "declare function local:fib2($n) as xs:integer*\n"+ "{\n"+ "  local:fib2_aux(0, 1, $n)\n"+ "};\n"+ "\n"+ "string-join(\n"+ "for $a in subsequence(\n"+ "\n"+ "let $interleave := func:curry(map-pairs#3)(function($a, $b) { $a, $b })\n"+ "let $enumerate := $interleave(0 to 49)\n"+ "return\n"+ "$enumerate(local:fib2(50))\n"+ "\n"+ ", 1, 100)\n"+ "return string($a)\n"+ ", \"\n"+ "\")\n"+ "      ",ctx);
  query.addModule("http://snelson.org.uk/functions/functional",file("misc/HigherOrderFunctions/functional.xq"));
  final QT3Result res=result(query);
  result=res;
  test(assertEq("\"0\n0\n1\n1\n2\n1\n3\n2\n4\n3\n5\n5\n6\n8\n7\n13\n8\n21\n9\n34\n10\n55\n11\n89\n12\n144\n13\n233\n14\n377\n15\n610\n16\n987\n17\n1597\n18\n2584\n19\n4181\n20\n6765\n21\n10946\n22\n17711\n23\n28657\n24\n46368\n25\n75025\n26\n121393\n27\n196418\n28\n317811\n29\n514229\n30\n832040\n31\n1346269\n32\n2178309\n33\n3524578\n34\n5702887\n35\n9227465\n36\n14930352\n37\n24157817\n38\n39088169\n39\n63245986\n40\n102334155\n41\n165580141\n42\n267914296\n43\n433494437\n44\n701408733\n45\n1134903170\n46\n1836311903\n47\n2971215073\n48\n4807526976\n49\n7778742049\""));
}
