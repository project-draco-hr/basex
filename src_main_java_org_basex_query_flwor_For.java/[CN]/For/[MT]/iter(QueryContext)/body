{
  final Var v=var.copy();
  final Var p=pos != null ? pos.copy() : null;
  final Var s=score != null ? score.copy() : null;
  return new Iter(){
    /** 
 * Variable stack size. 
 */
    private int vs;
    /** 
 * Iterator flag. 
 */
    private Iter ir;
    /** 
 * Counter. 
 */
    private int c;
    @Override public Item next() throws QueryException {
      init();
      final Item it=ir.next();
      if (it != null)       return bind(it,++c);
      reset();
      return null;
    }
    @Override public long size(){
      return expr.size();
    }
    @Override public Item get(    final long i) throws QueryException {
      init();
      return bind(ir.get(i),i + 1);
    }
    @Override public boolean reset(){
      if (ir != null) {
        ctx.vars.size(vs);
        ir.reset();
        ir=null;
        c=0;
      }
      return true;
    }
    /** 
 * Initializes the iterator.
 * @throws QueryException query exception
 */
    private void init() throws QueryException {
      if (ir == null) {
        vs=ctx.vars.size();
        ir=ctx.iter(expr);
        ctx.vars.add(v);
        if (p != null)         ctx.vars.add(p);
        if (s != null)         ctx.vars.add(s);
      }
    }
    /** 
 * Binds an item to the loop variables.
 * @param it item
 * @param i position counter
 * @return specified item
 * @throws QueryException query exception
 */
    private Item bind(    final Item it,    final long i) throws QueryException {
      v.bind(it,ctx);
      if (p != null)       p.bind(Int.get(i),ctx);
      if (s != null)       s.bind(Dbl.get(it.score()),ctx);
      return it;
    }
  }
;
}
