{
  final int l=pic.length;
  if (l == 0) {
    pres=def;
    return 0;
  }
  byte[] pm=null;
  int cp=cl(pic,0);
  int ch=ch(pic,0);
  if (sequence(ch) != null) {
  }
 else   if (ch == '\u2460' || ch == '\u2474' || ch == '\u2488') {
  }
 else   if (ch == KANJI[1]) {
  }
 else   if ((ch | ' ') == 'i') {
  }
 else   if ((ch | ' ') == 'w' || (ch | ' ') == 'n') {
    if ((ch & ' ') == 0 && ch(pic,cp) == (ch | ' '))     cp+=cl(pic,cp);
  }
 else   if (ch == ',') {
    cp=0;
  }
 else {
    int z=-1;
    boolean group=false;
    for (cp=0; cp < l; cp+=cl(pic,cp)) {
      ch=ch(pic,cp);
      if (z == -1) {
        z=zeroes(ch);
        if (z != -1) {
          digit=z;
          group=false;
        }
 else         if (ch == '#') {
          group=false;
        }
 else         if (Character.isLetter(ch)) {
          pm=def;
          cp+=cl(pic,cp);
          break;
        }
 else {
          if (cp == 0)           GROUPSTART.thrw(info,pic);
          if (group)           INVGROUP.thrw(info,pic);
          group=true;
        }
      }
 else {
        if (Character.isLetter(ch)) {
          pm=substring(pic,0,cp);
          break;
        }
 else         if (ch >= z && ch <= z + 9) {
          group=false;
        }
 else {
          if (zeroes(ch) != -1)           DIFFMAND.thrw(info,pic);
          if (ch == '#')           OPTAFTER.thrw(info,pic);
          if (group)           INVGROUP.thrw(info,pic);
          group=true;
        }
      }
    }
    if (z == -1)     NOMAND.thrw(info,pic);
    if (group)     INVGROUP.thrw(info,pic);
  }
  if (pm == null)   pm=substring(pic,0,cp);
  pres=pm;
  return cp;
}
