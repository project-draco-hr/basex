{
  if (hash == o.hash) {
    for (int i=keys.length; i-- > 0; ) {
      if (o.key.sameKey(keys[i],ii)) {
switch (merge) {
case USE_FIRST:
case UNSPECIFIED:
          final Value[] uf=values.clone();
        uf[i]=o.value;
      return new TrieList(hash,keys,uf);
case USE_LAST:
    return this;
case COMBINE:
  final Value[] cm=values.clone();
cm[i]=ValueBuilder.concat(o.value,cm[i]);
return new TrieList(hash,keys,cm);
default :
throw MERGE_DUPLICATE_X.get(ii,o.key);
}
}
}
return new TrieList(hash,Array.add(keys,o.key),Array.add(values,o.value));
}
final TrieNode[] ch=new TrieNode[KIDS];
final int k=key(hash,l), ok=key(o.hash,l);
final int nu;
if (k == ok) {
ch[k]=add(o,l + 1,merge,ii);
nu=1 << k;
}
 else {
ch[k]=this;
ch[ok]=o;
nu=1 << k | 1 << ok;
}
return new TrieBranch(ch,nu,size + 1);
}
