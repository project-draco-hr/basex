{
  boolean opt=false;
  Expr[] st=steps;
  for (int l=1; l < st.length; ++l) {
    if (!(st[l - 1] instanceof Step && st[l] instanceof Step))     continue;
    final Step prev=(Step)st[l - 1];
    final Step curr=(Step)st[l];
    if (!prev.simple(DESCORSELF,false))     continue;
    if (curr.axis == CHILD && !curr.has(Flag.FCS)) {
      final int sl=st.length;
      final Expr[] tmp=new Expr[sl - 1];
      System.arraycopy(st,0,tmp,0,l - 1);
      System.arraycopy(st,l,tmp,l - 1,sl - l);
      st=tmp;
      curr.axis=DESC;
      opt=true;
    }
 else     if (curr.axis == ATTR && !curr.has(Flag.FCS)) {
      prev.test=new NameTest(false);
      opt=true;
    }
  }
  if (opt)   ctx.compInfo(OPTDESC);
  if (root == null && st.length == 1 && st[0] instanceof Step) {
    final Step curr=(Step)st[0];
    if (curr.axis == ATTR && curr.test.kind == Kind.URI_NAME)     curr.type=SeqType.NOD_ZO;
  }
  steps=st;
}
