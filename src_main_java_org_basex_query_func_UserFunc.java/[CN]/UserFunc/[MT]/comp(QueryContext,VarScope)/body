{
  if (compiled)   return;
  compiled=true;
  ArrayList<Entry<Var,Value>> propagate=null;
  final Iterator<Entry<Var,Expr>> cls=scope.closure().entrySet().iterator();
  while (cls.hasNext()) {
    final Entry<Var,Expr> e=cls.next();
    final Expr c=e.getValue().compile(ctx,outer);
    if (c.isValue()) {
      if (propagate == null)       propagate=new ArrayList<Entry<Var,Value>>();
      propagate.add(new SimpleImmutableEntry<Var,Value>(e.getKey(),(Value)c));
      cls.remove();
    }
  }
  final Value[] sf=scope.enter(ctx);
  try {
    if (propagate != null)     for (    final Entry<Var,Value> e : propagate)     ctx.set(e.getKey(),e.getValue(),info);
    expr=expr.compile(ctx,scope);
    scope.cleanUp(this);
  }
  finally {
    scope.exit(ctx,sf);
  }
  if (tco())   expr=expr.markTailCalls();
  if (ret == null)   return;
  type=ret;
  if ((ret.type == AtomType.BLN || ret.type == AtomType.FLT || ret.type == AtomType.DBL || ret.type == AtomType.QNM || ret.type == AtomType.URI) && ret.eq(expr.type())) {
    ctx.compInfo(OPTCAST,ret);
    cast=false;
  }
}
