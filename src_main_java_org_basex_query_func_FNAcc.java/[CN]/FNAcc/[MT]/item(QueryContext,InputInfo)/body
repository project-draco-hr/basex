{
  final Expr e=expr.length != 0 ? expr[0] : checkCtx(ctx);
switch (def) {
case POSITION:
    return Int.get(ctx.pos);
case LAST:
  return Int.get(ctx.size);
case STRING:
Item it=e.item(ctx,input);
if (it == null) return Str.ZERO;
Type t=it.type;
if (t.isFunction()) FNSTR.thrw(ii,this);
return t == AtomType.STR ? it : Str.get(it.string(ii));
case NUMBER:
return number(ctx.iter(e),ctx);
case STRING_LENGTH:
return Int.get(len(checkEStr(e,ctx)));
case NORMALIZE_SPACE:
return Str.get(norm(checkEStr(e,ctx)));
case NAMESPACE_URI_FROM_QNAME:
it=e.item(ctx,input);
if (it == null) return null;
final QNm qn=(QNm)checkType(it,AtomType.QNM);
return qn.hasUri() ? qn.uri() : Uri.uri(ctx.ns.uri(qn.pref(),true,ii));
default :
return super.item(ctx,ii);
}
}
