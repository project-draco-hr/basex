{
  checkCreate(qc);
  try {
switch (func) {
case _FILE_APPEND:
      return write(true,qc);
case _FILE_APPEND_BINARY:
    return writeBinary(true,qc);
case _FILE_APPEND_TEXT:
  return writeText(true,qc);
case _FILE_APPEND_TEXT_LINES:
return writeTextLines(true,qc);
case _FILE_BASE_DIR:
return baseDir();
case _FILE_COPY:
return relocate(true,qc);
case _FILE_CREATE_DIR:
return createDir(qc);
case _FILE_CREATE_TEMP_DIR:
return createTemp(true,qc);
case _FILE_CREATE_TEMP_FILE:
return createTemp(false,qc);
case _FILE_CURRENT_DIR:
return currentDir();
case _FILE_DELETE:
return delete(qc);
case _FILE_DIR_SEPARATOR:
return Str.get(File.separator);
case _FILE_EXISTS:
return Bln.get(Files.exists(toPath(0,qc)));
case _FILE_IS_DIR:
return Bln.get(Files.isDirectory(toPath(0,qc)));
case _FILE_IS_FILE:
return Bln.get(Files.isRegularFile(toPath(0,qc)));
case _FILE_LAST_MODIFIED:
return lastModified(qc);
case _FILE_LINE_SEPARATOR:
return Str.get(NL);
case _FILE_MOVE:
return relocate(false,qc);
case _FILE_NAME:
return name(qc);
case _FILE_PARENT:
return parent(qc);
case _FILE_PATH_SEPARATOR:
return Str.get(File.pathSeparator);
case _FILE_PATH_TO_NATIVE:
return pathToNative(qc);
case _FILE_PATH_TO_URI:
return pathToUri(qc);
case _FILE_READ_BINARY:
return readBinary(qc);
case _FILE_READ_TEXT:
return readText(qc);
case _FILE_RESOLVE_PATH:
return resolvePath(qc);
case _FILE_SIZE:
return size(qc);
case _FILE_TEMP_DIR:
return Str.get(Prop.TMP);
case _FILE_WRITE:
return write(false,qc);
case _FILE_WRITE_BINARY:
return writeBinary(false,qc);
case _FILE_WRITE_TEXT:
return writeText(false,qc);
case _FILE_WRITE_TEXT_LINES:
return writeTextLines(false,qc);
default :
return super.item(qc,ii);
}
}
 catch (final NoSuchFileException ex) {
throw FILE_NOT_FOUND_X.get(info,ex);
}
catch (final AccessDeniedException ex) {
throw FILE_IE_ERROR_ACCESS_X.get(info,ex);
}
catch (final FileAlreadyExistsException ex) {
throw FILE_EXISTS_X.get(info,ex);
}
catch (final DirectoryNotEmptyException ex) {
throw FILE_ID_DIR2_X.get(info,ex);
}
catch (final IOException ex) {
throw FILE_IO_ERROR_X.get(info,ex);
}
}
