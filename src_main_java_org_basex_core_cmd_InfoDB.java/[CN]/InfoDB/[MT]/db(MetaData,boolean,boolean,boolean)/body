{
  final TokenBuilder tb=new TokenBuilder();
  final String header=(bold ? new TokenBuilder().bold().add('%').norm().toString() : "%") + NL;
  tb.addExt(header,INFODB);
  format(tb,INFODBNAME,meta.name);
  format(tb,INFODBSIZE,Performance.format(meta.dbsize()));
  format(tb,INFONODES,Integer.toString(meta.size));
  final int bin=meta.binaries().descendants().size();
  format(tb,INFODOCS,Integer.toString(meta.ndocs));
  format(tb,INFOBIN,Integer.toString(bin));
  format(tb,INFOTIME,DATE.format(new Date(meta.dbtime())));
  if (meta.corrupt)   tb.add(' ' + DBCORRUPT + NL);
  tb.add(NL).addExt(header,INFORESOURCE);
  if (create && !meta.original.isEmpty())   format(tb,INFOPATH,meta.original);
  if (meta.filesize != 0)   format(tb,INFODOCSIZE,Performance.format(meta.filesize));
  format(tb,INFOTIME,DATE.format(new Date(meta.time)));
  format(tb,INFOENCODING,meta.encoding);
  format(tb,INFOCHOP,Util.flag(meta.chop));
  if (index) {
    tb.add(NL).addExt(header,INFOINDEX);
    if (meta.oldindex) {
      tb.add(" " + INDUPDATE + NL);
    }
 else {
      format(tb,INFOUPTODATE,String.valueOf(meta.uptodate));
      format(tb,INFOPATHINDEX,Util.flag(meta.pathindex));
      format(tb,INFOTEXTINDEX,Util.flag(meta.textindex));
      format(tb,INFOATTRINDEX,Util.flag(meta.attrindex));
      format(tb,INFOFTINDEX,Util.flag(meta.ftxtindex) + (meta.ftxtindex && meta.wildcards ? " (" + INFOWCINDEX + ")" : ""));
    }
  }
  return tb.toString();
}
