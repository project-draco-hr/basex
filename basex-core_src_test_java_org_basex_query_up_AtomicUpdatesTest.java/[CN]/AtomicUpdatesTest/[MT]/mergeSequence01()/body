{
  final String doc="<a><b/></a>";
  AtomicUpdateCache auc=atomics(doc);
  final MemData m=new MemData(auc.data,context.options);
  auc.addInsert(3,2,clipE(m,"<c/>",false));
  auc.addInsert(3,2,clipE(m,"<d/>",false));
  assertEquals(2,auc.updatesSize());
  query(transform(doc,"insert node <c/> into $input/b,insert node <d/> into $input/b"),"<a>\n<b>\n<c/>\n<d/>\n</b>\n</a>");
  auc=atomics(doc);
  auc.addDelete(2);
  auc.addInsert(3,1,clipE(m,"<d/>",false));
  assertEquals(1,auc.updatesSize());
  query(transform(doc,"insert node <d/> into $input,delete node $input/b"),"<a>\n<d/>\n</a>");
  auc=atomics("<a><b/><c/></a>");
  auc.addDelete(2);
  auc.addDelete(3);
  auc.addInsert(4,1,clipE(m,"<d/>",false));
  assertEquals(2,auc.updatesSize());
  query(transform("<a><b/><c/></a>","insert node <d/> into $input," + "delete node $input/c,delete node $input/b"),"<a>\n<d/>\n</a>");
  auc=atomics(doc);
  auc.addInsert(2,1,clipE(m,"<d/>",false));
  auc.addDelete(2);
  assertEquals(1,auc.updatesSize());
  query(transform(doc,"insert node <d/> into $input,delete node $input/b"),"<a>\n<d/>\n</a>");
}
