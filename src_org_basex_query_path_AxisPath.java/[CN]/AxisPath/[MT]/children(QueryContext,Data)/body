{
  for (int i=0; i < step.length; i++) {
    if (step[i].axis != Axis.DESC)     continue;
    SkelNode node=node(data,i);
    if (node == null)     continue;
    ctx.compInfo(OPTCHILD,step[i]);
    final TokenList tl=new TokenList();
    while (node.par != null) {
      tl.add(data.tags.key(node.name));
      node=node.par;
    }
    int ts=tl.size;
    final Step[] steps=new Step[ts + step.length - i - 1];
    for (int t=0; t < ts - 1; t++) {
      steps[t]=Step.get(Axis.CHILD,new NameTest(new QNm(tl.list[ts - t - 1]),Kind.NAME,false));
    }
    steps[ts - 1]=Step.get(Axis.CHILD,new NameTest(new QNm(tl.list[0]),Kind.NAME,false),step[i].pred);
    while (++i < step.length)     steps[ts++]=step[i];
    return get(root,steps).children(ctx,data);
  }
  return this;
}
