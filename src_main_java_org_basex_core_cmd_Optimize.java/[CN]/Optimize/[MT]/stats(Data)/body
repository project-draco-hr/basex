{
  data.path.init();
  data.tags.init();
  data.atts.init();
  data.meta.dirty=true;
  final int[] parStack=new int[IO.MAXHEIGHT];
  final int[] tagStack=new int[IO.MAXHEIGHT];
  final boolean path=prop.is(Prop.PATHINDEX);
  int level=0;
  int h=0, d=0;
  size=data.meta.size;
  for (pre=0; pre < size; ++pre) {
    final byte kind=(byte)data.kind(pre);
    final int par=data.parent(pre,kind);
    while (level > 0 && parStack[level - 1] > par)     --level;
    if (kind == Data.DOC) {
      parStack[level++]=pre;
      if (path)       data.path.add(0,level,kind);
      ++d;
    }
 else     if (kind == Data.ELEM) {
      final int id=data.name(pre);
      data.tags.index(data.tags.key(id),null,true);
      if (path)       data.path.add(id,level,kind);
      tagStack[level]=id;
      parStack[level++]=pre;
    }
 else     if (kind == Data.ATTR) {
      final int id=data.name(pre);
      data.atts.index(data.atts.key(id),data.text(pre,false),true);
      if (path)       data.path.add(id,level,kind);
    }
 else {
      final byte[] txt=data.text(pre,true);
      if (kind == Data.TEXT)       data.tags.index(tagStack[level - 1],txt);
      if (path)       data.path.add(0,level,kind);
    }
    if (h < level)     h=level;
  }
  data.meta.height=h;
  data.meta.ndocs=d;
  data.meta.uptodate=true;
  try {
    data.meta.pathindex|=prop.is(Prop.PATHINDEX);
    data.meta.textindex|=prop.is(Prop.TEXTINDEX);
    data.meta.attrindex|=prop.is(Prop.ATTRINDEX);
    data.meta.ftindex|=prop.is(Prop.FTINDEX);
    index(data);
  }
 catch (  final IOException ex) {
    Util.debug(ex);
  }
  data.flush();
}
