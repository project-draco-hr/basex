{
  values=choice.clone();
  single=s;
  for (  final String v : values)   num=num && v.matches("[0-9]+");
  layout(new TableLayout(2,1));
  text=new BaseXTextField(d);
  text.addFocusListener(new FocusAdapter(){
    @Override public void focusGained(    final FocusEvent e){
      text.selectAll();
    }
  }
);
  text.addKeyListener(new KeyAdapter(){
    boolean multi, typed;
    String old="";
    @Override public void keyPressed(    final KeyEvent e){
      final int page=getHeight() / getFont().getSize();
      final int[] inds=list.getSelectedIndices();
      final int op1=inds.length == 0 ? -1 : inds[0];
      final int op2=inds.length == 0 ? -1 : inds[inds.length - 1];
      int np1=op1, np2=op2;
      if (NEXTLINE.is(e)) {
        np2=Math.min(op2 + 1,values.length - 1);
      }
 else       if (PREVLINE.is(e)) {
        np1=Math.max(op1 - 1,0);
      }
 else       if (NEXTPAGE.is(e)) {
        np2=Math.min(op2 + page,values.length - 1);
      }
 else       if (PREVPAGE.is(e)) {
        np1=Math.max(op1 - page,0);
      }
 else       if (TEXTSTART.is(e)) {
        np1=0;
      }
 else       if (TEXTEND.is(e)) {
        np2=values.length - 1;
      }
 else {
        return;
      }
      final IntList il=new IntList();
      for (int n=np1; n <= np2; n++)       il.add(n);
      final int nv=op2 != np2 ? np2 : np1;
      final String val=values[nv];
      list.setSelectedValue(val,true);
      if (e.isShiftDown() && !single) {
        list.setSelectedIndices(il.toArray());
        text.setText("");
      }
 else {
        list.setSelectedIndex(nv);
        text.setText(val);
        text.selectAll();
      }
      multi=il.size() > 1;
    }
    @Override public void keyTyped(    final KeyEvent e){
      final char ch=e.getKeyChar();
      if (num) {
        typed=ch >= '0' && ch <= '9';
        if (!typed)         e.consume();
      }
 else {
        typed=ch >= ' ' && ch != 127;
      }
      multi=false;
    }
    @Override public void keyReleased(    final KeyEvent e){
      String txt=text.getText().trim().toLowerCase(Locale.ENGLISH);
      if (!txt.equals(old) && !multi) {
        final boolean glob=txt.matches("^.*[*?,].*$");
        final String regex=glob ? IOFile.regex(txt,false) : null;
        final IntList il=new IntList();
        for (int v=0; v < values.length; ++v) {
          final String value=values[v].trim().toLowerCase(Locale.ENGLISH);
          if (glob) {
            if (value.matches(regex))             il.add(v);
          }
 else           if (value.startsWith(txt)) {
            if (typed) {
              final int c=text.getCaretPosition();
              text.setText(values[v]);
              text.select(c,values[v].length());
              txt=value;
            }
            il.add(v);
            break;
          }
        }
        if (il.size() > 0) {
          list.setSelectedValue(values[il.get(il.size() - 1)],true);
        }
        list.setSelectedIndices(il.toArray());
      }
      d.action(BaseXList.this);
      typed=false;
      old=txt;
    }
  }
);
  add(text);
  final MouseInputAdapter mouse=new MouseInputAdapter(){
    @Override public void mouseEntered(    final MouseEvent e){
      BaseXLayout.focus(text);
    }
    @Override public void mousePressed(    final MouseEvent e){
      final Object[] i=list.getSelectedValues();
      text.setText(i.length == 1 ? i[0].toString() : "");
      text.requestFocusInWindow();
      text.selectAll();
      d.action(BaseXList.this);
    }
    @Override public void mouseDragged(    final MouseEvent e){
      mousePressed(e);
    }
    @Override public void mouseClicked(    final MouseEvent e){
      if (e.getClickCount() == 2) {
        d.close();
      }
    }
  }
;
  list=new JList(choice);
  list.setFocusable(false);
  if (s)   list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  list.addMouseListener(mouse);
  list.addMouseMotionListener(mouse);
  text.setFont(list.getFont());
  BaseXLayout.setWidth(text,list.getWidth());
  BaseXLayout.addInteraction(list,d);
  scroll=new JScrollPane(list);
  add(scroll);
  setIndex(0);
}
