{
  final Constr c=new Constr(ctx,expr[1]);
  if (c.errAtt)   error(UPNOATTRPER);
  if (c.duplAtt != null)   error(UPATTDUPL,c.duplAtt);
  final Iter t=expr[0].iter(ctx);
  final Item i=t.next();
  if (i == null)   error(UPSEQEMP,Main.name(this));
  final Type type=i.type;
  if (!(i instanceof Nod) || type == Type.DOC || t.next() != null)   error(UPTRGMULT);
  final Nod targ=(Nod)i;
  final NodIter aList=c.ats;
  NodIter list=c.children;
  if (value) {
    final byte[] txt=list.size() < 1 ? EMPTY : list.get(0).atom();
    if (type == Type.COM)     CComm.check(this,txt);
    if (type == Type.PI)     CPI.check(this,txt);
    ctx.updates.add(type == Type.ELM ? new ReplaceElemContent(this,targ,txt) : new ReplaceValue(this,targ,new QNm(txt)),ctx);
  }
 else {
    final Nod par=targ.parent();
    if (par == null)     error(UPNOPAR,i);
    if (type == Type.ATT) {
      if (list.size() > 0)       error(UPWRATTR);
      list=checkNS(aList,par,ctx);
    }
 else {
      if (aList.size() > 0)       error(UPWRELM);
    }
    ctx.updates.add(new ReplacePrimitive(this,targ,list),ctx);
  }
  return Seq.EMPTY;
}
