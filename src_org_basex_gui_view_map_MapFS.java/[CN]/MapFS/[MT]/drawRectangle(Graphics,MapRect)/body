{
  final Context context=view.gui.context;
  final Data data=context.data;
  final int fsz=prop.num(GUIProp.FONTSIZE);
  final int pre=rect.pre;
  final int kind=data.kind(pre);
  final boolean tag=kind == Data.ELEM || kind == Data.DOC;
  final boolean file=fs.isFile(pre);
  final Nodes current=context.current;
  final byte[] name=kind == Data.DOC ? ViewData.content(data,pre,true) : current.size() == 1 && pre != 0 && !file && pre == current.nodes[0] ? ViewData.path(data,pre) : ViewData.tag(prop,data,pre);
  final boolean isImage=GUIFS.mime(name) == GUIFS.Type.IMAGE;
  if (isImage) {
    final Image image=images.get(pre);
    if (image != null) {
      final int ww=rect.w - (PICOFFSET << 1);
      final int hh=rect.h - (PICOFFSET << 1);
      float iw=image.getWidth(view);
      float ih=image.getHeight(view);
      final float min=Math.min(ww / iw,hh / ih);
      if (min < 1) {
        iw*=min;
        ih*=min;
      }
      g.drawImage(image,rect.x + PICOFFSET + (ww - (int)iw >> 1),rect.y + PICOFFSET + (hh - (int)ih >> 1),(int)iw,(int)ih,view);
      return false;
    }
  }
  final boolean full=!isImage && rect.w >= prop.num(GUIProp.FONTSIZE) * 12 && rect.h >= prop.num(GUIProp.FONTSIZE) * 8 || rect.w == view.getWidth() && rect.h == view.getHeight();
  final int fullsize=full && file && prop.is(GUIProp.MAPFS) ? 1 : 0;
  final int off=(16 << fullsize) + fullsize * 8;
  final byte[] text=tag ? name : data.text(pre,true);
  g.setFont(tag ? fullsize == 1 ? lfont : font : mfont);
  final Image icon=file ? GUIFS.images(name,fullsize) : null;
  final int fh=g.getFontMetrics().getHeight();
  if (fullsize == 0) {
    if (icon != null) {
      g.drawImage(icon,rect.x,rect.y + 2,view);
      rect.x+=off;
      rect.w-=off;
    }
    g.setColor(Color.black);
    BaseXLayout.chopString(g,text,rect.x + 2,rect.y,rect.w - 2,fsz);
    rect.y+=fsz;
    rect.h-=fsz;
    if (icon != null) {
      rect.x-=off;
      rect.w+=off;
    }
    rect.x+=3;
    rect.w-=3;
  }
 else {
    if (tag) {
      if (GUIFS.mime(name) == GUIFS.Type.IMAGE)       return false;
      g.setColor(COLORS[rect.level + 2]);
      g.fillRect(rect.x + 2,rect.y + 2,rect.w - 5,fh + 12);
      g.drawImage(icon,rect.x + 6,rect.y + 6,view);
      rect.y+=18;
      rect.h-=18;
      g.setColor(Color.black);
      final int w=BaseXLayout.chopString(g,text,rect.x + off + 3,rect.y,rect.w - off - 3,fsz);
      final long size=toLong(fs.size(pre));
      String type="";
      String format="";
      final int nodeSize=data.size(pre,Data.ELEM) + pre;
      final byte[] typeElem=MetaElem.TYPE.tok();
      final byte[] formatElem=MetaElem.FORMAT.tok();
      for (int node=pre; node < nodeSize; ++node) {
        final int k=data.kind(node);
        if (k != Data.ELEM)         continue;
        final byte[] nodeName=data.name(node,k);
        if (eq(nodeName,typeElem))         type=string(ViewData.content(data,node + 1,false));
 else         if (eq(nodeName,formatElem))         format=string(ViewData.content(data,node + 1,false));
        if (!type.isEmpty() && !format.isEmpty())         break;
      }
      if (type.isEmpty())       type=FileType.UNKNOWN_TYPE.toString();
      if (format.isEmpty())       format=MimeType.UNKNOWN.toString();
      final String info=type + " (" + format+ ")"+ ", "+ Performance.format(size,true);
      rect.w-=10;
      final int sw=BaseXLayout.width(g,info);
      if (w + sw + 48 < rect.w) {
        g.setColor(COLORS[rect.level + 10]);
        BaseXLayout.chopString(g,token(info),rect.x + rect.w - sw,rect.y,rect.w,fsz);
      }
      rect.x+=10;
      rect.y+=30;
      rect.w-=10;
      rect.h-=38;
    }
 else {
      rect.x+=12;
      rect.y+=12;
      rect.w-=24;
      rect.h-=24;
      g.setColor(Color.black);
      MapRenderer.drawText(g,rect,data.text(pre,true),prop.num(GUIProp.FONTSIZE));
    }
  }
  if (!file || rect.w < fsz << 1 || rect.h < fsz << 1)   return false;
  rect.y+=fsz >> 1;
  rect.h-=fsz >> 1;
  rect.pos=null;
  byte[] fileBuf=EMPTY;
  if (file) {
    if (!(GUIFS.mime(name) == GUIFS.Type.IMAGE)) {
      fileBuf=content(data,pre,rect);
    }
    if (fileBuf.length == 0)     fileBuf=MAPBINARY;
  }
  g.setColor(Color.black);
  g.setFont(mfont);
  try {
    MapRenderer.drawText(g,rect,fileBuf,fsz);
  }
 catch (  final Exception ex) {
  }
  return false;
}
