{
  if (op != OpG.EQ || coll != null)   return false;
  final Step step=ic.indexStep(exprs[0]);
  if (step == null)   return false;
  final Data data=ic.ictx.data;
  final boolean text=step.test.type == NodeType.TXT && data.meta.textindex;
  final boolean attr=step.test.type == NodeType.ATT && data.meta.attrindex;
  if (!text && !attr)   return false;
  final IndexType ind=text ? IndexType.TEXT : IndexType.ATTRIBUTE;
  final Expr arg=exprs[1];
  if (!arg.isValue()) {
    final SeqType t=arg.type();
    if (!t.type.isStringOrUntyped() || arg.has(Flag.CTX) || arg.has(Flag.NDT)|| arg.has(Flag.UPD))     return false;
    ic.addCosts(data.meta.size / 10);
    va=Array.add(va,new ValueAccess(info,arg,ind,ic.ictx));
    return true;
  }
  ic.costs(0);
  final Iter ir=arg.iter(ic.ctx);
  for (Item it; (it=ir.next()) != null; ) {
    if (!it.type.isStringOrUntyped())     return false;
    if (it.string(info).length == 0)     return false;
    final int is=data.costs(new StringToken(ind,it.string(info)));
    if (is != 0) {
      va=Array.add(va,new ValueAccess(info,it,ind,ic.ictx));
      ic.addCosts(is);
    }
  }
  return true;
}
