{
  if (path != null) {
    for (int s=0; s < path.size; s++) {
      final Matcher m=TEMPLATE.matcher(path.segment[s]);
      if (!m.find())       continue;
      final QNm qnm=new QNm(token(m.group(1)),function.sc);
      if (function.sc.elemNS != null && eq(qnm.uri(),function.sc.elemNS))       qnm.uri(EMPTY);
      bind(qnm,arg,new Atm(http.segment(s)));
    }
  }
  if (requestBody != null) {
    try {
      bind(requestBody,arg,http.params.content());
    }
 catch (    final IOException ex) {
      throw error(INPUT_CONV,ex);
    }
  }
  for (  final RestXqParam rxp : queryParams)   bind(rxp,arg,http.params.query().get(rxp.key));
  for (  final RestXqParam rxp : formParams)   bind(rxp,arg,http.params.form().get(rxp.key));
  for (  final RestXqParam rxp : headerParams) {
    final TokenList tl=new TokenList();
    final Enumeration<?> en=http.req.getHeaders(rxp.key);
    while (en.hasMoreElements()) {
      for (      final String s : en.nextElement().toString().split(", *"))       tl.add(s);
    }
    bind(rxp,arg,StrSeq.get(tl));
  }
  final Cookie[] ck=http.req.getCookies();
  for (  final RestXqParam rxp : cookieParams) {
    Value val=Empty.SEQ;
    if (ck != null) {
      for (      final Cookie c : ck) {
        if (rxp.key.equals(c.getName()))         val=Str.get(c.getValue());
      }
    }
    bind(rxp,arg,val);
  }
  final Map<String,Value> errs=new HashMap<String,Value>();
  if (err != null) {
    final Value[] values=Catch.values(err);
    for (int v=0; v < Catch.NAMES.length; v++) {
      errs.put(string(Catch.NAMES[v].local()),values[v]);
    }
  }
  for (  final RestXqParam rxp : errorParams)   bind(rxp,arg,errs.get(rxp.key));
}
