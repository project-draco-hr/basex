{
  final boolean[] declared=new boolean[function.args.length];
  boolean found=false;
  final MainOptions options=ctx.options;
  for (  final Ann ann : function.anns) {
    found|=eq(ann.sig.uri,QueryText.REST_URI);
    if (ann.sig == _REST_PATH) {
      try {
        path=new RestXqPath(toString(ann.args[0]),ann.info);
      }
 catch (      final IllegalArgumentException ex) {
        throw error(ann.info,ex.getMessage());
      }
      for (      final QNm v : path.vars())       checkVariable(v,AtomType.AAT,declared);
    }
 else     if (ann.sig == _REST_ERROR) {
      error(ann);
    }
 else     if (ann.sig == _REST_CONSUMES) {
      strings(ann,consumes);
    }
 else     if (ann.sig == _REST_PRODUCES) {
      strings(ann,produces);
    }
 else     if (ann.sig == _REST_QUERY_PARAM) {
      queryParams.add(param(ann,declared));
    }
 else     if (ann.sig == _REST_FORM_PARAM) {
      formParams.add(param(ann,declared));
    }
 else     if (ann.sig == _REST_HEADER_PARAM) {
      headerParams.add(param(ann,declared));
    }
 else     if (ann.sig == _REST_COOKIE_PARAM) {
      cookieParams.add(param(ann,declared));
    }
 else     if (ann.sig == _REST_ERROR_PARAM) {
      errorParams.add(param(ann,declared));
    }
 else     if (ann.sig == _REST_METHOD) {
      final String mth=toString(ann.args[0]).toUpperCase(Locale.ENGLISH);
      final Item body=ann.args.length > 1 ? ann.args[1] : null;
      addMethod(mth,body,declared,ann.info);
    }
 else     if (eq(ann.sig.uri,QueryText.REST_URI)) {
      final Item body=ann.args.length == 0 ? null : ann.args[0];
      addMethod(string(ann.sig.local()),body,declared,ann.info);
    }
 else     if (ann.sig == _INPUT_CSV) {
      final CsvParserOptions opts=new CsvParserOptions(options.get(MainOptions.CSVPARSER));
      options.set(MainOptions.CSVPARSER,parse(opts,ann));
    }
 else     if (ann.sig == _INPUT_JSON) {
      final JsonParserOptions opts=new JsonParserOptions(options.get(MainOptions.JSONPARSER));
      options.set(MainOptions.JSONPARSER,parse(opts,ann));
    }
 else     if (ann.sig == _INPUT_HTML) {
      final HtmlOptions opts=new HtmlOptions(options.get(MainOptions.HTMLPARSER));
      options.set(MainOptions.HTMLPARSER,parse(opts,ann));
    }
 else     if (ann.sig == _INPUT_TEXT) {
      final TextOptions opts=new TextOptions(options.get(MainOptions.TEXTPARSER));
      options.set(MainOptions.TEXTPARSER,parse(opts,ann));
    }
 else     if (eq(ann.sig.uri,QueryText.OUTPUT_URI)) {
      try {
        output.assign(string(ann.sig.local()),toString(ann.args[0]));
      }
 catch (      final BaseXException ex) {
        throw error(ann.info,UNKNOWN_SER,ann.sig.local());
      }
    }
  }
  if (found) {
    if (path == null && error == null)     throw error(function.info,ANN_MISSING,'%',PATH,'%',ERROR);
    final int dl=declared.length;
    for (int d=0; d < dl; d++) {
      if (declared[d])       continue;
      throw error(function.info,VAR_UNDEFINED,function.args[d].name.string());
    }
  }
  return found;
}
