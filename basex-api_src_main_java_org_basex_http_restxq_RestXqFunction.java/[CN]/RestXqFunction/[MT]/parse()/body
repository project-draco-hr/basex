{
  final boolean[] declared=new boolean[function.args.length];
  boolean found=false;
  final int as=function.ann.size();
  for (int a=0; a < as; a++) {
    final QNm name=function.ann.names[a];
    final Value value=function.ann.values[a];
    final InputInfo info=function.ann.infos[a];
    final byte[] local=name.local();
    final byte[] uri=name.uri();
    final boolean rexq=eq(uri,QueryText.REST_URI);
    if (rexq) {
      if (eq(PATH,local)) {
        if (path != null)         throw error(info,ANN_TWICE,"%",name.string());
        try {
          path=new RestXqPath(toString(value,name),info);
        }
 catch (        final IllegalArgumentException ex) {
          throw error(info,ex.getMessage());
        }
        for (        final QNm v : path.vars()) {
          checkVariable(v,AtomType.AAT,declared);
        }
      }
 else       if (eq(ERROR,local)) {
        error(value,name);
      }
 else       if (eq(CONSUMES,local)) {
        strings(value,name,consumes);
      }
 else       if (eq(PRODUCES,local)) {
        strings(value,name,produces);
      }
 else       if (eq(QUERY_PARAM,local)) {
        queryParams.add(param(value,name,declared));
      }
 else       if (eq(FORM_PARAM,local)) {
        formParams.add(param(value,name,declared));
      }
 else       if (eq(HEADER_PARAM,local)) {
        headerParams.add(param(value,name,declared));
      }
 else       if (eq(COOKIE_PARAM,local)) {
        cookieParams.add(param(value,name,declared));
      }
 else       if (eq(ERROR_PARAM,local)) {
        errorParams.add(param(value,name,declared));
      }
 else       if (eq(METHOD,local)) {
        if (value.size() < 1)         throw error(function.info,ANN_ATLEAST,"%",name.string(),1);
        final String mth=toString(value.itemAt(0),name).toUpperCase(Locale.ENGLISH);
        final Value body=value.size() > 1 ? value.itemAt(1) : null;
        addMethod(mth,body,name,declared,info);
      }
 else {
        final String mth=string(local);
        if (get(mth) == null)         throw error(info,ANN_UNKNOWN,"%",name.string());
        addMethod(mth,value,name,declared,info);
      }
    }
 else     if (eq(uri,QueryText.OUTPUT_URI)) {
      try {
        output.assign(string(local),toString(value,name));
      }
 catch (      final BaseXException ex) {
        throw error(info,UNKNOWN_SER,local);
      }
    }
    found|=rexq;
  }
  if (found) {
    if (path == null && error == null)     throw error(function.info,ANN_MISSING,'%',PATH,'%',ERROR);
    final int dl=declared.length;
    for (int d=0; d < dl; d++) {
      if (declared[d])       continue;
      throw error(function.info,VAR_UNDEFINED,function.args[d].name.string());
    }
  }
  return found;
}
