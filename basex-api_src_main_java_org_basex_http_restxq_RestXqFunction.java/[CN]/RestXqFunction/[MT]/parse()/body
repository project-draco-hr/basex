{
  final EnumSet<HTTPMethod> mth=EnumSet.noneOf(HTTPMethod.class);
  final boolean[] declared=new boolean[function.args.length];
  boolean found=false;
  final int as=function.ann.size();
  for (int a=0; a < as; a++) {
    final QNm name=function.ann.names[a];
    final Value value=function.ann.values[a];
    final InputInfo info=function.ann.infos[a];
    final byte[] local=name.local();
    final byte[] uri=name.uri();
    final boolean rexq=eq(uri,QueryText.RESTURI);
    if (rexq) {
      if (eq(PATH,local)) {
        if (path != null)         throw error(info,ANN_TWICE,"%",name.string());
        path=new RestXqPath(toString(value,name));
        for (        final String s : path) {
          if (s.trim().startsWith("{"))           checkVariable(s,AtomType.AAT,declared);
        }
      }
 else       if (eq(ERROR,local)) {
        if (error != null)         throw error(info,ANN_TWICE,"%",name.string());
        error=error(value,name);
      }
 else       if (eq(CONSUMES,local)) {
        strings(value,name,consumes);
      }
 else       if (eq(PRODUCES,local)) {
        strings(value,name,produces);
      }
 else       if (eq(QUERY_PARAM,local)) {
        queryParams.add(param(value,name,declared));
      }
 else       if (eq(FORM_PARAM,local)) {
        formParams.add(param(value,name,declared));
      }
 else       if (eq(HEADER_PARAM,local)) {
        headerParams.add(param(value,name,declared));
      }
 else       if (eq(COOKIE_PARAM,local)) {
        cookieParams.add(param(value,name,declared));
      }
 else       if (eq(ERROR_PARAM,local)) {
        errorParams.add(param(value,name,declared));
      }
 else {
        final HTTPMethod m=get(string(local));
        if (m == null)         throw error(info,ANN_UNKNOWN,"%",name.string());
        if (!value.isEmpty()) {
          if (requestBody != null)           throw error(info,ANN_TWICE,"%",name.string());
          if (m != POST && m != PUT)           throw error(info,METHOD_VALUE,m);
          requestBody=checkVariable(toString(value,name),declared);
        }
        if (mth.contains(m))         throw error(info,ANN_TWICE,"%",name.string());
        mth.add(m);
      }
    }
 else     if (eq(uri,QueryText.OUTPUTURI)) {
      try {
        output.assign(string(local),toString(value,name));
      }
 catch (      final BaseXException ex) {
        throw error(info,UNKNOWN_SER,local);
      }
    }
    found|=rexq;
  }
  if (!mth.isEmpty())   methods=mth;
  if (found) {
    if (path == null && error == null)     throw error(function.info,ANN_MISSING,'%',PATH,'%',ERROR);
    for (int i=0; i < declared.length; i++) {
      if (declared[i])       continue;
      throw error(function.info,VAR_UNDEFINED,function.args[i].name.string());
    }
  }
  return found;
}
