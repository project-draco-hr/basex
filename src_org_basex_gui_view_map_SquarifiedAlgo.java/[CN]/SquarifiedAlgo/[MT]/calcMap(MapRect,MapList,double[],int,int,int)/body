{
  if (level <= 4)   l.sort();
  ArrayList<MapRect> rects=new ArrayList<MapRect>();
  int ni=ns;
  int start=ns;
  double xx=r.x;
  double yy=r.y;
  double ww=r.w;
  double hh=r.h;
  ArrayList<MapRect> row=new ArrayList<MapRect>();
  double height=0;
  double width=0;
  double weight=0;
  double sumweight=1;
  while (ni < ne) {
    if (ww < hh) {
      weight+=l.weights[ni];
      height=weight / sumweight * hh;
      ArrayList<MapRect> tmp=new ArrayList<MapRect>();
      double x=xx;
      for (int i=start; i <= ni; i++) {
        double w=i == ni ? xx + ww - x : l.weights[i] / weight * ww;
        tmp.add(new MapRect((int)x,(int)yy,(int)w,(int)height,l.list[i],level));
        x+=(int)w;
      }
      if (lineRatio(tmp) > lineRatio(row)) {
        rects.addAll(row);
        hh-=row.get(0).h;
        yy+=row.get(0).h;
        tmp.clear();
        row.clear();
        start=ni;
        sumweight-=weight - l.weights[ni];
        weight=0;
        if (ne == ni + 1) {
          row.add(new MapRect((int)xx,(int)yy,(int)ww,(int)hh,l.list[ni],level));
          break;
        }
      }
 else {
        row=tmp;
        ni++;
      }
    }
 else {
      weight+=l.weights[ni];
      width=weight / sumweight * ww;
      ArrayList<MapRect> tmp=new ArrayList<MapRect>();
      double y=yy;
      for (int i=start; i <= ni; i++) {
        double h=i == ni ? yy + hh - y : l.weights[i] / weight * hh;
        tmp.add(new MapRect((int)xx,(int)y,(int)width,(int)h,l.list[i],level));
        y+=(int)h;
      }
      if (lineRatio(tmp) > lineRatio(row)) {
        rects.addAll(row);
        ww-=row.get(0).w;
        xx+=row.get(0).w;
        tmp.clear();
        row.clear();
        start=ni;
        sumweight-=weight - l.weights[ni];
        weight=0;
        if (ne == ni + 1) {
          row.add(new MapRect((int)xx,(int)yy,(int)ww,(int)hh,l.list[ni],level));
          break;
        }
      }
 else {
        row=tmp;
        ni++;
      }
    }
  }
  for (  MapRect rect : row)   rect.h=(int)hh;
  rects.addAll(row);
  return rects;
}
