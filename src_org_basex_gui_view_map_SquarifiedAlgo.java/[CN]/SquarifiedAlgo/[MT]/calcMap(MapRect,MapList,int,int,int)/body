{
  ml.sort();
  final MapRects rects=new MapRects();
  int ni=ns;
  int start=ns;
  double xx=r.x;
  double yy=r.y;
  double ww=r.w;
  double hh=r.h;
  MapRects row=new MapRects();
  int height=0;
  int width=0;
  double weight=0;
  double sumweight=1;
  while (ni <= ne) {
    if (ww < hh) {
      weight+=ml.weight[ni];
      height=(int)(weight / sumweight * hh);
      height=height > 0 ? height : 1;
      final MapRects tmp=new MapRects();
      double x=xx;
      for (int i=start; i <= ni; i++) {
        int w=i == ni ? (int)(xx + ww - x) : (int)(ml.weight[i] / weight * ww);
        w=w > 0 ? w : 1;
        if (x + w <= xx + ww)         tmp.add(new MapRect((int)x,(int)yy,w,height,ml.list[i],l));
        x+=w;
      }
      if (lineRatio(tmp) > lineRatio(row)) {
        rects.add(row);
        hh-=row.get(0).h;
        yy+=row.get(0).h;
        tmp.reset();
        row.reset();
        start=ni;
        sumweight-=weight - ml.weight[ni];
        weight=0;
        if (ne == ni + 1) {
          row.add(new MapRect((int)xx,(int)yy,(int)ww,(int)hh,ml.list[ni],l));
          break;
        }
      }
 else {
        row=tmp;
        ni++;
      }
    }
 else {
      weight+=ml.weight[ni];
      width=(int)(weight / sumweight * ww);
      width=width > 0 ? width : 1;
      final MapRects tmp=new MapRects();
      double y=yy;
      for (int i=start; i <= ni; i++) {
        int h=i == ni ? (int)(yy + hh - y) : (int)(ml.weight[i] / weight * hh);
        h=h > 0 ? h : 1;
        if (y + h <= yy + hh)         tmp.add(new MapRect((int)xx,(int)y,width,h,ml.list[i],l));
        y+=h;
      }
      if (lineRatio(tmp) > lineRatio(row)) {
        rects.add(row);
        ww-=row.get(0).w;
        xx+=row.get(0).w;
        tmp.reset();
        row.reset();
        start=ni;
        sumweight-=weight - ml.weight[ni];
        weight=0;
        if (ne == ni + 1) {
          row.add(new MapRect((int)xx,(int)yy,(int)ww,(int)hh,ml.list[ni],l));
          break;
        }
      }
 else {
        row=tmp;
        ni++;
      }
    }
  }
  for (  final MapRect rect : row)   rect.h=(int)hh;
  rects.add(row);
  return rects;
}
