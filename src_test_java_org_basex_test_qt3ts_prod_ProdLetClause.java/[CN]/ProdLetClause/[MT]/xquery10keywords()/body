{
  final XQuery query=new XQuery("let $ancestor-or-self := 1 \n" + "      let $ancestor := 1 \n" + "      let $and := 1 \n"+ "      let $as := 1 \n"+ "      let $ascending := 1 \n"+ "      let $at := 1 \n"+ "      let $attribute := 1 \n"+ "      let $base-uri := 1 \n"+ "      let $boundary-space := 1 \n"+ "      let $by := 1 \n"+ "      let $case := 1 \n"+ "      let $cast := 1 \n"+ "      let $castable := 1 \n"+ "      let $child := 1 \n"+ "      let $collation := 1 \n"+ "      let $comment := 1 \n"+ "      let $construction := 1 \n"+ "      let $copy-namespaces := 1 \n"+ "      let $declare := 1 \n"+ "      let $default := 1 \n"+ "      let $descendant-or-self := 1 \n"+ "      let $descendant := 1 \n"+ "      let $descending := 1 \n"+ "      let $div := 1 \n"+ "      let $document-node := 1 \n"+ "      let $document := 1 \n"+ "      let $element := 1 \n"+ "      let $else := 1 \n"+ "      let $empty-sequence := 1 \n"+ "      let $empty := 1 \n"+ "      let $encoding := 1 \n"+ "      let $eq := 1 let $every := 1 let $except := 1 let $external := 1 let $following-sibling := 1 \n"+ "      let $following := 1 let $for := 1 let $function := 1 let $ge := 1 let $greatest := 1 \n"+ "      let $gt := 1 let $idiv := 1 let $if := 1 let $import := 1 let $in := 1 let $inherit := 1 \n"+ "      let $instance := 1 let $intersect := 1 let $is := 1 let $item := 1 let $lax := 1 \n"+ "      let $le := 1 let $least := 1 let $let := 1 let $lt := 1 let $mod := 1 let $module := 1 \n"+ "      let $module := 1 let $namespace := 1 let $ne := 1 let $no-inherit := 1 \n"+ "      let $no-preserve := 1 let $node := 1 let $of := 1 let $option := 1 let $or := 1 \n"+ "      let $order := 1 let $ordered := 1 let $ordering := 1 let $parent := 1 let $preceding-sibling := 1 \n"+ "      let $preceding := 1 let $preserve := 1 let $processing-instruction := 1 let $return := 1 \n"+ "      let $satisfies := 1 let $schema-attribute := 1 let $schema-element := 1 let $schema := 1 \n"+ "      let $self := 1 let $some := 1 let $stable := 1 let $strict := 1 let $strip := 1 \n"+ "      let $text := 1 let $then := 1 let $to := 1 let $treat := 1 let $typeswitch := 1 \n"+ "      let $union := 1 let $unordered := 1 let $validate := 1 let $variable := 1 let $version := 1 \n"+ "      let $where := 1 let $xquery := 1 return 2",ctx);
  final QT3Result res=result(query);
  result=res;
  test(assertEq("2"));
}
