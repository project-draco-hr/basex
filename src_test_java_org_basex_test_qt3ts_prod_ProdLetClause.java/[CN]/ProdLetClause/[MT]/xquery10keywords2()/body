{
  final XQuery query=new XQuery("\n" + "      let $x := (/) \n" + "      return $x /ancestor-or-self /ancestor /and /as /ascending /at /attribute \n"+ "      /base-uri /boundary-space /by \n"+ "      /case /cast /castable /child /collation /comment /construction /copy-namespaces \n"+ "      /declare /default /descendant-or-self /descendant /descending /div /document-node /document \n"+ "      /element /else /empty-sequence /empty /encoding /eq /every /except /external \n"+ "      /following-sibling /following /for /function \n"+ "      /ge /greatest /gt \n"+ "      /idiv /if /import /in /inherit /instance /intersect /is /item\n"+ "       /lax /le /least /let /lt \n"+ "       /mod /module /module \n"+ "       /namespace /ne /no-inherit /no-preserve /node \n"+ "       /of /option /or /order /ordered /ordering \n"+ "       /parent /preceding-sibling /preceding /preserve /processing-instruction \n"+ "       /return \n"+ "       /satisfies /schema-attribute /schema-element /schema /self /some /stable /strict /strip \n"+ "       /text /then /to /treat /typeswitch \n"+ "       /union /unordered \n"+ "       /validate /variable /version \n"+ "       /where\n"+ "       /xquery",ctx);
  query.context(node(file("docs/works-mod.xml")));
  final QT3Result res=result(query);
  result=res;
  test(assertEmpty());
}
