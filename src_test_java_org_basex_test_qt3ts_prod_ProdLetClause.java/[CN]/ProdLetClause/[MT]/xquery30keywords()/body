{
  final XQuery query=new XQuery("\n" + "        let $NaN := 1\n" + "        let $allowing := 1\n"+ "        let $ancestor-or-self := 1\n"+ "        let $ancestor := 1\n"+ "        let $and := 1\n"+ "        let $as := 1\n"+ "        let $ascending := 1\n"+ "        let $at := 1\n"+ "        let $attribute := 1\n"+ "        let $base-uri := 1\n"+ "        let $boundary-space := 1\n"+ "        let $by := 1\n"+ "        let $case := 1\n"+ "        let $cast := 1\n"+ "        let $castable := 1\n"+ "        let $catch := 1\n"+ "        let $child := 1\n"+ "        let $collation := 1\n"+ "        let $comment := 1\n"+ "        let $construction := 1\n"+ "        let $context := 1\n"+ "        let $copy-namespaces := 1\n"+ "        let $count := 1\n"+ "        let $decimal-format := 1\n"+ "        let $decimal-separator := 1\n"+ "        let $declare := 1\n"+ "        let $default := 1\n"+ "        let $descendant-or-self := 1\n"+ "        let $descendant := 1\n"+ "        let $descending := 1\n"+ "        let $digit := 1\n"+ "        let $div := 1\n"+ "        let $document-node := 1\n"+ "        let $document := 1\n"+ "        let $element := 1\n"+ "        let $else := 1\n"+ "        let $empty-sequence := 1\n"+ "        let $empty := 1\n"+ "        let $encoding := 1\n"+ "        let $end := 1\n"+ "        let $eq := 1\n"+ "        let $every := 1\n"+ "        let $except := 1\n"+ "        let $external := 1\n"+ "        let $following-sibling := 1\n"+ "        let $following := 1\n"+ "        let $for := 1\n"+ "        let $function := 1\n"+ "        let $ge := 1\n"+ "        let $greatest := 1\n"+ "        let $group := 1\n"+ "        let $grouping-separator := 1\n"+ "        let $gt := 1\n"+ "        let $idiv := 1\n"+ "        let $if := 1\n"+ "        let $import := 1\n"+ "        let $in := 1\n"+ "        let $infinity := 1\n"+ "        let $inherit := 1\n"+ "        let $instance := 1\n"+ "        let $intersect := 1\n"+ "        let $is := 1\n"+ "        let $item := 1\n"+ "        let $lax := 1\n"+ "        let $le := 1\n"+ "        let $least := 1\n"+ "        let $let := 1\n"+ "        let $lt := 1\n"+ "        let $minus-sign := 1\n"+ "        let $mod := 1\n"+ "        let $module := 1\n"+ "        let $namespace-node := 1\n"+ "        let $namespace := 1\n"+ "        let $ne := 1\n"+ "        let $next := 1\n"+ "        let $no-inherit := 1\n"+ "        let $no-preserve := 1\n"+ "        let $node := 1\n"+ "        let $of := 1\n"+ "        let $only := 1\n"+ "        let $option := 1\n"+ "        let $or := 1\n"+ "        let $order := 1\n"+ "        let $ordered := 1\n"+ "        let $ordering := 1\n"+ "        let $parent := 1\n"+ "        let $pattern-separator := 1\n"+ "        let $per-mille := 1\n"+ "        let $percent := 1\n"+ "        let $preceding-sibling := 1\n"+ "        let $preceding := 1\n"+ "        let $preserve := 1\n"+ "        let $previous := 1\n"+ "        let $processing-instruction := 1\n"+ "        let $return := 1\n"+ "        let $satisfies := 1\n"+ "        let $schema-attribute := 1\n"+ "        let $schema-element := 1\n"+ "        let $schema := 1\n"+ "        let $self := 1\n"+ "        let $sliding := 1\n"+ "        let $some := 1\n"+ "        let $stable := 1\n"+ "        let $start := 1\n"+ "        let $strict := 1\n"+ "        let $strip := 1\n"+ "        let $switch := 1\n"+ "        let $text := 1\n"+ "        let $then := 1\n"+ "        let $to := 1\n"+ "        let $treat := 1\n"+ "        let $try := 1\n"+ "        let $tumbling := 1\n"+ "        let $type := 1\n"+ "        let $typeswitch := 1\n"+ "        let $union := 1\n"+ "        let $unordered := 1\n"+ "        let $validate := 1\n"+ "        let $variable := 1\n"+ "        let $version := 1\n"+ "        let $when := 1\n"+ "        let $where := 1\n"+ "        let $window := 1\n"+ "        let $xquery := 1\n"+ "        let $zero-digit := 1\n"+ "        return 2\n"+ "      ",ctx);
  try {
    result=new QT3Result(query.value());
  }
 catch (  final Throwable trw) {
    result=new QT3Result(trw);
  }
 finally {
    query.close();
  }
  test(assertEq("2"));
}
