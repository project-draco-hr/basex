{
  final XQuery query=new XQuery("\n" + "      let $x := (/) return $x /allowing /ancestor-or-self /ancestor /and /as /ascending /at /attribute \n" + "      /base-uri /boundary-space /by \n"+ "      /case /cast /castable /catch /child /collation /comment /construction /context /copy-namespaces /count \n"+ "      /decimal-format /decimal-separator /declare /default /descendant-or-self /descendant /descending /deterministic \n"+ "      /digit /div /document-node /document \n"+ "      /element /else /empty-sequence /empty /encoding /end /eq /every /except /external \n"+ "      /following-sibling /following /for /function \n"+ "      /ge /greatest /group /grouping-separator /gt \n"+ "      /idiv /if /import /in /infinity /inherit /instance /intersect /is /item \n"+ "      /lax /le /least /let /lt /minus-sign /mod /module \n"+ "      /namespace-node /namespace /NaN /ne /next /no-inherit /no-preserve /node /nondeterministic \n"+ "      /of /only /option /or /order /ordered /ordering \n"+ "      /parent /pattern-separator /per-mille /percent /preceding-sibling /preceding /preserve \n"+ "      /previous /private /processing-instruction /public /return \n"+ "      /satisfies /schema-attribute /schema-element /schema /self /sliding /some /stable /start /strict /strip /switch \n"+ "      /text /then /to /treat /try /tumbling /typeswitch \n"+ "      /union /unordered /validate /variable /version \n"+ "      /when /where /window /xquery /zero-digit",ctx);
  query.context(node(file("docs/works-mod.xml")));
  final QT3Result res=result(query);
  result=res;
  test(assertEmpty());
}
