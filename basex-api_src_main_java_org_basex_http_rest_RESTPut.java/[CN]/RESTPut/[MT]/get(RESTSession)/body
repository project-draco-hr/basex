{
  final HTTPContext http=session.http;
  final String db=http.db();
  if (db.isEmpty())   throw HTTPCode.NO_PATH.get();
  RESTCmd.parseOptions(session);
  boolean xml=true;
  final InputStream is=http.req.getInputStream();
  final String ct=http.contentType();
  MainParser parser=null;
  if (isJSON(ct)) {
    parser=MainParser.JSON;
    if (APP_JSONML.equals(ct)) {
      final JsonParserOptions jopts=new JsonParserOptions();
      jopts.set(JsonOptions.FORMAT,JsonFormat.JSONML);
      session.context.options.set(MainOptions.JSONPARSER,jopts);
    }
  }
 else   if (TEXT_CSV.equals(ct)) {
    parser=MainParser.CSV;
  }
 else   if (TEXT_HTML.equals(ct)) {
    parser=MainParser.HTML;
  }
 else   if (ct != null && isText(ct)) {
    parser=MainParser.TEXT;
  }
 else   if (ct != null && !isXML(ct)) {
    xml=false;
  }
  if (parser != null)   session.context.options.set(MainOptions.PARSER,parser);
  final String path=http.dbpath();
  if (path.isEmpty()) {
    if (xml) {
      session.add(new CreateDB(db),is);
    }
 else {
      session.add(new CreateDB(db));
      session.add(new Store(db),is);
    }
  }
 else {
    session.add(new Open(db));
    if (xml) {
      session.add(new Replace(path),is);
    }
 else {
      session.add(new Delete(path));
      session.add(new Store(path),is);
    }
  }
  final RESTExec cmd=new RESTExec(session);
  cmd.code=HTTPCode.CREATED_X;
  return cmd;
}
