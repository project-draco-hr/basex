{
  final HTTPContext http=session.http;
  final String db=http.db();
  if (db.isEmpty())   throw HTTPCode.NO_PATH.get();
  RESTCmd.parseOptions(session);
  final MainOptions options=session.context.options;
  final InputStream is=http.req.getInputStream();
  final String ct=http.contentType();
  boolean xml=true;
  if (APP_JSON.equals(ct)) {
    final JsonParserOptions opts=new JsonParserOptions();
    opts.parse(MimeTypes.parameters(ct));
    options.set(MainOptions.JSONPARSER,opts);
    options.set(MainOptions.PARSER,MainParser.JSON);
  }
 else   if (TEXT_CSV.equals(ct)) {
    final CsvParserOptions opts=new CsvParserOptions();
    opts.parse(MimeTypes.parameters(ct));
    options.set(MainOptions.CSVPARSER,opts);
    options.set(MainOptions.PARSER,MainParser.CSV);
  }
 else   if (TEXT_HTML.equals(ct)) {
    final HtmlOptions opts=new HtmlOptions();
    opts.parse(MimeTypes.parameters(ct));
    options.set(MainOptions.HTMLPARSER,opts);
    options.set(MainOptions.PARSER,MainParser.HTML);
  }
 else   if (isText(ct)) {
    final TextOptions opts=new TextOptions();
    opts.parse(MimeTypes.parameters(ct));
    options.set(MainOptions.TEXTPARSER,opts);
    options.set(MainOptions.PARSER,MainParser.TEXT);
  }
 else   if (!ct.isEmpty() && !isXML(ct)) {
    xml=false;
  }
  final String path=http.dbpath();
  if (path.isEmpty()) {
    if (xml) {
      session.add(new CreateDB(db),is);
    }
 else {
      session.add(new CreateDB(db));
      session.add(new Store(db),is);
    }
  }
 else {
    session.add(new Open(db));
    if (xml) {
      session.add(new Replace(path),is);
    }
 else {
      session.add(new Delete(path));
      session.add(new Store(path),is);
    }
  }
  final RESTExec cmd=new RESTExec(session);
  cmd.code=HTTPCode.CREATED_X;
  return cmd;
}
