{
  parseOptions(http);
  final LocalSession session=http.session();
  if (http.depth() == 0)   HTTPErr.NO_PATH.thrw();
  boolean xml=true;
  final InputStream in=http.req.getInputStream();
  final String ct=http.contentType();
  if (MimeTypes.isJSON(ct)) {
    session.execute(new Set(MainOptions.PARSER,MainParser.JSON));
    if (APP_JSONML.equals(ct)) {
      JsonParserOptions jopts=new JsonParserOptions();
      jopts.set(JsonOptions.FORMAT,JsonFormat.JSONML);
      session.execute(new Set(MainOptions.JSONPARSER,jopts));
    }
  }
 else   if (TEXT_CSV.equals(ct)) {
    session.execute(new Set(MainOptions.PARSER,MainParser.CSV));
  }
 else   if (TEXT_HTML.equals(ct)) {
    session.execute(new Set(MainOptions.PARSER,MainParser.HTML));
  }
 else   if (ct != null && MimeTypes.isText(ct)) {
    session.execute(new Set(MainOptions.PARSER,MainParser.TEXT));
  }
 else   if (ct != null && !MimeTypes.isXML(ct)) {
    xml=false;
  }
  if (http.depth() == 1) {
    if (xml) {
      session.create(http.db(),in);
    }
 else {
      session.create(http.db(),new ArrayInput(""));
      session.store(http.db(),in);
    }
  }
 else {
    open(http);
    if (xml) {
      session.replace(http.dbpath(),in);
    }
 else {
      session.execute(new Delete(http.dbpath()));
      session.store(http.dbpath(),in);
    }
  }
  throw HTTPErr.CREATED_X.thrw(session.info());
}
