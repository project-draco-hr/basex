{
  if (sub.length == 0)   return 0;
  tk.st=st;
  tk.dc=dc;
  tk.cs=cs;
  tk.init();
  sb.init(sub);
  sb.st=tk.st;
  sb.dc=tk.dc;
  sb.cs=tk.cs;
  sb.uc=uc;
  sb.lc=lc;
  sb.wc=wc;
  sb.fz=fz;
  IntList il=null;
  while (tk.more()) {
    final int tp=tk.p;
    byte[] t=tk.get();
    boolean f=true;
    boolean c=false;
    sb.init();
    final int tpos=tk.pos;
    while (f && sb.more()) {
      final byte[] s=sb.get();
      if (c) {
        tk.more();
        t=tk.get();
      }
 else {
        c=true;
      }
      if (sw != null) {
        final boolean s1=sw.id(s) != 0;
        final boolean s2=sw.id(t) != 0;
        f=!(s1 ^ s2);
        if (s1 || s2)         continue;
      }
      f=sb.fz ? ls.similar(t,s) : sb.wc ? string(t).matches(string(s)) : eq(t,s);
    }
    if (f) {
      if (il == null)       il=new IntList();
      for (int i=0; i < sb.pos; i++)       il.add(tpos + i);
    }
    tk.p=tp;
  }
  if (il != null)   pos.add(sub,il);
  return il == null ? 0 : il.size;
}
