{
  final Data data=GUI.context.data();
  final int size=parentList.size;
  final HashMap<Integer,Integer> temp=new HashMap<Integer,Integer>();
  int x=0;
  final int y=1 * level * fontHeight* 2;
  final double width=this.getSize().width - 1;
  final int ratio=(int)Math.rint(width / size);
  final int minSpace=39;
  final boolean space=ratio > minSpace ? true : false;
  for (int i=0; i < size; i++) {
    final int pre=parentList.list[i];
    if (pre == -1) {
      x+=ratio;
      continue;
    }
    final int nodeSize=data.size(pre,Data.ELEM);
    final double nodePercent=nodeSize / (double)sumNodeSizeInLine;
    g.setColor(Color.black);
    g.drawRect(x,y,ratio,fontHeight);
    int c=(int)Math.rint(255 * nodePercent * 40);
    c=c > 255 ? 255 : c;
    g.setColor(new Color(c,0,255 - c));
    g.fillRect(x + 1,y + 1,ratio - 1,fontHeight - 1);
    final int boxMiddle=x + Math.round(ratio / 2f);
    g.setColor(Color.black);
    if (space) {
      final String s=Token.string(data.tag(pre));
      final int textWidth=BaseXLayout.width(g,s);
      g.drawString(s,boxMiddle - textWidth / 2,y + fontHeight - 2);
    }
    if (parentPos != null) {
      final int line=Math.round(fontHeight / 4f);
      final int parentMiddle=parentPos.get(data.parent(pre,Data.ELEM));
      g.drawLine(boxMiddle,y,boxMiddle,y - line);
      g.drawLine(boxMiddle,y - line,parentMiddle,y - line);
      g.drawLine(parentMiddle,y - line,parentMiddle,y - fontHeight);
    }
    if (nodeSize > 0)     temp.put(pre,boxMiddle);
    x+=ratio;
  }
  parentPos=temp;
}
