{
  ckDBs(new XQuery(COLLECTION.args(NAME)),false,NAME_LIST);
  ckDBs(new XQuery(COLLECTION.args()),false,COLL_LIST);
  ckDBs(new XQuery("<a/>/" + COUNT.args(COLLECTION.args())),false,COLL_LIST);
  ckDBs(new XQuery(DOC.args(NAME)),false,NAME_LIST);
  ckDBs(new XQuery(DOC_AVAILABLE.args(NAME + "/foo.xml")),false,NAME_LIST,null);
  ckDBs(new XQuery(PARSE_XML.args("<foo/>")),true,NONE);
  ckDBs(new XQuery(PARSE_XML_FRAGMENT.args("<foo/>")),true,NONE);
  ckDBs(new XQuery(PUT.args("<foo/>",NAME)),true,NONE);
  ckDBs(new XQuery(PUT.args(" .",NAME)),true,CTX_LIST);
  ckDBs(new XQuery(ROOT.args()),false,CTX_LIST);
  ckDBs(new XQuery(ROOT.args(" .")),false,CTX_LIST);
  ckDBs(new XQuery(ROOT.args(" ./test")),false,CTX_LIST);
  ckDBs(new XQuery(ROOT.args("<foo/>")),true,NONE);
  ckDBs(new XQuery(UNPARSED_TEXT.args(FILE)),false,NONE);
  ckDBs(new XQuery(UNPARSED_TEXT_AVAILABLE.args(FILE)),false,NONE);
  ckDBs(new XQuery(UNPARSED_TEXT_LINES.args(FILE)),false,NONE);
  ckDBs(new XQuery(URI_COLLECTION.args(NAME)),false,NAME_LIST);
  ckDBs(new XQuery(URI_COLLECTION.args()),false,COLL_LIST);
  for (  final Function fn : new Function[]{DATA,STRING,NUMBER,STRING_LENGTH,NORMALIZE_SPACE,DOCUMENT_URI,NILLED,NODE_NAME,LOCAL_NAME,Function.NAME,NAMESPACE_URI,ROOT,BASE_URI,GENERATE_ID,HAS_CHILDREN,PATH}) {
    ckDBs(new XQuery(fn.args()),false,CTX_LIST);
    ckDBs(new XQuery(DOC.args(NAME) + '/' + fn.args()),false,NAME_LIST,NAME_CTX);
  }
  for (  final Function fn : new Function[]{DATA,STRING,NUMBER,STRING_LENGTH,NORMALIZE_SPACE,DOCUMENT_URI,NILLED,NODE_NAME,LOCAL_NAME,Function.NAME,NAMESPACE_URI,ROOT,BASE_URI,GENERATE_ID,HAS_CHILDREN,PATH}) {
    ckDBs(new XQuery(fn.args(DOC.args(NAME))),false,NAME_LIST);
  }
  ckDBs(new XQuery("."),false,CTX_LIST);
  ckDBs(new XQuery(ERROR.args()),false,NONE);
  ckDBs(new XQuery(ERROR.args("xs:QName('foo')")),false,NONE);
  ckDBs(new XQuery(ERROR.args("xs:QName('foo')","bar")),false,NONE);
  ckDBs(new XQuery(ERROR.args("xs:QName('foo')","bar","<batz/>")),false,NONE);
  ckDBs(new XQuery(_RANDOM_INTEGER.args()),false,NONE);
  ckDBs(new XQuery("declare function local:a($a) {" + "if($a = 0) then $a else local:a($a idiv 2) };" + "local:a(5)"),false,NONE);
  ckDBs(new XQuery("declare function local:a($a) {" + "if($a = 0) then " + COLLECTION.args() + " else local:a($a idiv 2) };"+ "local:a(5)"),false,COLL_LIST);
  ckDBs(new XQuery("declare function local:a($a) {" + "if($a = 0) then " + DOC.args(NAME) + " else local:a($a idiv 2) };"+ "local:a(5)"),false,NAME_LIST);
  XQuery query=new XQuery("import module namespace qm='java:org.basex.query.func.QueryModuleTest';" + "qm:readLock()");
  query.execute(context);
  ckDBs(query,false,MODULE_LIST);
  query=new XQuery("import module namespace qm='java:org.basex.query.func.QueryModuleTest';" + "qm:writeLock()");
  query.execute(context);
  ckDBs(query,true,MODULE_LIST);
}
