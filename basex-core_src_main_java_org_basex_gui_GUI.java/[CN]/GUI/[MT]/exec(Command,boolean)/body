{
  final int thread=++threadID;
  while (true) {
    final Command c=command;
    if (c == null)     break;
    c.stop();
    Thread.yield();
    if (threadID != thread)     return true;
  }
  cursor(CURSORWAIT);
  input.setCursor(CURSORWAIT);
  stop.setEnabled(true);
  boolean ok=true;
  try {
    final Performance perf=new Performance();
    final Data data=context.data();
    if (gopts.get(GUIOptions.FILTERRT) && data != null && !context.root())     context.invalidate();
    final DBNodes current=context.current();
    command=cmd;
    final ArrayOutput ao=new ArrayOutput();
    ao.setLimit(gopts.get(GUIOptions.MAXTEXT));
    cmd.maxResults(gopts.get(GUIOptions.MAXRESULTS));
    updating=cmd.updating(context);
    if (edit)     editor.start();
    if (cmd.newData(context))     notify.init();
    cmd.listen(infoListener);
    String inf=null;
    Throwable cause=null;
    try {
      cmd.execute(context,ao);
      inf=cmd.info();
    }
 catch (    final BaseXException ex) {
      cause=ex.getCause();
      if (cause == null)       cause=ex;
      ok=false;
      inf=Util.message(ex);
    }
 finally {
      updating=false;
    }
    final String time=perf.getTime();
    info.setInfo(inf,cmd,time,ok,true);
    final boolean stopped=inf.endsWith(INTERRUPTED);
    if (edit)     editor.info(cause,stopped,true);
    final Value result=cmd.finish();
    DBNodes nodes=result instanceof DBNodes && !result.isEmpty() ? (DBNodes)result : null;
    if (!text.visible() && ao.size() != 0 && nodes == null) {
      GUIMenuCmd.C_SHOWRESULT.execute(this);
    }
    if (!ok && !stopped) {
      text.setText(ao);
      if (!info.visible() && (!edit || inf.startsWith(S_BUGINFO))) {
        GUIMenuCmd.C_SHOWINFO.execute(this);
      }
    }
 else {
      final boolean updated=cmd.updated(context);
      if (context.data() != data) {
        notify.init();
      }
 else       if (updated) {
        notify.update();
        if (nodes == null)         nodes=context.current();
      }
 else       if (result != null) {
        final boolean flt=gopts.get(GUIOptions.FILTERRT);
        final DBNodes curr=context.current();
        if (flt || curr != null && !curr.sameAs(current)) {
          if (nodes != null)           notify.context(nodes,flt,null);
        }
 else         if (context.marked != null) {
          DBNodes m=context.marked;
          if (nodes != null) {
            m=nodes;
          }
 else           if (m.size() != 0) {
            m=new DBNodes(data);
          }
          if (context.marked != m)           notify.mark(m,null);
        }
      }
      if (thread == threadID && !stopped) {
        status.setText(Util.info(TIME_NEEDED_X,time));
        if (result != null)         setResults(result.size());
        if (nodes == null)         text.setText(ao);
        if (!updated)         text.cache(ao,cmd,result);
      }
    }
  }
 catch (  final Exception ex) {
    BaseXDialog.error(this,Util.info(EXEC_ERROR,cmd,Util.bug(ex)));
    updating=false;
  }
  stop();
  return ok;
}
