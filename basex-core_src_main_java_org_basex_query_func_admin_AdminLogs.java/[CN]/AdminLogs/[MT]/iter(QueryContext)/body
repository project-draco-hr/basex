{
  checkAdmin(qc);
  final ValueBuilder vb=new ValueBuilder();
  if (exprs.length == 0) {
    for (    final IOFile f : qc.context.log.files()) {
      final String date=f.name().replace(IO.LOGSUFFIX,"");
      vb.add(new FElem(FILE).add(date).add(SIZE,Token.token(f.length())));
    }
  }
 else {
    final String request=LogType.REQUEST.name();
    final String name=Token.string(toToken(exprs[0],qc)) + IO.LOGSUFFIX;
    final boolean merge=exprs.length > 1 && toBoolean(exprs[1],qc);
    final IOFile file=new IOFile(qc.context.log.dir(),name);
    if (!file.exists())     throw WHICHRES_X.get(info,file);
    final ArrayList<LogEntry> logs=logs(file);
    for (int s=0; s < logs.size(); s++) {
      final LogEntry l1=logs.get(s);
      final FElem elem=new FElem(ENTRY);
      if (l1.address != null) {
        if (merge && l1.ms.equals(BigDecimal.ZERO) && !Strings.eq(l1.address,Log.SERVER,Log.STANDALONE)) {
          for (int l=s + 1; l < logs.size(); l++) {
            final LogEntry l2=logs.get(l);
            if (l2 != null && l1.address.equals(l2.address)) {
              if (l2.type.equals(request))               continue;
              if (l1.type.equals(request))               l1.type="";
              l1.type=merge(l1.type,l2.type);
              l1.message=merge(l1.message,l2.message);
              l1.ms=l1.ms.add(l2.ms);
              logs.remove(l--);
              if (!l2.message.equals(request))               break;
            }
          }
        }
        elem.add(TIME,l1.time).add(ADDRESS,l1.address).add(USER,l1.user);
        if (l1.type != null)         elem.add(TYPE,l1.type);
        if (!l1.ms.equals(BigDecimal.ZERO))         elem.add(MS,l1.ms.toString());
        if (l1.message != null)         elem.add(l1.message);
      }
 else {
        elem.add(l1.message);
      }
      vb.add(elem);
    }
  }
  return vb;
}
