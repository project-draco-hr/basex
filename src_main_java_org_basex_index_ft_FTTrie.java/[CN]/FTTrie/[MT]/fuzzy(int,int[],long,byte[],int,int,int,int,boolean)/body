{
  byte[] vsn=token;
  int[] cne=crne;
  long cdid=crdid;
  if (cne == null) {
    cne=entry(id);
    cdid=currID;
  }
  if (id != 0) {
    int i=0;
    while (i < vsn.length && i < cne[0] && cne[i + 1] == vsn[i])     ++i;
    if (cne[0] == i) {
      if (vsn.length == i) {
        if (c < d + p + r)         return FTIndexIterator.FTEMPTY;
        FTIndexIterator ld=FTIndexIterator.FTEMPTY;
        ld=iter(cdid,cne[cne.length - 1],inB,f);
        for (int t=cne[0] + 1; t < cne.length - 1; t+=2) {
          ld=FTIndexIterator.union(fuzzy(cne[t],null,-1,new byte[]{(byte)cne[t + 1]},d,p + 1,r,c,f),ld);
        }
        return ld;
      }
      FTIndexIterator ld=FTIndexIterator.FTEMPTY;
      byte[] b;
      if (c > d + p + r) {
        b=new byte[vsn.length - 1];
        System.arraycopy(vsn,0,b,0,i);
        ld=FTIndexIterator.union(fuzzy(id,cne,cdid,b,d + 1,p,r,c,f),ld);
      }
      final byte[] tmp=new byte[vsn.length - i];
      System.arraycopy(vsn,i,tmp,0,tmp.length);
      vsn=tmp;
      int[] ne=null;
      long tdid=-1;
      for (int k=cne[0] + 1; k < cne.length - 1; k+=2) {
        if (cne[k + 1] == vsn[0]) {
          ne=entry(cne[k]);
          tdid=currID;
          b=new byte[vsn.length];
          System.arraycopy(vsn,0,b,0,vsn.length);
          ld=FTIndexIterator.union(fuzzy(cne[k],ne,tdid,b,d,p,r,c,f),ld);
        }
        if (c > d + p + r) {
          if (ne == null) {
            ne=entry(cne[k]);
            tdid=currID;
          }
          b=new byte[vsn.length + 1];
          b[0]=(byte)cne[k + 1];
          System.arraycopy(vsn,0,b,1,vsn.length);
          ld=FTIndexIterator.union(fuzzy(cne[k],ne,tdid,b,d,p + 1,r,c,f),ld);
          if (vsn.length > 0) {
            b=new byte[vsn.length - 1];
            System.arraycopy(vsn,1,b,0,b.length);
            ld=FTIndexIterator.union(fuzzy(cne[k],ne,tdid,b,d + 1,p,r,c,f),ld);
            b=new byte[vsn.length];
            System.arraycopy(vsn,1,b,1,vsn.length - 1);
            b[0]=(byte)ne[1];
            ld=FTIndexIterator.union(fuzzy(cne[k],ne,tdid,b,d,p,r + 1,c,f),ld);
          }
        }
      }
      return ld;
    }
    FTIndexIterator ld=FTIndexIterator.FTEMPTY;
    if (c > d + p + r) {
      byte[] b=new byte[vsn.length + 1];
      System.arraycopy(vsn,0,b,0,i);
      b[i]=(byte)cne[i + 1];
      System.arraycopy(vsn,i,b,i + 1,vsn.length - i);
      ld=fuzzy(id,cne,cdid,b,d,p + 1,r,c,f);
      if (vsn.length > 0 && i < vsn.length) {
        b=new byte[vsn.length];
        System.arraycopy(vsn,0,b,0,vsn.length);
        b[i]=(byte)cne[i + 1];
        ld=FTIndexIterator.union(fuzzy(id,cne,cdid,b,d,p,r + 1,c,f),ld);
        if (vsn.length > 1) {
          b=new byte[vsn.length - 1];
          System.arraycopy(vsn,0,b,0,i);
          System.arraycopy(vsn,i + 1,b,i,vsn.length - i - 1);
          ld=FTIndexIterator.union(fuzzy(id,cne,cdid,b,d + 1,p,r,c,f),ld);
        }
      }
    }
    return ld;
  }
  int[] ne=null;
  long tdid=-1;
  FTIndexIterator ld=FTIndexIterator.FTEMPTY;
  byte[] b;
  for (int k=cne[0] + 1; k < cne.length - 1; k+=2) {
    if (cne[k + 1] == vsn[0]) {
      ne=entry(cne[k]);
      tdid=currID;
      b=new byte[vsn.length];
      System.arraycopy(vsn,0,b,0,vsn.length);
      ld=FTIndexIterator.union(fuzzy(cne[k],ne,tdid,b,d,p,r,c,f),ld);
    }
    if (c > d + p + r) {
      if (ne == null) {
        ne=entry(cne[k]);
        tdid=currID;
      }
      b=new byte[vsn.length + 1];
      b[0]=(byte)ne[1];
      System.arraycopy(vsn,0,b,1,vsn.length);
      ld=FTIndexIterator.union(fuzzy(cne[k],ne,tdid,b,d,p + 1,r,c,f),ld);
      if (vsn.length > 0) {
        b=new byte[vsn.length - 1];
        System.arraycopy(vsn,1,b,0,b.length);
        ld=FTIndexIterator.union(fuzzy(cne[k],ne,tdid,b,d + 1,p,r,c,f),ld);
        b=new byte[vsn.length];
        System.arraycopy(vsn,1,b,1,vsn.length - 1);
        b[0]=(byte)ne[1];
        ld=FTIndexIterator.union(fuzzy(cne[k],ne,tdid,b,d,p,r + 1,c,f),ld);
      }
    }
  }
  return ld;
}
