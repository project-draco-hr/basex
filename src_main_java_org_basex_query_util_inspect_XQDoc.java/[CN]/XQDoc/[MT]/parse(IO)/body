{
  final QueryParser qp=parseQuery(io);
  final FElem xqdoc=new FElem(PREFIX,PREFIX,URI).declareNS();
  final FElem control=elem("control",xqdoc);
  elem("date",control).add(ctx.initDateTime().dtm.string(info));
  elem("version",control).add("1.1");
  final String type=module instanceof LibraryModule ? "library" : "main";
  final FElem mod=elem("module",xqdoc).add("type",type);
  if (module instanceof LibraryModule) {
    final QNm name=((LibraryModule)module).name;
    elem("uri",mod).add(name.uri());
    elem("name",mod).add(io.name());
  }
 else {
    elem("uri",mod).add(io.name());
  }
  comment(module,mod);
  final FElem namespaces=elem("namespaces",xqdoc);
  for (  final byte[] pref : qp.namespaces)   nsCache.add(pref,qp.namespaces.get(pref));
  final FElem imports=elem("imports",xqdoc);
  for (  final byte[] imp : qp.modules) {
    elem("uri",elem("import",imports).add("type","library")).add(imp);
  }
  final FElem variables=elem("variables",xqdoc);
  for (  final StaticVar sv : qp.vars) {
    final FElem variable=elem("variable",variables);
    elem("name",variable).add(sv.name.string());
    if (sv.name.hasPrefix())     nsCache.add(sv.name.prefix(),sv.name.uri());
    comment(sv,variable);
    annotations(sv.ann,variable);
    type(sv.declType,variable);
  }
  final FElem functions=elem("functions",xqdoc);
  for (  final StaticFunc sf : qp.funcs) {
    final int al=sf.args.length;
    final FElem function=elem("function",functions).add("arity",token(al));
    comment(sf,function);
    elem("name",function).add(sf.name.string());
    if (sf.name.hasPrefix())     nsCache.add(sf.name.prefix(),sf.name.uri());
    annotations(sf.ann,function);
    elem("signature",function).add(sf.toString().replaceAll(" \\{.*| \\w+;.*",""));
    if (al != 0) {
      final FElem fparameters=elem("parameters",function);
      for (int a=0; a < al; a++) {
        final FElem fparameter=elem("parameter",fparameters);
        final Var v=sf.args[a];
        elem("name",fparameter).add(v.name.string());
        type(v.declType,fparameter);
      }
    }
    if (sf.declType != null)     type(sf.declType,elem("return",function));
  }
  for (  final byte[] pref : nsCache) {
    final FElem namespace=elem("namespace",namespaces);
    namespace.add("prefix",pref).add("uri",nsCache.get(pref));
  }
  return xqdoc;
}
