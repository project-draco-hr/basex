{
  Iter iter;
  long sz;
  if (root != null) {
    final Iter rt=qc.iter(root);
    final long s=rt.size();
    if (s >= 0) {
      iter=rt;
      sz=s;
    }
 else {
      final Value val=rt.value();
      iter=val.iter();
      sz=val.size();
    }
  }
 else {
    final Value rt=ctxValue(qc);
    iter=rt.iter();
    sz=rt.size();
  }
  final Value cv=qc.value;
  final long cs=qc.size;
  final long cp=qc.pos;
  try {
    final int sl=steps.length;
    for (int s=0; s < sl; s++) {
      final Expr step=steps[s];
      final ItemList cache=new ItemList();
      qc.size=sz;
      qc.pos=1;
      long nodes=0;
      for (Item it; (it=iter.next()) != null; ) {
        if (!(it instanceof ANode))         throw PATHNODE_X_X_X.get(info,step,it.type,it);
        qc.value=it;
        final Iter ir=qc.iter(step);
        for (Item i; (i=ir.next()) != null; ) {
          if (i instanceof ANode)           nodes++;
          cache.add(i);
        }
        qc.pos++;
      }
      final long vs=cache.size();
      if (nodes < vs) {
        if (nodes > 0)         throw EVALNODESVALS.get(info);
        if (s + 1 < sl) {
          final Item it=cache.get(0);
          throw PATHNODE_X_X_X.get(info,steps[s + 1],it.type,it);
        }
      }
      if (nodes == vs) {
        final NodeSeqBuilder nc=new NodeSeqBuilder().check();
        for (        final Item nd : cache)         nc.add((ANode)nd);
        iter=nc;
      }
 else {
        iter=cache.iter();
      }
    }
    return iter;
  }
  finally {
    qc.value=cv;
    qc.size=cs;
    qc.pos=cp;
  }
}
