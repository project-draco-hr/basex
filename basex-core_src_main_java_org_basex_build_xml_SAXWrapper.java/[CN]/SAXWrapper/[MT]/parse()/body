{
  final InputSource is=wrap(saxs.getInputSource());
  try {
    XMLReader reader=saxs.getXMLReader();
    if (reader == null) {
      final boolean dtd=options.get(MainOptions.DTD);
      final SAXParserFactory f=SAXParserFactory.newInstance();
      f.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd",dtd);
      f.setFeature("http://xml.org/sax/features/external-parameter-entities",dtd);
      f.setFeature("http://xml.org/sax/features/use-entity-resolver2",false);
      f.setNamespaceAware(true);
      f.setValidating(false);
      f.setXIncludeAware(options.get(MainOptions.XINCLUDE));
      reader=f.newSAXParser().getXMLReader();
    }
    saxh=new SAXHandler(builder,options.get(MainOptions.CHOP),options.get(MainOptions.STRIPNS));
    final String path=options.get(MainOptions.CATFILE);
    if (!path.isEmpty())     CatalogWrapper.set(reader,path);
    reader.setDTDHandler(saxh);
    reader.setContentHandler(saxh);
    reader.setProperty("http://xml.org/sax/properties/lexical-handler",saxh);
    reader.setErrorHandler(saxh);
    if (is != null)     reader.parse(is);
 else     reader.parse(saxs.getSystemId());
  }
 catch (  final SAXParseException ex) {
    final String msg=Util.info(SCANPOS_X_X,source,ex.getLineNumber(),ex.getColumnNumber()) + COLS + Util.message(ex);
    throw new IOException(msg,ex);
  }
catch (  final JobException ex) {
    throw ex;
  }
catch (  final Exception ex) {
    final String msg="\"" + source + '"'+ COLS+ Util.message(ex);
    throw new IOException(msg,ex);
  }
 finally {
    if (is != null) {
      try (final Reader r=is.getCharacterStream()){
      }
       try (final InputStream ist=is.getByteStream()){
      }
     }
  }
}
