{
  if (is == null)   return is;
  final InputStream in;
  if (is.getByteStream() != null) {
    in=is.getByteStream();
  }
 else   if (is.getSystemId() == null || is.getSystemId().isEmpty()) {
    return is;
  }
 else   if (src instanceof IOFile) {
    in=new FileInputStream(src.path());
  }
 else   if (src instanceof IOContent || src instanceof IOUrl) {
    in=new ByteArrayInputStream(src.read());
  }
 else {
    return is;
  }
  length=src.length();
  try {
    if (length <= 0)     length=in.available();
  }
 catch (  final IOException ex) {
    in.close();
    throw ex;
  }
  final InputSource tmp=new InputSource(new InputStream(){
    final InputStream buffer=in instanceof ByteArrayInputStream ? in : new BufferedInputStream(in);
    @Override public int read() throws IOException {
      final int i=buffer.read();
      if (i == '\n')       ++line;
      ++counter;
      return i;
    }
    @Override public void close() throws IOException {
      buffer.close();
    }
  }
);
  saxs.setInputSource(tmp);
  saxs.setSystemId(is.getSystemId());
  return tmp;
}
