{
switch (func) {
case ERROR:
    final int al=arg.length;
  String code=FOER;
Object num=0;
String msg=FUNERR1;
if (al != 0) {
final Item it=arg[0].atomic(this,true);
if (it == null) {
if (al == 1) Err.empty(this);
}
 else {
code=Token.string(((QNm)check(it,Type.QNM)).ln());
num=null;
}
if (al > 1) {
msg=Token.string(checkStr(arg[1]));
}
}
try {
Err.or(new Object[]{code,num,msg});
}
 catch (final XQException ex) {
if (al > 2) ex.item=new SeqIter(arg[2]).finish();
throw ex;
}
BaseX.notexpected();
return null;
case TRACE:
msg=Token.string(checkStr(arg[1])) + ": " + arg[0];
ctx.evalInfo(msg);
return arg[0];
default :
BaseX.notexpected(func);
return null;
}
}
