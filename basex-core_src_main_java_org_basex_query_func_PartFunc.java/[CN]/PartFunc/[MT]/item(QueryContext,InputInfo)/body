{
  final FItem f=toFunc(body(),qc);
  final int hl=holes.length;
  final int nargs=exprs.length + hl - 1;
  if (f.arity() != nargs)   throw INVARITY_X_X_X.get(info,arguments(nargs),f.arity(),f);
  final FuncType ft=f.funcType();
  final Expr[] args=new Expr[nargs];
  final VarScope scp=new VarScope(sc);
  final Var[] vars=new Var[hl];
  int a=-1;
  for (int h=0; h < hl; h++) {
    while (++a < holes[h])     args[a]=exprs[a - h].value(qc);
    vars[h]=scp.addNew(f.argName(holes[h]),null,false,qc,info);
    args[a]=new VarRef(info,vars[h]);
    vars[h].refineType(ft.argTypes[a],null);
  }
  final int al=args.length;
  while (++a < al)   args[a]=exprs[a - hl].value(qc);
  final AnnList anns=f.annotations();
  final FuncType tp=FuncType.get(anns,ft.type,vars);
  final DynFuncCall fc=new DynFuncCall(info,sc,anns.contains(Annotation.UPDATING),false,f,args);
  return new FuncItem(sc,anns,null,vars,tp,fc,qc.focus,scp.stackSize());
}
