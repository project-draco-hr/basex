{
  final Expr f=exprs[exprs.length - 1];
  if (allAreValues())   return preEval(qc);
  final SeqType t=f.type();
  if (t.instanceOf(SeqType.FUN_O) && t.type != FuncType.ANY_FUN) {
    final FuncType ft=(FuncType)t.type;
    final int arity=exprs.length + holes.length - 1;
    if (ft.args.length != arity)     throw INVARITY.get(info,f,arity);
    final SeqType[] ar=new SeqType[holes.length];
    for (int i=0; i < holes.length; i++)     ar[i]=ft.args[holes[i]];
    type=FuncType.get(ft.ret,ar).seqType();
  }
  return this;
}
