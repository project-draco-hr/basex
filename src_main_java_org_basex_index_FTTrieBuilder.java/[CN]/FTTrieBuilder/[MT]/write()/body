{
  if (!merge) {
    writeAll();
    return;
  }
  writeIndex(csize++);
  final DataOutput outB=new DataOutput(data.meta.file(DATAFTX + 'b'));
  final DataOutput outT=new DataOutput(data.meta.file(DATAFTX + 't'));
  final IntList ind=new IntList();
  final FTList[] v=new FTList[csize];
  for (int b=0; b < csize; ++b)   v[b]=new FTTrieList(data,b);
  final IntList il=new IntList();
  while (check(v)) {
    int min=0;
    il.reset();
    il.add(min);
    for (int i=0; i < csize; ++i) {
      if (min == i || v[i].tok.length == 0)       continue;
      final int d=diff(v[min].tok,v[i].tok);
      if (d > 0 || v[min].tok.length == 0) {
        min=i;
        il.reset();
        il.add(min);
      }
 else       if (d == 0 && v[i].tok.length > 0) {
        il.add(i);
      }
    }
    if (ind.size() == 0 || ind.get(ind.size() - 1) != v[min].tok[0]) {
      ind.add(v[min].tok[0]);
    }
    outT.writeToken(v[min].tok);
    outT.write4(merge(outB,il,v));
    outT.write5(outB.size());
  }
  outT.writeToken(EMPTY);
  outT.close();
  outB.close();
  writeSplitTrie(ind);
}
