{
  int s=siz;
  final TokenList tokens=index.tokens;
  final IntArrayList next=index.next;
  if (root != null)   root[rp]=next.get(0)[1] + o;
  final int il=next.size();
  for (int i=1; i < il; i++) {
    final int[] nxt=next.get(i);
    final int lp=nxt[nxt.length - 1] > -1 ? 0 : -1;
    outN.write((byte)tokens.get(nxt[0]).length);
    outN.write(tokens.get(nxt[0]));
    int j=1;
    for (; j < nxt.length - 2 + lp; j++) {
      outN.writeInt(nxt[j] + o);
      outN.write(tokens.get(next.get(nxt[j])[0])[0]);
    }
    outN.writeInt(nxt[j]);
    if (nxt[j] == 0 && nxt[j + 1] == 0) {
      outN.write5(nxt[j + 1]);
    }
 else {
      if (lp == 0) {
        outN.write5(nxt[j + 1]);
      }
 else {
        outN.write5(toLong(nxt,nxt.length - 2));
      }
    }
    outS.writeInt(s);
    s+=1L + tokens.get(nxt[0]).length * 1L + (nxt.length - 3 + lp) * 5L + 9L;
  }
  o+=next.size() - 1;
  return s;
}
