{
  final DataOutput outA=new DataOutput(data.meta.file(DATAFTX + 'a'));
  final DataOutput outC=new DataOutput(data.meta.file(DATAFTX + 'c'));
  final DataAccess outT=new DataAccess(data.meta.file(DATAFTX + 't'));
  final int[] root=new int[roots.size()];
  int rp=0;
  outA.write1(1);
  outA.write1(0);
  for (int j=0; j < roots.size(); ++j) {
    outA.write4(0);
    outA.write1(roots.get(j));
  }
  outA.write4(0);
  outA.write5(0);
  outC.write4(0);
  int siz=(int)(2L + roots.size() * 5L + 9L);
  while (true) {
    final byte[] tok=outT.readToken();
    if (tok.length == 0)     break;
    final int s=outT.read4();
    final long off=outT.read5();
    if (rp < roots.size() && tok[0] != roots.get(rp)) {
      siz=writeSubTree(root,outA,outC,rp,siz);
      ++rp;
      index=new FTTrieArray(128);
    }
    index.insertSorted(tok,s,off);
  }
  writeSubTree(root,outA,outC,rp,siz);
  outT.close();
  outA.close();
  outC.write4(0);
  outC.close();
  final RandomAccessFile tmp=new RandomAccessFile(data.meta.file(DATAFTX + 'a'),"rw");
  tmp.seek(2);
  for (  final int r : root) {
    tmp.writeInt(r);
    tmp.seek(tmp.getFilePointer() + 1);
  }
  tmp.close();
  DropDB.drop(data.meta.name,DATAFTX + 't' + IO.BASEXSUFFIX,data.meta.prop);
}
