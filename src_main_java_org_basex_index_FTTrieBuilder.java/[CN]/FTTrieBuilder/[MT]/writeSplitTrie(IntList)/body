{
  final DataOutput outa=new DataOutput(data.meta.file(DATAFTX + 'a'));
  final DataOutput outc=new DataOutput(data.meta.file(DATAFTX + 'c'));
  final DataAccess tmp=new DataAccess(data.meta.file(DATAFTX + 't'));
  final int[] root=new int[roots.size()];
  int rp=0;
  outa.write1(1);
  outa.write1(-1);
  for (int j=0; j < roots.size(); ++j) {
    outa.write4(0);
    outa.write1(roots.get(j));
  }
  outa.write4(0);
  outa.write5(-1);
  outc.write4(0);
  int siz=(int)(2L + roots.size() * 5L + 9L);
  while (true) {
    final byte[] tok=tmp.readToken();
    if (tok.length == 0)     break;
    final int s=tmp.read4();
    final long off=tmp.read5();
    if (rp < roots.size() && tok[0] != roots.get(rp)) {
      siz=writeSubTree(root,outa,outc,rp,siz);
      rp++;
      index=new FTArray(128);
    }
    index.insertSorted(tok,s,off);
  }
  writeSubTree(root,outa,outc,rp,siz);
  tmp.close();
  outa.close();
  outc.close();
  final RandomAccessFile a=new RandomAccessFile(data.meta.file(DATAFTX + 'a'),"rw");
  a.seek(2);
  for (  final int r : root) {
    a.writeInt(r);
    a.seek(a.getFilePointer() + 1);
  }
  a.close();
  DropDB.drop(data.meta.name,DATAFTX + 't' + IO.BASEXSUFFIX,data.meta.prop);
}
