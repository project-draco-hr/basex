{
  if (w) {
    final Lock l=new Lock(true);
synchronized (l) {
      if (waiting.size() == 0 && activeR == 0 && !activeW) {
        activeW=true;
        return;
      }
      waiting.add(l);
      try {
        l.wait();
      }
 catch (      final InterruptedException ex) {
        ex.printStackTrace();
      }
    }
  }
 else {
    Lock l=null;
    boolean add=false;
    if (waiting.size() > 0 && !waiting.getLast().isWriter()) {
      l=waiting.getLast();
      l.inc();
    }
 else {
      l=new Lock(false);
      add=true;
    }
synchronized (l) {
      if (!activeW && waiting.size() == 0) {
        activeR++;
        return;
      }
      if (add)       waiting.add(l);
      try {
        l.wait();
      }
 catch (      final InterruptedException ex) {
        ex.printStackTrace();
      }
    }
  }
}
