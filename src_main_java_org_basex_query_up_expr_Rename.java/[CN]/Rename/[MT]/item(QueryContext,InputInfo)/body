{
  final Iter t=ctx.iter(expr[0]);
  final Item i=t.next();
  if (i == null)   throw UPSEQEMP.thrw(input,Util.name(this));
  if (t.next() != null)   UPWRTRGTYP.thrw(input);
  CFrag ex=null;
  if (i.type == NodeType.ELM) {
    ex=new CElem(input,expr[1],new Atts(),true);
  }
 else   if (i.type == NodeType.ATT) {
    ex=new CAttr(input,false,expr[1]);
  }
 else   if (i.type == NodeType.PI) {
    ex=new CPI(input,expr[1],Empty.SEQ);
  }
 else {
    throw UPWRTRGTYP.thrw(input);
  }
  final QNm rename=ex.item(ctx,input).qname();
  final ANode targ=(ANode)i;
  if (targ.type == NodeType.ELM || targ.type == NodeType.ATT) {
    final byte[] renPref=rename.pref();
    final byte[] renURI=rename.uri().atom();
    final Atts at=targ.nsScope();
    for (int n=0; n < at.size; ++n) {
      if (eq(at.key[n],renPref)) {
        if (!eq(at.val[n],renURI))         UPNSCONFL.thrw(input);
      }
    }
  }
  final DBNode dbn=ctx.updates.determineDataRef(targ,ctx);
  ctx.updates.add(new RenameNode(dbn.pre,dbn.data,input,rename),ctx);
  return null;
}
