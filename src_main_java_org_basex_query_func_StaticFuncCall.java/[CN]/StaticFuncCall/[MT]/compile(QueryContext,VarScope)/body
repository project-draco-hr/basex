{
  super.compile(ctx,scp);
  if (func.ann.contains(Ann.Q_PRIVATE) && !Token.eq(func.sc.baseURI().string(),ctx.sc.baseURI().string()))   throw Err.FUNCPRIV.thrw(info,name.string());
  func.compile(ctx);
  if (func.inline(ctx)) {
    ctx.compInfo(OPTINLINEFN,func.name);
    final LinkedList<GFLWOR.Clause> cls=expr.length == 0 ? null : new LinkedList<GFLWOR.Clause>();
    final IntObjMap<Var> vs=new IntObjMap<Var>();
    for (int i=0; i < func.args.length; i++) {
      final Var old=func.args[i], v=scp.newCopyOf(ctx,old);
      vs.put(old.id,v);
      cls.add(new Let(v,expr[i],false,func.info).optimize(ctx,scp));
    }
    final Expr cpy=func.expr.copy(ctx,scp,vs), rt=!func.cast ? cpy : new TypeCheck(func.info,cpy,func.declType,true).optimize(ctx,scp);
    return cls == null ? rt : new GFLWOR(func.info,cls,rt).optimize(ctx,scp);
  }
  type=func.type();
  return this;
}
