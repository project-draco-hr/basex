{
  final ParserProp props=new ParserProp(options);
  final boolean jsonml=props.is(ParserProp.JSONML), unescape=props.is(ParserProp.JSON_UNESC);
  final String encoding=props.get(ParserProp.ENCODING), spec=props.get(ParserProp.JSON_SPEC);
  Spec sp=Spec.RFC4627;
  for (  final Spec s : Spec.values())   if (string(s.desc).equalsIgnoreCase(spec))   sp=s;
  final byte[] content=new NewlineInput(io).encoding(encoding).content();
  final ANode node;
  try {
    final JsonXMLConverter conv=jsonml ? new JsonMLConverter(null) : new JsonCGConverter(sp,unescape,null);
    node=conv.convert(string(content));
    final IOContent xml=new IOContent(node.serialize().toArray());
    xml.name(io.name());
    return xml;
  }
 catch (  final QueryException ex) {
    throw new BaseXException(ex.getLocalizedMessage());
  }
}
