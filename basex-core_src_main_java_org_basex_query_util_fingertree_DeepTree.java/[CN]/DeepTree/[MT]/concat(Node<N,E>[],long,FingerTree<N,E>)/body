{
  final DeepTree<N,E> lft=(DeepTree<N,E>)addAll(nodes,sz,false);
  if (!(other instanceof DeepTree))   return other.isEmpty() ? lft : lft.snoc(other.head());
  final DeepTree<N,E> rght=(DeepTree<N,E>)other;
  final Node<N,E>[] as=lft.right, bs=rght.left;
  final int l=as.length, n=l + bs.length, k=(n + MAX_ARITY - 1) / MAX_ARITY;
  @SuppressWarnings("unchecked") final Node<Node<N,E>,E>[] out=new Node[k];
  for (int i=0, p=0; i < k; i++) {
    final int rem=k - i, curr=(n - p + rem - 1) / rem;
    @SuppressWarnings("unchecked") final Node<N,E>[] ch=new Node[curr];
    final int inL=l - p;
    if (curr <= inL) {
      System.arraycopy(as,p,ch,0,curr);
    }
 else     if (inL > 0) {
      System.arraycopy(as,p,ch,0,inL);
      System.arraycopy(bs,0,ch,inL,curr - inL);
    }
 else {
      System.arraycopy(bs,-inL,ch,0,curr);
    }
    out[i]=new InnerNode<>(ch);
    p+=curr;
  }
  final long inMid=lft.rightSize() + rght.leftSize;
  final FingerTree<Node<N,E>,E> newMid=lft.middle.concat(out,inMid,rght.middle);
  final long newSize=lft.leftSize + newMid.size() + rght.rightSize();
  return new DeepTree<>(lft.left,lft.leftSize,newMid,rght.right,newSize);
}
