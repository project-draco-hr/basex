{
  final long newSize=size - right[right.length - 1].size();
  if (right.length > 1) {
    return new DeepTree<>(left,leftSize,middle,slice(right,0,right.length - 1),newSize);
  }
  if (middle.isEmpty()) {
    if (left.length == 1)     return new SingletonTree<>(left[0]);
    final int mid=left.length / 2;
    return get(slice(left,0,mid),slice(left,mid,left.length),newSize);
  }
  final InnerNode<N,E> last=(InnerNode<N,E>)middle.last();
  return new DeepTree<>(left,leftSize,middle.init(),last.children,newSize);
}
