{
  final long sz=fst.size();
  if (left.length < MAX_DIGIT) {
    final Node<N,E>[] newLeft=slice(left,-1,left.length);
    newLeft[0]=fst;
    return new DeepTree<>(newLeft,leftSize + sz,middle,right,size + sz);
  }
  final int ll=left.length, m=ll - NODE_SIZE;
  final Node<N,E>[] newLeft=slice(left,-1,m), sub=slice(left,m,ll);
  newLeft[0]=fst;
  final FingerTree<Node<N,E>,E> mid=middle.cons(new InnerNode<>(sub));
  return DeepTree.get(newLeft,mid,right,size + sz);
}
