{
  boolean changed=false, changing;
  do {
    changing=false;
    final ListIterator<Clause> iter=clauses.listIterator();
    while (iter.hasNext()) {
      final Clause clause=iter.next();
      final int next=iter.nextIndex();
      if (clause instanceof Let) {
        final Let lt=(Let)clause;
        final Expr expr=lt.expr;
        if (expr.has(Flag.NDT) || expr.has(Flag.UPD))         continue;
        if (expr.isValue() || expr instanceof VarRef && !lt.var.checksType() || count(lt.var,next) == VarUsage.ONCE && !expr.has(Flag.CTX) && !expr.has(Flag.CNS) || expr instanceof AxisPath && ((AxisPath)expr).cheap()) {
          cc.info(QueryText.OPTINLINE_X,lt.var);
          inline(cc,lt.var,lt.inlineExpr(cc),iter);
          clauses.remove(lt);
          changing=changed=true;
          break;
        }
      }
    }
  }
 while (changing);
  return changed;
}
