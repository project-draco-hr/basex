{
  boolean changed=false;
  final HashSet<For> fors=new HashSet<>();
  for (int i=0; i < clauses.size(); i++) {
    final Clause clause=clauses.get(i);
    if (!(clause instanceof Where) || clause.has(Flag.NDT) || clause.has(Flag.UPD))     continue;
    final Where where=(Where)clause;
    if (where.expr.isValue()) {
      if (!(where.expr instanceof Bln))       where.expr=Bln.get(where.expr.ebv(qc,where.info).bool(where.info));
      if (!((Item)where.expr).bool(null))       break;
      clauses.remove(i--);
      changed=true;
    }
 else {
      int insert=-1;
      for (int j=i; --j >= 0; ) {
        final Clause curr=clauses.get(j);
        if (curr.has(Flag.NDT) || curr.has(Flag.UPD) || !curr.skippable(where))         break;
        if (!(curr instanceof Where))         insert=j;
      }
      if (insert >= 0) {
        clauses.add(insert,clauses.remove(i));
        changed=true;
      }
      final int newPos=insert < 0 ? i : insert;
      for (int b4=newPos; --b4 >= 0; ) {
        final Clause before=clauses.get(b4);
        if (before instanceof For) {
          final For f=(For)before;
          if (f.toPredicate(qc,scp,where.expr)) {
            fors.add((For)before);
            clauses.remove(newPos);
            i--;
            changed=true;
          }
        }
 else         if (before instanceof Where) {
          continue;
        }
        break;
      }
    }
  }
  for (  final For f : fors)   f.expr=f.expr.optimize(qc,scp);
  if (changed)   qc.compInfo(QueryText.OPTWHERE2);
  return changed;
}
