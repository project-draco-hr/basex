{
  query(_BIN_UNPACK_FLOAT.args(base64("00000000"),0),0);
  query(_BIN_UNPACK_FLOAT.args(base64("3F800000"),0),1);
  query(_BIN_UNPACK_FLOAT.args(base64("BF800000"),0),-1);
  query(_BIN_UNPACK_FLOAT.args(base64("80000000"),0),"-0");
  query(_BIN_UNPACK_FLOAT.args(base64("00000000"),0),"0");
  query(_BIN_UNPACK_FLOAT.args(base64("7F800000"),0),"INF");
  query(_BIN_UNPACK_FLOAT.args(base64("FF800000"),0),"-INF");
  query(_BIN_UNPACK_FLOAT.args(base64("7FC00000"),0),"NaN");
  query(_BIN_UNPACK_FLOAT.args(base64("3F800000"),0,"most-significant-first"),1);
  query(_BIN_UNPACK_FLOAT.args(base64("3F800000"),0,"big-endian"),1);
  query(_BIN_UNPACK_FLOAT.args(base64("3F800000"),0,"BE"),1);
  query(_BIN_UNPACK_FLOAT.args(base64("0000803F"),0,"least-significant-first"),1);
  query(_BIN_UNPACK_FLOAT.args(base64("0000803F"),0,"little-endian"),1);
  query(_BIN_UNPACK_FLOAT.args(base64("0000803F"),0,"LE"),1);
  error(_BIN_UNPACK_FLOAT.args(base64("00000000"),-1),BIN_IOOR_X_X);
  error(_BIN_UNPACK_FLOAT.args(base64("00000000"),1),BIN_IOOR_X_X);
  error(_BIN_UNPACK_FLOAT.args(base64("00"),0),BIN_IOOR_X_X);
  error(_BIN_UNPACK_FLOAT.args(base64("00000000"),0,"X"),BIN_USO_X);
}
