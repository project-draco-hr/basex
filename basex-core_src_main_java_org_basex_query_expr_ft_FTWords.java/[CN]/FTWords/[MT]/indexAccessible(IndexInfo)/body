{
  data=ii.ic.data;
  final MetaData md=data.meta;
  if (occ != null || ftOpt.cs != null && md.casesens == (ftOpt.cs == FTCase.INSENSITIVE) || ftOpt.isSet(DC) && md.diacritics != ftOpt.is(DC) || ftOpt.isSet(ST) && md.stemming != ftOpt.is(ST) || ftOpt.ln != null && !ftOpt.ln.equals(md.language))   return false;
  ftOpt.assign(md);
  if (tokens == null) {
    ii.costs=Math.max(2,data.meta.size / 30);
    return true;
  }
  final FTLexer ft=new FTLexer(ftOpt);
  ii.costs=0;
  for (  byte[] t : tokens) {
    ft.init(t);
    while (ft.hasNext()) {
      final byte[] tok=ft.nextToken();
      if (ftOpt.sw != null && ftOpt.sw.contains(tok))       continue;
      if (ftOpt.is(WC)) {
        t=ft.get();
        if (t[0] == '.')         return false;
        int d=0;
        for (        final byte w : t) {
          if (w == '{' || w == '\\' || w == '.' && ++d > 1)           return false;
        }
      }
      final int costs=data.costs(ft);
      if (costs < 0)       return false;
      if (costs != 0)       ii.costs+=Math.max(2,costs / 100);
    }
  }
  return true;
}
