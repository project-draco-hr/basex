{
  return new FTIter(){
    FTIndexIterator ftiter;
    int len;
    @Override public FTNode next() throws QueryException {
      if (ftiter == null) {
        final FTTokenizer ftt=FTWords.this.get(qc);
        final FTLexer lexer=new FTLexer(ftOpt).lserror(qc.context.options.get(MainOptions.LSERROR));
        int count=0;
        for (        final byte[] k : unique(tokens != null ? tokens : tokens(qc))) {
          lexer.init(k);
          if (!lexer.hasNext())           return null;
          int d=0;
          FTIndexIterator ii=null;
          do {
            final byte[] tok=lexer.nextToken();
            count+=tok.length;
            if (ftOpt.sw != null && ftOpt.sw.contains(tok)) {
              ++d;
            }
 else {
              final FTIndexIterator ir=lexer.get().length > data.meta.maxlen ? scan(lexer,ftt) : (FTIndexIterator)data.iter(lexer);
              ir.pos(++qc.ftPos);
              if (ii == null) {
                ii=ir;
              }
 else {
                ii=FTIndexIterator.intersect(ii,ir,++d);
                d=0;
              }
            }
          }
 while (lexer.hasNext());
          if (ii != null) {
            if (ftiter == null) {
              len=count;
              ftiter=ii;
            }
 else             if (mode == FTMode.ALL || mode == FTMode.ALL_WORDS) {
              if (ii.size() == 0)               return null;
              len+=count;
              ftiter=FTIndexIterator.intersect(ftiter,ii,0);
            }
 else {
              if (ii.size() == 0)               continue;
              len=Math.max(count,len);
              ftiter=FTIndexIterator.union(ftiter,ii);
            }
          }
        }
      }
      return ftiter == null || !ftiter.more() ? null : new FTNode(ftiter.matches(),data,ftiter.pre(),len,ftiter.size(),-1);
    }
  }
;
}
