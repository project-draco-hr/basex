{
  final byte[] value=toEmptyToken(exprs[0],qc);
  final Pattern pat=pattern(exprs[1],exprs.length == 4 ? exprs[3] : null,qc,true);
  final byte[] rep=toToken(exprs[2],qc);
  String replace=string(rep);
  if ((pat.flags() & Pattern.LITERAL) != 0) {
    replace=replace.replace("\\","\\\\").replace("$","\\$");
  }
 else {
    final int rl=rep.length;
    for (int r=0; r < rl; ++r) {
      final int n=r + 1 == rl ? 0 : rep[r + 1];
      if (rep[r] == '\\') {
        if (n != '\\' && n != '$')         throw FUNREPBS_X.get(info,rep);
        ++r;
      }
 else       if (rep[r] == '$' && (r == 0 || rep[r - 1] != '\\') && !digit(n)) {
        throw FUNREPDOL_X.get(info,rep);
      }
    }
  }
  try {
    return Str.get(pat.matcher(string(value)).replaceAll(replace));
  }
 catch (  final Exception ex) {
    if (ex.getMessage().contains("No group"))     throw REGROUP.get(info);
    throw REGPAT_X.get(info,ex);
  }
}
