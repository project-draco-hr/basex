{
  values=choice.clone();
  for (  final String v : values)   num=num && v.matches("[0-9]+");
  setLayout(new TableLayout(2,1));
  text=new BaseXTextField(d);
  text.addFocusListener(new FocusAdapter(){
    @Override public void focusGained(    final FocusEvent e){
      text.selectAll();
    }
  }
);
  text.addKeyListener(new KeyAdapter(){
    boolean typed;
    @Override public void keyPressed(    final KeyEvent e){
      final int op=list.getSelectedIndex();
      int np=op;
      final int page=getHeight() / getFont().getSize();
      if (NEXTLINE.is(e)) {
        np=Math.min(op + 1,values.length - 1);
      }
 else       if (PREVLINE.is(e)) {
        np=Math.max(op - 1,0);
      }
 else       if (NEXTPAGE.is(e)) {
        np=Math.min(op + page,values.length - 1);
      }
 else       if (PREVPAGE.is(e)) {
        np=Math.max(op - page,0);
      }
 else       if (TEXTSTART.is(e)) {
        np=0;
      }
 else       if (TEXTEND.is(e)) {
        np=values.length - 1;
      }
      if (op != np && np < values.length) {
        list.setSelectedValue(values[np],true);
        text.setText(values[np]);
        text.selectAll();
        typed=false;
      }
    }
    @Override public void keyTyped(    final KeyEvent e){
      final char ch=e.getKeyChar();
      if (num) {
        typed=ch >= '0' && ch <= '9';
        if (!typed)         e.consume();
      }
 else {
        typed=ch >= ' ' && ch != 127;
      }
    }
    @Override public void keyReleased(    final KeyEvent e){
      if (typed) {
        typed=false;
        final String txt=text.getText().trim().toLowerCase();
        int i=0;
        for (i=0; i < values.length; ++i) {
          final String txt2=values[i].toLowerCase();
          if (txt2.startsWith(txt))           break;
        }
        if (i < values.length) {
          final int c=text.getCaretPosition();
          list.setSelectedValue(values[i],true);
          text.setText(values[i]);
          text.select(c,values[i].length());
        }
      }
      d.action(null);
    }
  }
);
  add(text);
  final MouseInputAdapter mouse=new MouseInputAdapter(){
    @Override public void mouseEntered(    final MouseEvent e){
      BaseXLayout.focus(text,null);
    }
    @Override public void mousePressed(    final MouseEvent e){
      final Object i=list.getSelectedValue();
      if (i == null)       return;
      text.setText(i.toString());
      text.requestFocusInWindow();
      text.selectAll();
      d.action(null);
    }
    @Override public void mouseDragged(    final MouseEvent e){
      mousePressed(e);
    }
    @Override public void mouseClicked(    final MouseEvent e){
      if (e.getClickCount() == 2) {
        d.close();
        return;
      }
    }
  }
;
  list=new JList(choice);
  list.setFocusable(false);
  list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  list.addMouseListener(mouse);
  list.addMouseMotionListener(mouse);
  text.setFont(list.getFont());
  BaseXLayout.addInteraction(list,null,d);
  scroll=new JScrollPane(list,ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  add(scroll);
  setIndex(0);
}
