{
  if (it instanceof Array) {
    for (    final Item i : it.atomValue(info)) {
      if (!add(i))       return false;
    }
    return true;
  }
  if (it instanceof FItem)   throw CONSFUNC_X.get(info,it);
  if (it instanceof ANode) {
    ANode node=(ANode)it;
    final Type ip=it.type;
    if (ip == NodeType.TXT) {
      text.add(node.string());
    }
 else     if (ip == NodeType.ATT) {
      if (!text.isEmpty() || !children.isEmpty()) {
        errAtt=true;
        return false;
      }
      final QNm name=node.qname();
      for (      final ANode att : atts) {
        if (name.eq(att.qname())) {
          duplAtt=name.string();
          return false;
        }
      }
      atts.add(new FAttr(name,node.string()));
      if (name.hasURI())       sc.ns.add(name.prefix(),name.uri());
    }
 else     if (ip == NodeType.NSP) {
      if (!text.isEmpty() || !children.isEmpty()) {
        errNS=true;
        return false;
      }
      final byte[] name=node.name();
      final byte[] uri=node.string();
      final byte[] u=nspaces.value(name);
      if (u == null) {
        nspaces.add(name,uri);
      }
 else       if (!Token.eq(uri,u)) {
        duplNS=name;
        return false;
      }
    }
 else     if (ip == NodeType.DOC) {
      final AxisIter ai=node.children();
      for (ANode ch; (ch=ai.next()) != null && add(ch); )       ;
    }
 else {
      if (!text.isEmpty())       children.add(new FTxt(text.next()));
      node=node.deepCopy();
      children.add(node);
    }
    more=false;
  }
 else {
    if (more)     text.add(' ');
    text.add(it.string(info));
    more=true;
  }
  return true;
}
