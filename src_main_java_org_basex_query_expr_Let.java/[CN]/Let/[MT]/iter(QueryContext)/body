{
  final Var vr=var.copy();
  return new Iter(){
    /** 
 * Variable stack size. 
 */
    private int vs;
    /** 
 * Iterator flag. 
 */
    private boolean more;
    @Override public Item next() throws QueryException {
      if (!more) {
        vs=ctx.vars.size();
        Value v;
        if (score) {
          double s=0;
          int c=0;
          Item it;
          final Iter ir=ctx.iter(expr);
          while ((it=ir.next()) != null) {
            s+=it.score();
            c++;
          }
          v=Dbl.get(ctx.score.let(s,c));
        }
 else {
          v=expr.value(ctx);
        }
        ctx.vars.add(vr.bind(v,ctx));
        more=true;
        return Bln.TRUE;
      }
      reset();
      return null;
    }
    @Override public long size(){
      return 1;
    }
    @Override public Item get(    final long i) throws QueryException {
      reset();
      return next();
    }
    @Override public boolean reset(){
      if (more) {
        ctx.vars.reset(vs);
        more=false;
      }
      return true;
    }
  }
;
}
