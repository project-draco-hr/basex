{
  Performance.gc(4);
  final Data data=context.data();
  long fl=0;
  final File file=IOConstants.dbpath(data.meta.dbname);
  if (file.exists()) {
    for (    final File f : file.listFiles())     fl+=f.length();
  }
  prop(out,INFODB,false);
  prop(out,INFODBNAME + data.meta.dbname,true);
  prop(out,INFODOC + data.meta.filename,true);
  prop(out,INFOTIME + new SimpleDateFormat("dd.MM.yyyy hh:mm:ss").format(new Date(data.meta.time)),true);
  if (data.meta.filesize != 0)   prop(out,INFODOCSIZE + Performance.formatSize(data.meta.filesize),true);
  if (fl != 0)   prop(out,INFODBSIZE + Performance.formatSize(fl),true);
  prop(out,INFOENCODING + data.meta.encoding,true);
  prop(out,INFONODES + data.size,true);
  prop(out,INFOHEIGHT + data.meta.height,true);
  prop(out,NL + INFOINDEX,false);
  prop(out,Set.flag(INFOTXTINDEX,data.meta.txtindex),true);
  prop(out,Set.flag(INFOATVINDEX,data.meta.atvindex),true);
  prop(out,Set.flag(INFOFTINDEX,data.meta.ftxindex),true);
  prop(out,NL + INFOCREATE,false);
  prop(out,Set.flag(INFOCHOP,data.meta.chop),true);
  prop(out,Set.flag(INFOENTITIES,data.meta.entity),true);
}
