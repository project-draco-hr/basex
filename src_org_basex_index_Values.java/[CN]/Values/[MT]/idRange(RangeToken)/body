{
  final double min=tok.min;
  final double max=tok.max;
  final int mx=(long)max == max ? token(max).length : 0;
  final boolean sl=mx != 0 && (long)min == min && token(min).length == mx;
  final IntList ids=new IntList();
  boolean found=false;
  for (int l=0; l < size - 1; l++) {
    final int ds=idxl.readNum(idxr.read5(l * 5L));
    int pre=idxl.readNum();
    final double v=text ? data.textNum(pre) : data.attNum(pre);
    if (!found) {
      found=v == v;
      if (!found || v < min || v > max)       continue;
    }
 else     if (v == v) {
      if (sl && (text ? data.textLen(pre) : data.attLen(pre)) == mx && v > max)       break;
      if (v < min || v > max)       continue;
    }
 else {
      if ((text ? data.text(pre) : data.attValue(pre))[0] > '9')       break;
      continue;
    }
    ids.add(pre);
    for (int d=0; d < ds - 1; d++)     ids.add(pre+=idxl.readNum());
  }
  ids.sort();
  return new IndexIterator(){
    int p=-1;
    @Override public boolean more(){
      return ++p < ids.size;
    }
    @Override public int next(){
      return ids.list[p];
    }
  }
;
}
