{
  return new Iter(){
    private Iter[] iter;
    private long[] sizes;
    private Iter rtrn;
    private int p;
    @Override public Item next() throws QueryException {
      init();
      while (true) {
        if (rtrn != null) {
          final Item i=rtrn.next();
          if (i != null)           return i;
          rtrn=null;
        }
 else {
          while (iter[p].next() != null) {
            if (p + 1 != fl.length) {
              p++;
            }
 else             if (where == null || where.ebv(ctx,input).bool(input)) {
              rtrn=ctx.iter(ret);
              break;
            }
          }
          if (rtrn == null && p-- == 0)           return null;
        }
      }
    }
    @Override public long size() throws QueryException {
      if (where != null || !ret.type().one())       return -1;
      init();
      long s=1;
      sizes=new long[fl.length];
      for (int f=0; f != fl.length; ++f) {
        sizes[f]=iter[f].size();
        if (sizes[f] == -1)         return -1;
        s*=sizes[f];
      }
      return s;
    }
    @Override public Item get(    final long i) throws QueryException {
      long s=1;
      for (int f=1; f != fl.length; ++f)       s*=sizes[f];
      long o=i;
      for (int f=0; f != fl.length; ++f) {
        if (f != 0)         s/=sizes[f];
        final long n=o / s;
        iter[f].get(n);
        o-=n * s;
      }
      return ret.item(ctx,input);
    }
    @Override public boolean reset(){
      if (iter != null) {
        for (        final Iter i : iter)         i.reset();
        sizes=null;
        iter=null;
        rtrn=null;
        p=0;
      }
      return true;
    }
    /** 
 * Initializes the iterator.
 */
    private void init() throws QueryException {
      if (iter != null)       return;
      iter=new Iter[fl.length];
      for (int f=0; f < fl.length; ++f)       iter[f]=ctx.iter(fl[f]);
    }
  }
;
}
