{
  final Iter[] iter=new Iter[fl.length];
  for (int f=0; f < fl.length; f++)   iter[f]=ctx.iter(fl[f]);
  return new Iter(){
    private Iter ir;
    private int p;
    @Override public Item next() throws QueryException {
      while (true) {
        if (ir != null) {
          final Item i=ir.next();
          if (i != null)           return i;
          ir=null;
        }
 else {
          while (iter[p].next() != null) {
            if (p + 1 != fl.length) {
              p++;
            }
 else             if (where == null || where.ebv(ctx).bool()) {
              ir=ctx.iter(ret);
              break;
            }
          }
          if (ir == null && p-- == 0)           return null;
        }
      }
    }
    @Override public long size() throws QueryException {
      return iter.length == 1 && where == null && ret.returned(ctx).one() ? iter[0].size() : -1;
    }
    @Override public Item get(    final long i) throws QueryException {
      iter[0].get(i);
      final Item it=ret.atomic(ctx);
      iter[0].reset();
      return it;
    }
    @Override public boolean reset(){
      for (      final Iter i : iter)       i.reset();
      return false;
    }
  }
;
}
