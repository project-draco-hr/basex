{
  final boolean create=context.user.perm(User.CREATE);
  String path=MetaData.normPath(args[0]);
  if (path == null || path.endsWith("."))   return error(NAMEINVALID,args[0]);
  if (in == null) {
    final IO io=IO.get(args[1]);
    if (!io.exists() || io.isDir())     return error(FILEWHICH,create ? io : args[1]);
    in=io.inputSource();
    if ((path.isEmpty() || path.endsWith("/")) && !(io instanceof IOContent))     path+=io.name();
  }
  if (path.isEmpty())   return error(NAMEINVALID,path);
  final IOFile file=context.data().meta.binary(path);
  if (path.isEmpty() || path.endsWith(".") || file == null || file.isDir())   return error(NAMEINVALID,create ? path : args[0]);
  new IOFile(file.dir()).md();
  PrintOutput po=null;
  try {
    po=new PrintOutput(file.path());
    try {
      final Reader r=in.getCharacterStream();
      final InputStream is=in.getByteStream();
      final String id=in.getSystemId();
      if (r != null) {
        for (int c; (c=r.read()) != -1; )         po.utf8(c);
      }
 else       if (is != null) {
        for (int b; (b=is.read()) != -1; )         po.write(b);
      }
 else       if (id != null) {
        final BufferInput bi=IO.get(id).buffer();
        try {
          for (int b; (b=bi.read()) != -1; )           po.write(b);
        }
  finally {
          bi.close();
        }
      }
    }
  finally {
      po.close();
    }
  }
 catch (  final IOException ex) {
    return error(DBNOTSTORED,ex.getMessage());
  }
  return info(QUERYEXEC,perf);
}
