{
  return new ListIterator<Value>(){
    private int index=(int)Math.max(0,Math.min(start,elems.length));
    @Override public int nextIndex(){
      return index;
    }
    @Override public boolean hasNext(){
      return index < elems.length;
    }
    @Override public Value next(){
      if (index >= elems.length)       throw new NoSuchElementException();
      return elems[index++];
    }
    @Override public int previousIndex(){
      return index - 1;
    }
    @Override public boolean hasPrevious(){
      return index > 0;
    }
    @Override public Value previous(){
      if (index <= 0)       throw new NoSuchElementException();
      return elems[--index];
    }
    @Override public void set(    final Value e){
      throw new UnsupportedOperationException();
    }
    @Override public void add(    final Value e){
      throw new UnsupportedOperationException();
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}
