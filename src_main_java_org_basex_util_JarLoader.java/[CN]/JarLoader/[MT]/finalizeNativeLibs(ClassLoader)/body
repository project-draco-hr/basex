{
  boolean res=false;
  final Class<?> classClassLoader=ClassLoader.class;
  Field nativeLibraries=null;
  try {
    nativeLibraries=classClassLoader.getDeclaredField("nativeLibraries");
  }
 catch (  final NoSuchFieldException ex) {
    Util.errln(ex);
  }
  if (nativeLibraries == null) {
    return res;
  }
  nativeLibraries.setAccessible(true);
  Object obj=null;
  try {
    obj=nativeLibraries.get(cl);
  }
 catch (  final IllegalAccessException ex) {
    Util.errln(ex);
  }
  if (!(obj instanceof Vector)) {
    return res;
  }
  res=true;
  final Vector<Object> nativeLib=(Vector<Object>)obj;
  for (  final Object lib : nativeLib) {
    Method finalize=null;
    try {
      finalize=lib.getClass().getDeclaredMethod("finalize",new Class[0]);
    }
 catch (    final NoSuchMethodException ex) {
      Util.errln(ex);
    }
    if (finalize != null) {
      finalize.setAccessible(true);
      try {
        finalize.invoke(lib,new Object[0]);
      }
 catch (      final IllegalAccessException ex) {
        Util.errln(ex);
      }
catch (      final InvocationTargetException ex) {
        Util.errln(ex);
      }
    }
  }
  return res;
}
