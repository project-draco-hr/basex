{
  boolean res=false;
  Class<?> classJarURLConnection=null;
  try {
    classJarURLConnection=Class.forName("sun.net.www.protocol.jar.JarURLConnection");
  }
 catch (  final ClassNotFoundException ex) {
    Util.errln(ex);
  }
  if (classJarURLConnection == null) {
    return res;
  }
  Field f=null;
  try {
    f=classJarURLConnection.getDeclaredField("factory");
  }
 catch (  final NoSuchFieldException ex) {
    Util.errln(ex);
  }
  if (f == null) {
    return res;
  }
  f.setAccessible(true);
  Object obj=null;
  try {
    obj=f.get(null);
  }
 catch (  final IllegalAccessException ex) {
    Util.errln(ex);
  }
  if (obj == null) {
    return res;
  }
  final Class<?> classJarFileFactory=obj.getClass();
  HashMap<Object,Object> fileCache=null;
  try {
    f=classJarFileFactory.getDeclaredField("fileCache");
    f.setAccessible(true);
    obj=f.get(null);
    if (obj instanceof HashMap) {
      fileCache=(HashMap<Object,Object>)obj;
    }
  }
 catch (  final NoSuchFieldException ex) {
    Util.errln(ex);
  }
catch (  final IllegalAccessException ex) {
    Util.errln(ex);
  }
  HashMap<Object,Object> urlCache=null;
  try {
    f=classJarFileFactory.getDeclaredField("urlCache");
    f.setAccessible(true);
    obj=f.get(null);
    if (obj instanceof HashMap) {
      urlCache=(HashMap<Object,Object>)obj;
    }
  }
 catch (  final NoSuchFieldException ex) {
    Util.errln(ex);
  }
catch (  final IllegalAccessException ex) {
    Util.errln(ex);
  }
  if (urlCache != null) {
    final HashMap<Object,Object> urlCacheTmp=(HashMap<Object,Object>)urlCache.clone();
    for (    final Object o : urlCacheTmp.keySet()) {
      obj=o;
      if (!(obj instanceof JarFile)) {
        continue;
      }
      final JarFile jarFile=(JarFile)obj;
      if (setJarFileNames2Close.contains(jarFile.getName())) {
        try {
          jarFile.close();
        }
 catch (        final IOException ex) {
          Util.errln(ex);
        }
        if (fileCache != null) {
          fileCache.remove(urlCache.get(jarFile));
        }
        urlCache.remove(jarFile);
      }
    }
    res=true;
  }
 else   if (fileCache != null) {
    final HashMap<Object,Object> fileCacheTmp=(HashMap<Object,Object>)fileCache.clone();
    for (    final Object key : fileCacheTmp.keySet()) {
      obj=fileCache.get(key);
      if (!(obj instanceof JarFile)) {
        continue;
      }
      final JarFile jarFile=(JarFile)obj;
      if (setJarFileNames2Close.contains(jarFile.getName())) {
        try {
          jarFile.close();
        }
 catch (        final IOException ex) {
          Util.errln(ex);
        }
        fileCache.remove(key);
      }
    }
    res=true;
  }
  setJarFileNames2Close.clear();
  return res;
}
