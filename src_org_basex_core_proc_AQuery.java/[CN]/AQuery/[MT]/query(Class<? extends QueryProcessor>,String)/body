{
  long pars=0;
  long comp=0;
  long eval=0;
  QueryProcessor qu=null;
  try {
    for (int i=0; i < Prop.runs; i++) {
      qu=cls.getConstructor(new Class[]{String.class}).newInstance(new Object[]{query == null ? "" : query});
      final Nodes nodes=context.current();
      progress(qu);
      qu.parse();
      pars+=per.getTime();
      qu.compile(nodes);
      comp+=per.getTime();
      result=qu.query(nodes);
      eval+=per.getTime();
    }
    if (result instanceof Nod) {
      final Nod ns=(Nod)result;
      result=new Nodes(ns.nodes,ns.data);
    }
    if (Prop.info) {
      info(qu.getInfo());
      info(QUERYPARSE + Performance.getTimer(pars,Prop.runs) + NL);
      info(QUERYCOMPILE + Performance.getTimer(comp,Prop.runs) + NL);
      info(QUERYEVALUATE + Performance.getTimer(eval,Prop.runs) + NL);
    }
    return true;
  }
 catch (  final QueryException ex) {
    BaseX.debug(ex);
    return error(ex.getMessage());
  }
catch (  final ProgressException ex) {
    return false;
  }
catch (  final Exception ex) {
    ex.printStackTrace();
    return error(BaseX.bug(ex.getClass().getSimpleName()));
  }
}
