{
  final int runs=prop.num(Prop.RUNS);
  String err=null;
  try {
    for (int i=0; i < runs; i++) {
      per=new Performance();
      qp=new QueryProcessor(query,context);
      progress(qp);
      qp.parse();
      pars+=per.getTime();
      if (i == 0)       plan(qp,false);
      qp.compile();
      if (i == 0)       plan(qp,true);
      comp+=per.getTime();
      result=qp.query();
      eval+=per.getTime();
      if (i + 1 < runs)       qp.close();
    }
    execInfo();
    return true;
  }
 catch (  final QueryException ex) {
    Main.debug(ex);
    err=ex.getMessage();
  }
catch (  final ProgressException ex) {
    err=PROGERR;
  }
catch (  final Exception ex) {
    ex.printStackTrace();
    err=Main.bug();
  }
  try {
    qp.close();
  }
 catch (  final IOException ex) {
  }
  return error(err);
}
