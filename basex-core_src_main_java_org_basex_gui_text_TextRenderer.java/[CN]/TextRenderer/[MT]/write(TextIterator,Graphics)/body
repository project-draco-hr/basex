{
  if (x == offset)   markLine(g);
  final Color color=isEnabled() ? highlighted ? GUIConstants.GREEN : link ? GUIConstants.color4 : syntax.getColor(iter) : GUIConstants.gray;
  final int ch=iter.curr();
  highlighted=ch == TokenBuilder.MARK;
  final int cp=iter.pos();
  final int cc=iter.caret();
  if (y > 0 && y < height) {
    if (iter.selectStart()) {
      int xx=x;
      while (!iter.inSelect() && iter.more())       xx+=fontWidth(g,iter.next());
      int cw=0;
      while (iter.inSelect() && iter.more())       cw+=fontWidth(g,iter.next());
      g.setColor(GUIConstants.color2A);
      g.fillRect(xx,lineY,cw,fontHeight);
      iter.pos(cp);
    }
    int xx=x;
    while (iter.more() && iter.searchStart()) {
      while (!iter.inSearch() && iter.more())       xx+=fontWidth(g,iter.next());
      int cw=0;
      while (iter.inSearch() && iter.more())       cw+=fontWidth(g,iter.next());
      g.setColor(GUIConstants.color2A);
      g.fillRect(xx,lineY,cw,fontHeight);
      xx+=cw;
    }
    iter.pos(cp);
    if (iter.erroneous())     drawError(g);
    if (ch == '\n' && showNL) {
      g.setColor(GUIConstants.gray);
      g.drawString("\u00b6",x,y);
    }
 else     if ((ch == '\u00a0' || ch >= 0x2000 && ch <= 0x200A) && showInvisible) {
      final int s=fontHeight / 12 + 1;
      g.setColor(GUIConstants.gray);
      g.fillRect(x + (wordWidth >> 1),y - fontHeight * 3 / 10,s,s);
    }
 else     if (ch == '\t' && showInvisible) {
      final int yy=y - fontHeight * 3 / 10;
      final int s=1 + fontHeight / 12;
      final int xe=x + fontWidth(g,'\t') - s;
      final int as=s * 2 - 1;
      g.setColor(GUIConstants.gray);
      g.drawLine(x + s,yy,xe,yy);
      g.drawLine(xe - as,yy - as,xe,yy);
      g.drawLine(xe - as,yy + as,xe,yy);
    }
 else     if (ch > ' ') {
      g.setColor(color);
      String n=iter.nextString();
      int ww=width - x;
      if (x + wordWidth > ww) {
        int c=0;
        for (final int nl=n.length(); c < nl && ww > 0; c++) {
          ww-=fontWidth(g,n.charAt(c));
        }
        n=n.substring(0,c);
      }
      g.drawString(n,x,y);
    }
 else     if (ch <= TokenBuilder.ULINE) {
      g.setFont(font);
    }
    if (link)     g.drawLine(x,y + 1,x + wordWidth,y + 1);
    if (caret && iter.edited()) {
      xx=x;
      while (iter.more()) {
        if (cc == iter.pos()) {
          drawCaret(g,xx);
          break;
        }
        xx+=fontWidth(g,iter.next());
      }
      iter.pos(cp);
    }
  }
  if (ch == '(' || ch == '[' || ch == '{') {
    pars.add(x);
    pars.add(y);
    pars.add(cp);
    pars.add(ch);
  }
 else   if ((ch == ')' || ch == ']' || ch == '}') && !pars.isEmpty()) {
    final int open=ch == ')' ? '(' : ch == ']' ? '[' : '{';
    if (pars.peek() == open) {
      pars.pop();
      final int cr=pars.pop();
      final int yy=pars.pop();
      final int xx=pars.pop();
      if (cc == cp || cc == cr) {
        g.setColor(GUIConstants.color4);
        g.drawRect(xx,yy - fontHeight * 4 / 5,fontWidth(g,open),fontHeight);
        g.drawRect(x,lineY,fontWidth(g,ch),fontHeight);
      }
    }
  }
  next(iter);
}
