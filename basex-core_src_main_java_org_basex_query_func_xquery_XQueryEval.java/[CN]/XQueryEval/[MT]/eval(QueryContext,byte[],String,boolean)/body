{
  final HashMap<String,Value> bindings=toBindings(1,qc);
  final User user=qc.context.user();
  final Perm tmp=user.perm(null);
  Timer to=null;
  try (final QueryContext qctx=qc.proc(new QueryContext(qc))){
    if (exprs.length > 2) {
      final Options opts=toOptions(2,Q_OPTIONS,new XQueryOptions(),qc);
      final Perm perm=Perm.get(opts.get(XQueryOptions.PERMISSION).toString());
      if (!user.has(perm))       throw BXXQ_PERM2_X.get(info,perm);
      user.perm(perm,null);
      Performance.gc(2);
      final long mb=opts.get(XQueryOptions.MEMORY);
      if (mb != 0) {
        final long limit=Performance.memory() + (mb << 20);
        to=new Timer(true);
        to.schedule(new TimerTask(){
          @Override public void run(){
            if (Performance.memory() > limit) {
              Performance.gc(1);
              if (Performance.memory() > limit)               qctx.stop();
            }
          }
        }
,500,500);
      }
      final long ms=opts.get(XQueryOptions.TIMEOUT) * 1000L;
      if (ms != 0) {
        if (to == null)         to=new Timer(true);
        to.schedule(new TimerTask(){
          @Override public void run(){
            qctx.stop();
          }
        }
,ms);
      }
    }
    try {
      final StaticContext sctx=new StaticContext(qctx.context);
      for (      final Map.Entry<String,Value> it : bindings.entrySet()) {
        final String key=it.getKey();
        final Value val=it.getValue();
        if (key.isEmpty())         qctx.context(val,sctx);
 else         qctx.bind(key,val,sctx);
      }
      qctx.parseMain(string(qu),path,sctx);
      if (updating) {
        if (!sc.mixUpdates && !qctx.updating && !qctx.root.expr.isVacuous())         throw BXXQ_NOUPDATE.get(info);
      }
 else {
        if (qctx.updating)         throw BXXQ_UPDATING.get(info);
      }
      final ValueBuilder vb=new ValueBuilder();
      cache(qctx.iter(),vb,qctx);
      return vb;
    }
 catch (    final ProcException ex) {
      throw BXXQ_STOPPED.get(info);
    }
catch (    final QueryException ex) {
      throw ex.error() == BASX_PERM_X ? BXXQ_PERM_X.get(info,ex.getLocalizedMessage()) : ex.info(info);
    }
  }
  finally {
    user.perm(tmp,null);
    qc.proc(null);
    if (to != null)     to.cancel();
  }
}
