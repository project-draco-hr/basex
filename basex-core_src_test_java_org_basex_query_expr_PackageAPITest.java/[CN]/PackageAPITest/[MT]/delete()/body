{
  try {
    new RepoManager(context).delete("xyz");
    fail("Not installed package not detected.");
  }
 catch (  final QueryException ex) {
    check(null,ex,BXRE_WHICH_X);
  }
  new RepoInstall(REPO + "pkg3.xar",null).execute(context);
  assertTrue(context.repo.pkgDict().contains(token(PKG3ID)));
  final String pkg3Dir=normalize(PKG3ID);
  assertTrue(isDir(pkg3Dir));
  assertTrue(isFile(pkg3Dir + "/expath-pkg.xml"));
  assertTrue(isDir(pkg3Dir + "/pkg3"));
  assertTrue(isDir(pkg3Dir + "/pkg3/mod"));
  assertTrue(isFile(pkg3Dir + "/pkg3/mod/pkg3mod1.xql"));
  new RepoInstall(REPO + "pkg4.xar",null).execute(context);
  assertTrue(context.repo.pkgDict().contains(token(PKG4ID)));
  final String pkg4Dir=normalize(PKG4ID);
  assertTrue(isDir(pkg4Dir));
  assertTrue(isFile(pkg4Dir + "/expath-pkg.xml"));
  assertTrue(isDir(pkg4Dir + "/pkg4"));
  assertTrue(isDir(pkg4Dir + "/pkg4/mod"));
  assertTrue(isFile(pkg4Dir + "/pkg4/mod/pkg4mod1.xql"));
  try {
    new RepoManager(context).delete(PKG3ID);
    fail("Package involved in a dependency was deleted.");
  }
 catch (  final QueryException ex) {
    check(null,ex,BXRE_DEP_X_X);
  }
  new RepoDelete(PKG4,null).execute(context);
  assertFalse(context.repo.pkgDict().contains(token(PKG4ID)));
  assertFalse(isDir(pkg4Dir));
  new RepoDelete(PKG3ID,null).execute(context);
  assertFalse(context.repo.pkgDict().contains(token(PKG3ID)));
  assertFalse(isDir(pkg3Dir));
}
