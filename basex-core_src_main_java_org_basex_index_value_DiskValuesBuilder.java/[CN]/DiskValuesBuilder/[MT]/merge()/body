{
  final String f=DiskValues.getFileSuffix(text,tokenize);
  int sz=0;
  try (final DataOutput outL=new DataOutput(data.meta.dbfile(f + 'l'));final DataOutput outR=new DataOutput(data.meta.dbfile(f + 'r'))){
    outL.write4(0);
    final IntList ml=new IntList();
    final LongList il=new LongList();
    final DiskValuesMerger[] vm=new DiskValuesMerger[splits];
    for (int i=0; i < splits; ++i)     vm[i]=new DiskValuesMerger(data,text,tokenize,i);
    while (true) {
      checkStop();
      int min=-1;
      while (++min < splits && vm[min].values.length == 0)       ;
      if (min == splits)       break;
      ml.reset();
      for (int i=min; i < splits; ++i) {
        if (vm[i].values.length == 0)         continue;
        final int d=diff(vm[min].key,vm[i].key);
        if (d < 0)         continue;
        if (d > 0) {
          min=i;
          ml.reset();
        }
        ml.add(i);
      }
      final int ms=ml.size();
      for (int m=0; m < ms; ++m) {
        final DiskValuesMerger t=vm[ml.get(m)];
        final int vl=t.values.length;
        for (int l=4; l < vl; l+=Num.length(t.values,l)) {
          long value=Num.get(t.values,l);
          if (tokenize) {
            l+=Num.length(t.values,l);
            value=value << 32 | Num.get(t.values,l);
          }
          il.add(value);
        }
        t.next();
      }
      write(outL,outR,il,tokenize);
      ++sz;
    }
  }
   try (final DataAccess da=new DataAccess(data.meta.dbfile(f + 'l'))){
    da.write4(sz);
  }
 }
