{
  for (  final FuncCache fc : funcs.values()) {
    final StaticFuncCall call=fc.calls.isEmpty() ? null : fc.calls.get(0);
    if (fc.func == null) {
      final IntList arities=new IntList();
      for (      final FuncCache ofc : funcs.values()) {
        if (fc != ofc && ofc.func != null && call.name.eq(ofc.name()))         arities.add(ofc.func.arity());
      }
      if (!arities.isEmpty()) {
        final StringBuilder ext=new StringBuilder();
        final int as=arities.size();
        int min=Integer.MAX_VALUE, max=Integer.MIN_VALUE;
        for (int a=0; a < as; a++) {
          final int m=arities.get(a);
          if (m < min)           min=m;
          if (m > max)           max=m;
        }
        if (as > 1 && max - min + 1 == as) {
          ext.append(min).append('-').append(max);
        }
 else {
          for (int a=0; a < as; a++) {
            if (a != 0)             ext.append(a + 1 < as ? ", " : " or ");
            ext.append(arities.get(a));
          }
        }
        final int ar=call.exprs.length;
        throw FUNCTYPES_X_X_X_X.get(call.info,call.name.string(),ar,ar == 1 ? "" : "s",ext);
      }
      final QueryException qe=similarError(call.name,call.info);
      throw qe == null ? WHICHFUNC_X.get(call.info,call.name.prefixId()) : qe;
    }
    if (call != null) {
      if (fc.func.expr == null)       throw FUNCNOIMPL_X.get(call.info,call.name.string());
      qc.updating|=fc.func.updating;
    }
  }
}
