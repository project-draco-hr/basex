{
  int id=0;
  for (  final FuncCache fc : funcs.values()) {
    final StaticFuncCall call=fc.calls.isEmpty() ? null : fc.calls.get(0);
    if (fc.func == null) {
      int oid=0;
      final IntList al=new IntList();
      for (      final FuncCache ofc : funcs.values()) {
        if (oid++ == id)         continue;
        if (ofc.func != null && call.name.eq(ofc.name()))         al.add(ofc.func.arity());
      }
      if (!al.isEmpty()) {
        final StringBuilder exp=new StringBuilder();
        final int as=al.size();
        for (int a=0; a < as; a++) {
          if (a != 0)           exp.append(a + 1 < as ? "," : " or ");
          exp.append(al.get(a));
        }
        final int a=call.expr.length;
        throw (a == 1 ? FUNCTYPESG : FUNCTYPEPL).get(call.info,call.name.string(),a,exp);
      }
      throw FUNCUNKNOWN.get(call.info,call.name.string());
    }
    if (call != null) {
      if (fc.func.expr == null)       throw FUNCNOIMPL.get(call.info,call.name.string());
      qc.updating|=fc.func.updating;
    }
    id++;
  }
}
