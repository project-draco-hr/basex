{
  final ListIterator<Clause> iter=clauses.listIterator();
  while (iter.hasNext()) {
    final Clause c=iter.next();
    if (c instanceof Where) {
      final Where wh=(Where)c;
      if (wh.pred instanceof And) {
        iter.remove();
        for (        final Expr e : ((Arr)wh.pred).exprs)         iter.add(new Where(e,wh.info));
      }
    }
  }
  boolean changed;
  do {
    changed=forToLet(qc);
    changed|=slideLetsOut(qc);
    changed|=inlineLets(qc,scp);
    changed|=cleanDeadVars(qc);
    changed|=unnestFLWR(qc,scp);
    changed|=optimizeWhere(qc,scp);
    if (clauses.isEmpty()) {
      qc.compInfo(QueryText.OPTFLWOR,this);
      return ret;
    }
    if (clauses.getLast() instanceof For && ret instanceof VarRef) {
      final For last=(For)clauses.getLast();
      if (!last.var.checksType() && last.var.is(((VarRef)ret).var)) {
        clauses.removeLast();
        ret=last.expr;
        changed=true;
      }
    }
    if (!clauses.isEmpty() && clauses.getFirst() instanceof For) {
      final For fst=(For)clauses.getFirst();
      if (!fst.empty) {
        if (fst.expr instanceof GFLWOR) {
          qc.compInfo(QueryText.OPTFLAT,fst);
          final GFLWOR sub=(GFLWOR)fst.expr;
          clauses.set(0,new For(fst.var,null,fst.score,sub.ret,false,fst.info));
          if (fst.pos != null)           clauses.add(1,new Count(fst.pos,fst.info));
          clauses.addAll(0,sub.clauses);
          changed=true;
        }
 else         if (clauses.size() > 1 && clauses.get(1) instanceof Count) {
          final Count cnt=(Count)clauses.get(1);
          if (fst.pos != null) {
            final Let lt=new Let(cnt.var,new VarRef(cnt.info,fst.pos).optimize(qc,scp),false,cnt.info);
            clauses.set(1,lt.optimize(qc,scp));
          }
 else {
            clauses.set(0,new For(fst.var,cnt.var,fst.score,fst.expr,false,fst.info).optimize(qc,scp));
            clauses.remove(1);
          }
          changed=true;
        }
      }
    }
    if (!clauses.isEmpty()) {
      if (ret instanceof GFLWOR) {
        final GFLWOR sub=(GFLWOR)ret;
        if (sub.isFLWR()) {
          qc.compInfo(QueryText.OPTFLAT,this);
          clauses.addAll(sub.clauses);
          ret=sub.ret;
          changed=true;
        }
      }
      final TypeCheck tc=ret instanceof TypeCheck ? (TypeCheck)ret : null;
      if (ret instanceof GFLWOR || tc != null && tc.expr instanceof GFLWOR) {
        final GFLWOR sub=(GFLWOR)(tc == null ? ret : tc.expr);
        if (sub.clauses.getFirst() instanceof Let) {
          qc.compInfo(QueryText.OPTFLAT,this);
          final LinkedList<Clause> cls=sub.clauses;
          do {
            clauses.add(cls.removeFirst());
          }
 while (!cls.isEmpty() && cls.getFirst() instanceof Let);
          if (tc != null)           tc.expr=sub.optimize(qc,scp);
          ret=ret.optimize(qc,scp);
          changed=true;
        }
      }
    }
  }
 while (changed);
  mergeWheres();
  size=calcSize();
  if (size == 0 && !has(Flag.NDT) && !has(Flag.UPD)) {
    qc.compInfo(QueryText.OPTWRITE,this);
    return Empty.SEQ;
  }
  type=SeqType.get(ret.type().type,size);
  if (clauses.getFirst() instanceof Where) {
    final Where wh=(Where)clauses.removeFirst();
    return new If(info,wh.pred,clauses.isEmpty() ? ret : this,Empty.SEQ);
  }
  return this;
}
