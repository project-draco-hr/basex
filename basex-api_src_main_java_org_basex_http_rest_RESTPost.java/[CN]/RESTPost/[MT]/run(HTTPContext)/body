{
  parseOptions(http);
  String enc=http.req.getCharacterEncoding();
  if (enc == null)   enc=Token.UTF8;
  final byte[] in=new NewlineInput(http.req.getInputStream()).encoding(enc).content();
  validate(in);
  final Context ctx=http.context();
  DBNode doc;
  try {
    doc=new DBNode(new IOContent(in),ctx.options);
  }
 catch (  final IOException ex) {
    throw HTTPErr.BAD_REQUEST_X.thrw(ex);
  }
  QueryProcessor qp;
  RESTCode code;
  try {
    final SerializerOptions sopts=http.serialization;
    qp=new QueryProcessor("*/*:parameter",ctx).context(doc);
    for (    final Item param : qp.value()) {
      final String name=value("data(@name)",param,ctx);
      final String value=value("data(@value)",param,ctx);
      if (sopts.option(name) != null) {
        sopts.assign(name,value);
      }
 else       if (name.equals(WRAP)) {
        http.wrapping=Util.yes(value);
      }
 else {
        HTTPErr.UNKNOWN_PARAM_X.thrw(name);
      }
    }
    qp=new QueryProcessor("*/*:option",ctx).context(doc);
    for (    final Item it : qp.value()) {
      final String name=value("data(@name)",it,ctx);
      final String value=value("data(@value)",it,ctx);
      http.session().execute(new Set(name,value));
    }
    final Map<String,String[]> vars=new HashMap<String,String[]>();
    qp=new QueryProcessor("*/*:variable",ctx).context(doc);
    for (    final Item it : qp.value()) {
      final String name=value("data(@name)",it,ctx);
      final String value=value("data(@value)",it,ctx);
      final String type=value("data(@type)",it,ctx);
      vars.put(name,new String[]{value,type});
    }
    byte[] item=null;
    qp=new QueryProcessor("*/*:context/node()",ctx).context(doc);
    for (    final Item it : qp.value()) {
      if (item != null)       HTTPErr.MULTIPLE_CONTEXT_X.thrw();
      item=DataBuilder.stripNS((ANode)it,Token.token(RESTURI),ctx).serialize().toArray();
    }
    final String request=value("local-name(*)",doc,ctx);
    final String text=value("*/*:text/text()",doc,ctx);
    if (request.equals(COMMAND)) {
      code=new RESTCommand(text);
    }
 else     if (request.equals(RUN)) {
      code=new RESTRun(text,vars,item);
    }
 else {
      code=new RESTQuery(text,vars,item);
    }
    code.run(http);
  }
 catch (  final QueryException ex) {
    HTTPErr.BAD_REQUEST_X.thrw(ex);
  }
}
