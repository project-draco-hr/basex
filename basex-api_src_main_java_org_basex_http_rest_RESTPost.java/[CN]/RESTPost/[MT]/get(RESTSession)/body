{
  final HTTPContext http=rs.http;
  String enc=http.req.getCharacterEncoding();
  if (enc == null)   enc=Token.UTF8;
  final byte[] input=new NewlineInput(http.req.getInputStream()).encoding(enc).content();
  validate(input);
  final Context ctx=rs.context;
  final DBNode doc;
  try {
    doc=new DBNode(new IOContent(input));
  }
 catch (  final IOException ex) {
    throw HTTPCode.BAD_REQUEST_X.get(ex);
  }
  try {
    final SerializerOptions sopts=http.sopts();
    QueryProcessor qp=new QueryProcessor("*/*:parameter",ctx).context(doc);
    for (    final Item param : qp.value()) {
      final String name=value("@name",param,ctx);
      final String value=value("@value",param,ctx);
      if (sopts.option(name) != null) {
        sopts.assign(name,value);
      }
 else       if (name.equals(WRAP)) {
        http.wrapping=Util.yes(value);
      }
 else {
        throw HTTPCode.UNKNOWN_PARAM_X.get(name);
      }
    }
    qp=new QueryProcessor("*/*:option",ctx).context(doc);
    for (    final Item it : qp.value()) {
      final String name=value("@name",it,ctx).toUpperCase(Locale.ENGLISH);
      final String value=value("@value",it,ctx);
      ctx.options.assign(name,value);
    }
    final Map<String,String[]> vars=new HashMap<>();
    qp=new QueryProcessor("*/*:variable",ctx).context(doc);
    for (    final Item it : qp.value()) {
      final String name=value("@name",it,ctx);
      final String value=value("@value",it,ctx);
      final String type=value("@type",it,ctx);
      vars.put(name,new String[]{value,type});
    }
    qp=new QueryProcessor("*/*:context/node()",ctx).context(doc);
    String value=null;
    for (    final Item it : qp.value()) {
      if (value != null)       throw HTTPCode.MULTIPLE_CONTEXT_X.get();
      value=DataBuilder.stripNS((ANode)it,Token.token(RESTURI),ctx).serialize().toString();
    }
    final String request=value("local-name(*)",doc,ctx);
    final String text=value("*/*:text/text()",doc,ctx);
    if (request.equals(COMMAND))     return RESTCommand.get(rs,text);
    if (request.equals(RUN))     return RESTRun.get(rs,text,vars,value);
    return RESTQuery.get(rs,text,vars,value);
  }
 catch (  final QueryException ex) {
    throw HTTPCode.BAD_REQUEST_X.get(ex);
  }
}
