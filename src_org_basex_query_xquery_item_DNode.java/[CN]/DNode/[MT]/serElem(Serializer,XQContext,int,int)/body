{
  final int[] parent=new int[256];
  final byte[][] token=new byte[256][];
  int l=0;
  int p=pos;
  final int r=p;
  final int s=data.size;
  while (p < s) {
    final int kind=data.kind(p);
    final int pr=data.parent(p,kind);
    if (r != 1 && p > r && pr < r)     break;
    while (l > 0) {
      if (parent[l - 1] < pr)       break;
      ser.closeElement(token[--l]);
    }
    if (kind == Data.TEXT) {
      ser.text(data.text(p++));
    }
 else     if (kind == Data.COMM) {
      ser.comment(data.text(p++));
    }
 else     if (kind == Data.PI) {
      ser.pi(data.text(p++));
    }
 else {
      final byte[] name=data.tag(p);
      ser.startElement(name);
      final int ps=p + data.size(p,kind);
      final int as=p + data.attSize(p,kind);
      if (level != 0 || l != 0) {
        while (++p != as) {
          ser.attribute(data.attName(p),data.attValue(p));
        }
      }
 else {
        final TokenList names=new TokenList();
        final TokenList values=new TokenList();
        int pp=p;
        while (++p != as) {
          byte[] at=data.attName(p);
          names.add(at);
          values.add(data.attValue(p));
        }
        final int i=Token.indexOf(name,':');
        if (i != -1) {
          final byte[] pref=Token.substring(name,0,i);
          final byte[] uri=ctx.ns.uri(pref).str();
          final byte[] at=Token.concat(XMLNSCOL,pref);
          if (!names.contains(at)) {
            names.add(at);
            values.add(uri);
          }
        }
        int p2=pp;
        while (p2 != 0) {
          System.out.println(pp + "/" + p2);
          pp=p2;
          p2=data.parent(p2,data.kind(p2));
        }
        final int pps=pp + data.attSize(pp,data.kind(pp));
        while (++pp != pps) {
          byte[] at=data.attName(pp);
          if (Token.startsWith(at,XQTokens.XMLNS) && !names.contains(at)) {
            names.add(at);
            values.add(data.attValue(pp));
          }
        }
        for (int n=0; n < names.size; n++) {
          ser.attribute(names.list[n],values.list[n]);
        }
      }
      if (as == ps) {
        ser.emptyElement();
      }
 else {
        ser.finishElement();
        token[l]=name;
        parent[l++]=pr;
      }
    }
  }
  while (l > 0)   ser.closeElement(token[--l]);
}
