{
  final double e=exprs.length == 2 ? checkDbl(exprs[1],ctx) : 0;
  double d=0;
  if (exprs.length > 0 && func != _MATH_CRC32) {
    final Item it=exprs[0].item(ctx,info);
    if (it == null)     return null;
    d=checkDbl(it,ctx);
  }
switch (func) {
case _MATH_PI:
    return Dbl.get(PI);
case _MATH_E:
  return Dbl.get(E);
case _MATH_SQRT:
return Dbl.get(sqrt(d));
case _MATH_SIN:
return Dbl.get(sin(d));
case _MATH_COS:
return Dbl.get(cos(d));
case _MATH_TAN:
return Dbl.get(tan(d));
case _MATH_ASIN:
return Dbl.get(asin(d));
case _MATH_ACOS:
return Dbl.get(acos(d));
case _MATH_ATAN:
return Dbl.get(atan(d));
case _MATH_EXP:
return Dbl.get(exp(d));
case _MATH_EXP10:
return Dbl.get(pow(10,d));
case _MATH_LOG:
return Dbl.get(log(d));
case _MATH_LOG10:
return Dbl.get(log10(d));
case _MATH_ATAN2:
return Dbl.get(atan2(d,e));
case _MATH_POW:
return Dbl.get(power(d,e));
case _MATH_SINH:
return Dbl.get(sinh(d));
case _MATH_COSH:
return Dbl.get(cosh(d));
case _MATH_TANH:
return Dbl.get(tanh(d));
case _MATH_CRC32:
return crc32(ctx);
default :
return super.item(ctx,ii);
}
}
