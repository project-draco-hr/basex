{
  final XQuery query=new XQuery("<XMark-result-Q20> { \n" + "            let $auction := (/) return \n" + "               <result> \n"+ "                  <preferred> {count($auction/site/people/person/profile[@income >= 100000.0])} </preferred>\n"+ "                  <standard> { count( $auction/site/people/person/ profile[@income < 100000.0 and @income >= 30000.0] ) } </standard>\n"+ "                  <challenge> {count($auction/site/people/person/profile[@income < 30000.0])} </challenge>\n"+ "                  <na> { count( for $p in $auction/site/people/person where empty($p/profile/@income) return $p ) } </na>\n"+ "               </result> } </XMark-result-Q20>",ctx);
  try {
    query.context(node(file("app/XMark/XMarkAuction.xml")));
    result=new QT3Result(query.value());
  }
 catch (  final Throwable trw) {
    result=new QT3Result(trw);
  }
 finally {
    query.close();
  }
  test(assertSerialization("<XMark-result-Q20><result><preferred>12</preferred><standard>227</standard><challenge>150</challenge><na>375</na></result></XMark-result-Q20>",false));
}
