{
  if (not != n.not || pre() != n.pre())   return false;
  boolean mp=morePos();
  boolean nmp=n.morePos();
  if (!mp || !nmp) {
    reset();
    n.reset();
    return false;
  }
  final IntList il=new IntList();
  final IntList pn=new IntList();
  pn.add(Math.max(poi.list[0],n.poi.list[0]));
  il.add(pre());
  while (mp && nmp) {
    final int d=nextPos() - n.nextPos() + w;
    if (d == 0) {
      add(il,pn);
      if (w > 0)       n.add(il,pn);
      mp=morePos();
      nmp=n.morePos();
    }
 else     if (d < 0) {
      if (w == 0)       add(il,pn);
      mp=morePos();
    }
 else {
      if (w == 0)       n.add(il,pn);
      nmp=n.morePos();
    }
  }
  if (w == 0) {
    while (mp) {
      add(il,pn);
      mp=morePos();
    }
    while (nmp) {
      n.add(il,pn);
      nmp=n.morePos();
    }
  }
  pos=il;
  poi=pn;
  reset();
  n.reset();
  return pos.size > 1;
}
