{
  final Args arg=new Args(args);
  boolean o=true;
  while (arg.more() && o) {
    if (arg.dash()) {
      final char c=arg.next();
      if (c == 'r') {
        reporting=true;
        currTime=true;
      }
 else       if (c == 'p') {
        path=arg.string();
      }
 else       if (c == 't') {
        currTime=true;
      }
 else       if (c == 'v') {
        verbose=true;
      }
 else {
        o=false;
      }
    }
 else {
      single=arg.string();
      maxout*=10;
    }
  }
  if (!o) {
    BaseX.outln(NL + BaseX.name(this) + " Test Suite"+ NL+ " [pat] perform only tests with the specified pattern"+ NL+ " -h show this help"+ NL+ " -p change path"+ NL+ " -r create report"+ NL+ " -v verbose output");
    return;
  }
  queries=path + "Queries/XQuery/";
  expected=path + "ExpectedTestResults/";
  results=path + "ReportingResults/Results/";
  report=path + "ReportingResults/";
  sources=path + "TestSources/";
  final SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
  final String dat=sdf.format(Calendar.getInstance().getTime());
  final Performance perf=new Performance();
  context.prop.set(Prop.XQFORMAT,false);
  context.prop.set(Prop.MAINMEM,false);
  context.prop.set(Prop.CHOP,false);
  new CreateDB(path + input).execute(context);
  data=context.data();
  final Nodes root=new Nodes(0,data);
  BaseX.outln(NL + BaseX.name(this) + " Test Suite "+ text("/*:test-suite/@version",root));
  BaseX.outln(NL + "Caching Sources...");
  for (  final int s : nodes("//*:source",root).nodes) {
    final Nodes srcRoot=new Nodes(s,data);
    final String val=(path + text("@FileName",srcRoot)).replace('\\','/');
    srcs.put(text("@ID",srcRoot),val);
  }
  BaseX.outln("Caching Modules...");
  for (  final int s : nodes("//*:module",root).nodes) {
    final Nodes srcRoot=new Nodes(s,data);
    final String val=(path + text("@FileName",srcRoot)).replace('\\','/');
    mods.put(text("@ID",srcRoot),val);
  }
  BaseX.outln("Caching Collections...");
  for (  final int c : nodes("//*:collection",root).nodes) {
    final Nodes nodes=new Nodes(c,data);
    final String cname=text("@ID",nodes);
    final TokenList dl=new TokenList();
    final Nodes doc=nodes("*:input-document",nodes);
    for (int d=0; d < doc.size(); d++) {
      dl.add(token(sources + string(data.atom(doc.nodes[d])) + ".xml"));
    }
    colls.put(cname,dl.finish());
  }
  init(root);
  if (reporting) {
    BaseX.outln("Delete old results...");
    delete(new File[]{new File(results)});
  }
  BaseX.out("Parsing Queries");
  if (verbose)   BaseX.outln();
  final Nodes nodes=nodes("//*:test-case",root);
  for (int t=0; t < nodes.size(); t++) {
    if (!parse(new Nodes(nodes.nodes[t],data)))     break;
    if (!verbose && t % 1000 == 0)     BaseX.out(".");
  }
  BaseX.outln();
  final String time=perf.getTimer();
  final int total=ok + ok2 + err+ err2;
  BaseX.outln("Writing log file..." + NL);
  BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(pathlog),UTF8));
  bw.write("TEST RESULTS ==================================================");
  bw.write(NL + NL + "Total #Queries: "+ total+ NL);
  bw.write("Correct / Empty Results: " + ok + " / "+ ok2+ NL);
  bw.write("Conformance (w/Empty Results): ");
  bw.write(pc(ok,total) + " / " + pc(ok + ok2,total)+ NL);
  bw.write("Wrong Results / Errors: " + err + " / "+ err2+ NL);
  bw.write("WRONG =========================================================");
  bw.write(NL + NL + logErr+ NL);
  bw.write("WRONG (ERRORS) ================================================");
  bw.write(NL + NL + logErr2+ NL);
  bw.write("CORRECT? (EMPTY) ==============================================");
  bw.write(NL + NL + logOK2+ NL);
  bw.write("CORRECT =======================================================");
  bw.write(NL + NL + logOK+ NL);
  bw.write("===============================================================");
  bw.close();
  bw=new BufferedWriter(new FileWriter(pathhis,true));
  bw.write(dat + "\t" + ok+ "\t"+ ok2+ "\t"+ err+ "\t"+ err2+ NL);
  bw.close();
  if (reporting) {
    bw=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(report + NAME + ".xml"),UTF8));
    write(bw,report + NAME + "Pre.xml");
    bw.write(logFile.toString());
    write(bw,report + NAME + "Pos.xml");
    bw.close();
  }
  BaseX.outln("Total #Queries: " + total);
  BaseX.outln("Correct / Empty results: " + ok + " / "+ ok2);
  BaseX.out("Conformance (w/empty results): ");
  BaseX.outln(pc(ok,total) + " / " + pc(ok + ok2,total));
  BaseX.outln("Total Time: " + time);
  context.close();
}
