{
  writeIndex(csize++);
  if (!merge)   return;
  final DataOutput outX=new DataOutput(data.meta.dbfile(DATAFTX + 'x'));
  final DataOutput outY=new DataOutput(data.meta.dbfile(DATAFTX + 'y'));
  final DataOutput outZ=new DataOutput(data.meta.dbfile(DATAFTX + 'z'));
  final IntList ind=new IntList();
  final FTList[] v=new FTList[csize];
  for (int b=0; b < csize; ++b)   v[b]=new FTFuzzyList(data,b);
  final IntList il=new IntList();
  while (check(v)) {
    int min=0;
    il.reset();
    il.add(min);
    for (int i=0; i < csize; ++i) {
      if (min == i || v[i].tok.length == 0)       continue;
      final int l=v[i].tok.length - v[min].tok.length;
      final int d=diff(v[min].tok,v[i].tok);
      if (l < 0 || l == 0 && d > 0 || v[min].tok.length == 0) {
        min=i;
        il.reset();
        il.add(min);
      }
 else       if (d == 0 && v[i].tok.length > 0) {
        il.add(i);
      }
    }
    if (ind.size() == 0 || ind.get(ind.size() - 2) < v[min].tok.length) {
      ind.add(v[min].tok.length);
      ind.add((int)outY.size());
    }
    outY.writeBytes(v[min].tok);
    outY.write5(outZ.size());
    outY.write4(merge(outZ,il,v));
  }
  writeInd(outX,ind,ind.get(ind.size() - 2) + 1,(int)outY.size());
  outX.close();
  outY.close();
  outZ.close();
}
