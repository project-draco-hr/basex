{
  final int[] cnn=next.get(cn);
  if (cn == 0) {
    if (cnn.length > 3) {
      final int p=pointer(cn);
      if (Token.diff(tokens.get(next.get(cnn[p])[0])[0],v[0]) != 0) {
        final int[] e=new int[2 + off.length];
        e[0]=tokens.size();
        tokens.add(v);
        e[1]=s;
        System.arraycopy(off,0,e,2,off.length);
        next.add(e);
        insertNode(cn,next.size() - 1,p + 1);
        return next.size() - 1;
      }
      return insertNode(cnn[p],v,s,off);
    }
  }
  final byte[] is=cnn[0] == -1 ? null : intersection(tokens.get(cnn[0]),v);
  byte[] r1=cnn[0] == -1 ? null : tokens.get(next.get(cn)[0]);
  byte[] r2=v;
  if (is != null) {
    r1=bytes(r1,is.length,r1.length);
    r2=bytes(v,is.length,v.length);
  }
  if (is != null) {
    if (r1 == null) {
      if (r2 != null) {
        final int p=pointer(cn);
        if (p == 0 || Token.diff(tokens.get(next.get(cnn[p])[0])[0],r2[0]) != 0) {
          final int[] e=new int[2 + off.length];
          e[0]=tokens.size();
          tokens.add(r2);
          e[1]=s;
          System.arraycopy(off,0,e,2,off.length);
          next.add(e);
          insertNode(cn,next.size() - 1,p + 1);
          return next.size() - 1;
        }
        return insertNode(cnn[p],r2,s,off);
      }
    }
 else {
      if (r2 == null) {
        final int[] oe=new int[3 + off.length];
        tokens.set(cnn[0],is);
        oe[0]=cnn[0];
        System.arraycopy(off,0,oe,3,off.length);
        oe[2]=s;
        cnn[0]=tokens.size();
        tokens.add(r1);
        next.add(cnn);
        oe[1]=next.size() - 1;
        next.set(cn,oe);
        return next.size() - 1;
      }
      tokens.set(cnn[0],is);
      int[] ne=new int[5];
      ne[0]=cnn[0];
      if (Token.diff(r2[0],r1[0]) < 0) {
        ne[1]=next.size();
        ne[2]=next.size() + 1;
      }
 else {
        ne[1]=next.size() + 1;
        ne[2]=next.size();
      }
      ne[3]=0;
      ne[4]=0;
      next.set(cn,ne);
      ne=new int[2 + off.length];
      ne[0]=tokens.size();
      tokens.add(r2);
      ne[1]=s;
      System.arraycopy(off,0,ne,2,off.length);
      next.add(ne);
      ne=new int[cnn.length];
      System.arraycopy(cnn,0,ne,0,ne.length);
      ne[0]=tokens.size();
      tokens.add(r1);
      next.add(ne);
      return next.size() - 1;
    }
  }
 else {
    final int[] ne=new int[2 + off.length];
    ne[0]=tokens.size();
    tokens.add(v);
    System.arraycopy(off,0,ne,2,off.length);
    ne[1]=s;
    next.add(ne);
    final int p=cnn.length - 2;
    insertNode(cn,next.size() - 1,p);
    return next.size() - 1;
  }
  return -1;
}
