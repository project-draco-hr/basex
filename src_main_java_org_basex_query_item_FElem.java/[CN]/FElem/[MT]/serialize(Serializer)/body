{
  final byte[] tag=name.str();
  final byte[] uri=name.uri.str();
  ser.openElement(tag);
  final byte[] dn=ser.dn;
  boolean xmlns=false;
  if (ser.level() == 1) {
    final Atts nns=nsScope();
    for (int a=0; a < nns.size; a++) {
      if (nns.key[a].length == 0) {
        xmlns=true;
        if (Token.eq(ser.dn,nns.val[a]))         continue;
        ser.dn=nns.val[a];
      }
      ser.namespace(nns.key[a],nns.val[a]);
    }
    for (int p=ser.ns.size - 1; p >= 0 && !xmlns; p--) {
      if (ser.ns.key[p].length != 0)       continue;
      xmlns=true;
      ser.dn=ser.ns.val[p];
      ser.namespace(Token.EMPTY,ser.ns.val[p]);
    }
  }
 else {
    if (ns != null) {
      for (int p=ns.size - 1; p >= 0; p--) {
        final byte[] key=ns.key[p];
        final int i=ser.ns.get(key);
        if (i == -1 || !Token.eq(ser.ns.val[i],uri)) {
          ser.namespace(key,ns.val[p]);
          xmlns|=key.length == 0;
        }
      }
    }
  }
  if (!xmlns && !name.ns() && !Token.eq(uri,ser.dn))   ser.namespace(Token.EMPTY,uri);
  ser.dn=uri;
  for (int n=0; n < atts.size(); n++) {
    final Nod nod=atts.get(n);
    final QNm atn=nod.qname();
    if (atn.ns()) {
      if (!NSGlobal.standard(atn.uri.str())) {
        final byte[] pre=atn.pref();
        final int i=ser.ns.get(pre);
        if (i == -1)         ser.namespace(pre,atn.uri.str());
      }
    }
    ser.attribute(atn.str(),nod.str());
  }
  for (int n=0; n < children.size(); n++)   children.get(n).serialize(ser);
  ser.closeElement();
  ser.dn=dn;
}
