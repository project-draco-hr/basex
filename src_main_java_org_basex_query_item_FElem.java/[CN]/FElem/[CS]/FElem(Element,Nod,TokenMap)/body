{
  super(Type.ELM);
  final String nu=elem.getNamespaceURI();
  name=new QNm(token(elem.getNodeName()),Uri.uri(nu == null ? EMPTY : token(nu)));
  par=p;
  final String b=elem.getBaseURI();
  base=b == null ? EMPTY : token(b);
  ns=new Atts();
  final NamedNodeMap at=elem.getAttributes();
  final int as=at.getLength();
  final Nod[] attArr=new Nod[as];
  int pos=0;
  for (int i=0; i < as; ++i) {
    final Attr att=(Attr)at.item(i);
    final byte[] nm=token(att.getName()), uri=token(att.getValue());
    if (Token.eq(nm,XMLNS)) {
      ns.add(EMPTY,uri);
    }
 else     if (startsWith(nm,XMLNSC)) {
      ns.add(ln(nm),uri);
    }
 else {
      attArr[pos++]=new FAttr(att,this);
    }
  }
  atts=new NodIter(attArr,pos);
  for (int i=0; i < ns.size; i++)   nss.add(ns.key[i],ns.val[i]);
  if (p == null) {
    nsScope(elem.getParentNode(),nss);
    for (    final byte[] key : nss.keys()) {
      if (!ns.contains(key))       ns.add(key,nss.get(key));
    }
  }
  final byte[] pref=name.pref(), uri=name.uri.atom(), old=nss.get(pref);
  if (old == null || !Token.eq(uri,old)) {
    ns.add(pref,uri);
    nss.add(pref,uri);
  }
  final NodeList ch=elem.getChildNodes();
  final int s=ch.getLength();
  final Nod[] childArr=new Nod[s];
  children=new NodIter(childArr,childArr.length);
  for (int i=0; i < ch.getLength(); ++i) {
    final Node child=ch.item(i);
switch (child.getNodeType()) {
case Node.TEXT_NODE:
      childArr[i]=new FTxt((Text)child,this);
    break;
case Node.COMMENT_NODE:
  childArr[i]=new FComm((Comment)child,this);
break;
case Node.PROCESSING_INSTRUCTION_NODE:
childArr[i]=new FPI((ProcessingInstruction)child,this);
break;
case Node.ELEMENT_NODE:
childArr[i]=new FElem((Element)child,this,nss);
break;
default :
break;
}
}
}
