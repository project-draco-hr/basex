{
  new Close().execute(context);
  final boolean mem=prop.is(Prop.MAINMEM);
  if (!mem && context.pinned(db))   return error(DBLOCKED,db);
  final Builder builder=mem ? new MemBuilder(p) : prop.is(Prop.NATIVEDATA) ? new NativeBuilder(p) : new DiskBuilder(p);
  progress(builder);
  String err=null;
  try {
    final Data data=builder.build(db);
    if (mem) {
      context.openDB(data);
    }
 else {
      index(data);
      data.close();
      final Process pr=new Open(db);
      if (!pr.execute(context))       return error(pr.info());
    }
    return info(DBCREATED,db,perf);
  }
 catch (  final FileNotFoundException ex) {
    Main.debug(ex);
    err=Main.info(FILEWHICH,p.io);
  }
catch (  final ProgressException ex) {
    err=PROGERR;
  }
catch (  final IOException ex) {
    Main.debug(ex);
    final String msg=ex.getMessage();
    err=Main.info(msg != null ? msg : args[0]);
  }
catch (  final Throwable ex) {
    Main.debug(ex);
    if (ex instanceof OutOfMemoryError) {
      Performance.gc(2);
      err=PROCOUTMEM;
    }
 else {
      err=Main.info(CREATEERR,args[0]);
    }
  }
  if (!mem) {
    try {
      builder.close();
    }
 catch (    final IOException ex) {
      Main.debug(ex);
    }
  }
  return error(err);
}
