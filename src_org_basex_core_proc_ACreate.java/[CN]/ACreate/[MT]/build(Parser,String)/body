{
  String err=null;
  Builder builder=null;
  try {
    if (Prop.onthefly) {
      if (Context.POOL.check(db))       return error(DBINUSE);
      builder=new MemBuilder();
      progress(builder);
      final Data data=builder.build(p,db);
      context.data(data);
      Context.POOL.add(data);
    }
 else {
      context.close();
      if (Context.POOL.check(db))       return error(DBINUSE);
      final Performance pp=new Performance();
      builder=new DiskBuilder();
      progress(builder);
      final Data data=builder.build(p,db);
      if (Prop.allInfo)       info(CREATETABLE + NL,pp.getTimer());
      builder=null;
      index(data);
      context.data(data);
      Context.POOL.add(data);
    }
    return Prop.info ? info(DBCREATED,db,perf.getTimer()) : true;
  }
 catch (  final FileNotFoundException ex) {
    BaseX.debug(ex);
    err=BaseX.info(FILEWHICH,p.io);
  }
catch (  final ProgressException ex) {
    err=CANCELCREATE;
  }
catch (  final IOException ex) {
    BaseX.debug(ex);
    final String msg=ex.getMessage();
    err=BaseX.info(msg != null ? msg : args[0]);
  }
catch (  final Exception ex) {
    BaseX.debug(ex);
    err=BaseX.info(CREATEERR,args[0]);
  }
  try {
    if (builder != null)     builder.close();
  }
 catch (  final IOException ex) {
    BaseX.debug(ex);
  }
  DropDB.drop(db);
  return error(err);
}
