{
  new Close().execute(context);
  final boolean mem=db == null || prop.is(Prop.MAINMEM);
  if (!mem && context.pinned(db))   return error(DBINUSE);
  final Builder builder=mem ? new MemBuilder(p) : prop.is(Prop.NATIVEDATA) ? new NativeBuilder(p) : new DiskBuilder(p);
  progress(builder);
  String err=null;
  try {
    final Data data=builder.build(db == null ? "" : db + ".tmp");
    if (mem) {
      context.openDB(data);
    }
 else {
      index(data);
      data.close();
      move(db,p.prop);
      new Open(db).execute(context);
    }
    return info(DBCREATED,db,perf.getTimer());
  }
 catch (  final FileNotFoundException ex) {
    BaseX.debug(ex);
    err=BaseX.info(FILEWHICH,p.io);
  }
catch (  final ProgressException ex) {
    err=PROGERR;
  }
catch (  final IOException ex) {
    BaseX.debug(ex);
    final String msg=ex.getMessage();
    err=BaseX.info(msg != null ? msg : args[0]);
  }
catch (  final Exception ex) {
    BaseX.debug(ex);
    err=BaseX.info(CREATEERR,args[0]);
  }
  try {
    builder.close();
  }
 catch (  final IOException ex) {
    BaseX.debug(ex);
  }
  DropDB.drop(db,prop);
  return error(err);
}
