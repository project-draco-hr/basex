{
  final XQuery query=new XQuery("\n" + "        declare namespace fn = \"sudoku\";\n" + "        declare variable $board as xs:integer+ := \n"+ "        \t( 1,0,0, 3,0,0, 6,0,0, 0,2,0, 5,0,0, 0,0,4, 0,0,9, 0,0,0, \n"+ "        \t5,2,0, 0,0,0, 9,6,3, 0,0,0, 7,1,6, 0,0,0, 0,0,0, 0,0,0, \n"+ "        \t0,8,0, 0,4,0, 9,0,0, 0,0,5, 3,0,7, 8,0,0, 4,0,6, 0,0,0, \n"+ "        \t3,5,0, 0,0,0, 0,0,1);\n"+ "        declare variable $rowStarts as xs:integer+ := (1, 10, 19, 28, 37, 46, 55, 64,73);\n"+ "        declare variable $groups as xs:integer+ := \n"+ "        \t( 1,1,1, 2,2,2, 3,3,3, 1,1,1, 2,2,2, 3,3,3, 1,1,1, 2,2,2, 3,3,3, 4,4,4, \n"+ "        \t5,5,5, 6,6,6, 4,4,4, 5,5,5, 6,6,6, 4,4,4, 5,5,5, 6,6,6, 7,7,7, 8,8,8, \n"+ "        \t9,9,9, 7,7,7, 8,8,8, 9,9,9, 7,7,7, 8,8,8, 9,9,9 );\n"+ "        declare function fn:getRow ($board as xs:integer+, $index as xs:integer) as xs:integer+ { \n"+ "        \tlet $rowStart := floor(($index - 1) div 9) * 9 \n"+ "        \treturn one-or-more($board[position() > $rowStart and position() <= $rowStart + 9]) \n"+ "        };\n"+ "        declare function fn:getCol ($board as xs:integer+, $index as xs:integer) as xs:integer+ { \n"+ "        \tlet $gap := ($index - 1) mod 9, \n"+ "        \t    $colIndexes := for $x in $rowStarts \n"+ "        \t    \t\t       return $x + $gap \n"+ "        \treturn one-or-more($board[position() = $colIndexes]) \n"+ "        };\n"+ "        declare function fn:getGroup ($board as xs:integer+, $index as xs:integer) as xs:integer+ { \n"+ "        \tlet $group := $groups[$index] \n"+ "        \treturn one-or-more($board[for $x in position() return $groups[$x]= $group]) \n"+ "        };\n"+ "        declare function fn:getAllowedValues ($board as xs:integer+, $index as xs:integer) as xs:integer* { \n"+ "        \tlet $existingValues := (fn:getRow($board, $index), fn:getCol($board, $index), fn:getGroup($board, $index)) \n"+ "        \treturn for $x in (1 to 9) return if (not($x = $existingValues)) then $x else () \n"+ "        };\n"+ "        declare function fn:tryValues($board as xs:integer+, $emptyCells as xs:integer+, $possibleValues as xs:integer+) as xs:integer* { \n"+ "        \tlet $index as xs:integer := $emptyCells[1], \n"+ "        \t    $newBoard as xs:integer+ := ($board[position() <$index], $possibleValues[1], $board[position() > $index]), \n"+ "        \t    $result as xs:integer* := fn:populateValues($newBoard, $emptyCells[position() != 1]) \n"+ "        \treturn if (empty($result)) then if (count($possibleValues) > 1) then fn:tryValues($board, $emptyCells, one-or-more($possibleValues[position() != 1])) else () else $result \n"+ "        };\n"+ "        declare function fn:populateValues($board as xs:integer+, $emptyCells as xs:integer*) as xs:integer*{ \n"+ "        \tif (not(empty($emptyCells))) \n"+ "        \tthen let $index as xs:integer := exactly-one($emptyCells[1]), \n"+ "        \t\t\t $possibleValues as xs:integer* := distinct-values(fn:getAllowedValues($board, $index)) \n"+ "        \t\t return if (count($possibleValues) > 1) \n"+ "        \t\t        then fn:tryValues($board, one-or-more($emptyCells), one-or-more($possibleValues)) \n"+ "        \t\t        else if (count($possibleValues) = 1) \n"+ "        \t\t        then let $newBoard as xs:integer+ :=($board[position() < $index], \n"+ "        \t\t                   exactly-one($possibleValues[1]), $board[position() > $index]) \n"+ "        \t\t             return fn:populateValues($newBoard, $emptyCells[position() != 1]) \n"+ "        \t\t        else () \n"+ "        \telse $board \n"+ "        };\n"+ "        declare function fn:solveSudoku ($startBoard as xs:integer+) as xs:integer+{ \n"+ "        \tlet $emptyCells as xs:integer* :=\n"+ "        \t\t\tfor $x in (1 to 81) \n"+ "        \t\t\treturn if ($startBoard[$x] = 0) then $x else (), \n"+ "        \t\t$endBoard as xs:integer* :=fn:populateValues($startBoard,$emptyCells) \n"+ "        \treturn if (empty($endBoard)) then $startBoard else one-or-more($endBoard)\n"+ "        };\n"+ "        declare function fn:drawResult ($board as xs:integer+) as element(){ \n"+ "        \t<html><head><title>Sudoku - XSLT</title><style>table {{ border-collapse: collapse; border: 1px solid black; }} td {{ padding: 10px; }} .norm {{ border-left: 1px solid #CCC; border-top: 1px solid #CCC; }} .csep {{ border-left: 1px solid black; }} .rsep {{ border-top: 1px solid black; }}</style></head><body>{fn:drawBoard($board)}</body></html> };\n"+ "        declare function fn:drawBoard ($board as xs:integer+) as element(){ \n"+ "        \t<table>{for $i in 1 to 9 return \n"+ "        \t\t<tr>{for $j at $p in 1 to 9 \n"+ "        \t\t\t  let $pos := (($i - 1) * 9) + $j \n"+ "        \t\t\t  return <td class=\"{if ($p mod 3 = 1) then 'csep' else ('norm')} {if ($i mod 3 = 1) then 'rsep' else ('norm')}\"> {$board[$pos]}</td> \n"+ "        \t\t\t  }</tr> }</table> \n"+ "        };\n"+ "        fn:drawResult(fn:solveSudoku($board))\n"+ "      ",ctx);
  try {
    result=new QT3Result(query.value());
  }
 catch (  final Throwable trw) {
    result=new QT3Result(trw);
  }
 finally {
    query.close();
  }
  test(assertSerialization("<html><head><title>Sudoku - XSLT</title><style>table { border-collapse: collapse; border: 1px solid black; } td { padding: 10px; } .norm { border-left: 1px solid #CCC; border-top: 1px solid #CCC; } .csep { border-left: 1px solid black; } .rsep { border-top: 1px solid black; }</style></head><body><table><tr><td class=\"csep rsep\">1</td><td class=\"norm rsep\">8</td><td class=\"norm rsep\">5</td><td class=\"csep rsep\">3</td><td class=\"norm rsep\">4</td><td class=\"norm rsep\">2</td><td class=\"csep rsep\">6</td><td class=\"norm rsep\">7</td><td class=\"norm rsep\">9</td></tr><tr><td class=\"csep norm\">6</td><td class=\"norm norm\">2</td><td class=\"norm norm\">7</td><td class=\"csep norm\">5</td><td class=\"norm norm\">9</td><td class=\"norm norm\">8</td><td class=\"csep norm\">1</td><td class=\"norm norm\">3</td><td class=\"norm norm\">4</td></tr><tr><td class=\"csep norm\">4</td><td class=\"norm norm\">3</td><td class=\"norm norm\">9</td><td class=\"csep norm\">6</td><td class=\"norm norm\">1</td><td class=\"norm norm\">7</td><td class=\"csep norm\">5</td><td class=\"norm norm\">2</td><td class=\"norm norm\">8</td></tr><tr><td class=\"csep rsep\">2</td><td class=\"norm rsep\">4</td><td class=\"norm rsep\">8</td><td class=\"csep rsep\">9</td><td class=\"norm rsep\">6</td><td class=\"norm rsep\">3</td><td class=\"csep rsep\">7</td><td class=\"norm rsep\">1</td><td class=\"norm rsep\">5</td></tr><tr><td class=\"csep norm\">7</td><td class=\"norm norm\">1</td><td class=\"norm norm\">6</td><td class=\"csep norm\">2</td><td class=\"norm norm\">5</td><td class=\"norm norm\">4</td><td class=\"csep norm\">8</td><td class=\"norm norm\">9</td><td class=\"norm norm\">3</td></tr><tr><td class=\"csep norm\">5</td><td class=\"norm norm\">9</td><td class=\"norm norm\">3</td><td class=\"csep norm\">7</td><td class=\"norm norm\">8</td><td class=\"norm norm\">1</td><td class=\"csep norm\">2</td><td class=\"norm norm\">4</td><td class=\"norm norm\">6</td></tr><tr><td class=\"csep rsep\">9</td><td class=\"norm rsep\">6</td><td class=\"norm rsep\">4</td><td class=\"csep rsep\">1</td><td class=\"norm rsep\">2</td><td class=\"norm rsep\">5</td><td class=\"csep rsep\">3</td><td class=\"norm rsep\">8</td><td class=\"norm rsep\">7</td></tr><tr><td class=\"csep norm\">8</td><td class=\"norm norm\">7</td><td class=\"norm norm\">1</td><td class=\"csep norm\">4</td><td class=\"norm norm\">3</td><td class=\"norm norm\">6</td><td class=\"csep norm\">9</td><td class=\"norm norm\">5</td><td class=\"norm norm\">2</td></tr><tr><td class=\"csep norm\">3</td><td class=\"norm norm\">5</td><td class=\"norm norm\">2</td><td class=\"csep norm\">8</td><td class=\"norm norm\">7</td><td class=\"norm norm\">9</td><td class=\"csep norm\">4</td><td class=\"norm norm\">6</td><td class=\"norm norm\">1</td></tr></table></body></html>",false));
}
