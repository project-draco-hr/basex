{
  int[][] d;
  int[] ds;
  byte[] sbb=new byte[]{};
  byte[] b;
  if (nodes[nid][0] > 0) {
    sbb=new byte[nodes[nid][0]];
    System.arraycopy(nodes[nid],1,sbb,0,sbb.length);
    sb.append(new String(sbb));
  }
  d=getDataFromDataArray(nid);
  if (d != null) {
    if (sb.length() < index.length - 1 && index[sb.length()] == null) {
      index[sb.length()]=new IntArrayList();
      index[0]=((Integer)index[0]).intValue() + 1;
    }
    ds=new int[1 + sb.length() + 2 * d[0].length];
    b=sb.toString().getBytes();
    for (int k=0; k < b.length; k++) {
      ds[k]=b[k];
    }
    ds[sb.length()]=d[0].length;
    System.arraycopy(d[0],0,ds,1 + sb.length(),d[0].length);
    System.arraycopy(d[1],0,ds,1 + sb.length() + d[0].length,d[1].length);
    ((IntArrayList)index[sb.length()]).add(ds);
    ds=getNextNodes(nid);
    if (ds != null) {
      for (      int i : ds) {
        doPreOrderTravWISSRec(i,sb,index);
      }
    }
    sb.delete(sb.length() - sbb.length,sb.length());
  }
 else {
    ds=getNextNodes(nid);
    if (ds != null) {
      for (      int i : ds) {
        doPreOrderTravWISSRec(i,sb,index);
      }
    }
    sb.delete(sb.length() - sbb.length,sb.length());
  }
  return index;
}
