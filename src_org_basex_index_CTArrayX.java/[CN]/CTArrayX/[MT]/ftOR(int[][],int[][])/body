{
  int[][] val1=values1;
  int[][] val2=values2;
  if (val1 == null)   return val2;
  if (val2 == null)   return val1;
  final int[][] maxResult=new int[2][val1[0].length + val2[0].length];
  final int max=Math.max(val1[0].length,val2[0].length);
  if (max == val1.length) {
    final int[][] tmp=val1;
    val1=val2;
    val2=tmp;
  }
  int i=0;
  int k=0;
  int counter=0;
  int cmpResult;
  while (val1[0].length > i) {
    if (k >= val2[0].length) {
      break;
    }
    cmpResult=compareIntArrayEntry(val1[0][i],val1[1][i],val2[0][k],val2[1][k]);
    if (cmpResult == 1 || cmpResult == 2) {
      maxResult[0][counter]=val2[0][k];
      maxResult[1][counter]=val2[1][k];
      counter++;
      k++;
    }
 else     if (cmpResult == -1 || cmpResult == -2) {
      maxResult[0][counter]=val1[0][i];
      maxResult[1][counter]=val1[1][i];
      counter++;
      i++;
    }
 else {
      maxResult[0][counter]=val1[0][i];
      maxResult[1][counter]=val1[1][i];
      counter++;
      i++;
      k++;
    }
  }
  if (counter == 0) {
    return null;
  }
  int[][] returnArray;
  if (k == val2[0].length && i < val1[0].length) {
    returnArray=new int[2][counter + val1[0].length - i];
    System.arraycopy(val1[0],i,returnArray[0],counter,val1[0].length - i);
    System.arraycopy(val1[1],i,returnArray[1],counter,val1[0].length - i);
  }
 else {
    returnArray=new int[2][counter + val2[0].length - k];
    System.arraycopy(val2[0],k,returnArray[0],counter,val2[0].length - k);
    System.arraycopy(val2[1],k,returnArray[1],counter,val2[0].length - k);
  }
  System.arraycopy(maxResult[0],0,returnArray[0],0,counter);
  System.arraycopy(maxResult[1],0,returnArray[1],0,counter);
  return returnArray;
}
