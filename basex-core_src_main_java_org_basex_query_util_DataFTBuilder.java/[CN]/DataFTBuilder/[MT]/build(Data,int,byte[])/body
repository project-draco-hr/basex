{
  final FTPos ftp=pos.get(data,pre);
  if (ftp == null)   return null;
  boolean marked=false;
  final TokenList tl=new TokenList();
  final TokenBuilder tb=new TokenBuilder();
  final FTLexer lex=new FTLexer().all().init(string);
  int ln=-len;
  while (lex.hasNext()) {
    final FTSpan span=lex.next();
    if (ftp.contains(span.pos) || marked) {
      if (!tb.isEmpty()) {
        ln+=tb.size();
        tl.add(tb.next());
        if (ln >= 0 && tl.size() > 1 && !marked)         break;
      }
      if (!marked)       tl.add((byte[])null);
      marked^=true;
    }
    tb.add(span.text);
  }
  if (!tb.isEmpty()) {
    ln+=tb.size();
    tl.add(tb.finish());
  }
  if (ln > 0) {
    final int ts=tl.size();
    final byte[] first=tl.get(0) != null ? tl.get(0) : EMPTY;
    final int firstl=first.length;
    final byte[] last=tl.get(ts - 2) != null ? tl.get(ts - 1) : EMPTY;
    final int lastl=last.length;
    if (first != EMPTY) {
      final double fl=firstl + lastl;
      final int l=Math.min(firstl,(int)(firstl / fl * ln));
      tl.set(0,concat(DOTS,subtoken(first,l)));
      ln-=l;
    }
    if (last != EMPTY && ln > 0) {
      final int ll=Math.min(lastl,ln);
      tl.set(ts - 1,concat(subtoken(last,0,lastl - ll),DOTS));
      ln-=ll;
    }
    for (int t=ts - 2; t > 0 && ln > 0; t--) {
      final byte[] txt=tl.get(t);
      if (txt == null || tl.get(t - 1) == null)       continue;
      final int txtl=txt.length;
      final int ll=Math.min(txtl,ln);
      tl.set(t,concat(subtoken(txt,0,(txtl - ll) / 2),DOTS,subtoken(txt,(txtl + ll) / 2)));
      ln-=ll;
    }
  }
  return tl;
}
