{
  final int k=Nod.kind(nd.type);
  final int ms=m.meta.size;
switch (k) {
case Data.DOC:
    m.doc(ms,size(nd,false),nd.base());
  m.insert(ms);
int p=pre + 1;
NodeIter ir=nd.child();
Nod i;
while ((i=ir.next()) != null) p=addNode(i,m,p,pre);
return p;
case Data.ATTR:
QNm q=nd.qname();
byte[] uri=q.uri.str();
int u=0;
boolean ne=uri.length != 0;
if (ne) {
if (par == 0) m.ns.add(ms,pre - par,q.pref(),uri);
u=m.ns.addURI(uri);
}
final int n=m.atts.index(q.str(),null,false);
m.attr(ms,pre - par,n,nd.str(),u,ne);
m.insert(ms);
return pre + 1;
case Data.PI:
case Data.TEXT:
case Data.COMM:
byte[] v=nd.str();
if (k == Data.PI) v=trim(concat(nd.nname(),SPACE,v));
m.text(ms,pre - par,v,k);
m.insert(ms);
return pre + 1;
default :
q=nd.qname();
ne=false;
if (par == 0) {
final Atts ns=FElem.ns(nd);
for (int a=0; a < ns.size; a++) {
m.ns.add(ms,-1,ns.key[a],ns.val[a]);
ne=true;
}
}
uri=q.uri.str();
u=uri.length != 0 ? Math.abs(m.ns.addURI(uri)) : 0;
final int tn=m.tags.index(q.str(),null,false);
m.ns.open();
m.elem(pre - par,tn,size(nd,true),size(nd,false),u,ne);
m.insert(ms);
ir=nd.attr();
p=pre + 1;
while ((i=ir.next()) != null) p=addNode(i,m,p,pre);
ir=nd.child();
while ((i=ir.next()) != null) p=addNode(i,m,p,pre);
return p;
}
}
