{
  view.refreshControls(false);
  final byte[] in=getText();
  final boolean eq=eq(in,last);
  if (eq && action == Action.CHECK)   return;
  last=in;
  script=file.hasSuffix(IO.BXSSUFFIX);
  main=!script && !opened() || file.hasSuffix(IO.XQSUFFIXES);
  String input=string(in);
  if (action == Action.EXECUTE && script) {
    gui.execute(true,new Execute(input));
  }
 else   if (main || action == Action.EXECUTE) {
    if (input.isEmpty())     input="()";
    main=!QueryProcessor.isLibrary(string(in));
    if (main && (action == Action.EXECUTE || gui.gprop.is(GUIProp.EXECRT))) {
      gui.execute(true,new XQuery(input));
    }
 else {
      gui.context.prop.set(Prop.QUERYPATH,file.path());
      final QueryContext qc=new QueryContext(gui.context);
      try {
        if (!main)         qc.parseLibrary(input,null);
 else         qc.parseMain(input,null);
        view.info(OK,true,false);
      }
 catch (      final QueryException ex) {
        view.info(Util.message(ex),false,false);
      }
 finally {
        qc.close();
      }
    }
  }
 else   if (script || file.hasSuffix(IO.XMLSUFFIXES) || file.hasSuffix(IO.XSLSUFFIXES)|| file.hasSuffix(IO.HTMLSUFFIXES)) {
    try {
      new EmptyBuilder(new IOContent(in),gui.context).build();
      if (script)       new CommandParser(input,gui.context).parse();
      view.info(OK,true,false);
    }
 catch (    final Exception ex) {
      view.info(Util.message(ex),false,false);
    }
  }
 else   if (action != Action.CHECK) {
    view.info(OK,true,false);
  }
}
