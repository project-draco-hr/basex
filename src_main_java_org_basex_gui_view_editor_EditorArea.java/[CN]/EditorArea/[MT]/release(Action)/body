{
  final byte[] in=getText();
  final boolean eq=eq(in,last);
  if (eq && action == Action.CHECK)   return;
  last=in;
  view.refresh(false);
  view.pos.setText(pos());
  gui.context.prop.set(Prop.QUERYPATH,file.path());
  script=file.hasSuffix(IO.BXSSUFFIX);
  xquery=!script && !opened() || file.hasSuffix(IO.XQSUFFIXES);
  String input=string(in);
  if (xquery) {
    if (input.isEmpty())     input="()";
    xquery=!module(in);
    if (xquery && (action == Action.EXECUTE || gui.gprop.is(GUIProp.EXECRT))) {
      gui.execute(true,new XQuery(input));
    }
 else {
      final QueryContext ctx=new QueryContext(gui.context);
      try {
        if (!xquery)         ctx.module(input);
 else         ctx.parse(input);
        view.info(OK,true);
      }
 catch (      final QueryException ex) {
        view.info(ex.getMessage(),false);
      }
    }
  }
 else   if (action == Action.EXECUTE && script) {
    gui.execute(true,new Execute(input));
  }
 else   if (script || file.hasSuffix(IO.XMLSUFFIXES)) {
    try {
      new EmptyBuilder(new IOContent(in),gui.context).build();
      if (script)       new CommandParser(input,gui.context).parse();
      view.info(OK,true);
    }
 catch (    final Exception ex) {
      view.info(ex.getMessage(),false);
    }
  }
}
