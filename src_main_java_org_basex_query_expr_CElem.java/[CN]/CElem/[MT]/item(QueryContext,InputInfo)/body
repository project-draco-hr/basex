{
  final Item it=checkItem(tag,ctx);
  final int s=ctx.ns.size();
  try {
    addNS(ctx);
    final Atts nns=new Atts();
    for (int i=0; i < nsp.size; ++i)     nns.add(nsp.key[i],nsp.val[i]);
    final QNm nnm=checkNS(qname(ctx,it,false,ii));
    final byte[] p=nnm.pref();
    if (!eq(p,XML)) {
      final byte[] uri=ctx.ns.uri(p);
      if (nnm.hasUri()) {
        final Uri u=nnm.uri();
        if (uri == null || !eq(uri,u.string())) {
          ctx.ns.add(new QNm(p,u),ii);
          nns.add(p,u.string());
        }
 else         if (!nns.contains(p) && !(eq(p,EMPTY) && eq(uri,EMPTY))) {
          nns.add(p,uri);
        }
      }
 else       if (uri != null) {
        nnm.uri(uri);
      }
    }
    final Constr c=new Constr(ii,ctx,expr);
    if (c.errAtt)     NOATTALL.thrw(input);
    if (c.duplAtt != null)     (comp ? CATTDUPL : ATTDUPL).thrw(input,c.duplAtt);
    final FElem node=new FElem(nnm,c.children,c.atts,nns);
    for (int n=0; n < c.children.size(); ++n) {
      c.children.get(n).parent(node);
    }
    for (int n=0; n < c.atts.size(); ++n) {
      final ANode att=c.atts.get(n).parent(node);
      final QNm name=att.qname();
      if (name.ns() && name.hasUri()) {
        byte[] apref=name.pref();
        final byte[] auri=name.uri().string();
        final int pos=nns.get(apref);
        if (pos == -1) {
          nns.add(apref,auri);
        }
 else         if (!eq(nns.val[pos],auri)) {
          apref=null;
          for (int a=0; a < nns.size; a++) {
            if (eq(nns.val[a],auri))             apref=nns.key[a];
          }
          if (apref == null) {
            int i=1;
            do {
              apref=concat(name.pref(),token(i++));
            }
 while (nns.contains(apref));
            nns.add(apref,auri);
          }
          c.atts.item[n]=new FAttr(new QNm(concat(apref,COLON,name.ln()),name.uri()),c.atts.get(n).string());
        }
      }
    }
    return node;
  }
  finally {
    ctx.ns.size(s);
  }
}
