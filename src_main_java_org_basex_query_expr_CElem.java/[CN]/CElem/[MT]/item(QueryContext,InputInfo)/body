{
  final Item it=checkItem(tag,ctx);
  final int s=ctx.ns.size();
  addNS(ctx);
  final Atts nsc=new Atts();
  for (int i=0; i < nsp.size; ++i)   nsc.add(nsp.key[i],nsp.val[i]);
  final QNm tname=checkNS(qname(ctx,it,false,ii));
  final byte[] pref=tname.pref();
  if (!eq(pref,XML)) {
    byte[] uri=ctx.ns.find(pref);
    if (uri == null)     uri=NSGlobal.uri(pref);
    if (tname.hasUri()) {
      final byte[] muri=tname.uri().atom();
      if (uri == null || !eq(uri,muri)) {
        ctx.ns.add(new QNm(tname.pref(),tname.uri()),ii);
        nsc.add(pref,muri);
      }
 else       if (!nsc.contains(pref) && !(eq(pref,EMPTY) && eq(uri,EMPTY))) {
        nsc.add(pref,uri);
      }
    }
 else     if (uri != null) {
      tname.uri(uri);
    }
  }
  final Constr c=new Constr(ii,ctx,expr);
  if (c.errAtt)   NOATTALL.thrw(input);
  if (c.duplAtt != null)   (comp ? CATTDUPL : ATTDUPL).thrw(input,c.duplAtt);
  final FElem node=new FElem(tname,c.children,c.atts,nsc);
  for (int n=0; n < c.children.size(); ++n)   c.children.get(n).parent(node);
  for (int n=0; n < c.atts.size(); ++n) {
    final ANode att=c.atts.get(n);
    final QNm name=att.qname();
    if (name.ns() && name.hasUri()) {
      final byte[] apre=name.pref(), auri=name.uri().atom();
      final int pos=nsc.get(apre);
      if (pos == -1) {
        nsc.add(apre,auri);
      }
 else       if (!eq(nsc.val[pos],auri)) {
      }
    }
    att.parent(node);
  }
  ctx.ns.size(s);
  return node;
}
