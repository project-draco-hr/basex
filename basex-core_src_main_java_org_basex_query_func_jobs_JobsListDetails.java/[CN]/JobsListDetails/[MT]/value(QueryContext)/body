{
  checkAdmin(qc);
  final JobPool jobs=qc.context.jobs;
  final Set<String> set=new HashSet<>();
  if (exprs.length == 0) {
    for (    final String id : jobs.active.keySet())     set.add(id);
    for (    final String id : jobs.tasks.keySet())     set.add(id);
    for (    final String id : jobs.results.keySet())     set.add(id);
  }
 else {
    set.add(Token.string(toToken(exprs[0],qc)));
  }
  final TokenList list=new TokenList(set.size());
  for (  final String id : set)   list.add(id);
  sort(list);
  final int ml=qc.context.soptions.get(StaticOptions.LOGMSGMAXLEN);
  final ValueBuilder vb=new ValueBuilder();
  for (  final byte[] key : list) {
    final String id=string(key);
    Job job=jobs.active.get(id);
    JobTask jt=jobs.tasks.get(id);
    JobResult jr=jobs.results.get(id);
    if (job == null && jr != null)     job=jr.job;
    if (job == null && jt != null)     job=jt.job;
    if (job == null)     continue;
    final JobContext jc=job.job();
    final long ms=jc.performance != null ? (System.nanoTime() - jc.performance.start()) / 1000000 : jr != null ? jr.time / 1000000 : -1;
    final FElem elem=new FElem(JOB);
    elem.add(ID,id);
    elem.add(TYPE,jc.type());
    elem.add(STATE,job.state.toString().toLowerCase(Locale.ENGLISH));
    elem.add(USER,jc.context.user().name());
    if (ms >= 0)     elem.add(DURATION,new DTDur(ms).string(info));
    if (jt != null)     elem.add(START,new Dtm(jt.start,info).string(info));
    elem.add(chop(normalize(token(jc.toString())),ml));
    vb.add(elem);
  }
  return vb.value();
}
