{
  super.comp(ctx);
  Expr e=this;
  if (expr[0].value()) {
    final Item it=expr[0].atomic(ctx,input);
    final int el=expr.length;
    boolean vals=true;
    for (int i=1; i < el - 1; i+=2) {
      vals&=expr[i].value();
      if (vals && it.equiv(input,expr[i].atomic(ctx,input))) {
        e=expr[i + 1];
        break;
      }
    }
    if (vals && e == this)     e=expr[el - 1];
  }
  if (e != this) {
    ctx.compInfo(OPTPRE,SWITCH + "(" + expr[0]+ ")");
  }
 else {
    final int el=expr.length;
    type=expr[el - 1].type();
    for (int i=1; i < el - 1; i+=2)     type=type.intersect(expr[i].type());
  }
  return e;
}
