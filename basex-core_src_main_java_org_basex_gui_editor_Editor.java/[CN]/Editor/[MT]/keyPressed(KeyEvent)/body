{
  if (search != null && ESCAPE.is(e)) {
    search.deactivate(true);
    return;
  }
  if (specialKey(e) || modifier(e))   return;
  cursor(true);
  final int fh=rend.fontHeight();
  if (SCROLLDOWN.is(e)) {
    scroll.pos(scroll.pos() + fh);
    return;
  }
  if (SCROLLUP.is(e)) {
    scroll.pos(scroll.pos() - fh);
    return;
  }
  final int pc=text.getCaret();
  text.pos(pc);
  if (!PREVLINE.is(e) && !NEXTLINE.is(e))   lastCol=-1;
  final boolean marking=e.isShiftDown() && !DELETE.is(e) && !BACKSPACE.is(e)&& !PASTE2.is(e)&& !DELLINE.is(e)&& !REDOSTEP.is(e)&& !PREVPAGE_RO.is(e);
  final boolean nomark=!text.selecting();
  if (marking && nomark)   text.startSelect();
  boolean down=true;
  boolean consumed=true;
  final byte[] txt=text.text();
  if (NEXTWORD.is(e)) {
    text.nextToken(marking);
  }
 else   if (PREVWORD.is(e)) {
    text.prevToken(marking);
    down=false;
  }
 else   if (TEXTSTART.is(e)) {
    if (!marking)     text.noSelect();
    text.pos(0);
    down=false;
  }
 else   if (TEXTEND.is(e)) {
    if (!marking)     text.noSelect();
    text.pos(text.size());
  }
 else   if (LINESTART.is(e)) {
    text.home(marking);
    down=false;
  }
 else   if (LINEEND.is(e)) {
    text.eol(marking);
  }
 else   if (PREVPAGE.is(e) || !hist.active() && PREVPAGE_RO.is(e)) {
    up(getHeight() / fh,marking);
    down=false;
  }
 else   if (NEXTPAGE.is(e) || !hist.active() && NEXTPAGE_RO.is(e)) {
    down(getHeight() / fh,marking);
  }
 else   if (NEXT.is(e)) {
    text.next(marking);
  }
 else   if (PREV.is(e)) {
    text.prev(marking);
    down=false;
  }
 else   if (PREVLINE.is(e)) {
    up(1,marking);
    down=false;
  }
 else   if (NEXTLINE.is(e)) {
    down(1,marking);
  }
 else {
    consumed=false;
  }
  if (marking) {
    text.finishSelect();
  }
 else   if (hist.active()) {
    if (COMPLETE.is(e)) {
      text.complete();
    }
 else     if (DELLINE.is(e)) {
      text.deleteLine();
    }
 else     if (DELLINEEND.is(e) || DELNEXTWORD.is(e) || DELETE.is(e)) {
      if (nomark) {
        if (text.pos() == text.size())         return;
        text.startSelect();
        if (DELNEXTWORD.is(e)) {
          text.nextToken(true);
        }
 else         if (DELLINEEND.is(e)) {
          text.eol(true);
        }
 else {
          text.next(true);
        }
        text.finishSelect();
      }
      text.delete();
    }
 else     if (DELLINESTART.is(e) || DELPREVWORD.is(e) || BACKSPACE.is(e)) {
      if (nomark) {
        if (text.pos() == 0)         return;
        if (DELPREVWORD.is(e)) {
          text.startSelect();
          text.prevToken(true);
          text.finishSelect();
        }
 else         if (DELLINESTART.is(e)) {
          text.startSelect();
          text.bol(true);
          text.finishSelect();
        }
 else {
          text.backspace();
        }
      }
      text.delete();
      down=false;
    }
 else {
      consumed=false;
    }
  }
  if (consumed)   e.consume();
  text.setCaret();
  final byte[] tmp=text.text();
  if (txt == tmp) {
    cursorCode.invokeLater(down ? 2 : 0);
  }
 else {
    hist.store(tmp,pc,text.getCaret());
    scrollCode.invokeLater(down);
  }
}
