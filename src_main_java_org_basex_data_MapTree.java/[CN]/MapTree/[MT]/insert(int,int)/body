{
  searchPreTree(pre,1);
  if (current == null) {
    if (preRoot == null) {
      MapNode node=new MapNode();
      node.idmin=id;
      node.idmax=id;
      node.d=pre - id;
      node.s=0;
      preRoot=node;
      insertIdTree(node);
    }
 else {
      current=preRoot;
      while (current.preRight != null)       current=current.preRight;
      MapNode node=new MapNode();
      node.idmin=id;
      node.idmax=id;
      node.d=pre - sadd - id;
      node.s=0;
      insertPreTree(node);
      insertIdTree(node);
    }
  }
 else {
    MapNode split=new MapNode();
    split.idmin=pre - current.d - sadd- current.s;
    split.idmax=current.idmax;
    split.d=current.d;
    split.s=1;
    if (pre == preMin()) {
      split.s+=current.s;
      current.idmin=id;
      current.idmax=id;
      current.d=pre - sadd - id;
      current.s=0;
      replaceNodeIdTree(current,split);
      split.idLeft=current.idLeft;
      split.idRight=current.idRight;
      split.idColor=current.idColor;
      if (current.idLeft != null)       current.idLeft.idParent=split;
      if (current.idRight != null)       current.idRight.idParent=split;
      current.idParent=current.idLeft=current.idRight=null;
      current.idColor=false;
      insertPreTree(split);
      insertIdTree(current);
    }
 else {
      MapNode node=new MapNode();
      current.idmax=split.idmin - 1;
      node.idmin=id;
      node.idmax=id;
      node.d=pre - sadd - current.s- id;
      node.s=0;
      insertPreTree(split);
      insertIdTree(split);
      insertPreTree(node);
      insertIdTree(node);
    }
  }
}
