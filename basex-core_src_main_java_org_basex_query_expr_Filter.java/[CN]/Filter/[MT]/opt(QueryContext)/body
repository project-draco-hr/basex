{
  final SeqType t=root.type();
  final long s=root.size();
  if (s == -1) {
    type=SeqType.get(t.type,t.zeroOrOne() ? Occ.ZERO_ONE : Occ.ZERO_MORE);
  }
 else {
    if (pos != null) {
      size=Math.max(0,s + 1 - pos.min) - Math.max(0,s - pos.max);
    }
 else     if (last) {
      size=s > 0 ? 1 : 0;
    }
    if (size == 0)     return optPre(null,ctx);
    type=SeqType.get(t.type,size);
  }
  if (!super.has(Flag.FCS))   return new IterFilter(this);
  final boolean iter=posIterator();
  if (preds.length == 1 && (last || pos != null) && root.isValue()) {
    final Value v=(Value)root;
    final long from=last ? v.size() - 1 : pos.min - 1;
    final long len=last ? 1 : pos.max - from;
    return optPre(SubSeq.get(v,from,len),ctx);
  }
  boolean off=false;
  if (preds.length == 1) {
    final Expr p=preds[0];
    final SeqType st=p.type();
    off=st.type.isNumber() && st.zeroOrOne() && !p.has(Flag.CTX)&& !p.has(Flag.NDT);
    if (off)     type=SeqType.get(type.type,Occ.ZERO_ONE);
  }
  return off || iter ? new IterPosFilter(this,off) : this;
}
