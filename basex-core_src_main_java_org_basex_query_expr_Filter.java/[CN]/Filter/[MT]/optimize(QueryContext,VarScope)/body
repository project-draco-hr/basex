{
  if (root.isEmpty())   return optPre(qc);
  final Value cv=qc.value;
  try {
    qc.value=Path.initial(qc,root);
    final Expr e=super.optimize(qc,scp);
    if (e != this)     return e;
  }
  finally {
    qc.value=cv;
  }
  final SeqType st=root.seqType();
  long max=root.size();
  boolean exact=max != -1;
  if (!exact)   max=Long.MAX_VALUE;
  for (  final Expr pred : preds) {
    if (pred.isFunction(Function.LAST)) {
      max=Math.min(max,1);
    }
 else     if (pred instanceof Pos) {
      final Pos pos=(Pos)pred;
      if (max != Long.MAX_VALUE)       max=Math.max(0,max - pos.min + 1);
      max=Math.min(max,pos.max - pos.min + 1);
    }
 else {
      exact=false;
    }
  }
  if (max == 0)   return optPre(qc);
  if (exact) {
    seqType=st.withSize(size);
    size=max;
  }
 else {
    seqType=st.withOcc(max == 1 ? Occ.ZERO_ONE : Occ.ZERO_MORE);
    size=-1;
  }
  final Expr ex=path(root,preds);
  if (ex != null)   return ex.optimize(qc,scp);
  if (root instanceof Context || root instanceof Value && root.data() != null) {
    final Path ip=Path.get(info,root,Step.get(info,SELF,Test.NOD,preds));
    final Expr ie=ip.index(qc,Path.initial(qc,root));
    if (ie != ip)     return ie;
  }
  if (!super.has(Flag.FCS))   return copyType(new IterFilter(info,root,preds));
  Expr e=root;
  boolean opt=false;
  final int pl=preds.length;
  for (int p=0; p < pl; p++) {
    final Expr pred=preds[p];
    final Pos pos=pred instanceof Pos ? (Pos)pred : null;
    final boolean last=pred.isFunction(Function.LAST);
    if (last) {
      if (e.isValue()) {
        e=SubSeq.get((Value)e,e.size() - 1,1);
      }
 else {
        e=Function._BASEX_LAST_FROM.get(null,info,e);
      }
      opt=true;
    }
 else     if (pos != null) {
      if (e.isValue()) {
        e=SubSeq.get((Value)e,pos.min - 1,pos.max - pos.min + 1);
      }
 else       if (pos.min == pos.max) {
        e=Function._BASEX_ITEM_AT.get(null,info,e,Int.get(pos.min));
      }
 else {
        e=Function._BASEX_ITEM_RANGE.get(null,info,e,Int.get(pos.min),Int.get(pos.max));
      }
      opt=true;
    }
 else     if (num(pred)) {
      e=Function._BASEX_ITEM_AT.get(null,info,e,pred);
      opt=true;
    }
 else {
      e=e instanceof Filter ? ((Filter)e).addPred(pred) : get(info,e,pred);
    }
  }
  if (opt) {
    qc.compInfo(QueryText.OPTWRITE,this);
    return e.optimize(qc,scp);
  }
  return get(info,root,preds);
}
