{
  final Performance p=new Performance();
  wp.cs=data.meta.ftcs;
  int s=0;
  index=new FTArray(128,data.meta.ftcs);
  index.bl|=data.meta.filesize > 1073741824;
  if (index.bl) {
    hash=new FTHash();
  }
  total=data.size;
  for (id=0; id < total; id++) {
    checkStop();
    if (data.kind(id) == Data.TEXT)     index(data.text(id));
  }
  if (Prop.debug) {
    Performance.gc(3);
    BaseX.debug("- Indexed: % (%)",p,Performance.getMem());
  }
  final String db=data.meta.dbname;
  final DataOutput outPre=new DataOutput(db,DATAFTX + 'b');
  if (index.bl) {
    bulkLoad(outPre,data.meta.ftittr);
  }
  if (Prop.debug) {
    Performance.gc(3);
    BaseX.debug("- Hash&Trie: % (%)",p,Performance.getMem());
  }
  hash=null;
  if (Prop.debug) {
    Performance.gc(3);
    BaseX.debug("- Compressed: % (%)",p,Performance.getMem());
  }
  final byte[][] tokens=index.tokens.list;
  final int[][] next=index.next.list;
  final int[][] pre=index.pre.list;
  final int[][] pos=index.pos.list;
  final DataOutput outN=new DataOutput(db,DATAFTX + 'a');
  final DataOutput outS=new DataOutput(db,DATAFTX + 'c');
  if (index.count != 1) {
    outN.write((byte)1);
    outN.write((byte)-1);
    int j=1;
    for (; j < next[0].length - 2; j++) {
      outN.writeInt(next[0][j]);
      outN.write(tokens[next[next[0][j]][0]][0]);
    }
    outN.writeInt(next[0][j]);
    outN.write5(-1);
    outS.writeInt(s);
    s+=2L + (next[0].length - 3) * 5L + 9L;
    final int il=index.next.size;
    for (int i=1; i < il; i++) {
      int lp=(next[i][next[i].length - 1] > -1) ? 0 : -1;
      outN.write((byte)tokens[next[i][0]].length);
      outN.write(tokens[next[i][0]]);
      j=1;
      for (; j < next[i].length - 2 + lp; j++) {
        outN.writeInt(next[i][j]);
        outN.write(tokens[next[next[i][j]][0]][0]);
      }
      outN.writeInt(next[i][j]);
      if (next[i][j] == 0 && next[i][j + 1] == 0) {
        outN.write5(next[i][j + 1]);
      }
 else {
        if (lp == 0) {
          outN.write5(next[i][j + 1]);
        }
 else {
          outN.write5(FTArray.toLong(next[i],next[i].length - 2));
        }
      }
      outS.writeInt(s);
      s+=1L + tokens[next[i][0]].length * 1L + (next[i].length - 3 + lp) * 5L + 9L;
    }
  }
  if (!index.bl) {
    final int il=index.pre.size;
    if (data.meta.ftittr) {
      int lastpre=-1;
      byte[] lp=new byte[]{};
      for (int i=0; i < il; i++) {
        for (int j=0; j < pre[i].length; i++) {
          if (lastpre != pre[i][j]) {
            lastpre=pre[i][j];
            lp=Num.simpleNum(pre[i][j]);
          }
          outPre.write(lp);
          outPre.write(Num.simpleNum(pos[i][j]));
        }
      }
    }
 else {
      for (int i=0; i < il; i++) {
        writeData(outPre,pre[i]);
        writeData(outPre,pos[i]);
      }
    }
  }
  outS.writeInt(s);
  outPre.close();
  outN.close();
  outS.close();
  if (Prop.debug) {
    Performance.gc(3);
    BaseX.debug("- Written: % (%)",p,Performance.getMem());
  }
  return new FTTrie(data,db);
}
