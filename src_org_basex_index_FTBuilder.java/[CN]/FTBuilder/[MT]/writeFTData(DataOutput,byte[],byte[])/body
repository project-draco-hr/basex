{
  int lpre=4;
  int lpos=4;
  final int pres=Num.size(vpre);
  final int poss=Num.size(vpos);
  int cn=scm == 1 ? 1 : 0;
  int lastpre=-1;
  int pre=-1;
  while (lpre < pres && lpos < poss) {
    if (scm > 0) {
      if (lastpre < pre)       fc++;
      pre=Num.read(vpre,lpre);
      while (cn < nodes.size() && nodes.get(cn) < pre)       cn++;
      if (scm == 1 && (cn < nodes.size() && nodes.get(cn - 1) < pre && nodes.get(cn) > pre || cn == nodes.size() && nodes.get(cn - 1) < pre) && pre != lastpre || scm == 2 && pre == nodes.get(cn)) {
        final int score=Scoring.scoreTFIDF(nodes.size(),nmbdocwt[c],maxfreq[cn - (scm == 1 ? 1 : 0)],freq.get(fc));
        if (score > maxscore)         maxscore=score;
        out.write(Num.num(-score));
        if (scm == 2) {
          fc++;
          cn++;
        }
      }
      lastpre=pre;
    }
    for (int z=0, l=Num.len(vpre,lpre); z < l; z++)     out.write(vpre[lpre++]);
    for (int z=0, l=Num.len(vpos,lpos); z < l; z++)     out.write(vpos[lpos++]);
  }
}
