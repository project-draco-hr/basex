{
  if (total++ % 500 == 0)   Util.out(".");
  if (!supported(test)) {
    if (ignoring)     ignore.add(asString("@name",test)).add(NL);
    ignored++;
    return;
  }
  final String name=asString("@name",test);
  if (!name.startsWith(single)) {
    if (ignoring)     ignore.add(name).add(NL);
    ignored++;
    return;
  }
  tested++;
  final XdmValue expected=new XQuery("*:result/*[1]",ctx).context(test).value();
  QT3Env env=null;
  final XdmValue ienv=new XQuery("*:environment[*]",ctx).context(test).value();
  if (ienv.size() != 0)   env=new QT3Env(ctx,ienv);
  boolean base=true;
  if (env == null) {
    final String e=asString("*:environment[1]/@ref",test);
    if (!e.isEmpty()) {
      env=envs(envs,e);
      if (env == null) {
        env=envs(genvs,e);
        base=false;
      }
      if (env == null)       Util.errln("%: environment '%' not found.",name,e);
    }
  }
  final Performance perf=new Performance();
  final String qfile=asString("*:test/@file",test);
  String string;
  if (qfile.isEmpty()) {
    string=asString("*:test",test);
  }
 else {
    string=string(new IOFile(baseDir,qfile).read());
  }
  if (verbose)   Util.outln(name);
  if (env != null) {
    for (    final HashMap<String,String> par : env.params) {
      final String decl=par.get(DECLARED);
      if (decl == null || decl.equals("false")) {
        string="declare variable $" + par.get(NNAME) + " external;"+ string;
      }
    }
    for (    final HashMap<String,String> src : env.sources) {
      final String role=src.get(ROLE);
      if (role != null && role.startsWith("$")) {
        string="declare variable " + role + " external;"+ string;
      }
    }
  }
  final XQuery query=new XQuery(string,ctx);
  if (base)   query.baseURI(baseURI);
  final String qm="for $m in *:module return ($m/@uri, $m/@file)";
  final XQuery qmod=new XQuery(qm,ctx).context(test);
  while (true) {
    final XdmItem uri=qmod.next();
    if (uri == null)     break;
    final XdmItem file=qmod.next();
    if (file == null)     break;
    query.addModule(uri.getString(),baseDir + file.getString());
  }
  final QT3Result result=new QT3Result();
  try {
    if (env != null) {
      for (      final HashMap<String,String> ns : env.namespaces) {
        query.namespace(ns.get(PREFIX),ns.get(URI));
      }
      for (      final HashMap<String,String> par : env.params) {
        query.bind(par.get(NNAME),new XQuery(par.get(SELECT),ctx).value());
      }
      for (      final HashMap<String,String> src : env.sources) {
        final String file=file(base,src.get(FILE));
        query.addDocument(src.get(URI),file);
        final String role=src.get(ROLE);
        if (role == null)         continue;
        final XdmValue doc=query.document(file);
        if (role.equals("."))         query.context(doc);
 else         query.bind(role,doc);
      }
      for (      final HashMap<String,String> src : env.resources) {
        query.addResource(src.get(URI),file(base,src.get(FILE)),src.get(Prop.ENCODING));
      }
      query.addCollection(env.collURI,env.collSources.toArray());
      if (env.collContext) {
        query.context(query.collection(env.collURI));
      }
      if (env.context != null) {
        query.context(env.context);
      }
      if (env.baseURI != null)       query.baseURI(env.baseURI);
      for (      final Map.Entry<QName,HashMap<String,String>> df : env.decFormats.entrySet()) {
        query.decimalFormat(df.getKey(),df.getValue());
      }
    }
    result.value=query.value();
    result.sprop=query.serializer();
  }
 catch (  final XQueryException ex) {
    result.err=ex;
    result.value=null;
  }
catch (  final Throwable ex) {
    result.error=ex;
    Util.errln("Query: " + name);
    ex.printStackTrace();
  }
  if (slow != null) {
    final long l=perf.time();
    if (l > 100000000)     slow.put(-l,name);
  }
  final String exp=test(result,expected);
  final TokenBuilder tmp=new TokenBuilder();
  tmp.add(name).add(NL);
  tmp.add(noComments(string)).add(NL);
  boolean err=result.value == null;
  String res;
  try {
    if (result.error != null) {
      res=result.error.toString();
    }
 else     if (result.err != null) {
      res=result.err.getCode() + ": " + result.err.getLocalizedMessage();
    }
 else {
      result.sprop.set(SerializerOptions.OMIT_XML_DECLARATION,"yes");
      res=serialize(result.value,result.sprop);
    }
  }
 catch (  final XQueryException ex) {
    res=ex.getCode() + ": " + ex.getLocalizedMessage();
    err=true;
  }
catch (  final Throwable ex) {
    res="Unexpected: " + ex.toString();
    err=true;
  }
  tmp.add(err ? "Error : " : "Result: ").add(noComments(res)).add(NL);
  if (exp == null) {
    tmp.add(NL);
    right.add(tmp.finish());
    correct++;
  }
 else {
    wrong.add(tmp.add("Expect: ").add(noComments(exp)).add(NL).add(NL).finish());
  }
  if (report != null)   report.addTest(name,exp == null);
}
