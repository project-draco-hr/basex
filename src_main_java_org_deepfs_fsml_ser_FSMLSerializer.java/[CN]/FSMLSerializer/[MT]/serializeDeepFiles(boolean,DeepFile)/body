{
  final Atts atts=new Atts();
  for (  final DeepFile d : c) {
    if (subfile) {
      atts.add(OFFSET,token(d.getOffset()));
      atts.add(SIZE,token(d.getSize()));
      startElem(S_CONTENT,convAtts(atts));
    }
 else {
      final Atts a=d.getFSAtts();
      startElem(S_FILE,convAtts(a));
    }
    final TreeMap<MetaElem,ArrayList<String>> meta=d.getMeta();
    if (meta != null) {
      for (      final Entry<MetaElem,ArrayList<String>> e : meta.entrySet())       for (      final String val : e.getValue())       nodeAndText(e.getKey().get(),null,val);
    }
    final Content[] textContents=d.getTextContents();
    if (textContents != null) {
      for (      final Content t : textContents) {
        atts.reset();
        atts.add(OFFSET,token(t.getOffset()));
        atts.add(SIZE,token(t.getSize()));
        startElem(S_TEXT_CONTENT,convAtts(atts));
        text(t.getContent());
        endElem(S_TEXT_CONTENT);
      }
    }
    final Content[] xmlContents=d.getXMLContents();
    if (xmlContents != null) {
      for (      final Content x : xmlContents) {
        atts.reset();
        atts.add(OFFSET,token(x.getOffset()));
        atts.add(SIZE,token(x.getSize()));
        startElem(S_XML_CONTENT,convAtts(atts));
        xml(x.getContent());
        endElem(S_XML_CONTENT);
      }
    }
    serializeDeepFiles(true,d.getContent());
    endElem(subfile ? S_CONTENT : S_FILE);
  }
}
