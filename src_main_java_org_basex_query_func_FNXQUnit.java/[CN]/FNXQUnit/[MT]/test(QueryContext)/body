{
  final FElem tests=new FElem(Q_TESTSUITE);
  tests.add(Q_NAME,ctx.sc.baseURI().string());
  int t=0, e=0, f=0, s=0;
  final IO file=ctx.sc.baseIO();
  final Performance p=new Performance();
  final ArrayList<UserFunc> before=new ArrayList<UserFunc>();
  final ArrayList<UserFunc> after=new ArrayList<UserFunc>();
  final ArrayList<UserFunc> beforeModule=new ArrayList<UserFunc>();
  final ArrayList<UserFunc> afterModule=new ArrayList<UserFunc>();
  for (  final UserFunc uf : ctx.funcs.funcs()) {
    if (!file.eq(new IOFile(uf.info.file())))     continue;
    final Ann ann=uf.ann;
    final int as=ann.size();
    boolean xq=false;
    for (int a=0; !xq && a < as; a++)     xq|=eq(ann.names[a].uri(),XQUNITURI);
    if (!xq)     continue;
    if (uf.updating)     BXUN_UPDATE.thrw(info,uf.name.local());
    if (uf.args.length > 0)     BXUN_ARGS.thrw(info,uf.name.local());
    if (find(uf,A_BEFORE))     before.add(uf);
    if (find(uf,A_AFTER))     after.add(uf);
    if (find(uf,A_BEFORE_MODULE))     beforeModule.add(uf);
    if (find(uf,A_AFTER_MODULE))     afterModule.add(uf);
  }
  boolean init=true;
  for (  final UserFunc uf : ctx.funcs.funcs()) {
    if (!file.eq(new IOFile(uf.info.file())) || !find(uf,A_TEST))     continue;
    final FElem test=new FElem(Q_TESTCASE).add(Q_NAME,uf.name.local());
    t++;
    final Performance pt=new Performance();
    if (find(uf,A_IGNORE)) {
      test.add(new FElem(Q_SKIPPED));
      s++;
    }
 else {
      try {
        if (init) {
          for (          final UserFunc fn : beforeModule)           fn.value(ctx);
          init=false;
        }
        for (        final UserFunc fn : before)         fn.value(ctx);
        uf.value(ctx);
        for (        final UserFunc fn : after)         fn.value(ctx);
      }
 catch (      final QueryException ex) {
        final boolean failure=eq(ex.qname().uri(),XQUNITURI);
        if (failure)         f++;
 else         e++;
        final QNm nm=failure ? Q_FAILURE : Q_ERROR;
        final FElem error=new FElem(nm);
        error.add(Q_MESSAGE,ex.getLocalizedMessage());
        error.add(Q_TYPE,ex.qname().local());
        test.add(error);
      }
    }
    test.add(Q_TIME,time(pt));
    tests.add(test);
  }
  try {
    for (    final UserFunc uf : afterModule)     uf.value(ctx);
  }
 catch (  final QueryException ignored) {
  }
  tests.add(Q_TIME,time(p));
  tests.add(Q_TESTS,token(t));
  tests.add(Q_FAILURES,token(f));
  tests.add(Q_ERRORS,token(e));
  tests.add(Q_SKIPPED,token(s));
  return tests;
}
