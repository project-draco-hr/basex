{
  final NamePool pool=new NamePool();
  for (  final int pre : pres) {
    final NodeUpdates ups=nodeUpdates.get(pre);
    if (ups != null)     for (    final NodeUpdate up : ups.updates)     up.update(pool);
  }
  if (!pool.nsOK())   throw UPNSCONFL2.get(null);
  final IntSet il=new IntSet();
  for (  final int pre : pres) {
    if (data.kind(pre) == Data.ATTR) {
      final byte[] nm=data.name(pre,Data.ATTR);
      final QNm name=new QNm(nm);
      final byte[] uri=data.nspaces.uri(data.nspaces.uriId(nm,pre,data));
      if (uri != null)       name.uri(uri);
      pool.add(name,NodeType.ATT);
      il.add(pre);
    }
 else {
      final int ps=pre + data.attSize(pre,Data.ELEM);
      for (int p=pre + 1; p < ps; ++p) {
        final byte[] nm=data.name(p,Data.ATTR);
        if (!il.contains(p)) {
          final QNm name=new QNm(nm);
          final byte[] uri=data.nspaces.uri(data.nspaces.uriId(nm,p,data));
          if (uri != null)           name.uri(uri);
          pool.add(name,NodeType.ATT);
        }
      }
    }
  }
  final QNm dup=pool.duplicate();
  if (dup != null)   throw UPATTDUPL_X.get(null,dup);
}
