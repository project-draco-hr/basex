{
  parseArguments(args);
  final MainProp mprop=context.mprop;
  final String webapp=mprop.get(MainProp.WEBPATH);
  final WebAppContext wac=new WebAppContext(webapp,"/");
  jetty=(Server)new XmlConfiguration(initJetty(webapp).inputStream()).configure();
  jetty.setHandler(wac);
  for (  final Connector c : jetty.getConnectors()) {
    if (c instanceof SelectChannelConnector) {
      if (httpPort == 0)       httpPort=c.getPort();
 else       c.setPort(httpPort);
    }
  }
  if (stopped) {
    stop();
    Util.outln(HTTP + ' ' + SRV_STOPPED);
    Performance.sleep(1000);
    return;
  }
  if (service) {
    start(httpPort,args);
    Util.outln(HTTP + ' ' + SRV_STARTED);
    Performance.sleep(1000);
    return;
  }
  if (!Prop.getSystem(MainProp.USER).isEmpty()) {
    while (Prop.getSystem(MainProp.PASSWORD).isEmpty()) {
      Util.out(PASSWORD + COLS);
      Prop.setSystem(MainProp.PASSWORD,Util.password());
    }
  }
  jetty.start();
  Util.outln(HTTP + ' ' + SRV_STARTED,SERVERMODE);
  HTTPContext.init(wac.getServletContext());
  final int stop=mprop.num(MainProp.STOPPORT);
  if (stop >= 0)   new StopServer(mprop.get(MainProp.SERVERHOST),stop).start();
  Runtime.getRuntime().addShutdownHook(new Thread(){
    @Override public void run(){
      Util.outln(HTTP + ' ' + SRV_STOPPED);
      final Log l=context.log;
      if (l != null)       l.writeServer(OK,HTTP + ' ' + SRV_STOPPED);
      context.close();
    }
  }
);
  context.log.writeServer(OK,HTTP + ' ' + SRV_STARTED);
}
