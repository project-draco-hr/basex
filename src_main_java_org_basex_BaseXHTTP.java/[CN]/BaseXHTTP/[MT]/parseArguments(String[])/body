{
  final Args arg=new Args(args,this,HTTPINFO,Util.info(CONSOLE,HTTP));
  boolean daemon=false;
  while (arg.more()) {
    if (arg.dash()) {
switch (arg.next()) {
case 'd':
        Prop.setSystem(MainProp.DEBUG,true);
      Prop.debug=true;
    break;
case 'D':
  daemon=true;
break;
case 'e':
Prop.setSystem(MainProp.EVENTPORT,arg.number());
break;
case 'h':
httpPort=arg.number();
break;
case 'l':
Prop.setSystem(MainProp.HTTPLOCAL,true);
break;
case 'n':
Prop.setSystem(MainProp.HOST,arg.string());
break;
case 'p':
final int p=arg.number();
Prop.setSystem(MainProp.PORT,p);
Prop.setSystem(MainProp.SERVERPORT,p);
break;
case 'P':
Prop.setSystem(MainProp.PASSWORD,arg.string());
break;
case 's':
Prop.setSystem(MainProp.STOPPORT,arg.number());
break;
case 'S':
service=!daemon;
break;
case 'U':
Prop.setSystem(MainProp.USER,arg.string());
break;
case 'z':
Prop.setSystem(MainProp.LOG,false);
break;
default :
arg.usage();
}
}
 else {
if (!arg.string().equalsIgnoreCase("stop")) arg.usage();
stopped=true;
}
}
}
