{
  if (def == FunDef.COUNT) {
    long c=expr[0].size();
    if (c != -1) {
      boolean cc=false;
      final StackTraceElement[] st=new Error().getStackTrace();
      for (int i=1; i < st.length; ++i) {
        cc|=st[i].toString().contains("compile(");
      }
      if (!cc) {
        System.out.println("[1] " + ctx.query);
        System.out.println("[2] " + this + ": "+ c);
        return Itr.get(c);
      }
    }
  }
  final Iter iter=ctx.iter(expr[0]);
switch (def) {
case COUNT:
    long c=iter.size();
  if (c == -1)   do   ++c;
 while (iter.next() != null);
return Itr.get(c);
case MIN:
return minmax(iter,CmpV.Op.GT,ctx);
case MAX:
return minmax(iter,CmpV.Op.LT,ctx);
case SUM:
Item it=iter.next();
return it != null ? sum(iter,it,false) : expr.length == 2 ? expr[1].atomic(ctx,input) : Itr.get(0);
case AVG:
it=iter.next();
return it == null ? null : sum(iter,it,true);
default :
return super.atomic(ctx,ii);
}
}
