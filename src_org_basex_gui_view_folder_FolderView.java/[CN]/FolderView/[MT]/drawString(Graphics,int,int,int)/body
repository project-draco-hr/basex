{
  final Data data=gui.context.data();
  final Nodes marked=gui.context.marked();
  final int kind=data.kind(pre);
  final boolean elem=kind == Data.ELEM || kind == Data.DOC;
  Color col=Color.black;
  Font fnt=font;
  if (marked.find(pre) >= 0) {
    col=colormark3;
    fnt=bfont;
  }
  if (y < -lineH)   return;
  g.setColor(color2);
  g.drawLine(2,y + boxMargin - 1,totalW - 5,y + boxMargin - 1);
  final boolean fs=data.fs != null;
  final boolean file=fs && data.fs.isFile(pre);
  final boolean dir=fs && data.fs.isDir(pre);
  final byte[] name=file || dir ? ViewData.tag(data,pre) : ViewData.content(data,pre,false);
  int p=gui.focused;
  while (p > pre)   p=ViewData.parent(data,p);
  if (pre == p) {
    g.setColor(color3);
    g.fillRect(0,y - boxW - boxMargin,totalW,lineH + 1);
  }
  int xx=x;
  if (elem) {
    final boolean large=GUIProp.fontsize > 20;
    final int off=large ? 1 : 0;
    final int yy=y - boxW - (large ? 6 : 3);
    Image box=opened[pre] ? openedBox : closedBox;
    if (file) {
      box=GUIFS.images(name,off);
    }
 else     if (dir) {
      box=opened[pre] ? GUIFS.folder2[off] : GUIFS.folder1[off];
    }
    g.drawImage(box,xx - lineH,yy,this);
    if (fs && (file || dir))     xx+=large ? 12 : 6;
  }
  g.setFont(fnt);
  g.setColor(col);
  final int yy=y;
  int tw=totalW + 6;
  if (file && tw - xx > 140) {
    final long size=Token.toLong(data.fs.size(pre));
    final String text=Performance.format(size,false);
    tw-=BaseXLayout.width(g,text) + 10;
    g.drawString(text,tw,yy);
  }
  BaseXLayout.chopString(g,name,xx,yy - GUIProp.fontsize,tw - xx - 10);
  if (gui.focused == pre) {
    g.setColor(color6);
    g.drawRect(1,yy - boxW - boxMargin,totalW - 3,lineH + 1);
    g.drawRect(2,yy - boxW - boxMargin + 1,totalW - 5,lineH - 1);
  }
}
