{
  if (ne - ns <= 1) {
    final ViewRect t=new ViewRect(r.x,r.y,r.w,r.h,l.list[ns],r.level);
    final int x=t.x + layout.x;
    final int y=t.y + layout.y;
    final int w=t.w - layout.w;
    final int h=t.h - layout.h;
    mainRects.add(t);
    if (w > 0 && h > 0 && !ViewData.isLeaf(GUI.context.data(),t.pre)) {
      final IntList ch=children(t.pre);
      if (ch.size >= 0)       calcMap(new ViewRect(x,y,w,h,l.list[ns],t.level + 1),mainRects,ch,0,ch.size - 1,level + 1);
    }
  }
 else {
    int nn=l.list[ne] - l.list[ns];
    int ni=ns;
    double xx=r.x;
    double yy=r.y;
    double ww=r.w;
    double hh=r.h;
    ArrayList<ViewRect> row=new ArrayList<ViewRect>();
    double height=0;
    while (ni < ne) {
      height=(l.list[ni + 1] - l.list[ns]) * hh / nn;
      ArrayList<ViewRect> tmp=new ArrayList<ViewRect>();
      double x=xx;
      for (int i=ns; i <= ni; i++) {
        double w=(l.list[i + 1] - l.list[i]) * ww / (l.list[ni + 1] - l.list[ns]);
        tmp.add(new ViewRect((int)x,(int)yy,(int)w,(int)height,l.list[i],level));
        x+=w;
      }
      if (aspectRatio(tmp) > aspectRatio(row))       break;
      row=tmp;
      ni++;
    }
    height=row.get(0).h;
    for (int i=0; i < row.size(); i++) {
      IntList newl=new IntList(1);
      newl.add(row.get(i).pre);
      calcMap(row.get(i),mainRects,newl,0,1,level);
    }
    if (ni < ne)     calcMap(new ViewRect((int)xx,(int)(yy + height),(int)ww,(int)(hh - height)),mainRects,l,ni,ne,level);
  }
}
