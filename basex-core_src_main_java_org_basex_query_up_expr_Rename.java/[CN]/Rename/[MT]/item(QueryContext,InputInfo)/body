{
  final Iter t=qc.iter(exprs[0]);
  final Item i=t.next();
  if (i == null)   throw UPSEQEMP_X.get(info,Util.className(this));
  final Item i2=t.next();
  if (i2 != null)   throw UPWRTRGSINGLE_X.get(info,ValueBuilder.concat(i,i2));
  final CNode ex;
  if (i.type == NodeType.ELM) {
    ex=new CElem(sc,info,exprs[1],null);
  }
 else   if (i.type == NodeType.ATT) {
    ex=new CAttr(sc,info,false,exprs[1],Empty.SEQ);
  }
 else   if (i.type == NodeType.PI) {
    ex=new CPI(sc,info,exprs[1],Empty.SEQ);
  }
 else {
    throw UPWRTRGTYP_X.get(info,i);
  }
  final QNm rename=ex.item(qc,info).qname();
  final ANode targ=(ANode)i;
  if (targ.type == NodeType.ELM || targ.type == NodeType.ATT) {
    final byte[] rp=rename.prefix();
    final byte[] ru=rename.uri();
    final Atts at=targ.nsScope(sc);
    final int as=at.size();
    for (int a=0; a < as; a++) {
      if (eq(at.name(a),rp) && !eq(at.value(a),ru))       throw UPNSCONFL_X_X.get(info,rename,new QNm(at.name(a),at.value(a)));
    }
  }
  final Updates updates=qc.updates();
  final DBNode dbn=updates.determineDataRef(targ,qc);
  updates.add(new RenameNode(dbn.pre(),dbn.data(),info,rename),qc);
  return null;
}
