{
  if (it == null)   return false;
  if (!it.isNode()) {
    if (more)     text.add(' ');
    text.add(it.string(ii));
    more=true;
  }
 else {
    ANode node=(ANode)it;
    if (it.type == NodeType.TXT) {
      text.add(node.string());
    }
 else     if (it.type == NodeType.ATT) {
      if (text.size() != 0 || children.size() != 0) {
        errAtt=true;
        return false;
      }
      final QNm qname=node.qname();
      for (int a=0; a < atts.size(); ++a) {
        if (qname.eq(atts.get(a).qname())) {
          duplAtt=qname.string();
          return false;
        }
      }
      atts.add(node.copy());
    }
 else     if (it.type == NodeType.DOC) {
      final AxisIter ai=node.children();
      for (ANode ch; (ch=ai.next()) != null; )       add(ctx,ch,ii);
    }
 else {
      if (text.size() != 0) {
        children.add(new FTxt(text.finish()));
        text.reset();
      }
      node=node.copy();
      children.add(node);
      if (it.type == NodeType.ELM) {
        final Atts ats=node.ns();
        node=node.parent();
        while (node != null && node.type == NodeType.ELM) {
          final Atts ns=node.ns();
          for (int a=0; a < ns.size; ++a) {
            if (!ats.contains(ns.key[a]))             ats.add(ns.key[a],ns.val[a]);
          }
          node=node.parent();
        }
      }
    }
    more=false;
  }
  return true;
}
