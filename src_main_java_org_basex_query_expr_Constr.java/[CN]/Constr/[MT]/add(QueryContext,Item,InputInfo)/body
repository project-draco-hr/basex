{
  final Type ip=it.type;
  if (ip.isFunction())   CONSFUNC.thrw(ii,it);
  if (!ip.isNode()) {
    if (more)     text.add(' ');
    text.add(it.string(ii));
    more=true;
  }
 else {
    ANode node=(ANode)it;
    if (ip == NodeType.TXT) {
      text.add(node.string());
    }
 else     if (ip == NodeType.ATT) {
      if (text.size() != 0 || children.size() != 0) {
        errAtt=true;
        return false;
      }
      final QNm qname=node.qname();
      for (int a=0; a < atts.size(); ++a) {
        if (qname.eq(atts.get(a).qname())) {
          duplAtt=qname.string();
          return false;
        }
      }
      atts.add(new FAttr(node.qname(),node.string()));
    }
 else     if (ip == NodeType.NSP) {
      if (text.size() != 0 || children.size() != 0) {
        errNS=true;
        return false;
      }
      final byte[] name=node.name();
      final byte[] val=node.string();
      int a=-1;
      while (++a < ns.size()) {
        if (Token.eq(name,ns.key(a))) {
          if (Token.eq(val,ns.value(a)))           break;
          duplNS=name;
          return false;
        }
      }
      if (a == ns.size())       ns.add(name,val);
    }
 else     if (ip == NodeType.DOC) {
      final AxisIter ai=node.children();
      for (ANode ch; (ch=ai.next()) != null; ) {
        if (!add(ctx,ch,ii))         return false;
      }
    }
 else {
      if (text.size() != 0) {
        children.add(new FTxt(text.finish()));
        text.reset();
      }
      node=node.copy(ctx);
      children.add(node);
      if (ip == NodeType.ELM) {
        final Atts ats=node.namespaces();
        if (ctx.nsInherit) {
          final Atts nsp=ctx.ns.stack();
          for (int a=0; a < nsp.size(); ++a) {
            final byte[] key=nsp.key(a);
            if (!ats.contains(key))             ats.add(key,nsp.value(a));
          }
        }
        while (true) {
          node=node.parent();
          if (node == null || node.type != NodeType.ELM)           break;
          final Atts nsp=node.namespaces();
          for (int a=0; a < nsp.size(); ++a) {
            final byte[] key=nsp.key(a);
            if (!ats.contains(key))             ats.add(key,nsp.value(a));
          }
        }
      }
    }
    more=false;
  }
  return true;
}
