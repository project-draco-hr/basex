{
  if (it == null)   return false;
  if (it.node() && it.type != NodeType.TXT) {
    Nod node=(Nod)it;
    if (it.type == NodeType.ATT) {
      if (text.size() != 0 || children.size() != 0) {
        errAtt=true;
        return false;
      }
      final QNm name=node.qname();
      final byte[] ln=name.ln();
      final byte[] pre=name.pref();
      if (eq(pre,XML) && eq(ln,BASE))       base=it.atom(ii);
      final QNm qname=node.qname();
      for (int a=0; a < ats.size(); ++a) {
        if (qname.eq(ats.get(a).qname())) {
          duplAtt=qname.atom();
          return false;
        }
      }
      ats.add(node.copy());
    }
 else     if (it.type == NodeType.DOC) {
      final NodeIter iter=node.child();
      Nod ch;
      while ((ch=iter.next()) != null)       add(ctx,ch,ii);
    }
 else {
      if (text.size() != 0) {
        children.add(new FTxt(text.finish(),null));
        text.reset();
      }
      node=node.copy();
      children.add(node);
      final Atts atts=node.ns();
      if (atts != null && atts.size != 0) {
        node=node.parent();
        while (node != null && node.type == NodeType.ELM) {
          final Atts ns=node.ns();
          for (int a=0; a < ns.size; ++a) {
            if (!atts.contains(ns.key[a]))             atts.add(ns.key[a],ns.val[a]);
          }
          node=node.parent();
        }
      }
    }
    more=false;
  }
 else {
    if (more && it.type != NodeType.TXT)     text.add(' ');
    text.add(it.atom(ii));
    more=it.type != NodeType.TXT;
  }
  return true;
}
