{
  final TokenSet pkgs=context.repo.nsDict().get(uri);
  if (pkgs != null) {
    Version ver=null;
    byte[] nm=null;
    for (    final byte[] name : pkgs) {
      final Version v=new Version(Package.version(name));
      if (ver == null || v.compareTo(ver) > 0) {
        ver=v;
        nm=name;
      }
    }
    if (nm != null) {
      addRepo(nm,new TokenSet(),new TokenSet(),ii,qp);
      return true;
    }
  }
  final boolean java=startsWith(uri,JAVAPREF);
  String uriPath=uri2path(string(java ? substring(uri,JAVAPREF.length) : uri));
  if (uriPath == null)   return false;
  if (!java) {
    final String path=context.soptions.get(StaticOptions.REPOPATH) + uriPath;
    for (    final String suf : IO.XQSUFFIXES) {
      final IOFile file=new IOFile(path + suf);
      if (file.exists()) {
        qp.module(token(file.path()),uri);
        return true;
      }
    }
  }
  uriPath=capitalize(uriPath);
  final String path=context.soptions.get(StaticOptions.REPOPATH) + uriPath;
  final IOFile file=new IOFile(path + IO.JARSUFFIX);
  if (file.exists())   addURL(file);
  final String cp=camelCase(uriPath.replace('/','.').substring(1));
  final Class<?> clz;
  try {
    clz=findClass(cp);
  }
 catch (  final ClassNotFoundException ex) {
    if (java)     throw WHICHCLASS_X.get(ii,ex.getMessage());
    return false;
  }
catch (  final Throwable th) {
    throw MODINITERR_X.get(ii,th);
  }
  final Object jm=Reflect.get(clz);
  if (jm == null)   throw INSTERR_X.get(ii,cp);
  if (javaModules == null)   javaModules=new HashSet<>();
  javaModules.add(jm);
  return true;
}
