{
  if (loaded.contains(name))   return;
  final byte[] pDir=context.repo.pkgDict().get(name);
  if (pDir == null)   throw BXRE_NOTINST.get(ii,name);
  final IOFile pkgDir=context.repo.path(string(pDir));
  final IO pkgDesc=new IOFile(pkgDir,PkgText.DESCRIPTOR);
  if (!pkgDesc.exists())   Util.debug(PkgText.MISSDESC,string(name));
  final Package pkg=new PkgParser(context.repo,ii).parse(pkgDesc);
  final IOFile jarDesc=new IOFile(pkgDir,PkgText.JARDESC);
  if (jarDesc.exists())   addJar(jarDesc,pkgDir,string(pkg.abbrev),ii);
  if (!pkg.dep.isEmpty())   toLoad.add(name);
  for (  final Dependency d : pkg.dep) {
    if (d.pkg != null) {
      final byte[] depPkg=new PkgValidator(context.repo,ii).depPkg(d);
      if (depPkg == null)       throw BXRE_NOTINST.get(ii,string(d.pkg));
      if (toLoad.contains(depPkg))       throw CIRCMODULE.get(ii);
      addRepo(depPkg,toLoad,loaded,ii,qp);
    }
  }
  for (  final Component comp : pkg.comps) {
    final String p=new IOFile(new IOFile(pkgDir,string(pkg.abbrev)),string(comp.file)).path();
    qp.module(token(p),comp.uri);
  }
  if (toLoad.contains(name))   toLoad.delete(name);
  loaded.add(name);
}
