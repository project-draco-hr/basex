{
  final double d=it.dbl(ii);
  if (Double.isNaN(d))   return nan;
  final Picture pic=pics[d < 0 && pics.length == 2 ? 1 : 0];
  if (d == Double.POSITIVE_INFINITY)   return new TokenBuilder().add(pic.fix[0].finish()).add(inf).add(pic.fix[1].finish()).finish();
  if (d == Double.NEGATIVE_INFINITY)   return new TokenBuilder().add(pic.fix[0].finish()).add(minus).add(inf).add(pic.fix[1].finish()).finish();
  Item num=it;
  if (pic.pc)   num=Calc.MULT.ev(ii,num,Int.get(100));
  if (pic.pm)   num=Calc.MULT.ev(ii,num,Int.get(1000));
  num=FNNum.round(num,num.dbl(ii),pic.maxFrac,true,ii);
  if (pics.length == 2)   num=FNNum.abs(num,ii);
  String str=(num instanceof Dbl || num instanceof Flt ? Dec.get(d) : num).toString();
  if (str.startsWith("0."))   str=str.substring(1);
 else   if (str.startsWith("-0."))   str='-' + str.substring(2);
  if (str.startsWith("-"))   str=(char)minus + str.substring(1);
  final int sep=str.indexOf('.');
  final TokenBuilder pre=new TokenBuilder();
  final int sl=str.length();
  final int il=sep == -1 ? sl : sep;
  for (int i=il; i < pic.min[0]; ++i)   pre.add(zero);
  for (int i=0; i < il; i++)   pre.add(zero + str.charAt(i) - '0');
  if (pic.group[0].length == 1) {
    final int pos=pic.group[0][0];
    for (int p=pre.size() - (d < 0 ? 2 : 1); p > 0; --p) {
      if (p % pos == 0)       pre.insert(pre.size() - p,grouping);
    }
  }
 else {
    for (int i=0; i < pic.group[0].length; ++i) {
      final int pos=pre.size() - pic.group[0][i];
      if (pos > 0)       pre.insert(pos,grouping);
    }
  }
  final TokenBuilder suf=new TokenBuilder();
  final int fl=sep == -1 ? 0 : sl - il - 1;
  if (fl != 0)   for (int i=sep + 1; i < sl; i++)   suf.add(zero + str.charAt(i) - '0');
  for (int i=fl; i < pic.min[1]; ++i)   suf.add(zero);
  final int ul=suf.size();
  for (int p=pic.group[1].length - 1; p >= 0; p--) {
    final int pos=pic.group[1][p];
    if (pos < ul)     suf.insert(pos,grouping);
  }
  final TokenBuilder res=new TokenBuilder(pic.fix[0].finish());
  res.add(pre.finish());
  if (!suf.isEmpty())   res.add(decimal).add(suf.finish());
  return res.add(pic.fix[1].finish()).finish();
}
