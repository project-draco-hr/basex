{
  for (  final byte[] pt : patterns) {
    boolean frac=false, pas=false, act=false;
    boolean dg=false, opt1=false, opt2=false;
    int cl, pc=0, pm=0, ls=0;
    for (int i=0; i < pt.length; i+=cl) {
      final int ch=ch(pt,i);
      cl=cl(pt,i);
      final boolean a=contains(active,ch);
      if (ch == decimal) {
        if (frac)         return false;
        frac=true;
      }
 else       if (ch == grouping) {
        if (i == 0 && frac || ls == decimal || i + cl < pt.length ? ch(pt,i + cl) == decimal : !frac)         return false;
      }
 else       if (ch == percent) {
        if (++pc > 1)         return false;
      }
 else       if (ch == permille) {
        if (++pm > 1)         return false;
      }
 else       if (ch == optional) {
        if (!frac) {
          if (dg)           return false;
          opt1=true;
        }
 else {
          opt2=true;
        }
      }
 else       if (contains(digits,ch)) {
        if (frac && opt2)         return false;
        dg=true;
      }
      if (a && pas && act)       return false;
      if (act)       pas|=!a;
      act|=a;
      ls=ch;
    }
    if (pc + pm > 1)     return false;
    if (!opt1 && !opt2 && !dg)     return false;
  }
  return true;
}
