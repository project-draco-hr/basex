{
  if (ne - ns == 1) {
    final ViewRect t=new ViewRect(r.x,r.y,r.w,r.h,l.list[ns],r.level);
    final int x=t.x + layout.x;
    final int y=t.y + layout.y;
    final int w=t.w - layout.w;
    final int h=t.h - layout.h;
    mainRects.add(t);
    if (w > 0 && h > 0 && !ViewData.isLeaf(data,t.pre)) {
      final IntList ch=children(data,t.pre);
      if (ch.size >= 0)       calcMap(data,new ViewRect(x,y,w,h,l.list[ns],t.level + 1),mainRects,ch,0,ch.size - 1,level + 1);
    }
  }
 else {
    int nn=l.list[ne] - l.list[ns];
    int ni=ns;
    int start=ns;
    final boolean v=(r.w > r.h) ? false : true;
    double xx=r.x;
    double yy=r.y;
    double ww=r.w;
    double hh=r.h;
    if (v) {
      ArrayList<ViewRect> row=new ArrayList<ViewRect>();
      double height=0;
      while (ni < ne) {
        height=(l.list[ni + 1] - l.list[start]) * hh / nn;
        ArrayList<ViewRect> tmp=new ArrayList<ViewRect>();
        double x=xx;
        for (int i=start; i <= ni; i++) {
          double w=(l.list[i + 1] - l.list[i]) * ww / (l.list[ni + 1] - l.list[start]);
          tmp.add(new ViewRect((int)x,(int)yy,(int)w,(int)height,l.list[i],level));
          x+=w;
        }
        if (allRatio(tmp) > allRatio(row)) {
          for (int i=0; i < row.size(); i++) {
            IntList newl=new IntList(1);
            newl.add(row.get(i).pre);
            calcMap(data,row.get(i),mainRects,newl,0,1,level);
          }
          hh-=row.get(0).h;
          yy+=row.get(0).h;
          tmp.clear();
          row.clear();
          start=ni;
          nn=l.list[ne] - l.list[start];
          if (ne == ni + 1) {
            row.add(new ViewRect((int)xx,(int)yy,(int)ww,(int)hh,l.list[ni],level));
            break;
          }
        }
        row=tmp;
        ni++;
      }
      for (int i=0; i < row.size(); i++) {
        IntList newl=new IntList(1);
        newl.add(row.get(i).pre);
        calcMap(data,row.get(i),mainRects,newl,0,1,level);
      }
    }
 else {
      ArrayList<ViewRect> row=new ArrayList<ViewRect>();
      double width=0;
      while (ni < ne) {
        width=(l.list[ni + 1] - l.list[start]) * ww / nn;
        ArrayList<ViewRect> tmp=new ArrayList<ViewRect>();
        double y=yy;
        for (int i=start; i <= ni; i++) {
          double h=(l.list[i + 1] - l.list[i]) * hh / (l.list[ni + 1] - l.list[start]);
          tmp.add(new ViewRect((int)xx,(int)y,(int)width,(int)h,l.list[i],level));
          y+=h;
        }
        if (allRatio(tmp) > allRatio(row)) {
          for (int i=0; i < row.size(); i++) {
            IntList newl=new IntList(1);
            newl.add(row.get(i).pre);
            calcMap(data,row.get(i),mainRects,newl,0,1,level);
          }
          ww-=row.get(0).w;
          xx+=row.get(0).w;
          tmp.clear();
          row.clear();
          start=ni;
          nn=l.list[ne] - l.list[start];
          if (ne == ni + 1) {
            row.add(new ViewRect((int)xx,(int)yy,(int)ww,(int)hh,l.list[ni],level));
            break;
          }
        }
        row=tmp;
        ni++;
      }
      for (int i=0; i < row.size(); i++) {
        IntList newl=new IntList(1);
        newl.add(row.get(i).pre);
        calcMap(data,row.get(i),mainRects,newl,0,1,level);
      }
    }
  }
}
