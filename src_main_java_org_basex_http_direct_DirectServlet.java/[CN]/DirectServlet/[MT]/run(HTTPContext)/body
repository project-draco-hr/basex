{
  final Context ctx=http.context();
  final IOFile root=new IOFile(ctx.mprop.get(MainProp.WEBPATH));
  final String input=http.req.getRequestURI();
  final IOFile io=new IOFile(root,input);
  if (!io.exists() || io.isDir() || !io.path().startsWith(root.path()))   HTTPErr.NOT_FOUND_X.thrw(Util.info(RES_NOT_FOUND_X,input));
  final boolean redirect=http.req.getParameter("@redirect") != null;
  final LocalSession session=http.session();
  final OutputStream os=redirect ? new ArrayOutput() : http.res.getOutputStream();
  session.setOutputStream(os);
  session.execute(new Set(Prop.QUERYPATH,io.path()));
  final TokenBuilder vars=new TokenBuilder();
  for (  final Entry<String,String[]> param : http.params().entrySet()) {
    final String key=param.getKey().trim();
    final String[] val=param.getValue();
    if (!key.startsWith("@")) {
      vars.add(key).add('=').add(val[0].replace(",",",,")).add(',');
    }
  }
  session.execute(new Set(Prop.BINDINGS,vars.toString()));
  ctx.prop.set(Prop.BINDINGS,vars.toString());
  final ArrayList<Command> list=new ArrayList<Command>();
  if (io.hasSuffix(IO.BXSSUFFIX)) {
    for (    final Command c : new CommandParser(io.string(),ctx).parse())     list.add(c);
  }
 else   if (io.hasSuffix(IO.XQSUFFIXES)) {
    list.add(new XQuery(io.string()));
  }
 else {
    http.res.setContentType(MimeTypes.get(io.path()));
    final BufferInput bi=new BufferInput(io);
    try {
      for (int b; (b=bi.read()) != -1; )       os.write(b);
    }
  finally {
      bi.close();
    }
  }
  final TokenBuilder info=new TokenBuilder();
  BaseXException bxe=null;
  for (  final Command c : list) {
    String inf=null;
    if (c instanceof XQuery) {
      final LocalQuery qu=session.query(c.args[0]);
      http.initResponse(new SerializerProp(qu.options()));
      try {
        qu.context(http);
        qu.execute();
        inf=qu.info();
      }
 catch (      final BaseXException ex) {
        bxe=ex;
      }
    }
 else {
      try {
        session.execute(c);
        inf=session.info();
      }
 catch (      final BaseXException ex) {
        bxe=ex;
      }
    }
    if (bxe != null)     break;
    info.add(inf.trim().replaceAll("\r\n?","\n")).add('\n');
  }
  if (redirect) {
    final String err=bxe == null ? "" : bxe.getMessage().replaceAll("\r\n?","\n");
    if (http.method == HTTPMethod.POST) {
      redirectPOST(http,os,info,err);
    }
 else {
      redirect(http,os,info,err);
    }
  }
 else   if (bxe != null) {
    throw bxe;
  }
}
