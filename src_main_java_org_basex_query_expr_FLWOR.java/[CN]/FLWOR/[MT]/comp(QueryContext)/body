{
  final int vs=ctx.vars.size();
  for (int f=0; f != fl.length; f++) {
    final boolean fast=ctx.ftfast;
    ctx.ftfast&=fl[f].simple();
    fl[f].comp(ctx);
    ctx.ftfast=fast;
  }
  boolean empty=false;
  if (where != null) {
    where=checkUp(where,ctx).comp(ctx);
    if (where.value()) {
      empty=!((Item)where).ebv(ctx,input).bool(input);
      if (!empty) {
        ctx.compInfo(OPTTRUE,where);
        where=null;
      }
    }
  }
  if (order != null)   order.comp(ctx);
  ret=ret.comp(ctx);
  ctx.vars.reset(vs);
  if (empty) {
    ctx.compInfo(OPTFALSE,where);
    return Seq.EMPTY;
  }
  for (  final ForLet f : fl) {
    if (f.expr.empty() && f instanceof For) {
      ctx.compInfo(OPTFLWOR);
      return Seq.EMPTY;
    }
  }
  return this;
}
