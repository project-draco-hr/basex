{
  final Object iterS=Reflect.invoke(RBC_GCEI,collator,string);
  final Object iterC=Reflect.invoke(RBC_GCEI,collator,contains);
  final int elemC=next(iterC);
  if (elemC == -1)   return 0;
  final int offC=(int)Reflect.invoke(CEI_GET_OFFSET,iterC);
  do {
    for (int elemS; (elemS=next(iterS)) != elemC; ) {
      if (elemS == -1 || mode == Mode.STARTS_WITH)       return -1;
    }
    final int offS=(Integer)Reflect.invoke(CEI_GET_OFFSET,iterS);
    if (startsWith(iterS,iterC)) {
      if (mode == Mode.INDEX_AFTER) {
        return (int)Reflect.invoke(CEI_GET_OFFSET,iterS);
      }
 else       if (mode == Mode.ENDS_WITH) {
        if (next(iterS) == -1)         return offS - 1;
      }
 else {
        return offS - 1;
      }
    }
    Reflect.invoke(CEI_SET_OFFSET,iterC,offS);
    Reflect.invoke(CEI_SET_OFFSET,iterC,offC);
  }
 while (true);
}
