{
  TokenObjMap<Object> tm=new TokenObjMap<Object>();
  if (arg < fun.expr.length) {
    final Item it=fun.expr[arg].item(ctx,fun.input);
    if (it != null) {
      if (it instanceof Map) {
        tm=((Map)it).tokenJavaMap(fun.input);
      }
 else {
        ANode n=(ANode)fun.checkType(it,NodeType.ELM);
        if (!n.qname().eq(E_PARAM))         SERUNKNOWN.thrw(fun.input,n.qname());
        final AxisIter ai=n.children();
        while ((n=ai.next()) != null) {
          final QNm qn=n.qname();
          if (!qn.uri().eq(U_OUTPUT))           SERUNKNOWN.thrw(fun.input,qn);
          final byte[] val=n.attribute(A_VALUE);
          if (val == null)           SERNOVAL.thrw(fun.input);
          tm.add(qn.ln(),val);
        }
      }
    }
  }
  final TokenBuilder tb=new TokenBuilder();
  for (  final byte[] key : tm) {
    if (tb.size() != 0)     tb.add(',');
    tb.add(key).add('=').addExt(tm.get(key));
  }
  return tb.size() == 0 ? ctx.serProp(true) : new SerializerProp(tb.toString());
}
