{
  final int k=data.kind(pre);
  if (rec) {
    final List<NodeUpdate> l=new LinkedList<>();
    l.add(this);
    final int firstChild=pre + data.attSize(pre,k);
    final int followingNode=pre + data.size(pre,k);
    int runner=firstChild;
    while (runner < followingNode) {
      l.add(new DeleteNode(runner,data,info,true));
      runner+=data.size(runner,data.kind(runner));
    }
    if (value.length > 0) {
      final int p=tmp.meta.size;
      tmp.text(p,1,value,Data.TEXT);
      tmp.insert(p);
      final ANodeList nl=new ANodeList(new DBNode(tmp,p));
      l.add(new ReplaceContent(pre,data,info,nl));
    }
    return l.toArray(new NodeUpdate[l.size()]);
  }
  if (deleteText()) {
    return new NodeUpdate[]{this,new DeleteNode(pre,data,info,false)};
  }
  return new NodeUpdate[]{this};
}
