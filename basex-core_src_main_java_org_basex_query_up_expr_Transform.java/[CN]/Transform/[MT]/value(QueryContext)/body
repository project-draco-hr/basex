{
  final int o=qc.resources.cache.size();
  final Updates updates=qc.resources.updates();
  final ContextModifier tmp=updates.mod;
  final TransformModifier pu=new TransformModifier();
  updates.mod=pu;
  try {
    for (    final Let c : copies) {
      final Iter ir=qc.iter(c.expr);
      Item i=ir.next();
      if (!(i instanceof ANode))       throw UPCOPYMULT_X_X.get(c.info,c.var.name,i);
      final Item i2=ir.next();
      if (i2 != null)       throw UPCOPYMULT_X_X.get(c.info,c.var.name,ValueBuilder.concat(i,i2));
      i=((ANode)i).dbNodeCopy(qc.context.options);
      qc.set(c.var,i,info);
      pu.addData(i.data());
    }
    final Value v=qc.value(exprs[0]);
    if (!v.isEmpty())     throw BASX_UPMODIFY.get(info);
    updates.prepare(qc);
    updates.apply(qc);
  }
  finally {
    qc.resources.cache.size(o);
    updates.mod=tmp;
  }
  return qc.value(exprs[1]);
}
