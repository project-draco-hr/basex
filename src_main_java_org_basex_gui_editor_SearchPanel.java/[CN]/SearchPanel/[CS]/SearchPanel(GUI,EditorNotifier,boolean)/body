{
  layout(new BorderLayout(2,0));
  mode(Fill.NONE);
  gui=main;
  view=ev;
  search=new BaseXTextField(main);
  search.setToolTipText(SEARCH);
  replace=new BaseXTextField(main);
  replace.setToolTipText(REPLACE_WITH);
  regex=onOffButton("s_regex",REGULAR_EXPR,GUIProp.SR_REGEX);
  mcase=onOffButton("s_case",MATCH_CASE,GUIProp.SR_CASE);
  multi=onOffButton("s_multi",MULTI_LINE,GUIProp.SR_MULTI);
  rplc=new BaseXButton(main,"s_replace",REPLACE_ALL);
  close=new BaseXButton(main,"s_close",CLOSE);
  multi.setEnabled(regex.isEnabled());
  final BaseXBack west=new BaseXBack(Fill.NONE).layout(new TableLayout(1,3,1,0));
  west.add(mcase);
  west.add(regex);
  west.add(multi);
  final BaseXBack center=new BaseXBack(Fill.NONE).layout(new GridLayout(1,2,2,0));
  center.add(search);
  if (update)   center.add(replace);
  final BaseXBack east=new BaseXBack(Fill.NONE).layout(new TableLayout(1,3,1,0));
  if (update)   east.add(rplc);
  east.add(close);
  add(west,BorderLayout.WEST);
  add(center,BorderLayout.CENTER);
  add(east,BorderLayout.EAST);
  search.addFocusListener(new FocusAdapter(){
    @Override public void focusGained(    final FocusEvent e){
      search.selectAll();
    }
  }
);
  search.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    final KeyEvent e){
      if (ESCAPE.is(e) || ENTER.is(e) && search.getText().trim().isEmpty()) {
        deactivate();
      }
 else       if (FINDPREV.is(e) || FINDPREV2.is(e) || FINDNEXT.is(e)|| FINDNEXT2.is(e)) {
        view.getEditor().requestFocusInWindow();
      }
 else       if (ENTER.is(e) && e.isShiftDown()) {
        view.getEditor().jump(SearchDir.BACKWARD);
      }
 else       if (ENTER.is(e)) {
        view.getEditor().jump(SearchDir.FORWARD);
      }
    }
    @Override public void keyReleased(    final KeyEvent e){
      main.gprop.set(GUIProp.SR_SEARCH,search.getText());
      search();
    }
  }
);
  BaseXLayout.addDrop(search,new DropHandler(){
    @Override public void drop(    final Object object){
      search.setText(object.toString());
      search();
    }
  }
);
  replace.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    final KeyEvent e){
      if (ESCAPE.is(e))       deactivate();
    }
    @Override public void keyReleased(    final KeyEvent e){
      main.gprop.set(GUIProp.SR_REPLACE,replace.getText());
    }
  }
);
  close.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      deactivate();
    }
  }
);
  rplc.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      view.getEditor().replace(new ReplaceContext(replace.getText()));
    }
  }
);
}
