{
  Msg icon=Msg.SUCCESS;
  String msg=null;
  String msg2=null;
  final boolean wait=cmp == start || cmp == stop || cmp == connect;
  if (wait)   setCursor(CURSORWAIT);
  try {
    if (cmp == start) {
      try {
        final int p=Integer.parseInt(ports.getText());
        gui.gopts.set(GUIOptions.S_SERVERPORT,p);
        if (host.getText().equals(LOCALHOST)) {
          gui.gopts.set(GUIOptions.S_PORT,p);
          gui.gopts.set(GUIOptions.S_EVENTPORT,p + 1);
          portc.setText(String.valueOf(p));
        }
        BaseXServer.start(p,"-p",Integer.toString(p),"-e",Integer.toString(p + 1));
        msg=Util.info(SRV_STARTED_PORT_X,p);
        running=true;
      }
 catch (      final BaseXException ex) {
        msg=Util.message(ex);
        icon=Msg.ERROR;
      }
    }
 else     if (cmp == stop) {
      final int p=gui.gopts.get(GUIOptions.S_SERVERPORT);
      if (running)       BaseXServer.stop(p,gui.gopts.get(GUIOptions.S_EVENTPORT));
      running=ping(true);
      connected=connected && ping(false);
      if (!connected)       msg=Util.info(SRV_STOPPED_PORT_X,p);
      if (!connected)       setTitle(S_SERVER_ADMIN);
    }
 else     if (cmp == connect) {
      final String pw=new String(admpass.getPassword());
      final String us=admuser.getText();
      final String hs=host.getText();
      final int pc=Integer.parseInt(portc.getText());
      gui.gopts.set(GUIOptions.S_HOST,hs);
      gui.gopts.set(GUIOptions.S_PORT,pc);
      gui.gopts.set(GUIOptions.S_USER,us);
      gui.gopts.set(GUIOptions.S_PASSWORD,pw);
      cs=new ClientSession(hs,pc,us,pw);
      user.setSess(cs);
      dbsP.setSess(cs);
      connected=true;
      setTitle(S_SERVER_ADMIN + LI + us+ '@'+ hs+ COL+ pc);
      msg=Util.info(S_CONNECTED,hs,pc);
      refreshSess();
      disconnect.requestFocusInWindow();
    }
 else     if (cmp == disconnect) {
      cs.execute(new Exit());
      connected=false;
      setTitle(S_SERVER_ADMIN);
      msg=S_DISCONNECTED;
    }
 else     if (cmp == refreshSess) {
      refreshSess();
    }
 else     if (cmp == refreshLog || cmp == logc) {
      byte[] cont=Token.EMPTY;
      if (logc.getSelectedIndex() != -1)       cont=new IOFile(logd,logc.getSelectedItem()).read();
      logt.setText(cont);
      logt.scrollToEnd();
    }
 else     if (cmp == delete) {
      final IOFile f=new IOFile(logd,logc.getSelectedItem());
      if (f.delete()) {
        logc.setSelectedIndex(-1);
        refreshLog();
      }
 else {
        msg2=Util.info(FILE_NOT_DELETED_X,f.name());
        icon=Msg.ERROR;
      }
    }
 else     if (cmp == deleteAll) {
      IOFile file=null;
      for (int i=0; i < logc.getItemCount(); ++i) {
        final IOFile f=new IOFile(logd,logc.getItemAt(i).toString());
        if (!f.delete())         file=f;
      }
      if (file != null) {
        msg2=Util.info(FILE_NOT_DELETED_X,file.name());
        icon=Msg.ERROR;
      }
      logc.setSelectedIndex(-1);
      refreshLog();
    }
 else     if (connected) {
      if (tab == 1)       user.action(cmp);
      if (tab == 2)       dbsP.action(cmp);
    }
  }
 catch (  final Exception ex) {
    icon=Msg.ERROR;
    msg=Util.message(ex);
    if (msg.equals(Util.info(PERM_REQUIRED_X,Perm.ADMIN))) {
      try {
        cs.execute(new Exit());
      }
 catch (      final IOException exx) {
        Util.stack(exx);
      }
    }
  }
  if (wait)   setCursor(CURSORARROW);
  final boolean valp=portc.getText().matches("[\\d]+") && Integer.parseInt(portc.getText()) <= 65535;
  final boolean valpl=ports.getText().matches("[\\d]+") && Integer.parseInt(ports.getText()) <= 65535;
  final boolean vallu=Databases.validName(admuser.getText());
  final boolean vallp=new String(admpass.getPassword()).matches("[^ ;'\"]*");
  final boolean valh=host.getText().matches("([\\w]+://)?[\\w.-]+");
  if (msg == null && msg2 == null && !(valpl && valh && valp&& vallu&& vallp)) {
    msg=Util.info(INVALID_X,!valpl ? S_LOCALPORT : !valh ? S_HOST : !valp ? S_PORT : !vallu ? USERNAME : PASSWORD);
    icon=Msg.WARN;
  }
  infoC.setText(msg,icon);
  infoL.setText(msg2,icon);
  ports.setEnabled(!running);
  start.setEnabled(!running && valpl);
  stop.setEnabled(running);
  admuser.setEnabled(!connected);
  admpass.setEnabled(!connected);
  host.setEnabled(!connected);
  portc.setEnabled(!connected);
  connect.setEnabled(!connected && vallu && vallp&& valh&& valp&& !admuser.getText().isEmpty()&& admpass.getPassword().length != 0);
  disconnect.setEnabled(connected);
  tabs.setEnabledAt(1,connected);
  tabs.setEnabledAt(2,connected);
  tabs.setEnabledAt(3,connected);
  tabs.setEnabledAt(4,running || logc.getItemCount() > 0);
  refreshLog.setEnabled(logc.getSelectedIndex() != -1);
  delete.setEnabled(logc.getSelectedIndex() != -1);
  deleteAll.setEnabled(logc.getItemCount() > 0);
  if (admuser.hasFocus())   connect.setEnabled(false);
}
