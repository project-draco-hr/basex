{
  checkCreate(ctx);
  try {
switch (sig) {
case _FILE_APPEND:
      return write(checkFile(0,ctx),true,ctx);
case _FILE_APPEND_BINARY:
    return writeBinary(checkFile(0,ctx),ctx,true);
case _FILE_APPEND_TEXT:
  return writeText(checkFile(0,ctx),true,ctx);
case _FILE_APPEND_TEXT_LINES:
return writeTextLines(checkFile(0,ctx),true,ctx);
case _FILE_COPY:
return copy(checkFile(0,ctx),ctx,true);
case _FILE_CREATE_DIR:
return createDirectory(checkFile(0,ctx));
case _FILE_DELETE:
return delete(checkFile(0,ctx),ctx);
case _FILE_MOVE:
return copy(checkFile(0,ctx),ctx,false);
case _FILE_READ_BINARY:
return readBinary(checkFile(0,ctx));
case _FILE_READ_TEXT:
return readText(checkFile(0,ctx),ctx);
case _FILE_WRITE:
return write(checkFile(0,ctx),false,ctx);
case _FILE_WRITE_BINARY:
return writeBinary(checkFile(0,ctx),ctx,false);
case _FILE_WRITE_TEXT:
return writeText(checkFile(0,ctx),false,ctx);
case _FILE_WRITE_TEXT_LINES:
return writeTextLines(checkFile(0,ctx),false,ctx);
case _FILE_PATH_SEPARATOR:
return Str.get(File.pathSeparator);
case _FILE_DIR_SEPARATOR:
return Str.get(File.separator);
case _FILE_LINE_SEPARATOR:
return Str.get(NL);
case _FILE_EXISTS:
return Bln.get(checkFile(0,ctx).exists());
case _FILE_IS_DIR:
return Bln.get(checkFile(0,ctx).isDirectory());
case _FILE_IS_FILE:
return Bln.get(checkFile(0,ctx).isFile());
case _FILE_LAST_MODIFIED:
return lastModified(checkFile(0,ctx));
case _FILE_SIZE:
return size(checkFile(0,ctx));
case _FILE_BASE_NAME:
return baseName(checkFile(0,ctx),ctx);
case _FILE_DIR_NAME:
return dirName(checkFile(0,ctx));
case _FILE_PATH_TO_NATIVE:
return pathToNative(checkFile(0,ctx));
case _FILE_RESOLVE_PATH:
return Str.get(checkFile(0,ctx).getAbsolutePath());
case _FILE_PATH_TO_URI:
return pathToUri(checkFile(0,ctx));
default :
return super.item(ctx,ii);
}
}
 catch (final IOException ex) {
throw FILE_IO.thrw(info,ex);
}
}
