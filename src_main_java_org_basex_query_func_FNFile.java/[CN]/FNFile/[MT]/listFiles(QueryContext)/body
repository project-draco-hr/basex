{
  final String path=string(checkStr(expr[0],ctx));
  final String pattern;
  try {
    pattern=expr.length == 2 ? string(checkStr(expr[1],ctx)).replaceAll("\\.","\\\\.").replaceAll("\\*",".*") : null;
  }
 catch (  final PatternSyntaxException ex) {
    Err.or(input,QueryText.FILEPATTERN,expr[1]);
    return null;
  }
  try {
    Iter i=new Iter(){
      int c=-1;
      final File[] files=new File(path).listFiles(new FileFilter(){
        @Override public boolean accept(        final File pathname){
          return !pathname.isHidden() && (pattern == null || pathname.getName().matches(pattern));
        }
      }
);
      @Override public Item next() throws QueryException {
        try {
          return ++c < files.length ? Str.get(files[c].getName()) : null;
        }
 catch (        Exception ex) {
          Err.or(input,QueryText.FILELIST,path);
          return null;
        }
      }
    }
;
    return i;
  }
 catch (  Exception ex) {
    Err.or(input,QueryText.FILELIST,path);
    return null;
  }
}
