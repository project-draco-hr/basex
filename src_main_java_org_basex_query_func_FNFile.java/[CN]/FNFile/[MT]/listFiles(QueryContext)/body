{
  final String path=string(checkStr(expr[0],ctx));
  final String pattern;
  try {
    pattern=expr.length == 2 ? string(checkStr(expr[1],ctx)).replaceAll("\\.","\\\\.").replaceAll("\\*",".*") : null;
  }
 catch (  final PatternSyntaxException ex) {
    FILEPATTERN.thrw(input,expr[1]);
    return null;
  }
  return new Iter(){
    File[] files;
    int c=-1;
    @Override public Item next() throws QueryException {
      if (files == null) {
        files=new File(path).listFiles();
        if (files == null)         FILELIST.thrw(input,path);
      }
      while (++c < files.length) {
        final String name=files[c].getName();
        if (!files[c].isHidden() && (pattern == null || name.matches(pattern)))         return Str.get(name);
      }
      return null;
    }
  }
;
}
