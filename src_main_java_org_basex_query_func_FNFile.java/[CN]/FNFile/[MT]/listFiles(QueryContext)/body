{
  final String path=string(checkStr(expr[0],ctx));
  final String pattern;
  try {
    pattern=expr.length == 2 ? string(checkStr(expr[1],ctx)).replaceAll("\\.","\\\\.").replaceAll("\\*",".*") : null;
  }
 catch (  final PatternSyntaxException ex) {
    Err.or(input,QueryText.FILEPATTERN,expr[1]);
    return null;
  }
  final File[] files=new File(path).listFiles(new FileFilter(){
    @Override public boolean accept(    final File pathname){
      if (pathname.isHidden())       return false;
      return pattern == null ? true : pathname.getName().matches(pattern);
    }
  }
);
  if (files == null) {
    Err.or(input,QueryText.FILELIST,path);
  }
  return new Iter(){
    int c=-1;
    @Override public Item next(){
      return ++c < files.length ? Str.get(files[c].getName()) : null;
    }
  }
;
}
