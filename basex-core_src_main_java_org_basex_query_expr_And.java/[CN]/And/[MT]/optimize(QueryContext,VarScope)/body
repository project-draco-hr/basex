{
  final int es=exprs.length;
  final ExprList el=new ExprList(es);
  Pos ps=null;
  CmpR cr=null;
  CmpSR cs=null;
  for (  final Expr e : exprs) {
    Expr tmp=null;
    if (e instanceof Pos) {
      tmp=ps == null ? e : ps.intersect((Pos)e,info);
      if (!(tmp instanceof Pos))       return tmp;
      ps=(Pos)tmp;
    }
 else     if (e instanceof CmpR) {
      tmp=cr == null ? e : cr.intersect((CmpR)e);
      if (tmp instanceof CmpR)       cr=(CmpR)tmp;
 else       if (tmp != null)       return tmp;
    }
 else     if (e instanceof CmpSR) {
      tmp=cs == null ? e : cs.intersect((CmpSR)e);
      if (tmp instanceof CmpSR)       cs=(CmpSR)tmp;
 else       if (tmp != null)       return tmp;
    }
    if (tmp == null && e != Bln.TRUE) {
      if (e == Bln.FALSE)       return optPre(Bln.FALSE,qc);
      el.add(e);
    }
  }
  if (ps != null)   el.add(ps);
  if (cr != null)   el.add(cr);
  if (cs != null)   el.add(cs);
  if (el.isEmpty())   return optPre(Bln.TRUE,qc);
  if (es != el.size())   qc.compInfo(OPTWRITE,this);
  exprs=el.array();
  compFlatten(qc);
  boolean not=true;
  for (  final Expr e : exprs) {
    if (!e.isFunction(Function.NOT)) {
      not=false;
      break;
    }
  }
  if (not) {
    qc.compInfo(OPTWRITE,this);
    final Expr[] inner=new Expr[exprs.length];
    for (int i=0; i < inner.length; i++)     inner[i]=((Arr)exprs[i]).exprs[0];
    final Expr or=new Or(info,inner).optimize(qc,scp);
    return Function.NOT.get(null,or).optimize(qc,scp);
  }
  return exprs.length == 1 ? compBln(exprs[0],info) : this;
}
