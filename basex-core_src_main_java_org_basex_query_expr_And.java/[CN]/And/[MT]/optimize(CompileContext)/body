{
  final Expr c=super.optimize(cc);
  if (c != this)   return c;
  final int es=exprs.length;
  final ExprList list=new ExprList(es);
  for (int i=0; i < es; i++) {
    Expr e=exprs[i];
    if (e instanceof Pos) {
      while (i + 1 < es && exprs[i + 1] instanceof Pos) {
        e=((Pos)e).intersect((Pos)exprs[++i],info);
      }
    }
 else     if (e instanceof CmpR) {
      while (i + 1 < es && exprs[i + 1] instanceof CmpR) {
        final Expr tmp=((CmpR)e).intersect((CmpR)exprs[i + 1]);
        if (tmp != null) {
          e=tmp;
          i++;
        }
 else {
          break;
        }
      }
    }
 else     if (e instanceof CmpSR) {
      while (i + 1 < es && exprs[i + 1] instanceof CmpSR) {
        final Expr tmp=((CmpSR)e).intersect((CmpSR)exprs[i + 1]);
        if (tmp != null) {
          e=tmp;
          i++;
        }
 else {
          break;
        }
      }
    }
    if (e == Bln.FALSE)     return optPre(Bln.FALSE,cc);
    if (e != Bln.TRUE)     list.add(e);
  }
  if (list.isEmpty())   return optPre(Bln.TRUE,cc);
  if (es != list.size()) {
    cc.info(OPTREWRITE_X,this);
    exprs=list.finish();
  }
  compFlatten(cc);
  boolean not=true;
  for (  final Expr expr : exprs) {
    if (!expr.isFunction(Function.NOT)) {
      not=false;
      break;
    }
  }
  if (not) {
    cc.info(OPTREWRITE_X,this);
    final int el=exprs.length;
    final Expr[] inner=new Expr[el];
    for (int e=0; e < el; e++)     inner[e]=((Arr)exprs[e]).exprs[0];
    return cc.function(Function.NOT,info,new Or(info,inner).optimize(cc));
  }
  return exprs.length == 1 ? compBln(exprs[0],info,cc.sc()) : this;
}
