{
  builder.openDoc(token(filename));
  final Stack<NodeIterator> stack=new Stack<NodeIterator>();
  stack.push(new NodeIterator(root));
  while (!stack.empty()) {
    final NodeIterator ni=stack.peek();
    if (ni.more()) {
      final Node n=ni.curr();
      if (n instanceof Element) {
        stack.push(new NodeIterator(n));
        atts.reset();
        nsp.reset();
        final NamedNodeMap at=n.getAttributes();
        final int as=at.getLength();
        for (int a=0; a < as; ++a) {
          final Attr att=(Attr)at.item(a);
          final byte[] an=token(att.getName());
          final byte[] av=token(att.getValue());
          if (eq(an,XMLNS)) {
            if (!stripNS)             nsp.add(EMPTY,av);
          }
 else           if (startsWith(an,XMLNSC)) {
            if (!stripNS)             nsp.add(local(an),av);
          }
 else {
            atts.add(stripNS ? local(an) : an,av);
          }
        }
        final byte[] en=token(n.getNodeName());
        builder.openElem(stripNS ? local(en) : en,atts,nsp);
      }
 else       if (n instanceof Text) {
        final String s=n.getNodeValue();
        builder.text(token(chop ? s.trim() : s));
      }
 else       if (n instanceof Comment) {
        builder.comment(token(n.getNodeValue()));
      }
 else       if (n instanceof ProcessingInstruction) {
        builder.pi(token(n.getNodeName() + ' ' + n.getNodeValue()));
      }
      ++nodes;
    }
 else {
      stack.pop();
      if (stack.empty())       break;
      builder.closeElem();
    }
  }
  builder.closeDoc();
}
