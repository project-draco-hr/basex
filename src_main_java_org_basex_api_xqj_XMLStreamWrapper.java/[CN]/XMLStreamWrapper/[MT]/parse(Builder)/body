{
  try {
    builder.startDoc(token(file.name()));
    while (reader.hasNext()) {
      final int kind=reader.next();
switch (kind) {
case XMLStreamConstants.START_ELEMENT:
        final int as=reader.getAttributeCount();
      final Atts att=new Atts();
    for (int a=0; a < as; ++a) {
      att.add(token(reader.getAttributeLocalName(a)),token(reader.getAttributeValue(a)));
    }
  builder.startElem(token(reader.getLocalName()),att);
++nodes;
break;
case XMLStreamConstants.END_ELEMENT:
builder.endElem(token(reader.getLocalName()));
break;
case XMLStreamConstants.CHARACTERS:
builder.text(token(reader.getText()));
++nodes;
break;
case XMLStreamConstants.PROCESSING_INSTRUCTION:
builder.pi(token(reader.getPITarget() + ' ' + reader.getPIData()));
++nodes;
break;
case XMLStreamConstants.COMMENT:
builder.comment(token(reader.getText()));
++nodes;
break;
case XMLStreamConstants.END_DOCUMENT:
break;
default :
throw new IOException("Unknown node kind " + kind);
}
}
builder.endDoc();
}
 catch (final ProgressException ex) {
throw ex;
}
catch (final IOException ex) {
Util.stack(ex);
throw ex;
}
catch (final XMLStreamException ex) {
final IOException ioe=new IOException(ex.getMessage());
ioe.setStackTrace(ex.getStackTrace());
throw ioe;
}
}
