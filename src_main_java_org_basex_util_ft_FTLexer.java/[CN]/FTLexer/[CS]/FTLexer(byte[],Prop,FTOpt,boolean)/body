{
  prop=pr;
  fto=opt;
  text=txt;
  final byte[] lang;
  final String lstr;
  if (fto != null && fto.ln != null) {
    lang=fto.ln;
  }
 else   if (prop != null && (lstr=pr.get(Prop.FTLANGUAGE)).length() > 0) {
    lang=token(lstr);
  }
 else {
    lang=Language.DEFAULT.ln;
  }
  Tokenizer tk=TOKENIZERS.getFirst();
  if (lang != null) {
    for (    final Tokenizer t : TOKENIZERS) {
      if (t.supports(lang)) {
        tk=t;
        break;
      }
    }
  }
  tok=tk.get(txt,pr,opt,sc);
  iterator=tok.iterator();
  if (opt != null && opt.isSet(ST) && opt.is(ST) && opt.sd == null || opt == null && pr != null && pr.is(Prop.STEMMING)) {
    SpanProcessor sp=STEMMERS.getFirst();
    for (    final SpanProcessor stem : STEMMERS) {
      if (stem.supports(lang)) {
        sp=stem;
        break;
      }
    }
    iterator=sp.get(pr,opt).process(iterator);
  }
 else   if (opt != null && opt.isSet(ST) && opt.is(ST) && opt.sd != null)   iterator=new DictStemmer(opt.sd).process(iterator);
}
