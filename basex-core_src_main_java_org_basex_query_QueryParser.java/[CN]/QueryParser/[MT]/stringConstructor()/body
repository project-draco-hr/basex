{
  check('`');
  check('`');
  check('[');
  final ExprList el=new ExprList();
  final TokenBuilder tb=new TokenBuilder();
  while (more()) {
    int p=pos;
    if (consume(']') && consume('`') && consume('`')) {
      if (!tb.isEmpty())       el.add(Str.get(tb.next()));
      return Function.CONCAT.get(sc,info(),el.finish());
    }
    pos=p;
    if (consume('`') && consume('{')) {
      if (!tb.isEmpty())       el.add(Str.get(tb.next()));
      final Expr e=expr();
      if (e != null)       el.add(Function.STRING_JOIN.get(sc,info(),e,Str.get(" ")));
      skipWs();
      check('}');
      check('`');
    }
 else {
      pos=p;
      tb.add(consume());
    }
  }
  throw error(INCOMPLETE);
}
