{
  final int s=sc.ns.size();
  final byte[] nse=sc.elemNS;
  final int npos=names.size();
  final QNm name=new QNm(qName(ELEMNAME));
  names.add(new QNmCheck(name));
  consumeWS();
  final Atts ns=new Atts();
  final ExprList cont=new ExprList();
  boolean xmlDecl=false;
  ArrayList<QNm> atts=null;
  while (true) {
    final byte[] atn=qName(null);
    if (atn.length == 0)     break;
    final ExprList attv=new ExprList();
    consumeWS();
    check('=');
    consumeWS();
    final char delim=consume();
    if (!quote(delim))     throw error(NOQUOTE,found());
    final TokenBuilder tb=new TokenBuilder();
    boolean simple=true;
    do {
      while (!consume(delim)) {
        final char ch=curr();
        if (ch == '{') {
          if (next() == '{') {
            tb.add(consume());
            consume();
          }
 else {
            final byte[] text=tb.finish();
            if (text.length == 0) {
              add(attv,enclosed(NOENCLEXPR));
              simple=false;
            }
 else {
              add(attv,Str.get(text));
            }
            tb.reset();
          }
        }
 else         if (ch == '}') {
          consume();
          check('}');
          tb.add('}');
        }
 else         if (ch == '<' || ch == 0) {
          throw error(NOQUOTE,found());
        }
 else         if (ch == '\n' || ch == '\t') {
          tb.add(' ');
          consume();
        }
 else         if (ch == '\r') {
          if (next() != '\n')           tb.add(' ');
          consume();
        }
 else {
          entity(tb);
        }
      }
      if (!consume(delim))       break;
      tb.add(delim);
    }
 while (true);
    if (!tb.isEmpty())     add(attv,Str.get(tb.finish()));
    final boolean pr=startsWith(atn,XMLNSC);
    if (pr || eq(atn,XMLNS)) {
      if (!simple)       throw error(NSCONS);
      final byte[] pref=pr ? local(atn) : EMPTY;
      final byte[] uri=attv.isEmpty() ? EMPTY : ((Str)attv.get(0)).string();
      if (eq(pref,XML) && eq(uri,XMLURI)) {
        if (xmlDecl)         throw error(DUPLNSDEF,XML);
        xmlDecl=true;
      }
 else {
        if (!Uri.uri(uri).isValid())         throw error(INVURI,uri);
        if (pr) {
          if (uri.length == 0)           throw error(NSEMPTYURI);
          if (eq(pref,XML,XMLNS))           throw error(BINDXML,pref);
          if (eq(uri,XMLURI))           throw error(BINDXMLURI,uri,XML);
          if (eq(uri,XMLNSURI))           throw error(BINDXMLURI,uri,XMLNS);
          sc.ns.add(pref,uri);
        }
 else {
          if (eq(uri,XMLURI))           throw error(XMLNSDEF,uri);
          sc.elemNS=uri;
        }
        if (ns.contains(pref))         throw error(DUPLNSDEF,pref);
        ns.add(pref,uri);
      }
    }
 else {
      final QNm attn=new QNm(atn);
      if (atts == null)       atts=new ArrayList<>(1);
      atts.add(attn);
      names.add(new QNmCheck(attn,false));
      add(cont,new CAttr(sc,info(),false,attn,attv.finish()));
    }
    if (!consumeWS())     break;
  }
  if (consume('/')) {
    check('>');
  }
 else {
    check('>');
    while (curr() != '<' || next() != '/') {
      final Expr e=dirElemContent(name.string());
      if (e == null)       continue;
      add(cont,e);
    }
    pos+=2;
    final byte[] close=qName(ELEMNAME);
    consumeWS();
    check('>');
    if (!eq(name.string(),close))     throw error(TAGWRONG,name.string(),close);
  }
  assignURI(npos);
  if (atts != null) {
    final int as=atts.size();
    for (int a=0; a < as - 1; a++) {
      for (int b=a + 1; b < as; b++) {
        if (atts.get(a).eq(atts.get(b)))         throw error(ATTDUPL,atts.get(a));
      }
    }
  }
  sc.ns.size(s);
  sc.elemNS=nse;
  return new CElem(sc,info(),name,ns,cont.finish());
}
