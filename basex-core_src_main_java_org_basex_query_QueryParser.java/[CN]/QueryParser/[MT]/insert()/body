{
  final int i=pos;
  if (!wsConsumeWs(INSERT) || !wsConsumeWs(NODE) && !wsConsumeWs(NODES)) {
    pos=i;
    return null;
  }
  final Expr s=check(single(),INCOMPLETE);
  boolean first=false;
  boolean last=false;
  boolean before=false;
  boolean after=false;
  if (wsConsumeWs(AS)) {
    first=wsConsumeWs(FIRST);
    if (!first) {
      wsCheck(LAST);
      last=true;
    }
    wsCheck(INTO);
  }
 else   if (!wsConsumeWs(INTO)) {
    after=wsConsumeWs(AFTER);
    before=!after && wsConsumeWs(BEFORE);
    if (!after && !before)     error(INCOMPLETE);
  }
  final Expr trg=check(single(),INCOMPLETE);
  ctx.updating(true);
  return new Insert(sc,info(),s,first,last,before,after,trg);
}
