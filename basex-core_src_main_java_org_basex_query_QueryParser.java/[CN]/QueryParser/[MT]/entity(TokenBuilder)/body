{
  final int i=pos;
  final boolean ent=consume('&');
  if (ent) {
    if (consume('#')) {
      final int b=consume('x') ? 0x10 : 10;
      boolean ok=true;
      int n=0;
      do {
        final char c=curr();
        final boolean m=digit(c);
        final boolean h=b == 0x10 && (c >= 'a' && c <= 'f' || c >= 'A' && c <= 'F');
        if (!m && !h)         entityError(i,INVENTITY_X);
        final long nn=n;
        n=n * b + (consume() & 0xF);
        if (n < nn)         ok=false;
        if (!m)         n+=9;
      }
 while (!consume(';'));
      if (!ok)       entityError(i,INVCHARREF_X);
      if (!XMLToken.valid(n))       entityError(i,INVCHARREF_X);
      tb.add(n);
    }
 else {
      if (consume("lt")) {
        tb.add('<');
      }
 else       if (consume("gt")) {
        tb.add('>');
      }
 else       if (consume("amp")) {
        tb.add('&');
      }
 else       if (consume("quot")) {
        tb.add('"');
      }
 else       if (consume("apos")) {
        tb.add('\'');
      }
 else {
        entityError(i,INVENTITY_X);
      }
      if (!consume(';'))       entityError(i,INVENTITY_X);
    }
  }
 else {
    final char c=consume();
    int ch=c;
    if (Character.isHighSurrogate(c) && curr() != 0 && Character.isLowSurrogate(curr())) {
      ch=Character.toCodePoint(c,consume());
    }
    if (ch == '\r') {
      ch='\n';
      if (curr(ch))       consume();
    }
    tb.add(ch);
  }
  return ent;
}
