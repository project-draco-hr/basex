{
  skipWs();
  final QNm qnm=eQName(QNAME_X,XQ_URI);
  final byte[] val=stringLiteral();
  final String name=string(qnm.local());
  if (eq(qnm.uri(),OUTPUT_URI)) {
    if (module != null)     throw error(MODOUT);
    if (qc.serialOpts == null) {
      qc.serialOpts=new SerializerOptions(qc.context.options.get(MainOptions.SERIALIZER));
    }
    if (!decl.add("S " + name))     throw error(OUTDUPL_X,name);
    try {
      qc.serialOpts.assign(name,string(val));
      if (name.equals(SerializerOptions.USE_CHARACTER_MAPS.name()))       throw error(OUTMAP_X,val);
    }
 catch (    final BaseXException ex) {
      for (      final Option<?> o : qc.serialOpts)       if (o.name().equals(name))       throw error(SER_X,ex);
      throw error(OUTINVALID_X,ex);
    }
    if (name.equals(SerializerOptions.PARAMETER_DOCUMENT.name())) {
      final IO io=IO.get(string(resolvedUri(val).string()));
      try {
        final InputInfo info=info();
        FuncOptions.serializer(new DBNode(io).children().next(),qc.serialOpts,info);
        final HashMap<String,String> free=qc.serialOpts.free();
        if (!free.isEmpty())         throw SEROPTION_X.get(info,free.keySet().iterator().next());
        final StringOption cm=SerializerOptions.USE_CHARACTER_MAPS;
        if (!qc.serialOpts.get(cm).isEmpty())         throw SEROPTION_X.get(info,cm.name());
      }
 catch (      final IOException ex) {
        throw error(OUTDOC_X,val);
      }
    }
  }
 else   if (eq(qnm.uri(),XQ_URI)) {
    throw error(DECLOPTION_X,qnm);
  }
 else   if (eq(qnm.uri(),DB_URI)) {
    final String ukey=name.toUpperCase(Locale.ENGLISH);
    final Option<?> opt=qc.context.options.option(ukey);
    if (opt == null)     throw error(BASX_OPTIONS_X,ukey);
    qc.staticOpts.put(opt,qc.context.options.get(opt));
    qc.tempOpts.add(name).add(string(val));
  }
 else   if (eq(qnm.uri(),QUERY_URI)) {
    if (name.equals(READ_LOCK)) {
      for (      final byte[] lock : split(val,','))       qc.readLocks.add(DBLocking.USER_PREFIX + string(lock).trim());
    }
 else     if (name.equals(WRITE_LOCK)) {
      for (      final byte[] lock : split(val,','))       qc.writeLocks.add(DBLocking.USER_PREFIX + string(lock).trim());
    }
 else {
      throw error(BASX_OPTIONS_X,name);
    }
  }
}
