{
  skipWs();
  final QNm qnm=eQName(QNAME_X,XQ_URI);
  final byte[] val=stringLiteral();
  final String name=string(qnm.local());
  if (eq(qnm.uri(),OUTPUT_URI)) {
    if (module != null)     throw error(MODOUT);
    final SerializerOptions sopts=qc.serParams();
    if (!decl.add("S " + name))     throw error(OUTDUPL_X,name);
    sopts.parse(name,val,sc,info());
  }
 else   if (eq(qnm.uri(),XQ_URI)) {
    throw error(DECLOPTION_X,qnm);
  }
 else   if (eq(qnm.uri(),DB_URI)) {
    final String ukey=name.toUpperCase(Locale.ENGLISH);
    final Option<?> opt=qc.context.options.option(ukey);
    if (opt == null)     throw error(BASX_OPTIONS_X,ukey);
    qc.staticOpts.put(opt,qc.context.options.get(opt));
    qc.tempOpts.add(name).add(string(val));
  }
 else   if (eq(qnm.uri(),QUERY_URI)) {
switch (name) {
case READ_LOCK:
      for (      final byte[] lock : split(val,','))       qc.readLocks.add(DBLocking.USER_PREFIX + string(lock).trim());
    break;
case WRITE_LOCK:
  for (  final byte[] lock : split(val,','))   qc.writeLocks.add(DBLocking.USER_PREFIX + string(lock).trim());
break;
default :
throw error(BASX_OPTIONS_X,name);
}
}
}
