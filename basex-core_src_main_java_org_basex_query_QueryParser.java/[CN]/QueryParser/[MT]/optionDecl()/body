{
  skipWS();
  final QNm qnm=eQName(QNAMEINV,sc.xquery3() ? XQURI : URICHECK);
  final byte[] val=stringLiteral();
  final String name=string(qnm.local());
  if (sc.xquery3() && eq(qnm.uri(),OUTPUTURI)) {
    if (module != null)     error(MODOUT);
    if (ctx.serialOpts == null) {
      ctx.serialOpts=ctx.context.options.get(MainOptions.SERIALIZER);
    }
    if (!decl.add("S " + name))     error(OUTDUPL,name);
    try {
      ctx.serialOpts.assign(name,string(val));
    }
 catch (    final BaseXException ex) {
      for (      final Option<?> o : ctx.serialOpts)       if (o.name().equals(name))       error(SERANY,ex);
      error(OUTINVALID,ex);
    }
    if (name.equals(SerializerOptions.PARAMETER_DOCUMENT.name())) {
      final IO io=IO.get(string(resolvedUri(val).string()));
      try {
        final ANode node=new DBNode(io,ctx.context.options).children().next();
        final InputInfo info=info();
        FuncOptions.serializer(node,ctx.serialOpts,info);
        final HashMap<String,String> free=ctx.serialOpts.free();
        if (!free.isEmpty())         throw SERWHICH.get(info,free.keySet().iterator().next());
        final StringOption cm=SerializerOptions.USE_CHARACTER_MAPS;
        if (!ctx.serialOpts.get(cm).isEmpty())         throw SERWHICH.get(info,cm.name());
      }
 catch (      final IOException ex) {
        error(OUTDOC,val);
      }
    }
  }
 else   if (sc.xquery3() && eq(qnm.uri(),XQURI)) {
    error(DECLOPTION,qnm);
  }
 else   if (eq(qnm.uri(),DBURI)) {
    final String ukey=name.toUpperCase(Locale.ENGLISH);
    final Option<?> opt=ctx.context.options.option(ukey);
    if (opt == null)     error(BASX_OPTIONS,ukey);
    ctx.staticOpts.put(opt,ctx.context.options.get(opt));
    ctx.tempOpts.add(name).add(string(val));
  }
 else   if (eq(qnm.uri(),QUERYURI)) {
    if (name.equals(READ_LOCK)) {
      for (      final byte[] lock : split(val,','))       ctx.readLocks.add(DBLocking.USER_PREFIX + string(lock).trim());
    }
 else     if (name.equals(WRITE_LOCK)) {
      for (      final byte[] lock : split(val,','))       ctx.writeLocks.add(DBLocking.USER_PREFIX + string(lock).trim());
    }
 else {
      error(BASX_OPTIONS,name);
    }
  }
}
