{
  skipWS();
  final QNm name=eQName(QNAMEINV,ctx.sc.xquery3() ? XQURI : URICHECK);
  final byte[] val=stringLiteral();
  final String key=string(name.local());
  if (ctx.sc.xquery3() && eq(name.uri(),OUTPUTURI)) {
    if (module != null)     error(MODOUT);
    if (ctx.serialOpts == null) {
      final Options opts=ctx.context.options;
      ctx.serialOpts=new SerializerOptions(opts.get(Options.SERIALIZER));
    }
    if (ctx.serialOpts.get(key) == null)     error(OUTWHICH,key);
    if (!decl.add("S " + key))     error(OUTDUPL,key);
    if (key.equals(AOptions.toString(SerializerOptions.S_PARAMETER_DOCUMENT))) {
      final IO io=IO.get(string(resolvedUri(val).string()));
      try {
        final ANode node=new DBNode(io,ctx.context.options).children().next();
        final InputInfo info=info();
        final TokenMap tm=FuncParams.serializerMap(node,info);
        FuncParams.serializerProp(tm,info);
        for (        final byte[] sk : tm)         ctx.serialOpts.set(string(sk),string(tm.get(sk)));
      }
 catch (      final IOException ex) {
        error(OUTDOC,val);
      }
    }
    ctx.serialOpts.set(key,string(val));
  }
 else   if (ctx.sc.xquery3() && eq(name.uri(),XQURI)) {
    error(DECLOPTION,name);
  }
 else   if (eq(name.uri(),DBURI)) {
    final String ukey=key.toUpperCase(Locale.ENGLISH);
    final Object obj=ctx.context.options.get(ukey);
    if (obj == null)     error(BASX_OPTIONS,ukey);
    ctx.globalOpt.put(ukey,obj);
    ctx.dbOptions.add(key);
    ctx.dbOptions.add(string(val));
  }
 else   if (eq(name.uri(),QUERYURI)) {
    if (key.equals(READ_LOCK)) {
      for (      final byte[] lock : split(val,','))       ctx.readLocks.add(DBLocking.USER_PREFIX + string(lock).trim());
    }
 else     if (key.equals(WRITE_LOCK)) {
      for (      final byte[] lock : split(val,','))       ctx.writeLocks.add(DBLocking.USER_PREFIX + string(lock).trim());
    }
 else {
      error(BASX_OPTIONS,key);
    }
  }
}
