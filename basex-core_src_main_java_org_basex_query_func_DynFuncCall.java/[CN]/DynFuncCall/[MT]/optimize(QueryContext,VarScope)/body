{
  final int ar=expr.length - 1;
  final Expr f=expr[ar];
  final Type t=f.type().type;
  if (t instanceof FuncType) {
    final FuncType ft=(FuncType)t;
    if (ft.args != null && ft.args.length != ar)     throw INVARITY.get(info,f,ar);
    if (ft.ret != null)     type=ft.ret;
  }
  if (f instanceof XQFunctionExpr) {
    if (allAreValues() && f instanceof Map)     return optPre(value(ctx),ctx);
    if (!(f instanceof FuncItem && comesFrom((FuncItem)f))) {
      final Expr[] args=Arrays.copyOf(expr,expr.length - 1);
      final Expr inl=((XQFunctionExpr)f).inlineExpr(args,ctx,scp,info);
      if (inl != null)       return inl;
    }
  }
  return this;
}
