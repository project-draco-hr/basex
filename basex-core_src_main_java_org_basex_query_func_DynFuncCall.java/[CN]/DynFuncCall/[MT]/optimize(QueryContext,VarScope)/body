{
  final int ar=exprs.length - 1;
  final Expr f=exprs[ar];
  final Type t=f.seqType().type;
  if (t instanceof FuncType) {
    final FuncType ft=(FuncType)t;
    if (ft.argTypes != null && ft.argTypes.length != ar) {
      final Expr e=f instanceof FuncItem ? ((FuncItem)f).expr : f;
      throw INVARITY_X_X_X_X.get(info,e,ar,ar == 1 ? "" : "s",ft.argTypes.length);
    }
    if (ft.retType != null)     seqType=ft.retType;
  }
  if ((f instanceof Map || f instanceof Array) && allAreValues())   return optPre(value(qc),qc);
  if (f instanceof XQFunctionExpr) {
    final XQFunctionExpr fe=(XQFunctionExpr)f;
    if (!(f instanceof FuncItem && comesFrom((FuncItem)f))) {
      if (!sc.mixUpdates && upd != fe.annotations().contains(Annotation.UPDATING))       throw (upd ? FUNCNOTUP : FUNCUP).get(info);
      final Expr[] args=Arrays.copyOf(exprs,ar);
      final Expr in=fe.inlineExpr(args,qc,scp,info);
      if (in != null)       return in;
    }
  }
 else   if (f instanceof Item && !(f instanceof FItem)) {
    throw INVFUNCITEM_X.get(info,((Item)f).type,f);
  }
  return this;
}
