{
  values=choice.clone();
  for (  final String v : values) {
    for (int c=0; c < v.length(); c++) {
      num=num && v.charAt(c) >= '0' && v.charAt(c) <= '9';
    }
    if (!num)     break;
  }
  setLayout(new TableLayout(2,1));
  text=new BaseXTextField(help,parent);
  text.addFocusListener(new FocusAdapter(){
    @Override public void focusGained(    final FocusEvent e){
      text.selectAll();
    }
  }
);
  text.addKeyListener(new KeyAdapter(){
    boolean typed;
    @Override public void keyPressed(    final KeyEvent e){
      final int oldpos=list.getSelectedIndex();
      int newpos=oldpos;
      final int page=getHeight() / getFont().getSize();
      if (e.getKeyCode() == KeyEvent.VK_DOWN) {
        newpos=Math.min(oldpos + 1,values.length - 1);
      }
 else       if (e.getKeyCode() == KeyEvent.VK_UP) {
        newpos=Math.max(oldpos - 1,0);
      }
 else       if (e.getKeyCode() == KeyEvent.VK_PAGE_DOWN) {
        newpos=Math.min(oldpos + page,values.length - 1);
      }
 else       if (e.getKeyCode() == KeyEvent.VK_PAGE_UP) {
        newpos=Math.max(oldpos - page,0);
      }
 else       if (e.isControlDown() && e.getKeyCode() == KeyEvent.VK_HOME) {
        newpos=0;
      }
 else       if (e.isControlDown() && e.getKeyCode() == KeyEvent.VK_END) {
        newpos=values.length - 1;
      }
      if (oldpos != newpos && newpos < values.length) {
        list.setSelectedValue(values[newpos],true);
        text.setText(values[newpos]);
        text.selectAll();
        parent.action(null);
        typed=false;
      }
    }
    @Override public void keyTyped(    final KeyEvent e){
      final char ch=e.getKeyChar();
      if (num) {
        typed=ch >= '0' && ch <= '9';
        if (!typed)         e.consume();
      }
 else {
        typed=ch >= ' ' && ch != 127;
      }
    }
    @Override public void keyReleased(    final KeyEvent e){
      if (typed) {
        typed=false;
        final String txt=text.getText().trim().toLowerCase();
        int i=0;
        for (i=0; i < values.length; i++) {
          final String txt2=values[i].toLowerCase();
          if (txt2.startsWith(txt))           break;
        }
        if (i < values.length) {
          final int c=text.getCaretPosition();
          list.setSelectedValue(values[i],true);
          text.setText(values[i]);
          text.select(c,values[i].length());
        }
 else         if (num) {
        }
      }
      parent.action(null);
    }
  }
);
  add(text);
  final MouseInputAdapter mouse=new MouseInputAdapter(){
    @Override public void mousePressed(    final MouseEvent e){
      text.setText(list.getSelectedValue().toString());
      text.requestFocusInWindow();
      text.selectAll();
      parent.action(null);
    }
    @Override public void mouseDragged(    final MouseEvent e){
      mousePressed(e);
    }
    @Override public void mouseClicked(    final MouseEvent e){
      if (e.getClickCount() == 2) {
        parent.close();
        return;
      }
    }
  }
;
  list=new JList(choice);
  list.setFocusable(false);
  list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  list.addMouseListener(mouse);
  list.addMouseMotionListener(mouse);
  text.setFont(list.getFont());
  BaseXLayout.addHelp(list,help);
  scroll=new JScrollPane(list,ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  add(scroll);
  setIndex(0);
  addFocusListener(new FocusAdapter(){
    @Override public void focusGained(    final FocusEvent e){
      text.requestFocusInWindow();
    }
  }
);
}
