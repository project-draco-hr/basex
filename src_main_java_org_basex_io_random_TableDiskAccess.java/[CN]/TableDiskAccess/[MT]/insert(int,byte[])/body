{
  if (entries.length == 0)   return;
  dirty=true;
  final int split=cursor(pre - 1) + IO.NODESIZE;
  final int nr=entries.length >>> IO.NODEPOWER;
  final int nold=npre - fpre << IO.NODEPOWER;
  final int moved=nold - split;
  Buffer bf=bm.current();
  if (nold + entries.length <= IO.BLOCKSIZE) {
    System.arraycopy(bf.data,split,bf.data,split + entries.length,moved);
    System.arraycopy(entries,0,bf.data,split,entries.length);
    bf.dirty=true;
    for (int i=index + 1; i < blocks; ++i)     fpres[i]+=nr;
    npre+=nr;
    meta.size+=nr;
    return;
  }
  final byte[] all=new byte[entries.length + moved];
  System.arraycopy(entries,0,all,0,entries.length);
  System.arraycopy(bf.data,split,all,entries.length,moved);
  int n=bf.data.length - split;
  if (n > 0) {
    System.arraycopy(all,0,bf.data,split,n);
    bf.dirty=true;
  }
  int neededBlocks=(all.length - n) / IO.BLOCKSIZE;
  final int remain=(all.length - n) % IO.BLOCKSIZE;
  if (remain > 0) {
    if (index + 1 < blocks) {
      final int o=occSpace(index + 1) << IO.NODEPOWER;
      if (remain <= IO.BLOCKSIZE - o) {
        readIndex(index + 1);
        bf=bm.current();
        System.arraycopy(bf.data,0,bf.data,remain,o);
        System.arraycopy(all,all.length - remain,bf.data,0,remain);
        bf.dirty=true;
        fpres[index]-=remain >>> IO.NODEPOWER;
        readIndex(index - 1);
      }
 else {
        ++neededBlocks;
      }
    }
 else {
      ++neededBlocks;
    }
  }
  final int expBlocks=allBlocks + neededBlocks - (allBlocks - blocks);
  if (expBlocks > fpres.length) {
    final int ns=Math.max(fpres.length << 1,expBlocks);
    fpres=Arrays.copyOf(fpres,ns);
    pages=Arrays.copyOf(pages,ns);
  }
  Array.move(fpres,index + 1,neededBlocks,blocks - index - 1);
  Array.move(pages,index + 1,neededBlocks,blocks - index - 1);
  while (neededBlocks-- > 0) {
    freeBlock();
    n+=write(all,n);
    fpres[index]=fpres[index - 1] + IO.ENTRIES;
    pages[index]=(int)bm.current().pos;
  }
  for (int i=index + 1; i < blocks; ++i)   fpres[i]+=nr;
  meta.size+=nr;
  fpre=fpres[index];
  npre=index + 1 < blocks && fpres[index + 1] < meta.size ? fpres[index + 1] : meta.size;
}
