{
  final int nnew=entries.length;
  if (nnew == 0)   return;
  dirty=true;
  final int nr=nnew >>> IO.NODEPOWER;
  final int split;
  if (pre == 0) {
    readIndex(0);
    used++;
    split=0;
  }
 else {
    split=cursor(pre - 1) + IO.NODESIZE;
  }
  final int nold=npre - fpre << IO.NODEPOWER;
  final int moved=nold - split;
  Buffer bf=bm.current();
  if (nold + nnew <= IO.BLOCKSIZE) {
    Array.move(bf.data,split,nnew,moved);
    System.arraycopy(entries,0,bf.data,split,nnew);
    bf.dirty=true;
    for (int i=index + 1; i < used; ++i)     fpres[i]+=nr;
    npre+=nr;
    meta.size+=nr;
    return;
  }
  final byte[] all=new byte[nnew + moved];
  System.arraycopy(entries,0,all,0,nnew);
  System.arraycopy(bf.data,split,all,nnew,moved);
  int nrem=IO.BLOCKSIZE - split;
  if (nrem > 0) {
    System.arraycopy(all,0,bf.data,split,nrem);
    bf.dirty=true;
  }
  final int req=all.length - nrem;
  int needed=req / IO.BLOCKSIZE;
  final int remain=req % IO.BLOCKSIZE;
  if (remain > 0) {
    if (index + 1 < used) {
      final int o=occSpace(index + 1) << IO.NODEPOWER;
      if (remain <= IO.BLOCKSIZE - o) {
        readIndex(index + 1);
        bf=bm.current();
        System.arraycopy(bf.data,0,bf.data,remain,o);
        System.arraycopy(all,all.length - remain,bf.data,0,remain);
        bf.dirty=true;
        fpres[index]-=remain >>> IO.NODEPOWER;
        readIndex(index - 1);
      }
 else {
        ++needed;
      }
    }
 else {
      ++needed;
    }
  }
  final int exp=blocks + needed - (blocks - used);
  if (exp > fpres.length) {
    final int ns=Math.max(fpres.length << 1,exp);
    fpres=Arrays.copyOf(fpres,ns);
    pages=Arrays.copyOf(pages,ns);
  }
  Array.move(fpres,index + 1,needed,used - index - 1);
  Array.move(pages,index + 1,needed,used - index - 1);
  while (needed-- > 0) {
    freeBlock();
    nrem+=write(all,nrem);
    fpres[index]=fpres[index - 1] + IO.ENTRIES;
    pages[index]=(int)bm.current().pos;
  }
  for (int i=index + 1; i < used; ++i)   fpres[i]+=nr;
  meta.size+=nr;
  fpre=fpres[index];
  npre=index + 1 < used && fpres[index + 1] < meta.size ? fpres[index + 1] : meta.size;
}
