{
  return new FTIter(){
    /** 
 * Index iterator. 
 */
    FTIndexIterator iat;
    /** 
 * Text length. 
 */
    int len;
    @Override public FTNode next() throws QueryException {
      if (iat == null) {
        final FTLexer lex=new FTLexer(ftt.opt);
        FTIndexIterator ia=null;
        int t=0;
        final TokenSet ts=tokens(txt != null ? txt : tokens(ctx),ftt.opt);
        for (        final byte[] k : ts) {
          lex.init(k);
          ia=null;
          int d=0;
          if (!lex.hasNext())           return null;
          do {
            final byte[] tok=lex.nextToken();
            t+=tok.length;
            if (ftt.opt.sw != null && ftt.opt.sw.id(tok) != 0) {
              ++d;
            }
 else {
              final FTIndexIterator ir=lex.get().length > MAXLEN ? scan(lex) : (FTIndexIterator)data.ids(lex);
              if (ia == null) {
                ia=ir;
              }
 else {
                ia=FTIndexIterator.intersect(ia,ir,++d);
                d=0;
              }
            }
          }
 while (lex.hasNext());
          if (iat == null) {
            len=t;
            iat=ia;
          }
 else           if (mode == FTMode.M_ALL || mode == FTMode.M_ALLWORDS) {
            if (ia.indexSize() == 0)             return null;
            len+=t;
            iat=FTIndexIterator.intersect(ia,iat,0);
          }
 else {
            if (ia.indexSize() == 0)             continue;
            len=Math.max(t,len);
            iat=FTIndexIterator.union(ia,iat);
          }
          iat.tokenNum(++ctx.ftoknum);
        }
      }
      return iat != null && iat.more() ? new FTNode(iat.matches(),data,iat.next(),len,iat.indexSize(),iat.score()) : null;
    }
  }
;
}
