{
  return new FTIter(){
    /** 
 * Index iterator. 
 */
    FTIndexIterator iat;
    /** 
 * Text length. 
 */
    int tl;
    @Override public FTNode next(){
      if (iat == null) {
        final FTLexer lex=new FTLexer(ftt.opt);
        tl=0;
        for (        final byte[] t : txt) {
          lex.init(t);
          tl+=t.length;
          int d=0;
          boolean f=mode != FTMode.M_PHRASE;
          while (lex.hasNext()) {
            final byte[] token=lex.nextToken();
            if (ftt.opt.sw != null && ftt.opt.sw.id(token) != 0) {
              ++d;
            }
 else {
              final FTIndexIterator i=(FTIndexIterator)data.ids(lex);
              if (iat == null) {
                iat=i;
              }
 else               if (f) {
                if (mode == FTMode.M_ANY || mode == FTMode.M_ANYWORD) {
                  iat=FTIndexIterator.union(i,iat);
                }
 else {
                  iat=FTIndexIterator.intersect(i,iat,0);
                }
              }
 else {
                iat=FTIndexIterator.intersect(iat,i,++d);
                d=0;
              }
            }
            f=mode == FTMode.M_ALLWORDS || mode == FTMode.M_ANYWORD;
          }
        }
        iat.tokenNum(++ctx.ftoknum);
      }
      return iat.more() ? new FTNode(iat.matches(),data,iat.next(),tl,iat.indexSize(),iat.score()) : null;
    }
  }
;
}
