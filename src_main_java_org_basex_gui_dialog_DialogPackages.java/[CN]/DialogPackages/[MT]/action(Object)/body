{
  final Context ctx=gui.context;
  if (refresh) {
    packages.setData(RepoList.list(ctx).toArray());
    packages.requestFocusInWindow();
    refresh=false;
  }
  final StringList pkgs=packages.getValues();
  final ArrayList<Command> cmds=new ArrayList<Command>();
  final byte[] key=Token.token(packages.getValue());
  final TokenMap pkg=ctx.repo.pkgDict();
  final boolean single=pkg.get(key) != null;
  final String dir=single ? Token.string(pkg.get(key)) : "";
  if (cmp == install) {
    final String path=gui.gprop.get(GUIProp.PKGPATH);
    final BaseXFileChooser fc=new BaseXFileChooser(FILE_OR_DIR,path,gui);
    fc.addFilter(XML_ARCHIVES,IO.XARSUFFIX);
    final IOFile file=fc.select(Mode.FDOPEN);
    if (file == null)     return;
    gui.gprop.set(GUIProp.PKGPATH,file.path());
    refresh=true;
    cmds.add(new RepoInstall(file.path(),null));
  }
 else   if (cmp == delete) {
    if (!Dialog.confirm(gui,Util.info(DELETE_PACKAGES_X,pkgs.size())))     return;
    refresh=true;
    for (    final String p : pkgs) {
      cmds.add(new RepoDelete(Token.string(pkg.get(Token.token(p))),null));
    }
  }
 else {
    if (single) {
      title.setText(key.length == 0 ? DOTS : Token.string(key));
      uri.setText(Token.string(Package.name(key)));
      version.setText(Token.string(Package.version(key)));
      directory.setText(dir);
    }
    delete.setEnabled(pkgs.size() > 0);
  }
  if (cmds.size() != 0) {
    DialogProgress.execute(this,"",cmds.toArray(new Command[cmds.size()]));
  }
}
