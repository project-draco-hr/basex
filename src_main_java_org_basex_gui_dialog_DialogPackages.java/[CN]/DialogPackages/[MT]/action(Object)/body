{
  final Context ctx=gui.context;
  if (refresh) {
    packages.setData(new RepoManager(ctx).list().toArray());
    packages.requestFocusInWindow();
    refresh=false;
  }
  final StringList pkgs=packages.getValues();
  final ArrayList<Command> cmds=new ArrayList<Command>();
  if (cmp == install) {
    final String pp=gui.gprop.get(GUIProp.PKGPATH);
    final BaseXFileChooser fc=new BaseXFileChooser(FILE_OR_DIR,pp,gui);
    fc.addFilter(XML_ARCHIVES,IO.XARSUFFIX);
    fc.addFilter(JAVA_ARCHIVES,IO.JARSUFFIX);
    fc.addFilter(XQUERY_FILES,IO.XQSUFFIXES);
    final IOFile file=fc.select(Mode.FDOPEN);
    if (file == null)     return;
    gui.gprop.set(GUIProp.PKGPATH,file.path());
    refresh=true;
    cmds.add(new RepoInstall(file.path(),null));
  }
 else   if (cmp == delete) {
    if (!BaseXDialog.confirm(gui,Util.info(DELETE_PACKAGES_X,pkgs.size())))     return;
    refresh=true;
    for (    final String p : pkgs)     cmds.add(new RepoDelete(p,null));
  }
 else {
    final byte[] key=Token.token(packages.getValue());
    final TokenMap pkg=ctx.repo.pkgDict();
    if (pkg.get(key) != null) {
      title.setText(key.length == 0 ? DOTS : Token.string(key));
      name.setText(Token.string(Package.name(key)));
      version.setText(Token.string(Package.version(key)));
      type.setText(PkgText.EXPATH);
      path.setText(Token.string(pkg.get(key)));
    }
 else {
      final IOFile file=RepoManager.file(key,ctx.repo);
      final String pp=Token.string(key);
      title.setText(key.length == 0 ? DOTS : pp);
      name.setText(file != null ? file.name() : "-");
      version.setText("-");
      type.setText(PkgText.INTERNAL);
      path.setText(pp.replace('.','/'));
    }
    delete.setEnabled(pkgs.size() > 0);
  }
  if (!cmds.isEmpty()) {
    DialogProgress.execute(this,cmds.toArray(new Command[cmds.size()]));
  }
}
