{
  byte[] mvID=null;
  byte[] bibID=null;
  byte[] title=null;
  byte[] description=null;
  byte[] type=null;
  byte[] language=null;
  byte[] original=null;
  byte[] subtitle=null;
  byte[] town=null;
  byte[] publisher=null;
  byte[] year=null;
  byte[] format=null;
  byte[] details=null;
  byte[] note=null;
  byte[] isbn=null;
  byte[] subject=null;
  int nrSigs=0;
  int nrAuth=0;
  int nrInst=0;
  boolean shortTitle=false;
  in.cursor(pos);
  while (true) {
    final byte[] line=find(in,(byte)'\n');
    final int l=line.length;
    if (l > 3) {
      if (line[0] == '#')       continue;
      final int n=toInt(line,0,3);
      if (n == 1) {
        if (bibID == null) {
          bibID=string(line);
          mvID=mvids.get(bibID);
          if (mvID == null) {
            mvID=token(++maxid);
            mvids.put(bibID,mvID);
          }
        }
      }
 else       if (n == 29) {
        type=mediatypes.get(num(line));
      }
 else       if (n == 37 && language == null) {
        language=language(line);
      }
 else       if (n == 81) {
        title=string(line);
        shortTitle=true;
      }
 else       if (n >= 100 && n < 200 && (n & 3) == 0) {
        auth[nrAuth++]=string(line);
      }
 else       if (n >= 200 && n < 300 && (n & 3) == 0) {
        inst[nrInst++]=string(line);
      }
 else       if (n == 304) {
        original=string(line);
      }
 else       if (n == 310) {
        title=string(line);
        shortTitle=true;
      }
 else       if (n == 331) {
        if (title == null)         title=string(line);
 else         if (shortTitle)         description=string(line);
      }
 else       if (n == 335) {
        subtitle=string(line);
      }
 else       if (n == 340) {
        if (original == null)         original=string(line);
      }
 else       if (n == 359) {
        description=merge(description,string(line));
      }
 else       if (n == 410) {
        town=string(line);
      }
 else       if (n == 412) {
        publisher=string(line);
      }
 else       if (n == 425) {
        year=year(line);
      }
 else       if (n == 433) {
        format=string(line);
      }
 else       if (n == 501) {
        details=string(line);
        year=year2(details,year);
      }
 else       if (n == 537) {
        note=string(line);
      }
 else       if (n == 540) {
        isbn=string(line);
      }
 else       if (n == 542) {
        isbn=string(line);
      }
 else       if (n == 544) {
        sig[nrSigs++]=string(line);
      }
 else       if (n == 700) {
        if (nrSigs == 0)         sig[nrSigs++]=string(line);
      }
    }
 else {
      atts.clear();
      atts.add(MV_ID,mvID);
      atts.add(BIB_ID,bibID);
      if (sb != 0 && !flat)       atts.add(MAX,token(sb));
      if (last != null) {
        if (title == null)         title=last;
 else         if (!eq(last,title))         title=concat(last,SEMI,title);
      }
      builder.openElem(MEDIUM,atts,nsp);
      add(TYPE,type);
      add(LANGUAGE,language);
      for (int s=0; s < nrAuth; ++s)       add(AUTHOR,auth[s]);
      for (int s=0; s < nrInst; ++s)       add(INSTITUTE,inst[s]);
      add(ORIGINAL,original);
      add(TITLE,title);
      add(SUBTITLE,subtitle);
      add(DESCRIPTION,description);
      add(TOWN,town);
      add(PUBLISHER,publisher);
      add(YEAR,year);
      add(FORMAT,format);
      add(DETAILS,details);
      add(NOTE,note);
      for (int s=0; s < nrSigs; ++s)       add(SIGNATURE,sig[s]);
      for (int s=0; s < nrSigs; ++s) {
        if (subject == null)         subject=subjects.get(subject(sig[s]));
      }
      add(SUBJECT,subject);
      add(ISBN,isbn);
      add(POSTER,posters.get(bibID));
      add(GENRE,genres.get(mvID));
      add(STATUS,status.get(bibID));
      add(LENDINGS,lendings.get(bibID));
      if (sb == 0 || flat)       builder.closeElem();
      return title;
    }
  }
}
