{
  final XQuery query=new XQuery("\n" + "        import module namespace raytracer=\"http://www.xqsharp.com/raytracer\";\n" + "        import module namespace scene=\"http://www.xqsharp.com/raytracer/scene\";\n"+ "        declare variable $width := 64;\n"+ "        declare variable $height := 64;\n"+ "        declare variable $input-context := .;\n"+ "        declare variable $scene := scene:prepare-scene($input-context/scene);\n"+ "        string-join( ( \"P3\", string-join((string($width), string($height)), \" \"), \"255\", (: : Now the pixel data. We take each pixel in the image, and recenter it, so that the : y co-ordinate ($y-recentered) ranges from -0.5 at the bottom of the image, to 0.5 : at the top of the image. : : The aspect ratio is used to \"stretch\" the range of x-coordinate values to stop the : image from being skewed. :) \n"+ "        let $aspect-ratio := $width div $height \n"+ "        for $y in 1 to $height \n"+ "        let $y-recentered := ((-$y div $height) + 0.5) \n"+ "        for $x in 1 to $width \n"+ "        let $x-recentered := (($x div $width) - 0.5) * $aspect-ratio \n"+ "        return (: plot-pixel returns us the rgb values of the color of this pixel. \n"+ "        \t\t  We convert these to an integer value in the range [0, 255], and output them. :) \n"+ "        \tstring-join( for $channel in raytracer:plot-pixel($scene, $x-recentered, $y-recentered) \n"+ "        \t\t\t     return string(floor($channel * 255)), \" \") ), \"&#xA;\" )\n"+ "      ",ctx);
  try {
    query.context(node(file("app/Demos/scene.xml")));
    query.addModule("http://www.xqsharp.com/raytracer/materials",file("app/Demos/materials.xq"));
    query.addModule("http://www.xqsharp.com/raytracer/scene",file("app/Demos/scene.xq"));
    query.addModule("http://www.xqsharp.com/raytracer",file("app/Demos/raytracer.xq"));
    query.addModule("http://www.xqsharp.com/raytracer/vector",file("app/Demos/vector.xq"));
    query.addModule("http://www.xqsharp.com/raytracer/math",file("app/Demos/math.xq"));
    query.addModule("http://www.xqsharp.com/raytracer/shapes",file("app/Demos/shapes.xq"));
    result=new QT3Result(query.value());
  }
 catch (  final Throwable trw) {
    result=new QT3Result(trw);
  }
 finally {
    query.close();
  }
  test((assertQuery("starts-with(normalize-space(string-join($result, ' ')), 'P3 64 64 255 0 0 0')") && assertQuery("ends-with(normalize-space(string-join($result, ' ')), '125 119 179 125 118 178 124 118 177 124 117 176')")));
}
