{
  super("Window " + (count + 1));
  JPanel buttons=new JPanel();
  buttons.setLayout(new FlowLayout());
  buttons.setOpaque(false);
  final JTextArea area=new JTextArea();
  area.setPreferredSize(new Dimension(280,90));
  area.setEditable(false);
  area.setBorder(new CompoundBorder(new EtchedBorder(),new EmptyBorder(10,10,10,10)));
  final EventNotifier en=new EventNotifier(){
    @Override public void notify(    final String value){
      Color c=Color.WHITE;
      String tmp=value.replaceAll("\"","");
      if (tmp.equals(RED)) {
        c=Color.RED;
      }
 else       if (tmp.equals(BLUE)) {
        c=Color.BLUE;
      }
 else       if (tmp.equals(YELLOW)) {
        c=Color.YELLOW;
      }
      main.setBackground(c);
      try (final ClientQuery cq=session.query("/")){
        area.setText(cq.execute());
      }
 catch (      IOException ex) {
        ex.printStackTrace();
      }
    }
  }
;
  session=new ClientSession(server.context,S_ADMIN,S_ADMIN);
  session.execute("open " + NAME);
  session.watch(NAME,en);
  for (  final String color : new String[]{RED,BLUE,YELLOW}) {
    final JButton b=new JButton(color);
    b.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      final ActionEvent e){
        try {
          String query="let $color := '" + color + "' return "+ "(replace value of node /Application/Background with $color,"+ " db:event('"+ NAME+ "', $color))";
          try (ClientQuery cq=session.query(query)){
            cq.execute();
          }
         }
 catch (        IOException ex) {
          ex.printStackTrace();
        }
        en.notify(b.getText());
      }
    }
);
    buttons.add(b);
  }
  main=new JPanel();
  main.setLayout(new BorderLayout());
  main.setBackground(Color.WHITE);
  main.add(area,BorderLayout.CENTER);
  main.add(buttons,BorderLayout.SOUTH);
  add(main);
  pack();
  setLocation(300 * count,0);
  setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
  setVisible(true);
}
