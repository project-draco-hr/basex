{
  b.startDoc(token(file.name()));
  b.startElem(DeepFS.FSML,atts.reset());
  final BufferedReader br=new BufferedReader(new FileReader(file.path()));
  String line=br.readLine().replace('\\','/');
  atts.add(DeepFS.BACKINGSTORE,token(line));
  b.startElem(DeepFS.DEEPFS,atts);
  String[] old={};
  while (true) {
    line=br.readLine();
    if (line == null)     break;
    line=line.replace('\\','/');
    final String[] entries=line.split("\\t");
    String name=entries[0];
    byte[] mtime={};
    try {
      mtime=token(DATE.parse(entries[2] + " " + entries[3]).getTime());
    }
 catch (    final ParseException ex) {
      Main.debug(ex);
    }
    if (name.indexOf('/') != -1) {
      name=name.replaceAll("/$","");
      final String[] path=name.split("/");
      int i=-1;
      while (++i < Math.min(old.length,path.length)) {
        if (!old[i].equals(path[i]))         break;
      }
      for (int j=i; j < old.length; j++) {
        b.endElem(DeepFS.DIR);
      }
      for (int j=i; j < path.length; j++) {
        atts.reset();
        atts.add(DeepFS.NAME,token(path[i]));
        atts.add(DeepFS.MTIME,mtime);
        b.startElem(DeepFS.DIR,atts);
      }
      old=path;
    }
 else {
      atts.reset();
      atts.add(DeepFS.NAME,token(name));
      atts.add(DeepFS.SIZE,token(entries[1]));
      atts.add(DeepFS.MTIME,mtime);
      b.emptyElem(DeepFS.FILE,atts);
    }
  }
  br.close();
  for (int j=old.length; j > 0; j--)   b.endElem(DeepFS.DIR);
  b.endElem(DeepFS.DEEPFS);
  b.endElem(DeepFS.FSML);
  b.endDoc();
  b.meta.deepfs=true;
}
