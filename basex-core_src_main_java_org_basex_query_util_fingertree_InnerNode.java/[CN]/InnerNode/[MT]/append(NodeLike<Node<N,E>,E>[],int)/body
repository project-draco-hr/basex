{
  if (pos == 0 || nodes[pos - 1] instanceof InnerNode) {
    nodes[pos]=this;
    return pos + 1;
  }
  final NodeLike<N,E> sub=((PartialInnerNode<N,E>)nodes[pos - 1]).sub;
  final int n=children.length;
  final Node<N,E> a, b;
  if (sub instanceof Node) {
    a=(Node<N,E>)sub;
    b=children[0];
  }
 else {
    @SuppressWarnings("unchecked") final NodeLike<N,E>[] buffer=(NodeLike<N,E>[])nodes;
    buffer[pos - 1]=sub;
    if (children[0].append(buffer,pos) == pos) {
      nodes[pos - 1]=replaceFirst((Node<N,E>)buffer[pos - 1]);
      return pos;
    }
    a=(Node<N,E>)buffer[pos - 1];
    b=(Node<N,E>)buffer[pos];
  }
  if (n < FingerTree.MAX_ARITY) {
    @SuppressWarnings("unchecked") final Node<N,E>[] ch=new Node[n + 1];
    System.arraycopy(children,1,ch,2,n - 1);
    ch[0]=a;
    ch[1]=b;
    nodes[pos - 1]=new InnerNode<>(ch);
    nodes[pos]=null;
    return pos;
  }
  final int rl=(n + 1) / 2, ll=n + 1 - rl;
  @SuppressWarnings("unchecked") final Node<N,E>[] ls=new Node[ll], rs=new Node[rl];
  System.arraycopy(children,1,ls,2,ll - 2);
  ls[0]=a;
  ls[1]=b;
  System.arraycopy(children,ll - 1,rs,0,rl);
  nodes[pos - 1]=new InnerNode<>(ls);
  nodes[pos]=new InnerNode<>(rs);
  return pos + 1;
}
