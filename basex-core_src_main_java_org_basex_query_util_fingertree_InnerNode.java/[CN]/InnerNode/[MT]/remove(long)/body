{
  int i=0;
  final int n=bounds.length;
  while (pos >= bounds[i])   i++;
  final long off=i == 0 ? pos : pos - bounds[i - 1];
  final Node<N,E> left=i == 0 ? null : children[i - 1], right=i == n - 1 ? null : children[i + 1];
  final Node<N,E>[] res=children[i].remove(left,right,off);
  if (res[1] != null) {
    final Node<N,E>[] out=children.clone();
    final int l=Math.max(0,i - 1), r=Math.min(i + 1,n - 1);
    System.arraycopy(res,i == 0 ? 1 : 0,out,l,r - l + 1);
    return new InnerNode<>(out);
  }
  if (n == 2) {
    return new PartialInnerNode<>(res[i == 0 ? 2 : 0]);
  }
  @SuppressWarnings("unchecked") final Node<N,E>[] out=new Node[n - 1];
  if (i > 0) {
    System.arraycopy(children,0,out,0,i - 1);
    out[i - 1]=res[0];
  }
  if (i < n - 1) {
    out[i]=res[2];
    System.arraycopy(children,i + 2,out,i + 1,n - i - 2);
  }
  return new InnerNode<>(out);
}
